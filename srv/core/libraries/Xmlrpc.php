<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto vADCz; rv1v6: class XML_RPC_Message extends CI_Xmlrpc { public $payload; public $method_name; public $params = array(); public $xh = array(); public function __construct($method, $pars = FALSE) { goto aYa5M; ERzAJ: if (is_array($pars) && count($pars) > 0) { for ($i = 0, $c = count($pars); $i < $c; $i++) { $this->params[] = $pars[$i]; } } goto v03eL; X_zRA: $this->method_name = $method; goto ERzAJ; aYa5M: parent::__construct(); goto X_zRA; v03eL: } public function createPayload() { goto R3PYb; jhEKz: $this->payload .= "\x3c\57\x70\141\x72\141\155\163\76\15\12\x3c\57\155\x65\x74\150\x6f\144\103\x61\154\154\76\15\12"; goto o0rPb; XpDq8: for ($i = 0, $c = count($this->params); $i < $c; $i++) { $p = $this->params[$i]; $this->payload .= "\74\x70\141\162\141\155\76\15\xa" . $p->serialize_class() . "\x3c\x2f\x70\141\162\x61\x6d\x3e\15\12"; } goto jhEKz; R3PYb: $this->payload = "\74\77\170\155\154\40\x76\x65\162\163\x69\x6f\156\75\42\x31\56\x30\x22\77" . "\76\xd\xa\74\155\145\164\150\157\x64\x43\141\x6c\x6c\x3e\xd\xa" . "\74\x6d\x65\164\150\157\144\116\x61\x6d\145\76" . $this->method_name . "\x3c\57\x6d\145\x74\x68\157\144\116\141\x6d\x65\x3e\xd\xa" . "\x3c\160\141\162\x61\x6d\x73\76\15\12"; goto XpDq8; o0rPb: } public function parseResponse($fp) { goto jfYOo; hdOAb: if ($this->debug === TRUE) { echo "\x3c\x70\162\x65\76\55\55\x2d\x44\101\124\x41\55\55\x2d\12" . htmlspecialchars($data) . "\xa\55\55\x2d\x45\116\x44\40\x44\x41\x54\x41\x2d\55\55\xa\12\74\57\x70\x72\x65\x3e"; } goto UPSWy; UhE0S: return $r; goto m4Pr3; Hq8QZ: if ($this->xh[$pname]["\151\x73\x66"] > 1) { if ($this->debug === TRUE) { echo "\x2d\x2d\x2d\x49\x6e\x76\141\x6c\151\x64\x20\122\x65\164\x75\x72\x6e\55\55\x2d\xa" . $this->xh[$pname]["\151\x73\x66\x5f\162\x65\x61\x73\x6f\x6e"] . "\x2d\x2d\x2d\111\156\x76\141\x6c\x69\144\x20\122\x65\x74\165\x72\x6e\55\x2d\x2d\12\xa"; } return new XML_RPC_Response(0, $this->xmlrpcerr["\x69\156\x76\x61\154\151\144\137\x72\x65\164\165\162\x6e"], $this->xmlrpcstr["\151\156\166\141\x6c\x69\144\x5f\x72\x65\164\x75\x72\x6e"] . "\x20" . $this->xh[$pname]["\151\x73\146\x5f\162\x65\141\x73\x6f\x6e"]); } elseif (!is_object($this->xh[$pname]["\166\x61\154\165\x65"])) { return new XML_RPC_Response(0, $this->xmlrpcerr["\x69\x6e\166\x61\x6c\151\x64\x5f\x72\145\164\x75\162\x6e"], $this->xmlrpcstr["\x69\x6e\x76\x61\154\151\x64\x5f\162\x65\x74\x75\162\156"] . "\40" . $this->xh[$pname]["\x69\163\x66\x5f\162\x65\141\x73\157\156"]); } goto XrxPI; eTDgz: while ($line = array_shift($lines)) { if (strlen($line) < 1) { break; } $this->xh[$pname]["\x68\145\x61\144\x65\x72\x73"][] = $line; } goto MP_im; RVEF7: $v = $this->xh[$pname]["\x76\x61\x6c\x75\x65"]; goto wdKwN; igx9D: if (strpos($data, "\x48\124\x54\120") === 0 && !preg_match("\57\x5e\x48\124\124\120\x5c\57\133\60\55\71\134\x2e\135\53\x20\62\60\60\40\57", $data)) { $errstr = substr($data, 0, strpos($data, "\xa") - 1); return new XML_RPC_Response(0, $this->xmlrpcerr["\x68\x74\x74\x70\137\x65\x72\162\x6f\162"], $this->xmlrpcstr["\150\164\x74\160\x5f\145\x72\162\x6f\x72"] . "\40\x28" . $errstr . "\51"); } goto QfpFe; IwPsJ: $lines = explode("\xd\xa", $data); goto eTDgz; UWZh2: if (!xml_parse($parser, $data, TRUE)) { goto Fvnvs; W_5sE: xml_parser_free($parser); goto LqOSf; hoj_K: $r = new XML_RPC_Response(0, $this->xmlrpcerr["\151\x6e\x76\141\x6c\x69\x64\x5f\x72\x65\164\165\x72\x6e"], $this->xmlrpcstr["\151\156\x76\x61\x6c\151\144\x5f\x72\x65\x74\x75\x72\x6e"]); goto W_5sE; Fvnvs: $errstr = sprintf("\130\x4d\x4c\40\x65\x72\162\x6f\x72\x3a\x20\x25\x73\40\x61\164\40\x6c\x69\156\x65\x20\x25\x64", xml_error_string(xml_get_error_code($parser)), xml_get_current_line_number($parser)); goto hoj_K; LqOSf: return $r; goto jEWqh; jEWqh: } goto RJyyl; wdKwN: if ($this->xh[$pname]["\151\163\x66"]) { goto rgUOF; rgUOF: $errno_v = $v->me["\x73\x74\x72\x75\143\164"]["\x66\x61\x75\x6c\x74\x43\157\144\145"]; goto m_FKL; m_FKL: $errstr_v = $v->me["\x73\164\162\x75\x63\164"]["\x66\x61\x75\154\x74\x53\x74\x72\x69\x6e\x67"]; goto CAVLV; CAVLV: $errno = $errno_v->scalarval(); goto zOxKM; wL5OV: $r = new XML_RPC_Response($v, $errno, $errstr_v->scalarval()); goto bgmro; zOxKM: if ($errno === 0) { $errno = -1; } goto wL5OV; bgmro: } else { $r = new XML_RPC_Response($v); } goto UAnKr; jfYOo: $data = ''; goto UJuu8; gq3J1: xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, TRUE); goto RBdV9; UAnKr: $r->headers = $this->xh[$pname]["\x68\x65\141\x64\x65\x72\x73"]; goto UhE0S; K4aOG: xml_set_character_data_handler($parser, "\143\150\141\x72\141\x63\x74\x65\162\x5f\x64\141\164\141"); goto IwPsJ; UJuu8: while ($datum = fread($fp, 4096)) { $data .= $datum; } goto hdOAb; MP_im: $data = implode("\15\12", $lines); goto UWZh2; QfpFe: $parser = xml_parser_create($this->xmlrpc_defencoding); goto BUIRz; oISIB: $this->xh[$pname] = array("\151\163\x66" => 0, "\141\x63" => '', "\x68\145\x61\x64\x65\x72\x73" => array(), "\163\x74\141\143\x6b" => array(), "\x76\x61\x6c\165\145\163\164\x61\x63\x6b" => array(), "\151\163\146\x5f\162\145\x61\x73\157\156" => 0); goto LakVL; RBdV9: xml_set_element_handler($parser, "\x6f\x70\x65\156\137\164\x61\147", "\143\x6c\157\x73\151\156\147\137\x74\x61\147"); goto K4aOG; UPSWy: if ($data === '') { error_log($this->xmlrpcstr["\156\x6f\137\144\141\164\141"]); return new XML_RPC_Response(0, $this->xmlrpcerr["\156\x6f\137\144\x61\x74\x61"], $this->xmlrpcstr["\x6e\157\137\144\141\x74\x61"]); } goto igx9D; XrxPI: if ($this->debug === TRUE) { goto AHOVS; w2PMZ: echo "\x2d\x2d\55\x44\x41\124\101\55\55\55\12" . htmlspecialchars($data) . "\xa\55\55\x2d\105\x4e\104\x20\104\x41\124\x41\55\55\55\12\xa\55\x2d\55\120\x41\x52\123\105\104\55\55\x2d\xa"; goto bF1lX; AHOVS: echo "\74\x70\x72\145\x3e"; goto wHpHI; zHN_r: echo "\12\55\x2d\55\x45\116\x44\x20\x50\101\122\123\105\x44\x2d\x2d\x2d\x3c\x2f\160\162\145\76"; goto H3meA; wHpHI: if (count($this->xh[$pname]["\x68\x65\x61\144\145\x72\x73"]) > 0) { goto v40Vw; v40Vw: echo "\x2d\55\x2d\x48\x45\x41\x44\x45\122\123\55\55\55\xa"; goto fOeOT; Uy961: echo "\x2d\55\55\105\x4e\104\40\110\105\x41\x44\105\x52\x53\55\x2d\x2d\xa\12"; goto v2yl0; fOeOT: foreach ($this->xh[$pname]["\150\x65\141\144\x65\x72\x73"] as $header) { echo $header . "\12"; } goto Uy961; v2yl0: } goto w2PMZ; bF1lX: var_dump($this->xh[$pname]["\166\141\154\x75\145"]); goto zHN_r; H3meA: } goto RVEF7; RJyyl: xml_parser_free($parser); goto Hq8QZ; LakVL: xml_set_object($parser, $this); goto gq3J1; BUIRz: $pname = (string) $parser; goto oISIB; m4Pr3: } public function open_tag($the_parser, $name) { goto Brcy1; MDTS3: if (count($this->xh[$the_parser]["\163\164\141\x63\153"]) === 0) { if ($name !== "\115\x45\x54\x48\117\x44\x52\x45\123\x50\117\116\x53\105" && $name !== "\115\105\x54\110\x4f\104\103\x41\114\114") { goto Nd8uf; Nd8uf: $this->xh[$the_parser]["\151\x73\x66"] = 2; goto Ediqi; YpPbS: return; goto JMBTv; Ediqi: $this->xh[$the_parser]["\x69\x73\146\x5f\162\x65\x61\x73\x6f\156"] = "\124\x6f\160\40\x6c\x65\166\145\x6c\40\x58\x4d\x4c\55\x52\x50\x43\40\x65\x6c\145\x6d\x65\156\164\40\x69\163\40\155\x69\163\x73\151\x6e\147"; goto YpPbS; JMBTv: } } elseif (!in_array($this->xh[$the_parser]["\163\164\141\143\153"][0], $this->valid_parents[$name], TRUE)) { goto XyXGQ; ybGqZ: return; goto FhKS8; XyXGQ: $this->xh[$the_parser]["\151\163\146"] = 2; goto yCI1t; yCI1t: $this->xh[$the_parser]["\x69\x73\x66\x5f\x72\x65\141\x73\x6f\156"] = "\130\115\x4c\55\122\120\x43\x20\x65\x6c\145\x6d\x65\x6e\x74\40" . $name . "\40\143\x61\x6e\x6e\157\164\40\x62\145\40\143\x68\x69\154\144\x20\x6f\x66\x20" . $this->xh[$the_parser]["\x73\x74\141\143\153"][0]; goto ybGqZ; FhKS8: } goto kuyYH; U_xFr: if ($this->xh[$the_parser]["\151\163\x66"] > 1) { return; } goto MDTS3; hxwLm: array_unshift($this->xh[$the_parser]["\163\164\x61\x63\153"], $name); goto IVQfY; Brcy1: $the_parser = (string) $the_parser; goto U_xFr; kuyYH: switch ($name) { case "\123\x54\122\125\103\124": case "\x41\122\x52\101\131": goto KU5Q4; KU5Q4: $cur_val = array("\x76\141\x6c\x75\x65" => array(), "\x74\x79\x70\145" => $name); goto uLe07; MMRgN: break; goto GK7Wz; uLe07: array_unshift($this->xh[$the_parser]["\166\x61\x6c\x75\x65\163\x74\x61\143\x6b"], $cur_val); goto MMRgN; GK7Wz: case "\x4d\105\x54\x48\x4f\104\116\101\115\x45": case "\x4e\x41\x4d\105": $this->xh[$the_parser]["\x61\x63"] = ''; break; case "\106\101\x55\x4c\124": $this->xh[$the_parser]["\x69\163\146"] = 1; break; case "\120\101\x52\101\x4d": $this->xh[$the_parser]["\x76\x61\x6c\x75\x65"] = NULL; break; case "\126\x41\x4c\125\105": goto cEVcq; go02l: break; goto Diy81; fcHC9: $this->xh[$the_parser]["\154\166"] = 1; goto go02l; cEVcq: $this->xh[$the_parser]["\x76\164"] = "\166\141\x6c\x75\145"; goto HYGV0; HYGV0: $this->xh[$the_parser]["\x61\143"] = ''; goto fcHC9; Diy81: case "\111\x34": case "\111\116\124": case "\x53\124\122\x49\x4e\107": case "\x42\117\117\114\105\x41\116": case "\104\x4f\125\102\114\105": case "\x44\x41\124\105\124\x49\x4d\x45\x2e\x49\123\x4f\x38\x36\x30\x31": case "\x42\101\123\x45\66\x34": goto FPWmx; FPWmx: if ($this->xh[$the_parser]["\x76\x74"] !== "\x76\x61\154\x75\x65") { goto wEilK; CBAPl: $this->xh[$the_parser]["\x69\163\x66\137\x72\x65\x61\x73\x6f\x6e"] = "\124\150\145\162\x65\40\x69\163\x20\141\40" . $name . "\x20\145\x6c\145\155\x65\156\164\x20\146\x6f\154\x6c\157\x77\x69\156\147\x20\x61\40" . $this->xh[$the_parser]["\166\164"] . "\40\145\154\x65\x6d\145\156\164\x20\x69\156\163\x69\x64\145\40\141\x20\x73\151\156\x67\154\x65\40\166\141\x6c\165\145"; goto JdwV7; wEilK: $this->xh[$the_parser]["\x69\x73\x66"] = 2; goto CBAPl; JdwV7: return; goto bD9sQ; bD9sQ: } goto VSmsh; XOfCw: break; goto hi2aR; VSmsh: $this->xh[$the_parser]["\x61\x63"] = ''; goto XOfCw; hi2aR: case "\115\x45\115\102\x45\x52": goto fiApD; gEw21: break; goto yPia9; WZxOs: $this->xh[$the_parser]["\166\141\x6c\x75\145"] = NULL; goto gEw21; fiApD: $this->xh[$the_parser]["\166\141\x6c\165\x65\x73\x74\x61\143\153"][0]["\156\141\x6d\x65"] = ''; goto WZxOs; yPia9: case "\x44\101\124\101": case "\115\105\x54\x48\117\x44\103\101\x4c\114": case "\x4d\105\124\x48\117\x44\x52\105\123\120\x4f\116\x53\105": case "\x50\101\x52\101\115\x53": break; default: goto iVvtJ; N138L: break; goto c4pz3; iVvtJ: $this->xh[$the_parser]["\x69\163\146"] = 2; goto cvSeb; cvSeb: $this->xh[$the_parser]["\151\163\146\137\162\145\x61\163\157\156"] = "\111\156\x76\x61\x6c\x69\144\40\x58\x4d\114\55\x52\120\103\x20\x65\154\145\x6d\x65\x6e\x74\40\146\157\165\x6e\x64\72\40" . $name; goto N138L; c4pz3: } goto hxwLm; IVQfY: $name === "\x56\101\x4c\125\x45" or $this->xh[$the_parser]["\154\166"] = 0; goto ESIG4; ESIG4: } public function closing_tag($the_parser, $name) { goto BwMLi; zt7E1: $curr_elem = array_shift($this->xh[$the_parser]["\x73\164\x61\x63\153"]); goto I8XuE; I8XuE: switch ($name) { case "\x53\x54\x52\125\103\x54": case "\101\122\122\101\x59": goto CNkxN; NNI3m: $this->xh[$the_parser]["\166\x61\154\x75\x65"] = isset($cur_val["\x76\141\x6c\x75\145\x73"]) ? $cur_val["\x76\141\x6c\x75\x65\x73"] : array(); goto E2XUH; Dg7Ex: break; goto HHK0X; E2XUH: $this->xh[$the_parser]["\166\x74"] = strtolower($name); goto Dg7Ex; CNkxN: $cur_val = array_shift($this->xh[$the_parser]["\x76\x61\154\x75\145\x73\164\x61\x63\153"]); goto NNI3m; HHK0X: case "\x4e\x41\x4d\x45": $this->xh[$the_parser]["\166\141\x6c\165\x65\163\x74\x61\143\x6b"][0]["\x6e\141\x6d\x65"] = $this->xh[$the_parser]["\x61\143"]; break; case "\102\x4f\117\x4c\x45\x41\116": case "\x49\64": case "\x49\116\124": case "\123\124\x52\111\x4e\107": case "\104\117\125\x42\x4c\x45": case "\x44\x41\x54\x45\x54\x49\115\105\x2e\111\x53\x4f\70\66\x30\61": case "\x42\x41\123\105\x36\x34": goto UCZh8; J3dmN: break; goto sNHI9; MsyMu: $this->xh[$the_parser]["\x6c\x76"] = 3; goto J3dmN; UCZh8: $this->xh[$the_parser]["\166\164"] = strtolower($name); goto pE0Xo; JcH5C: $this->xh[$the_parser]["\141\143"] = ''; goto MsyMu; pE0Xo: if ($name === "\123\124\x52\111\116\107") { $this->xh[$the_parser]["\x76\x61\154\165\145"] = $this->xh[$the_parser]["\x61\143"]; } elseif ($name === "\x44\x41\x54\105\124\x49\x4d\105\56\111\123\117\70\66\x30\61") { $this->xh[$the_parser]["\x76\x74"] = $this->xmlrpcDateTime; $this->xh[$the_parser]["\166\141\154\x75\x65"] = $this->xh[$the_parser]["\x61\143"]; } elseif ($name === "\x42\101\123\x45\66\x34") { $this->xh[$the_parser]["\x76\141\154\x75\145"] = base64_decode($this->xh[$the_parser]["\141\x63"]); } elseif ($name === "\102\117\117\x4c\x45\x41\x4e") { $this->xh[$the_parser]["\166\141\154\165\145"] = (bool) $this->xh[$the_parser]["\x61\143"]; } elseif ($name == "\x44\117\x55\102\114\x45") { $this->xh[$the_parser]["\x76\x61\x6c\165\x65"] = preg_match("\x2f\x5e\133\x2b\55\135\77\133\145\x45\60\x2d\71\x5c\x74\x20\134\x2e\135\x2b\x24\x2f", $this->xh[$the_parser]["\x61\x63"]) ? (float) $this->xh[$the_parser]["\141\x63"] : "\105\x52\122\x4f\x52\137\116\x4f\116\137\x4e\x55\x4d\x45\122\x49\103\137\106\117\x55\x4e\x44"; } else { $this->xh[$the_parser]["\x76\141\154\x75\145"] = preg_match("\57\x5e\x5b\x2b\55\x5d\x3f\x5b\60\x2d\71\134\x74\x20\x5d\53\x24\x2f", $this->xh[$the_parser]["\x61\143"]) ? (int) $this->xh[$the_parser]["\x61\143"] : "\x45\x52\122\117\122\x5f\116\x4f\x4e\x5f\x4e\125\115\x45\122\111\x43\x5f\106\x4f\125\116\104"; } goto JcH5C; sNHI9: case "\x56\x41\x4c\x55\x45": goto S_B8g; ox3_5: break; goto VGhhl; oBdXk: $temp = new XML_RPC_Values($this->xh[$the_parser]["\166\x61\154\165\145"], $this->xh[$the_parser]["\x76\164"]); goto GIETc; GIETc: if (count($this->xh[$the_parser]["\166\141\154\x75\145\163\164\141\x63\153"]) && $this->xh[$the_parser]["\166\x61\x6c\165\x65\x73\164\141\x63\153"][0]["\x74\171\x70\145"] === "\101\x52\x52\x41\x59") { $this->xh[$the_parser]["\x76\x61\x6c\x75\145\x73\164\141\143\x6b"][0]["\166\x61\x6c\x75\x65\163"][] = $temp; } else { $this->xh[$the_parser]["\x76\141\x6c\165\145"] = $temp; } goto ox3_5; S_B8g: if ($this->xh[$the_parser]["\x76\x74"] == "\166\141\154\x75\145") { $this->xh[$the_parser]["\x76\141\x6c\165\x65"] = $this->xh[$the_parser]["\x61\x63"]; $this->xh[$the_parser]["\x76\x74"] = $this->xmlrpcString; } goto oBdXk; VGhhl: case "\x4d\105\115\102\105\122": goto U8fS3; j_fYI: if ($this->xh[$the_parser]["\x76\x61\154\x75\145"]) { $this->xh[$the_parser]["\x76\x61\x6c\165\x65\x73\164\141\x63\153"][0]["\166\141\x6c\165\x65\x73"][$this->xh[$the_parser]["\166\141\154\x75\145\163\164\x61\x63\153"][0]["\156\141\155\145"]] = $this->xh[$the_parser]["\166\141\154\165\145"]; } goto lQI4t; lQI4t: break; goto iTsMi; U8fS3: $this->xh[$the_parser]["\x61\x63"] = ''; goto j_fYI; iTsMi: case "\104\101\124\x41": $this->xh[$the_parser]["\141\x63"] = ''; break; case "\120\x41\122\101\115": if ($this->xh[$the_parser]["\x76\141\x6c\165\x65"]) { $this->xh[$the_parser]["\x70\141\162\141\x6d\x73"][] = $this->xh[$the_parser]["\x76\141\x6c\165\145"]; } break; case "\115\105\124\110\x4f\104\116\101\115\x45": $this->xh[$the_parser]["\x6d\145\x74\150\x6f\x64"] = ltrim($this->xh[$the_parser]["\141\143"]); break; case "\x50\101\122\101\x4d\x53": case "\x46\101\125\114\124": case "\115\x45\x54\110\x4f\104\x43\x41\x4c\114": case "\x4d\x45\124\x48\117\122\x45\123\120\117\x4e\123\105": break; default: break; } goto IFg1W; BwMLi: $the_parser = (string) $the_parser; goto Lh6Sk; Lh6Sk: if ($this->xh[$the_parser]["\x69\x73\x66"] > 1) { return; } goto zt7E1; IFg1W: } public function character_data($the_parser, $data) { goto LcTCB; LcTCB: $the_parser = (string) $the_parser; goto jyk0o; AvcWs: if ($this->xh[$the_parser]["\x6c\166"] !== 3) { goto xFzSP; xFzSP: if ($this->xh[$the_parser]["\x6c\x76"] === 1) { $this->xh[$the_parser]["\x6c\166"] = 2; } goto RKnaQ; RKnaQ: if (!isset($this->xh[$the_parser]["\141\x63"])) { $this->xh[$the_parser]["\141\x63"] = ''; } goto rxsT7; rxsT7: $this->xh[$the_parser]["\141\143"] .= $data; goto djYPh; djYPh: } goto UP0uT; jyk0o: if ($this->xh[$the_parser]["\151\163\x66"] > 1) { return; } goto AvcWs; UP0uT: } public function addParam($par) { $this->params[] = $par; } public function output_parameters(array $array = array()) { goto K7CN1; yIY6N: $parameters = array(); goto aVP1O; K7CN1: $CI =& get_instance(); goto nOcmf; aVP1O: for ($i = 0, $c = count($this->params); $i < $c; $i++) { $a_param = $this->decode_message($this->params[$i]); if (is_array($a_param)) { $parameters[] = $this->output_parameters($a_param); } else { $parameters[] = $this->xss_clean ? $CI->security->xss_clean($a_param) : $a_param; } } goto irx6K; nOcmf: if (!empty($array)) { foreach ($array as $key => &$value) { if (is_array($value)) { $array[$key] = $this->output_parameters($value); } elseif ($key !== "\x62\x69\x74\x73" && $this->xss_clean) { $array[$key] = $CI->security->xss_clean($value); } } return $array; } goto yIY6N; irx6K: return $parameters; goto SYg88; SYg88: } public function decode_message($param) { $kind = $param->kindOf(); if ($kind === "\163\x63\141\154\141\162") { return $param->scalarval(); } elseif ($kind === "\141\x72\162\x61\171") { goto LmV8V; tXIsf: $arr = array(); goto eura3; eura3: for ($i = 0, $c = count($b); $i < $c; $i++) { $arr[] = $this->decode_message($param->me["\x61\x72\x72\x61\171"][$i]); } goto CzkZ1; CzkZ1: return $arr; goto J9WBZ; EwbMT: $b = current($param->me); goto tXIsf; LmV8V: reset($param->me); goto EwbMT; J9WBZ: } elseif ($kind === "\163\164\x72\x75\x63\164") { goto xMTBr; tmkxU: foreach ($param->me["\163\x74\x72\x75\143\164"] as $key => &$value) { $arr[$key] = $this->decode_message($value); } goto ytxny; xMTBr: reset($param->me["\x73\x74\x72\165\x63\164"]); goto H6K3S; H6K3S: $arr = array(); goto tmkxU; ytxny: return $arr; goto rjrQF; rjrQF: } } } goto kOVkx; qFGKW: if (!function_exists("\x78\x6d\x6c\x5f\x70\141\x72\x73\x65\x72\x5f\143\x72\x65\x61\x74\145")) { show_error("\x59\x6f\x75\162\40\120\x48\x50\40\x69\x6e\x73\x74\x61\154\x6c\x61\x74\x69\x6f\156\x20\144\x6f\x65\163\40\156\x6f\x74\40\163\x75\160\x70\157\162\164\40\x58\x4d\114"); } goto f4K13; vADCz: defined("\x42\101\x53\x45\120\x41\124\x48") or exit("\116\x6f\x20\x64\x69\162\145\143\164\x20\x73\x63\162\151\x70\x74\40\141\x63\x63\x65\163\163\x20\x61\x6c\x6c\x6f\167\x65\x64"); goto qFGKW; vElHT: class XML_RPC_Client extends CI_Xmlrpc { public $path = ''; public $server = ''; public $port = 80; public $username; public $password; public $proxy = FALSE; public $proxy_port = 8080; public $errno = ''; public $errstring = ''; public $timeout = 5; public $no_multicall = FALSE; public function __construct($path, $server, $port = 80, $proxy = FALSE, $proxy_port = 8080) { goto Fb88K; X9cF2: $this->path = $path; goto nbmoX; wr6e7: $url = parse_url("\150\164\164\160\x3a\57\x2f" . $server); goto LMWLR; Ww38y: $this->proxy_port = $proxy_port; goto mZj4A; LMWLR: if (isset($url["\x75\163\x65\162"], $url["\x70\141\163\x73"])) { $this->username = $url["\165\163\x65\x72"]; $this->password = $url["\x70\x61\163\x73"]; } goto W9ULE; nbmoX: $this->proxy = $proxy; goto Ww38y; W9ULE: $this->port = $port; goto NNPUD; NNPUD: $this->server = $url["\x68\157\163\x74"]; goto X9cF2; Fb88K: parent::__construct(); goto wr6e7; mZj4A: } public function send($msg) { if (is_array($msg)) { return new XML_RPC_Response(0, $this->xmlrpcerr["\155\x75\154\x74\x69\x63\x61\154\x6c\x5f\x72\145\143\165\162\163\151\157\x6e"], $this->xmlrpcstr["\x6d\x75\154\164\151\x63\141\x6c\x6c\137\162\x65\143\x75\x72\x73\151\x6f\x6e"]); } return $this->sendPayload($msg); } public function sendPayload($msg) { goto dmeAe; u2VVa: if ($result === FALSE) { error_log($this->xmlrpcstr["\150\164\164\160\137\145\x72\x72\x6f\x72"]); return new XML_RPC_Response(0, $this->xmlrpcerr["\150\164\x74\x70\x5f\x65\x72\162\157\162"], $this->xmlrpcstr["\150\164\x74\160\x5f\145\x72\x72\157\162"]); } goto sHT9e; ocEEC: if (empty($msg->payload)) { $msg->createPayload(); } goto HsmY0; nurPA: $fp = @fsockopen($server, $port, $this->errno, $this->errstring, $this->timeout); goto FvhK0; wrcqd: fclose($fp); goto Bt_6D; Bt_6D: return $resp; goto y9COU; FvhK0: if (!is_resource($fp)) { error_log($this->xmlrpcstr["\150\x74\164\160\137\x65\x72\x72\157\162"]); return new XML_RPC_Response(0, $this->xmlrpcerr["\x68\x74\164\x70\x5f\x65\x72\162\157\x72"], $this->xmlrpcstr["\x68\164\164\x70\137\145\162\162\x6f\162"]); } goto ocEEC; sHT9e: $resp = $msg->parseResponse($fp); goto wrcqd; h4e0j: stream_set_timeout($fp, $this->timeout); goto FgzDM; HsmY0: $r = "\15\xa"; goto giJk7; FgzDM: for ($written = $timestamp = 0, $length = strlen($op); $written < $length; $written += $result) { if (($result = fwrite($fp, substr($op, $written))) === FALSE) { break; } elseif ($result === 0) { if ($timestamp === 0) { $timestamp = time(); } elseif ($timestamp < time() - $this->timeout) { $result = FALSE; break; } } else { $timestamp = 0; } } goto u2VVa; giJk7: $op = "\x50\x4f\x53\x54\40" . $this->path . "\x20\110\124\x54\120\57\61\56\60" . $r . "\110\x6f\x73\164\72\40" . $this->server . $r . "\x43\157\x6e\164\x65\156\x74\x2d\x54\x79\x70\145\x3a\x20\164\145\170\164\57\170\155\154" . $r . (isset($this->username, $this->password) ? "\101\165\164\x68\157\x72\151\172\x61\x74\x69\x6f\x6e\x3a\40\x42\x61\163\x69\143\x20" . base64_encode($this->username . "\x3a" . $this->password) . $r : '') . "\x55\x73\x65\162\55\x41\147\x65\156\164\72\x20" . $this->xmlrpcName . $r . "\x43\x6f\x6e\x74\145\156\164\x2d\x4c\x65\x6e\147\164\150\x3a\x20" . strlen($msg->payload) . $r . $r . $msg->payload; goto h4e0j; dmeAe: if ($this->proxy === FALSE) { $server = $this->server; $port = $this->port; } else { $server = $this->proxy; $port = $this->proxy_port; } goto nurPA; y9COU: } } goto zHccA; zHccA: class XML_RPC_Response { public $val = 0; public $errno = 0; public $errstr = ''; public $headers = array(); public $xss_clean = TRUE; public function __construct($val, $code = 0, $fstr = '') { if ($code !== 0) { $this->errno = $code; $this->errstr = htmlspecialchars($fstr, is_php("\x35\x2e\64") ? ENT_XML1 | ENT_NOQUOTES : ENT_NOQUOTES, "\125\124\x46\x2d\70"); } elseif (!is_object($val)) { error_log("\111\156\x76\x61\154\x69\x64\40\x74\171\160\x65\x20\47" . gettype($val) . "\x27\40\x28\166\x61\x6c\x75\x65\72\40" . $val . "\51\x20\x70\x61\163\x73\x65\144\x20\x74\x6f\40\x58\115\114\137\x52\x50\103\x5f\x52\145\x73\160\157\156\x73\145\56\40\x44\x65\146\x61\x75\154\x74\151\156\147\40\164\157\40\x65\155\160\x74\x79\x20\166\x61\x6c\165\x65\x2e"); $this->val = new XML_RPC_Values(); } else { $this->val = $val; } } public function faultCode() { return $this->errno; } public function faultString() { return $this->errstr; } public function value() { return $this->val; } public function prepare_response() { return "\74\x6d\145\164\x68\157\144\x52\x65\163\160\157\156\163\x65\76\12" . ($this->errno ? "\74\x66\141\165\x6c\164\76\12\11\74\x76\141\x6c\165\x65\x3e\xa\11\x9\x3c\x73\x74\x72\165\x63\x74\76\xa\11\11\11\74\155\x65\155\x62\145\162\x3e\xa\11\11\11\11\x3c\x6e\x61\x6d\x65\76\146\x61\x75\154\164\103\x6f\144\145\x3c\57\x6e\141\155\x65\76\12\11\11\11\x9\74\166\141\154\x75\145\76\74\x69\x6e\164\x3e" . $this->errno . "\74\57\151\x6e\164\76\x3c\57\x76\x61\x6c\x75\x65\x3e\xa\x9\11\11\74\x2f\x6d\145\155\x62\x65\x72\x3e\xa\11\x9\x9\x3c\155\x65\x6d\x62\145\x72\x3e\12\x9\x9\x9\x9\74\156\141\x6d\145\x3e\146\141\x75\154\x74\x53\164\x72\151\x6e\x67\x3c\57\x6e\x61\x6d\x65\x3e\12\x9\11\x9\11\x3c\x76\141\x6c\165\145\76\74\x73\164\x72\151\156\x67\76" . $this->errstr . "\74\57\163\164\162\151\x6e\147\x3e\74\x2f\x76\x61\x6c\165\145\x3e\12\11\x9\11\74\57\x6d\x65\x6d\x62\145\x72\76\xa\11\11\x3c\57\163\x74\x72\165\x63\164\76\xa\11\74\x2f\166\x61\x6c\x75\x65\x3e\xa\74\57\x66\141\x75\x6c\164\x3e" : "\74\x70\141\162\141\x6d\163\x3e\12\74\160\141\162\141\155\76\12" . $this->val->serialize_class() . "\74\x2f\x70\x61\x72\x61\155\76\xa\74\57\x70\141\x72\x61\155\x73\x3e") . "\12\x3c\57\155\x65\x74\x68\x6f\x64\x52\x65\163\x70\157\x6e\x73\x65\76"; } public function decode($array = NULL) { goto OBcqo; iIAgH: if (is_array($array)) { foreach ($array as $key => &$value) { if (is_array($value)) { $array[$key] = $this->decode($value); } elseif ($this->xss_clean) { $array[$key] = $CI->security->xss_clean($value); } } return $array; } goto Vyhtk; iHM_c: return $result; goto Zwj8V; LhJpa: if (is_array($result)) { $result = $this->decode($result); } elseif ($this->xss_clean) { $result = $CI->security->xss_clean($result); } goto iHM_c; OBcqo: $CI =& get_instance(); goto iIAgH; Vyhtk: $result = $this->xmlrpc_decoder($this->val); goto LhJpa; Zwj8V: } public function xmlrpc_decoder($xmlrpc_val) { $kind = $xmlrpc_val->kindOf(); if ($kind === "\163\143\x61\x6c\x61\162") { return $xmlrpc_val->scalarval(); } elseif ($kind === "\141\162\x72\x61\x79") { goto o2KeJ; FZ20l: $arr = array(); goto Hlj9N; GuJ9q: $b = current($xmlrpc_val->me); goto FZ20l; sOmTD: return $arr; goto xY7VS; o2KeJ: reset($xmlrpc_val->me); goto GuJ9q; Hlj9N: for ($i = 0, $size = count($b); $i < $size; $i++) { $arr[] = $this->xmlrpc_decoder($xmlrpc_val->me["\141\162\x72\x61\x79"][$i]); } goto sOmTD; xY7VS: } elseif ($kind === "\x73\x74\162\165\143\x74") { goto bD5xh; AteOQ: return $arr; goto sLF7j; bD5xh: reset($xmlrpc_val->me["\163\164\162\x75\143\164"]); goto X_rfZ; o7RBL: foreach ($xmlrpc_val->me["\163\164\162\165\143\x74"] as $key => &$value) { $arr[$key] = $this->xmlrpc_decoder($value); } goto AteOQ; X_rfZ: $arr = array(); goto o7RBL; sLF7j: } } public function iso8601_decode($time, $utc = FALSE) { goto eFalZ; eFalZ: $t = 0; goto UVIGS; UVIGS: if (preg_match("\57\50\133\x30\x2d\71\135\x7b\x34\175\x29\50\133\x30\x2d\71\135\173\x32\x7d\x29\x28\133\x30\55\x39\x5d\173\x32\x7d\51\124\50\x5b\x30\x2d\x39\135\173\x32\175\x29\72\x28\x5b\60\55\x39\x5d\173\62\x7d\51\x3a\x28\133\60\x2d\71\x5d\173\x32\x7d\51\57", $time, $regs)) { $fnc = $utc === TRUE ? "\x67\x6d\x6d\153\x74\151\x6d\145" : "\155\153\164\x69\155\145"; $t = $fnc($regs[4], $regs[5], $regs[6], $regs[2], $regs[3], $regs[1]); } goto gYuvK; gYuvK: return $t; goto RSckw; RSckw: } } goto rv1v6; f4K13: class CI_Xmlrpc { public $debug = FALSE; public $xmlrpcI4 = "\151\x34"; public $xmlrpcInt = "\151\156\164"; public $xmlrpcBoolean = "\x62\x6f\x6f\154\145\x61\x6e"; public $xmlrpcDouble = "\x64\x6f\x75\142\154\x65"; public $xmlrpcString = "\x73\x74\x72\151\x6e\x67"; public $xmlrpcDateTime = "\144\141\x74\145\x54\151\155\145\56\x69\163\x6f\x38\x36\x30\61"; public $xmlrpcBase64 = "\x62\x61\163\145\66\x34"; public $xmlrpcArray = "\141\x72\162\x61\x79"; public $xmlrpcStruct = "\x73\x74\x72\165\x63\164"; public $xmlrpcTypes = array(); public $valid_parents = array(); public $xmlrpcerr = array(); public $xmlrpcstr = array(); public $xmlrpc_defencoding = "\125\124\x46\x2d\70"; public $xmlrpcName = "\130\115\x4c\55\x52\120\103\x20\x66\x6f\x72\x20\103\x6f\x64\145\x49\147\x6e\x69\164\145\162"; public $xmlrpcVersion = "\x31\56\61"; public $xmlrpcerruser = 800; public $xmlrpcerrxml = 100; public $xmlrpc_backslash = ''; public $client; public $method; public $data; public $message = ''; public $error = ''; public $result; public $response = array(); public $xss_clean = TRUE; public function __construct($config = array()) { goto fz9MT; qE3yG: $this->valid_parents = array("\102\x4f\117\x4c\105\x41\116" => array("\x56\101\x4c\125\x45"), "\111\x34" => array("\126\101\x4c\x55\105"), "\x49\x4e\124" => array("\126\x41\x4c\125\105"), "\x53\124\x52\111\116\107" => array("\126\101\114\125\105"), "\104\x4f\125\102\114\x45" => array("\x56\x41\x4c\125\x45"), "\104\101\x54\105\124\111\115\105\x2e\111\x53\x4f\x38\66\x30\x31" => array("\x56\x41\114\125\105"), "\102\x41\123\x45\66\x34" => array("\126\101\114\125\105"), "\x41\x52\122\101\131" => array("\x56\x41\114\x55\x45"), "\x53\124\x52\125\103\124" => array("\126\101\114\125\105"), "\x50\101\x52\101\115" => array("\120\101\x52\101\x4d\x53"), "\x4d\105\x54\x48\x4f\104\116\x41\115\105" => array("\115\105\x54\x48\x4f\104\x43\101\x4c\114"), "\120\x41\122\x41\115\x53" => array("\115\105\124\110\117\104\103\x41\114\x4c", "\x4d\105\124\x48\x4f\x44\122\105\x53\x50\117\x4e\123\105"), "\115\x45\115\x42\x45\122" => array("\123\124\122\x55\103\124"), "\116\101\115\105" => array("\115\105\115\102\105\x52"), "\104\101\124\101" => array("\101\x52\122\101\131"), "\106\x41\x55\x4c\124" => array("\115\105\124\110\x4f\104\x52\105\123\120\117\116\123\x45"), "\126\101\x4c\x55\105" => array("\115\x45\115\102\105\x52", "\x44\101\124\x41", "\x50\x41\x52\x41\115", "\106\x41\x55\114\x54")); goto ESG2K; x32LM: $this->xmlrpcerr["\150\x74\x74\x70\x5f\145\x72\x72\x6f\162"] = "\x35"; goto Uxb4E; ESG2K: $this->xmlrpcerr["\x75\156\153\x6e\157\x77\x6e\137\x6d\145\164\150\x6f\x64"] = "\x31"; goto UpSsN; bwCQC: log_message("\151\x6e\x66\x6f", "\x58\x4d\114\55\x52\120\103\x20\x43\x6c\x61\x73\x73\x20\111\x6e\151\x74\151\x61\154\x69\x7a\x65\x64"); goto KDCtn; I5DD7: $this->xmlrpcerr["\x69\x6e\143\157\162\162\x65\x63\164\137\160\x61\x72\x61\x6d\163"] = "\x33"; goto s3cbp; s3cbp: $this->xmlrpcstr["\151\156\x63\x6f\x72\x72\145\143\x74\x5f\x70\x61\162\x61\155\163"] = "\111\x6e\143\x6f\162\x72\x65\x63\164\40\160\141\162\141\x6d\x65\x74\x65\x72\x73\x20\167\x65\x72\x65\40\x70\x61\163\x73\145\x64\40\164\x6f\x20\x6d\145\x74\150\x6f\x64"; goto gScBC; gScBC: $this->xmlrpcerr["\151\156\164\x72\x6f\163\x70\145\143\x74\x5f\165\x6e\153\156\x6f\x77\x6e"] = "\x34"; goto Wcdp2; fz9MT: $this->xmlrpc_backslash = chr(92) . chr(92); goto HXjp8; KH6bZ: $this->xmlrpcerr["\151\x6e\166\x61\154\x69\x64\x5f\162\145\164\x75\162\156"] = "\62"; goto SAiGf; nwJUz: $this->xmlrpcerr["\156\157\x5f\x64\141\x74\x61"] = "\x36"; goto tiBOq; tiBOq: $this->xmlrpcstr["\156\x6f\137\144\141\x74\x61"] = "\116\157\x20\144\x61\164\x61\x20\x72\x65\x63\x65\x69\x76\x65\x64\x20\146\x72\157\155\x20\x73\145\162\166\x65\162\56"; goto OMhnG; SAiGf: $this->xmlrpcstr["\x69\156\166\x61\x6c\151\144\137\162\145\x74\165\x72\x6e"] = "\x54\x68\x65\x20\130\x4d\114\x20\144\141\164\141\40\162\145\143\x65\x69\166\x65\144\x20\167\x61\163\40\145\151\164\x68\145\x72\x20\x69\x6e\x76\141\154\x69\144\x20\157\x72\40\x6e\x6f\x74\x20\151\x6e\40\164\x68\145\40\x63\x6f\162\162\x65\x63\x74\x20\x66\157\162\x6d\40\146\x6f\x72\40\x58\x4d\x4c\x2d\122\x50\103\56\40\124\x75\x72\156\x20\157\156\40\x64\x65\x62\165\x67\147\151\156\147\x20\164\x6f\x20\x65\170\x61\x6d\151\x6e\x65\x20\x74\x68\x65\x20\x58\115\114\x20\144\141\x74\x61\x20\x66\165\x72\164\x68\145\x72\56"; goto I5DD7; OMhnG: $this->initialize($config); goto bwCQC; UpSsN: $this->xmlrpcstr["\x75\x6e\153\x6e\157\x77\x6e\x5f\x6d\145\x74\150\x6f\144"] = "\124\150\x69\x73\x20\x69\x73\40\156\x6f\164\x20\x61\40\x6b\156\x6f\167\x6e\40\x6d\145\164\x68\157\144\x20\146\x6f\162\x20\164\x68\x69\x73\x20\130\x4d\x4c\55\122\x50\103\x20\x53\145\x72\x76\x65\162"; goto KH6bZ; Uxb4E: $this->xmlrpcstr["\150\164\x74\x70\137\145\x72\x72\x6f\162"] = "\104\x69\144\40\x6e\157\164\x20\162\x65\143\x65\x69\166\145\x20\141\40\47\62\60\60\x20\x4f\x4b\x27\x20\162\x65\x73\x70\x6f\x6e\x73\145\x20\146\162\157\x6d\x20\x72\x65\x6d\157\x74\145\x20\x73\145\x72\x76\145\x72\56"; goto nwJUz; HXjp8: $this->xmlrpcTypes = array($this->xmlrpcI4 => "\x31", $this->xmlrpcInt => "\61", $this->xmlrpcBoolean => "\x31", $this->xmlrpcString => "\x31", $this->xmlrpcDouble => "\61", $this->xmlrpcDateTime => "\61", $this->xmlrpcBase64 => "\x31", $this->xmlrpcArray => "\62", $this->xmlrpcStruct => "\x33"); goto qE3yG; Wcdp2: $this->xmlrpcstr["\151\156\x74\x72\157\163\160\145\x63\164\137\x75\x6e\153\156\157\x77\156"] = "\103\x61\156\x6e\157\x74\40\151\156\163\x70\145\x63\x74\40\x73\151\147\x6e\141\x74\x75\162\145\40\x66\x6f\x72\x20\162\145\x71\165\x65\163\164\x3a\40\x6d\x65\164\150\x6f\x64\40\x75\x6e\x6b\156\157\167\156"; goto x32LM; KDCtn: } public function initialize($config = array()) { if (count($config) > 0) { foreach ($config as $key => $val) { if (isset($this->{$key})) { $this->{$key} = $val; } } } } public function server($url, $port = 80, $proxy = FALSE, $proxy_port = 8080) { goto qFoVG; Idenm: $path = isset($parts["\x70\141\x74\x68"]) ? $parts["\160\141\x74\150"] : "\x2f"; goto T8HSI; qFoVG: if (stripos($url, "\150\x74\164\x70") !== 0) { $url = "\150\x74\x74\160\72\57\x2f" . $url; } goto l3BQK; l3BQK: $parts = parse_url($url); goto CKULN; T8HSI: if (!empty($parts["\x71\x75\x65\162\171"])) { $path .= "\x3f" . $parts["\161\x75\x65\x72\x79"]; } goto lSyW8; CKULN: if (isset($parts["\x75\163\145\162"], $parts["\x70\141\x73\163"])) { $parts["\150\x6f\x73\x74"] = $parts["\165\x73\x65\162"] . "\72" . $parts["\x70\141\163\x73"] . "\x40" . $parts["\150\x6f\163\x74"]; } goto Idenm; lSyW8: $this->client = new XML_RPC_Client($path, $parts["\150\x6f\163\164"], $port, $proxy, $proxy_port); goto ccxTN; ccxTN: } public function timeout($seconds = 5) { if ($this->client !== NULL && is_int($seconds)) { $this->client->timeout = $seconds; } } public function method($function) { $this->method = $function; } public function request($incoming) { goto WeFO3; k3x2b: $this->data = array(); goto jY9Lv; WeFO3: if (!is_array($incoming)) { return; } goto k3x2b; jY9Lv: foreach ($incoming as $key => $value) { $this->data[$key] = $this->values_parsing($value); } goto nm7mu; nm7mu: } public function set_debug($flag = TRUE) { $this->debug = $flag === TRUE; } public function values_parsing($value) { if (is_array($value) && array_key_exists(0, $value)) { if (!isset($value[1], $this->xmlrpcTypes[$value[1]])) { $temp = new XML_RPC_Values($value[0], is_array($value[0]) ? "\141\162\162\x61\x79" : "\163\164\162\x69\x6e\147"); } else { if (is_array($value[0]) && ($value[1] === "\x73\164\162\x75\x63\164" or $value[1] === "\x61\x72\x72\x61\171")) { foreach (array_keys($value[0]) as $k) { $value[0][$k] = $this->values_parsing($value[0][$k]); } } $temp = new XML_RPC_Values($value[0], $value[1]); } } else { $temp = new XML_RPC_Values($value, "\x73\x74\x72\x69\x6e\x67"); } return $temp; } public function send_request() { goto tZzKT; QmVsa: $this->message->debug = $this->debug; goto Am5Ov; f1NFG: return TRUE; goto lCK2i; Am5Ov: if (!($this->result = $this->client->send($this->message)) or !is_object($this->result->val)) { $this->error = $this->result->errstr; return FALSE; } goto qeDiF; tZzKT: $this->message = new XML_RPC_Message($this->method, $this->data); goto QmVsa; qeDiF: $this->response = $this->result->decode(); goto f1NFG; lCK2i: } public function display_error() { return $this->error; } public function display_response() { return $this->response; } public function send_error_message($number, $message) { return new XML_RPC_Response(0, $number, $message); } public function send_response($response) { return new XML_RPC_Response($this->values_parsing($response)); } } goto vElHT; kOVkx: class XML_RPC_Values extends CI_Xmlrpc { public $me = array(); public $mytype = 0; public function __construct($val = -1, $type = '') { parent::__construct(); if ($val !== -1 or $type !== '') { $type = $type === '' ? "\163\x74\x72\x69\156\147" : $type; if ($this->xmlrpcTypes[$type] == 1) { $this->addScalar($val, $type); } elseif ($this->xmlrpcTypes[$type] == 2) { $this->addArray($val); } elseif ($this->xmlrpcTypes[$type] == 3) { $this->addStruct($val); } } } public function addScalar($val, $type = "\163\164\x72\x69\156\147") { goto oGRfP; CXcHu: if ($typeof != 1) { echo "\x3c\x73\164\x72\x6f\156\x67\76\130\115\114\x5f\x52\x50\x43\x5f\x56\141\154\165\145\163\74\x2f\163\x74\x72\x6f\156\x67\76\x3a\x20\x6e\x6f\x74\x20\141\x20\163\x63\141\x6c\x61\162\x20\164\x79\160\x65\x20\x28\x24\x7b\164\x79\x70\145\x6f\146\x7d\x29\74\x62\162\x20\x2f\76"; return 0; } goto P484o; oGRfP: $typeof = $this->xmlrpcTypes[$type]; goto GHD1i; GHD1i: if ($this->mytype === 1) { echo "\74\163\164\x72\x6f\x6e\147\x3e\130\x4d\x4c\137\122\x50\103\137\126\x61\x6c\x75\x65\163\74\57\x73\164\162\157\156\x67\x3e\x3a\x20\163\x63\141\x6c\141\162\40\x63\141\156\x20\x68\141\x76\145\40\x6f\156\x6c\x79\x20\x6f\156\x65\x20\x76\141\154\x75\145\74\x62\x72\40\x2f\76"; return 0; } goto CXcHu; N9XIa: if ($this->mytype === 2) { goto Yz1ts; Z7M_D: $ar[] = new XML_RPC_Values($val, $type); goto TmxUF; Yz1ts: $ar = $this->me["\141\162\x72\141\x79"]; goto Z7M_D; TmxUF: $this->me["\141\x72\162\x61\x79"] = $ar; goto lR3DI; lR3DI: } else { $this->me[$type] = $val; $this->mytype = $typeof; } goto ZvN4u; ZvN4u: return 1; goto M8q4Q; P484o: if ($type === $this->xmlrpcBoolean) { $val = (int) (strcasecmp($val, "\x74\162\x75\x65") === 0 or $val === 1 or $val === TRUE && strcasecmp($val, "\x66\x61\x6c\163\x65")); } goto N9XIa; M8q4Q: } public function addArray($vals) { goto QXq_Z; DzvJq: return 1; goto r40CS; e7LBC: $this->me["\x61\162\162\x61\x79"] = $vals; goto DzvJq; QXq_Z: if ($this->mytype !== 0) { echo "\74\x73\164\x72\x6f\156\x67\x3e\130\x4d\x4c\x5f\x52\120\103\137\x56\141\154\165\145\163\x3c\57\x73\x74\162\x6f\x6e\x67\x3e\x3a\x20\x61\154\162\145\x61\x64\171\x20\x69\156\151\164\151\141\154\151\x7a\x65\144\x20\141\163\x20\141\x20\x5b" . $this->kindOf() . "\135\74\x62\162\40\57\76"; return 0; } goto Wbbdm; Wbbdm: $this->mytype = $this->xmlrpcTypes["\x61\x72\162\x61\171"]; goto e7LBC; r40CS: } public function addStruct($vals) { goto wF6A1; O2Y68: $this->me["\163\164\x72\x75\x63\164"] = $vals; goto nV175; sYNMQ: $this->mytype = $this->xmlrpcTypes["\x73\164\162\x75\143\164"]; goto O2Y68; wF6A1: if ($this->mytype !== 0) { echo "\x3c\163\164\162\x6f\156\147\76\x58\x4d\114\137\x52\x50\x43\137\x56\x61\x6c\x75\x65\x73\x3c\x2f\x73\x74\x72\x6f\156\147\76\x3a\40\141\x6c\162\x65\141\144\171\x20\151\x6e\x69\164\151\x61\x6c\151\172\x65\144\40\x61\x73\x20\141\40\x5b" . $this->kindOf() . "\135\74\x62\x72\x20\57\x3e"; return 0; } goto sYNMQ; nV175: return 1; goto ggsuW; ggsuW: } public function kindOf() { switch ($this->mytype) { case 3: return "\163\164\x72\165\143\164"; case 2: return "\141\162\162\x61\x79"; case 1: return "\x73\143\x61\x6c\141\162"; default: return "\165\156\x64\145\x66"; } } public function serializedata($typ, $val) { goto wEiKZ; l3rbv: return $rs; goto EHN7m; P_uev: switch ($this->xmlrpcTypes[$typ]) { case 3: goto E0I9s; v9DB8: $rs .= "\74\x2f\163\164\x72\165\143\164\76"; goto N4lfZ; CaRk4: foreach ($val as $key2 => &$val2) { $rs .= "\74\x6d\145\x6d\142\145\x72\x3e\xa\74\x6e\x61\x6d\145\x3e{$key2}\x3c\x2f\x6e\141\x6d\x65\x3e\12" . $this->serializeval($val2) . "\74\57\x6d\145\x6d\x62\x65\162\x3e\xa"; } goto v9DB8; N4lfZ: break; goto WDkuu; E0I9s: $rs .= "\x3c\163\x74\162\165\x63\x74\x3e\12"; goto IG0z1; IG0z1: reset($val); goto CaRk4; WDkuu: case 2: goto fvDAG; LIaAc: for ($i = 0, $c = count($val); $i < $c; $i++) { $rs .= $this->serializeval($val[$i]); } goto yGm5s; yGm5s: $rs .= "\x3c\57\x64\x61\x74\141\x3e\12\x3c\x2f\141\x72\162\141\171\76\12"; goto nb5qP; fvDAG: $rs .= "\x3c\x61\162\162\x61\x79\76\xa\x3c\x64\x61\164\141\x3e\12"; goto LIaAc; nb5qP: break; goto L70OA; L70OA: case 1: switch ($typ) { case $this->xmlrpcBase64: $rs .= "\x3c" . $typ . "\x3e" . base64_encode((string) $val) . "\74\x2f" . $typ . "\76\xa"; break; case $this->xmlrpcBoolean: $rs .= "\x3c" . $typ . "\76" . ((bool) $val ? "\x31" : "\x30") . "\74\57" . $typ . "\x3e\xa"; break; case $this->xmlrpcString: $rs .= "\74" . $typ . "\76" . htmlspecialchars((string) $val) . "\74\57" . $typ . "\76\xa"; break; default: $rs .= "\74" . $typ . "\x3e" . $val . "\x3c\57" . $typ . "\76\12"; break; } default: break; } goto l3rbv; wEiKZ: $rs = ''; goto P_uev; EHN7m: } public function serialize_class() { return $this->serializeval($this); } public function serializeval($o) { goto YdX_G; YdX_G: $array = $o->me; goto y0ktQ; ZD6DA: return "\74\166\141\x6c\x75\x65\76\12" . $this->serializedata($type, $value) . "\74\57\166\141\x6c\x75\145\x3e\12"; goto Ed1ZF; y0ktQ: list($value, $type) = array(reset($array), key($array)); goto ZD6DA; Ed1ZF: } public function scalarval() { return reset($this->me); } public function iso8601_encode($time, $utc = FALSE) { return $utc ? strftime("\x25\x59\45\155\45\144\124\45\110\72\x25\151\72\x25\163", $time) : gmstrftime("\45\x59\45\155\x25\x64\124\x25\x48\72\x25\151\72\45\x73", $time); } }
