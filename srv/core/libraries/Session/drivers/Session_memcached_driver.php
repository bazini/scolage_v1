<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:17              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\x42\x41\123\x45\x50\101\x54\110") or exit("\x4e\x6f\40\144\151\x72\145\x63\x74\x20\x73\143\x72\x69\x70\x74\x20\141\143\x63\x65\x73\x73\40\x61\154\154\157\167\145\144"); class CI_Session_memcached_driver extends CI_Session_driver implements SessionHandlerInterface { protected $_memcached; protected $_key_prefix = "\143\151\137\x73\x65\x73\163\151\x6f\x6e\72"; protected $_lock_key; public function __construct(&$params) { goto Cvx36; X3TmS: if (empty($this->_config["\163\x61\166\145\137\x70\x61\164\x68"])) { log_message("\x65\162\162\157\x72", "\123\x65\163\x73\x69\x6f\x6e\x3a\40\116\157\40\115\145\155\143\x61\x63\x68\145\144\40\x73\141\166\x65\x20\160\141\164\150\x20\x63\157\x6e\x66\151\x67\165\x72\145\144\56"); } goto nXfTH; nXfTH: if ($this->_config["\155\x61\164\x63\x68\x5f\x69\160"] === TRUE) { $this->_key_prefix .= $_SERVER["\x52\105\x4d\117\124\105\137\x41\x44\104\122"] . "\72"; } goto BenSx; Cvx36: parent::__construct($params); goto X3TmS; BenSx: } public function open($save_path, $name) { goto zNFot; GbQMI: $this->_memcached->setOption(Memcached::OPT_BINARY_PROTOCOL, TRUE); goto HUWUX; qQxLg: foreach ($matches as $match) { if (in_array($match[1] . "\72" . $match[2], $server_list, TRUE)) { log_message("\x64\x65\x62\x75\147", "\x53\x65\163\x73\151\x6f\x6e\72\40\115\x65\155\x63\141\x63\150\145\x64\40\x73\x65\x72\x76\x65\x72\40\x70\x6f\x6f\x6c\x20\141\x6c\x72\x65\x61\144\171\40\150\141\163\40" . $match[1] . "\x3a" . $match[2]); continue; } if (!$this->_memcached->addServer($match[1], $match[2], isset($match[3]) ? $match[3] : 0)) { log_message("\x65\x72\x72\157\x72", "\x43\157\165\x6c\x64\40\x6e\157\164\x20\141\x64\x64\x20" . $match[1] . "\72" . $match[2] . "\40\164\157\x20\x4d\x65\x6d\143\141\x63\150\x65\x64\x20\163\x65\162\166\x65\162\40\160\x6f\157\x6c\x2e"); } else { $server_list[] = $match[1] . "\x3a" . $match[2]; } } goto X8GSb; Kwdom: return $this->_success; goto AtP6D; O_XCY: $this->php5_validate_id(); goto Kwdom; rfc8o: foreach ($this->_memcached->getServerList() as $server) { $server_list[] = $server["\150\x6f\x73\x74"] . "\72" . $server["\x70\157\x72\x74"]; } goto tis87; HUWUX: $server_list = array(); goto rfc8o; zNFot: $this->_memcached = new Memcached(); goto GbQMI; tis87: if (!preg_match_all("\43\54\77\50\133\x5e\54\x3a\135\53\51\x5c\x3a\x28\x5c\144\x7b\61\x2c\x35\175\x29\x28\77\72\134\72\x28\134\x64\x2b\x29\51\x3f\x23", $this->_config["\x73\x61\x76\x65\x5f\160\141\x74\150"], $matches, PREG_SET_ORDER)) { goto x0UE6; hNF45: log_message("\145\x72\162\x6f\162", "\123\145\x73\163\151\157\x6e\x3a\x20\x49\156\x76\141\154\x69\144\x20\115\x65\155\x63\141\143\150\145\x64\x20\163\x61\x76\145\40\x70\x61\164\x68\40\x66\157\x72\155\x61\164\x3a\x20" . $this->_config["\163\x61\x76\x65\137\x70\x61\164\150"]); goto mwVSE; x0UE6: $this->_memcached = NULL; goto hNF45; mwVSE: return $this->_failure; goto CA5HN; CA5HN: } goto qQxLg; X8GSb: if (empty($server_list)) { log_message("\x65\x72\x72\x6f\162", "\x53\145\x73\x73\151\157\156\x3a\40\115\x65\155\143\x61\x63\150\145\x64\40\163\x65\x72\166\145\162\x20\160\x6f\157\x6c\x20\151\x73\40\x65\x6d\160\x74\x79\x2e"); return $this->_failure; } goto O_XCY; AtP6D: } public function read($session_id) { if (isset($this->_memcached) && $this->_get_lock($session_id)) { goto pTRaJ; g16uO: $session_data = (string) $this->_memcached->get($this->_key_prefix . $session_id); goto d8Nf5; d8Nf5: $this->_fingerprint = md5($session_data); goto bcALl; pTRaJ: $this->_session_id = $session_id; goto g16uO; bcALl: return $session_data; goto fPD83; fPD83: } return $this->_failure; } public function write($session_id, $session_data) { goto xqeah; hP4r1: $key = $this->_key_prefix . $session_id; goto e_dIt; e_dIt: $this->_memcached->replace($this->_lock_key, time(), 300); goto XAay4; xqeah: if (!isset($this->_memcached, $this->_lock_key)) { return $this->_failure; } elseif ($session_id !== $this->_session_id) { goto Ufhp5; JJlCG: $this->_fingerprint = md5(''); goto u9Cdx; Ufhp5: if (!$this->_release_lock() or !$this->_get_lock($session_id)) { return $this->_failure; } goto JJlCG; u9Cdx: $this->_session_id = $session_id; goto GotfA; GotfA: } goto hP4r1; XAay4: if ($this->_fingerprint !== ($fingerprint = md5($session_data))) { if ($this->_memcached->set($key, $session_data, $this->_config["\145\170\x70\x69\x72\141\164\151\x6f\156"])) { $this->_fingerprint = $fingerprint; return $this->_success; } return $this->_failure; } elseif ($this->_memcached->touch($key, $this->_config["\145\x78\160\x69\162\x61\x74\151\157\156"]) or $this->_memcached->getResultCode() === Memcached::RES_NOTFOUND && $this->_memcached->set($key, $session_data, $this->_config["\x65\x78\x70\x69\x72\x61\164\151\x6f\x6e"])) { return $this->_success; } goto gV7UG; gV7UG: return $this->_failure; goto uB2sQ; uB2sQ: } public function close() { if (isset($this->_memcached)) { goto JpzC3; JpzC3: $this->_release_lock(); goto RNCd2; fWLmz: return $this->_success; goto c7OP3; lUp2j: $this->_memcached = NULL; goto fWLmz; RNCd2: if (!$this->_memcached->quit()) { return $this->_failure; } goto lUp2j; c7OP3: } return $this->_failure; } public function destroy($session_id) { if (isset($this->_memcached, $this->_lock_key)) { goto ffzbr; BenkS: return $this->_success; goto nhdjb; gY9tS: $this->_cookie_destroy(); goto BenkS; ffzbr: $this->_memcached->delete($this->_key_prefix . $session_id); goto gY9tS; nhdjb: } return $this->_failure; } public function gc($maxlifetime) { return $this->_success; } public function validateSessionId($id) { $this->_memcached->get($this->_key_prefix . $id); return $this->_memcached->getResultCode() === Memcached::RES_SUCCESS; } protected function _get_lock($session_id) { goto fvWHs; LLBGQ: $attempt = 0; goto N1HM2; fvWHs: if ($this->_lock_key === $this->_key_prefix . $session_id . "\72\x6c\x6f\143\x6b") { if (!$this->_memcached->replace($this->_lock_key, time(), 300)) { return $this->_memcached->getResultCode() === Memcached::RES_NOTFOUND ? $this->_memcached->add($this->_lock_key, time(), 300) : FALSE; } return TRUE; } goto KIdpc; y_9SK: $this->_lock = TRUE; goto knu3Z; aqtsz: if ($attempt === 30) { log_message("\x65\x72\162\x6f\162", "\123\145\x73\x73\x69\x6f\156\x3a\40\125\x6e\x61\x62\x6c\145\40\164\x6f\x20\157\x62\x74\141\151\156\40\154\x6f\x63\153\x20\146\x6f\x72\x20" . $this->_key_prefix . $session_id . "\40\x61\x66\164\145\x72\x20\63\60\x20\x61\x74\x74\x65\155\x70\164\x73\54\40\x61\142\x6f\162\x74\x69\156\x67\56"); return FALSE; } goto y_9SK; N1HM2: do { if ($this->_memcached->get($lock_key)) { sleep(1); continue; } $method = $this->_memcached->getResultCode() === Memcached::RES_NOTFOUND ? "\141\x64\x64" : "\x73\x65\164"; if (!$this->_memcached->{$method}($lock_key, time(), 300)) { log_message("\x65\x72\162\x6f\162", "\x53\145\x73\x73\x69\157\156\72\40\105\x72\162\x6f\x72\x20\x77\x68\x69\154\145\40\164\x72\171\151\x6e\x67\40\x74\x6f\40\x6f\142\164\141\151\156\40\x6c\x6f\x63\x6b\40\x66\x6f\162\40" . $this->_key_prefix . $session_id); return FALSE; } $this->_lock_key = $lock_key; break; } while (++$attempt < 30); goto aqtsz; KIdpc: $lock_key = $this->_key_prefix . $session_id . "\72\154\x6f\143\x6b"; goto LLBGQ; knu3Z: return TRUE; goto dQFmr; dQFmr: } protected function _release_lock() { if (isset($this->_memcached, $this->_lock_key) && $this->_lock) { goto GOs_E; HzQlz: $this->_lock = FALSE; goto c9mhx; Klko8: $this->_lock_key = NULL; goto HzQlz; GOs_E: if (!$this->_memcached->delete($this->_lock_key) && $this->_memcached->getResultCode() !== Memcached::RES_NOTFOUND) { log_message("\x65\162\162\157\x72", "\123\145\x73\163\151\x6f\x6e\72\x20\x45\162\162\x6f\x72\40\x77\x68\151\154\145\40\164\x72\x79\x69\x6e\147\x20\164\157\x20\146\x72\145\x65\40\x6c\x6f\143\153\x20\146\x6f\162\40" . $this->_lock_key); return FALSE; } goto Klko8; c9mhx: } return TRUE; } }
