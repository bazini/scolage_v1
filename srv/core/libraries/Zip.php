<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\x41\x53\105\120\101\x54\x48") or exit("\116\157\40\x64\x69\162\x65\x63\x74\x20\x73\x63\x72\151\160\164\x20\141\x63\143\145\163\163\40\x61\154\154\x6f\x77\145\144"); class CI_Zip { public $zipdata = ''; public $directory = ''; public $entries = 0; public $file_num = 0; public $offset = 0; public $now; public $compression_level = 2; protected static $func_overload; public function __construct() { goto YXvpb; auyQB: $this->now = time(); goto q0R2p; YXvpb: isset(self::$func_overload) or self::$func_overload = extension_loaded("\155\x62\x73\164\162\151\156\x67") && ini_get("\155\142\163\x74\x72\x69\156\x67\56\146\165\156\143\x5f\157\x76\x65\x72\154\x6f\141\144"); goto auyQB; q0R2p: log_message("\151\x6e\146\x6f", "\132\x69\160\x20\103\x6f\x6d\x70\162\x65\163\163\x69\157\x6e\40\103\x6c\141\x73\163\x20\x49\156\x69\164\151\141\x6c\x69\172\x65\x64"); goto U9yd6; U9yd6: } public function add_dir($directory) { foreach ((array) $directory as $dir) { goto IZdQU; T_n7t: $dir_time = $this->_get_mod_time($dir); goto FSRjW; FSRjW: $this->_add_dir($dir, $dir_time["\146\151\154\x65\137\x6d\x74\x69\155\x65"], $dir_time["\146\151\x6c\145\137\155\x64\141\x74\x65"]); goto cBMlv; IZdQU: if (!preg_match("\x7c\x2e\53\57\44\x7c", $dir)) { $dir .= "\57"; } goto T_n7t; cBMlv: } } protected function _get_mod_time($dir) { $date = file_exists($dir) ? getdate(filemtime($dir)) : getdate($this->now); return array("\146\151\x6c\x65\x5f\155\164\151\155\145" => ($date["\150\x6f\x75\162\163"] << 11) + ($date["\x6d\151\x6e\165\164\145\x73"] << 5) + $date["\x73\x65\143\157\156\144\x73"] / 2, "\146\151\x6c\145\137\x6d\144\x61\164\x65" => ($date["\x79\145\x61\162"] - 1980 << 9) + ($date["\x6d\x6f\x6e"] << 5) + $date["\155\144\141\171"]); } protected function _add_dir($dir, $file_mtime, $file_mdate) { goto i4F3r; spXo2: $this->zipdata .= "\120\x4b\x3\x4\12\0\x0\x0\x0\x0" . pack("\x76", $file_mtime) . pack("\x76", $file_mdate) . pack("\126", 0) . pack("\126", 0) . pack("\126", 0) . pack("\166", self::strlen($dir)) . pack("\166", 0) . $dir . pack("\x56", 0) . pack("\x56", 0) . pack("\x56", 0); goto svhoy; i4F3r: $dir = str_replace("\134", "\x2f", $dir); goto spXo2; svhoy: $this->directory .= "\x50\x4b\1\x2\x0\x0\xa\0\0\x0\0\x0" . pack("\x76", $file_mtime) . pack("\166", $file_mdate) . pack("\126", 0) . pack("\x56", 0) . pack("\x56", 0) . pack("\x76", self::strlen($dir)) . pack("\x76", 0) . pack("\x76", 0) . pack("\166", 0) . pack("\x76", 0) . pack("\126", 16) . pack("\x56", $this->offset) . $dir; goto oR3JG; XceNY: $this->entries++; goto Y3eTR; oR3JG: $this->offset = self::strlen($this->zipdata); goto XceNY; Y3eTR: } public function add_data($filepath, $data = NULL) { if (is_array($filepath)) { foreach ($filepath as $path => $data) { $file_data = $this->_get_mod_time($path); $this->_add_data($path, $data, $file_data["\x66\x69\154\145\137\x6d\x74\x69\x6d\x65"], $file_data["\x66\x69\154\145\x5f\x6d\144\141\164\145"]); } } else { $file_data = $this->_get_mod_time($filepath); $this->_add_data($filepath, $data, $file_data["\x66\151\x6c\x65\137\155\164\151\155\x65"], $file_data["\146\x69\x6c\145\137\155\x64\141\164\145"]); } } protected function _add_data($filepath, $data, $file_mtime, $file_mdate) { goto VNVuy; Tehhf: $gzdata = self::substr(gzcompress($data, $this->compression_level), 2, -4); goto D6krl; tZLZ0: $uncompressed_size = self::strlen($data); goto TV5US; F70B7: $this->directory .= "\120\x4b\x1\x2\x0\0\24\0\0\x0\10\0" . pack("\166", $file_mtime) . pack("\166", $file_mdate) . pack("\126", $crc32) . pack("\x56", $compressed_size) . pack("\x56", $uncompressed_size) . pack("\166", self::strlen($filepath)) . pack("\166", 0) . pack("\x76", 0) . pack("\166", 0) . pack("\166", 0) . pack("\126", 32) . pack("\x56", $this->offset) . $filepath; goto g2pzN; g2pzN: $this->offset = self::strlen($this->zipdata); goto hvQcm; TV5US: $crc32 = crc32($data); goto Tehhf; hvQcm: $this->entries++; goto sAkFE; R6KJV: $this->zipdata .= "\120\113\x3\4\x14\0\x0\x0\10\x0" . pack("\x76", $file_mtime) . pack("\166", $file_mdate) . pack("\126", $crc32) . pack("\126", $compressed_size) . pack("\x56", $uncompressed_size) . pack("\166", self::strlen($filepath)) . pack("\x76", 0) . $filepath . $gzdata; goto F70B7; VNVuy: $filepath = str_replace("\134", "\x2f", $filepath); goto tZLZ0; sAkFE: $this->file_num++; goto HRVMA; D6krl: $compressed_size = self::strlen($gzdata); goto R6KJV; HRVMA: } public function read_file($path, $archive_filepath = FALSE) { if (file_exists($path) && FALSE !== ($data = file_get_contents($path))) { goto br97g; Vqq92: return TRUE; goto ylmeC; br97g: if (is_string($archive_filepath)) { $name = str_replace("\134", "\57", $archive_filepath); } else { $name = str_replace("\134", "\57", $path); if ($archive_filepath === FALSE) { $name = preg_replace("\174\56\52\x2f\x28\x2e\x2b\51\x7c", "\134\x31", $name); } } goto OL8RJ; OL8RJ: $this->add_data($name, $data); goto Vqq92; ylmeC: } return FALSE; } public function read_dir($path, $preserve_filepath = TRUE, $root_path = NULL) { goto wEsaN; efjrq: closedir($fp); goto A9OjO; wEsaN: $path = rtrim($path, "\x2f\134") . DIRECTORY_SEPARATOR; goto FD0U8; jVN3l: if ($root_path === NULL) { $root_path = str_replace(array("\134", "\57"), DIRECTORY_SEPARATOR, dirname($path)) . DIRECTORY_SEPARATOR; } goto oSvwR; A9OjO: return TRUE; goto ozMNq; FD0U8: if (!($fp = @opendir($path))) { return FALSE; } goto jVN3l; oSvwR: while (FALSE !== ($file = readdir($fp))) { if ($file[0] === "\x2e") { continue; } if (is_dir($path . $file)) { $this->read_dir($path . $file . DIRECTORY_SEPARATOR, $preserve_filepath, $root_path); } elseif (FALSE !== ($data = file_get_contents($path . $file))) { goto XJGEX; XJGEX: $name = str_replace(array("\134", "\x2f"), DIRECTORY_SEPARATOR, $path); goto TohI2; DO72R: $this->add_data($name . $file, $data); goto zu3h7; TohI2: if ($preserve_filepath === FALSE) { $name = str_replace($root_path, '', $name); } goto DO72R; zu3h7: } } goto efjrq; ozMNq: } public function get_zip() { if ($this->entries === 0) { return FALSE; } return $this->zipdata . $this->directory . "\x50\x4b\5\x6\x0\0\0\0" . pack("\166", $this->entries) . pack("\166", $this->entries) . pack("\126", self::strlen($this->directory)) . pack("\126", self::strlen($this->zipdata)) . "\0\x0"; } public function archive($filepath) { goto cCHfM; wzYCj: flock($fp, LOCK_EX); goto rSoc8; cCHfM: if (!($fp = @fopen($filepath, "\167\x2b\142"))) { return FALSE; } goto wzYCj; bFTSu: fclose($fp); goto GnEoR; GnEoR: return is_int($result); goto wAppc; rSoc8: for ($result = $written = 0, $data = $this->get_zip(), $length = self::strlen($data); $written < $length; $written += $result) { if (($result = fwrite($fp, self::substr($data, $written))) === FALSE) { break; } } goto fhDWx; fhDWx: flock($fp, LOCK_UN); goto bFTSu; wAppc: } public function download($filename = "\x62\141\x63\153\x75\x70\56\172\151\160") { goto XWJjz; XWJjz: if (!preg_match("\x7c\x2e\53\x3f\134\56\172\x69\x70\44\x7c", $filename)) { $filename .= "\56\172\151\x70"; } goto U3bO1; xDkPr: $get_zip = $this->get_zip(); goto LPL4z; Us6dg: force_download($filename, $zip_content); goto LVQR5; LPL4z: $zip_content =& $get_zip; goto Us6dg; U3bO1: get_instance()->load->helper("\144\x6f\167\x6e\x6c\x6f\141\x64"); goto xDkPr; LVQR5: } public function clear_data() { goto yLKSc; cnJPI: $this->offset = 0; goto jgziE; yLKSc: $this->zipdata = ''; goto de_hr; de_hr: $this->directory = ''; goto eXmcY; eXmcY: $this->entries = 0; goto zSNW6; zSNW6: $this->file_num = 0; goto cnJPI; jgziE: return $this; goto YERzu; YERzu: } protected static function strlen($str) { return self::$func_overload ? mb_strlen($str, "\70\x62\x69\x74") : strlen($str); } protected static function substr($str, $start, $length = NULL) { if (self::$func_overload) { isset($length) or $length = $start >= 0 ? self::strlen($str) - $start : -$start; return mb_substr($str, $start, $length, "\x38\142\151\164"); } return isset($length) ? substr($str, $start, $length) : substr($str, $start); } }
