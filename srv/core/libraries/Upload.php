<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\x42\101\123\x45\x50\x41\124\110") or exit("\x4e\x6f\40\144\151\x72\x65\143\x74\40\163\143\162\151\x70\164\40\x61\x63\143\x65\x73\163\x20\x61\154\x6c\x6f\167\145\x64"); class CI_Upload { public $max_size = 0; public $max_width = 0; public $max_height = 0; public $min_width = 0; public $min_height = 0; public $max_filename = 0; public $max_filename_increment = 100; public $allowed_types = ''; public $file_temp = ''; public $file_name = ''; public $orig_name = ''; public $file_type = ''; public $file_size = NULL; public $file_ext = ''; public $file_ext_tolower = FALSE; public $upload_path = ''; public $overwrite = FALSE; public $encrypt_name = FALSE; public $is_image = FALSE; public $image_width = NULL; public $image_height = NULL; public $image_type = ''; public $image_size_str = ''; public $error_msg = array(); public $remove_spaces = TRUE; public $detect_mime = TRUE; public $xss_clean = FALSE; public $mod_mime_fix = TRUE; public $temp_prefix = "\164\145\155\x70\137\x66\151\154\145\137"; public $client_name = ''; protected $_file_name_override = ''; protected $_mimes = array(); protected $_CI; public function __construct($config = array()) { goto NMzF1; u7KIL: $this->_mimes =& get_mimes(); goto aVi4n; hRT6M: log_message("\x69\156\146\x6f", "\125\x70\x6c\157\x61\x64\x20\x43\154\141\x73\x73\40\x49\156\151\164\151\141\154\x69\x7a\145\144"); goto BTNHy; NMzF1: empty($config) or $this->initialize($config, FALSE); goto u7KIL; aVi4n: $this->_CI =& get_instance(); goto hRT6M; BTNHy: } public function initialize(array $config = array(), $reset = TRUE) { goto Uj6Bm; Uj6Bm: $reflection = new ReflectionClass($this); goto Aj7m1; frHEP: return $this; goto mBrvR; M_1CJ: $this->_file_name_override = $this->file_name; goto frHEP; Aj7m1: if ($reset === TRUE) { $defaults = $reflection->getDefaultProperties(); foreach (array_keys($defaults) as $key) { if ($key[0] === "\x5f") { continue; } if (isset($config[$key])) { if ($reflection->hasMethod("\163\x65\164\137" . $key)) { $this->{"\x73\145\x74\x5f" . $key}($config[$key]); } else { $this->{$key} = $config[$key]; } } else { $this->{$key} = $defaults[$key]; } } } else { foreach ($config as $key => &$value) { if ($key[0] !== "\137" && $reflection->hasProperty($key)) { if ($reflection->hasMethod("\x73\145\164\x5f" . $key)) { $this->{"\x73\145\x74\137" . $key}($value); } else { $this->{$key} = $value; } } } } goto M_1CJ; mBrvR: } public function do_upload($field = "\x75\163\x65\162\146\x69\154\145") { goto cdc5W; L0h8z: $this->file_size = $_file["\x73\x69\x7a\145"]; goto GaoPh; b0JYy: $this->client_name = $this->file_name; goto tLpgt; gJpCH: if (!$this->is_allowed_dimensions()) { $this->set_error("\165\x70\x6c\x6f\x61\144\137\x69\x6e\166\141\x6c\x69\x64\x5f\x64\x69\155\145\x6e\163\151\157\156\x73", "\x69\x6e\x66\x6f"); return FALSE; } goto Zf4lU; uuL03: if (!$this->validate_upload_path()) { return FALSE; } goto A1Rtn; QBVdw: if ($this->max_filename > 0) { $this->file_name = $this->limit_filename_length($this->file_name, $this->max_filename); } goto g_ntK; cE9PL: $this->file_ext = $this->get_extension($this->file_name); goto b0JYy; QoL_q: if ($this->file_size > 0) { $this->file_size = round($this->file_size / 1024, 2); } goto XBjGj; IuziG: if ($this->xss_clean && $this->do_xss_clean() === FALSE) { $this->set_error("\165\160\154\157\141\x64\137\165\x6e\x61\x62\x6c\x65\x5f\x74\x6f\137\x77\162\151\x74\145\x5f\146\151\x6c\145", "\145\x72\162\157\x72"); return FALSE; } goto JKBlr; A1Rtn: if (!is_uploaded_file($_file["\164\155\x70\x5f\156\x61\155\x65"])) { goto DQzsT; XeKe2: return FALSE; goto ZSx38; DQzsT: $error = isset($_file["\x65\x72\162\157\162"]) ? $_file["\x65\x72\x72\x6f\x72"] : 4; goto KtVa3; KtVa3: switch ($error) { case UPLOAD_ERR_INI_SIZE: $this->set_error("\165\x70\154\157\x61\x64\137\146\151\154\x65\137\145\170\143\x65\145\x64\163\x5f\x6c\151\x6d\151\x74", "\x69\156\x66\157"); break; case UPLOAD_ERR_FORM_SIZE: $this->set_error("\x75\x70\154\157\141\144\137\146\151\154\145\x5f\145\170\x63\145\145\144\x73\x5f\x66\x6f\162\x6d\137\x6c\151\155\151\x74", "\151\156\x66\x6f"); break; case UPLOAD_ERR_PARTIAL: $this->set_error("\165\160\x6c\157\x61\144\x5f\146\151\x6c\x65\x5f\160\141\x72\164\151\x61\x6c", "\x64\145\x62\x75\x67"); break; case UPLOAD_ERR_NO_FILE: $this->set_error("\x75\160\x6c\x6f\141\144\x5f\156\x6f\137\x66\x69\x6c\x65\137\x73\145\154\x65\143\164\145\x64", "\x64\145\142\165\x67"); break; case UPLOAD_ERR_NO_TMP_DIR: $this->set_error("\x75\160\154\x6f\x61\x64\137\156\157\137\164\x65\x6d\x70\x5f\x64\151\162\x65\x63\x74\x6f\x72\171", "\x65\162\x72\x6f\x72"); break; case UPLOAD_ERR_CANT_WRITE: $this->set_error("\x75\160\154\x6f\141\144\x5f\x75\x6e\x61\x62\154\x65\137\x74\x6f\137\x77\x72\151\164\x65\x5f\146\x69\x6c\145", "\145\162\x72\157\162"); break; case UPLOAD_ERR_EXTENSION: $this->set_error("\165\160\154\157\x61\144\137\163\x74\x6f\160\160\145\x64\137\x62\x79\x5f\x65\170\x74\145\x6e\163\151\x6f\x6e", "\144\145\142\165\147"); break; default: $this->set_error("\165\x70\x6c\x6f\141\x64\137\156\157\x5f\146\151\x6c\x65\137\163\x65\154\x65\143\x74\x65\x64", "\144\x65\x62\165\x67"); break; } goto XeKe2; ZSx38: } goto jJguA; JKBlr: if (!@copy($this->file_temp, $this->upload_path . $this->file_name)) { if (!@move_uploaded_file($this->file_temp, $this->upload_path . $this->file_name)) { $this->set_error("\x75\x70\x6c\x6f\x61\144\x5f\x64\x65\163\x74\x69\x6e\141\164\151\157\156\x5f\x65\x72\x72\x6f\x72", "\x65\162\162\x6f\162"); return FALSE; } } goto THh7Z; XBjGj: if (!$this->is_allowed_filesize()) { $this->set_error("\x75\160\x6c\157\141\x64\137\151\x6e\166\141\154\x69\144\137\x66\151\154\x65\163\x69\x7a\145", "\x69\156\146\157"); return FALSE; } goto gJpCH; l4cka: if ($this->file_ext_tolower && ($ext_length = strlen($this->file_ext))) { $this->file_name = substr($this->file_name, 0, -$ext_length) . $this->file_ext; } goto faNIO; jJguA: $this->file_temp = $_file["\164\x6d\160\137\x6e\x61\x6d\145"]; goto L0h8z; g06jj: if (!isset($_file)) { $this->set_error("\x75\160\x6c\157\141\144\x5f\156\157\x5f\x66\151\x6c\x65\137\x73\145\x6c\x65\x63\x74\145\x64", "\x64\x65\142\x75\x67"); return FALSE; } goto uuL03; Zf4lU: $this->file_name = $this->_CI->security->sanitize_filename($this->file_name); goto QBVdw; TMfHA: $this->file_type = strtolower(trim(stripslashes($this->file_type), "\42")); goto g3OpF; faNIO: $this->orig_name = $this->file_name; goto UQAgz; mwHXe: $this->file_type = preg_replace("\57\x5e\50\56\x2b\77\x29\73\x2e\x2a\x24\x2f", "\x5c\61", $this->file_type); goto TMfHA; UQAgz: if (FALSE === ($this->file_name = $this->set_filename($this->upload_path, $this->file_name))) { return FALSE; } goto IuziG; tLpgt: if (!$this->is_allowed_filetype()) { $this->set_error("\x75\x70\x6c\x6f\x61\x64\137\x69\156\x76\x61\154\x69\x64\x5f\146\x69\x6c\145\164\x79\x70\x65", "\x64\x65\142\x75\147"); return FALSE; } goto N3hCs; g_ntK: if ($this->remove_spaces === TRUE) { $this->file_name = preg_replace("\x2f\134\x73\53\x2f", "\x5f", $this->file_name); } goto l4cka; THh7Z: $this->set_image_properties($this->upload_path . $this->file_name); goto x6GDX; GaoPh: if ($this->detect_mime !== FALSE) { $this->_file_mime_type($_file); } goto mwHXe; N3hCs: if ($this->_file_name_override !== '') { goto nj1vg; G8q1U: if (strpos($this->_file_name_override, "\x2e") === FALSE) { $this->file_name .= $this->file_ext; } else { $this->file_ext = $this->get_extension($this->_file_name_override); } goto EMhOe; EMhOe: if (!$this->is_allowed_filetype(TRUE)) { $this->set_error("\165\x70\x6c\x6f\141\144\137\151\156\x76\x61\x6c\x69\144\137\146\x69\154\145\x74\171\x70\145", "\x64\145\x62\165\147"); return FALSE; } goto VN9rD; nj1vg: $this->file_name = $this->_prep_filename($this->_file_name_override); goto G8q1U; VN9rD: } goto QoL_q; x6GDX: return TRUE; goto vbeYx; cdc5W: if (isset($_FILES[$field])) { $_file = $_FILES[$field]; } elseif (($c = preg_match_all("\57\x28\77\72\x5e\x5b\136\x5c\133\x5d\x2b\x29\174\x5c\x5b\x5b\x5e\x5d\135\x2a\134\x5d\x2f", $field, $matches)) > 1) { $_file = $_FILES; for ($i = 0; $i < $c; $i++) { if (($field = trim($matches[0][$i], "\133\135")) === '' or !isset($_file[$field])) { $_file = NULL; break; } $_file = $_file[$field]; } } goto g06jj; g3OpF: $this->file_name = $this->_prep_filename($_file["\x6e\141\155\x65"]); goto cE9PL; vbeYx: } public function data($index = NULL) { goto ne0H8; ne0H8: $data = array("\146\151\154\x65\x5f\x6e\x61\155\x65" => $this->file_name, "\146\151\x6c\145\137\164\x79\x70\x65" => $this->file_type, "\146\x69\x6c\x65\x5f\x70\x61\164\150" => $this->upload_path, "\x66\x75\154\154\137\160\141\164\150" => $this->upload_path . $this->file_name, "\x72\x61\167\x5f\x6e\x61\155\x65" => substr($this->file_name, 0, -strlen($this->file_ext)), "\x6f\162\151\147\x5f\x6e\x61\155\x65" => $this->orig_name, "\x63\154\x69\145\x6e\164\137\156\x61\155\145" => $this->client_name, "\x66\x69\154\145\x5f\145\x78\x74" => $this->file_ext, "\146\151\x6c\x65\x5f\x73\151\x7a\145" => $this->file_size, "\151\x73\137\x69\155\x61\x67\145" => $this->is_image(), "\x69\x6d\141\x67\145\x5f\167\x69\144\x74\150" => $this->image_width, "\151\x6d\x61\x67\145\x5f\x68\x65\x69\147\x68\x74" => $this->image_height, "\x69\x6d\x61\x67\145\137\164\171\160\x65" => $this->image_type, "\151\155\141\147\145\x5f\163\151\x7a\x65\137\163\164\x72" => $this->image_size_str); goto KBurf; KBurf: if (!empty($index)) { return isset($data[$index]) ? $data[$index] : NULL; } goto DXz02; DXz02: return $data; goto uMXyw; uMXyw: } public function set_upload_path($path) { $this->upload_path = rtrim($path, "\57") . "\x2f"; return $this; } public function set_filename($path, $filename) { goto A6SCb; i9cEw: if ($this->overwrite === TRUE or !file_exists($path . $filename)) { return $filename; } goto LkZ3a; tbXrF: $new_filename = ''; goto hJMS5; LkZ3a: $filename = str_replace($this->file_ext, '', $filename); goto tbXrF; hJMS5: for ($i = 1; $i < $this->max_filename_increment; $i++) { if (!file_exists($path . $filename . $i . $this->file_ext)) { $new_filename = $filename . $i . $this->file_ext; break; } } goto fZdvD; fZdvD: if ($new_filename === '') { $this->set_error("\x75\160\154\157\141\x64\x5f\142\x61\144\137\146\151\154\145\156\141\155\145", "\144\145\142\x75\x67"); return FALSE; } goto XAlHh; A6SCb: if ($this->encrypt_name === TRUE) { $filename = md5(uniqid(mt_rand())) . $this->file_ext; } goto i9cEw; XAlHh: return $new_filename; goto ga8vc; ga8vc: } public function set_max_filesize($n) { $this->max_size = $n < 0 ? 0 : (int) $n; return $this; } protected function set_max_size($n) { return $this->set_max_filesize($n); } public function set_max_filename($n) { $this->max_filename = $n < 0 ? 0 : (int) $n; return $this; } public function set_max_width($n) { $this->max_width = $n < 0 ? 0 : (int) $n; return $this; } public function set_max_height($n) { $this->max_height = $n < 0 ? 0 : (int) $n; return $this; } public function set_min_width($n) { $this->min_width = $n < 0 ? 0 : (int) $n; return $this; } public function set_min_height($n) { $this->min_height = $n < 0 ? 0 : (int) $n; return $this; } public function set_allowed_types($types) { $this->allowed_types = (is_array($types) or $types === "\x2a") ? $types : explode("\174", $types); return $this; } public function set_image_properties($path = '') { if ($this->is_image() && function_exists("\x67\x65\164\x69\155\x61\147\145\163\x69\172\145")) { if (FALSE !== ($D = @getimagesize($path))) { goto Xumvz; LWnoZ: $this->image_width = $D[0]; goto S9fPp; Xumvz: $types = array(1 => "\147\x69\x66", 2 => "\152\x70\x65\x67", 3 => "\160\x6e\147"); goto LWnoZ; KZcKT: $this->image_size_str = $D[3]; goto L_aOF; S9fPp: $this->image_height = $D[1]; goto J1PAP; J1PAP: $this->image_type = isset($types[$D[2]]) ? $types[$D[2]] : "\x75\x6e\x6b\156\x6f\167\x6e"; goto KZcKT; L_aOF: } } return $this; } public function set_xss_clean($flag = FALSE) { $this->xss_clean = $flag === TRUE; return $this; } public function is_image() { goto MW0qg; qgqGe: $img_mimes = array("\x69\x6d\141\147\145\x2f\147\x69\x66", "\x69\x6d\141\147\145\x2f\x6a\x70\145\147", "\151\155\141\147\145\x2f\160\156\147"); goto e2ys3; e2ys3: return in_array($this->file_type, $img_mimes, TRUE); goto wLwXz; MW0qg: $png_mimes = array("\x69\x6d\x61\x67\145\x2f\x78\55\x70\156\147"); goto D3jF_; D3jF_: $jpeg_mimes = array("\x69\155\x61\x67\145\x2f\x6a\160\x67", "\151\155\141\147\x65\57\152\x70\145", "\151\x6d\141\x67\x65\57\152\x70\x65\x67", "\151\155\141\x67\145\57\x70\152\x70\x65\x67"); goto TLkGp; TLkGp: if (in_array($this->file_type, $png_mimes)) { $this->file_type = "\151\x6d\x61\x67\145\57\160\x6e\x67"; } elseif (in_array($this->file_type, $jpeg_mimes)) { $this->file_type = "\151\x6d\x61\x67\145\57\152\160\x65\x67"; } goto qgqGe; wLwXz: } public function is_allowed_filetype($ignore_mime = FALSE) { goto MDc2x; Iixkd: $ext = strtolower(ltrim($this->file_ext, "\x2e")); goto XFCtr; zjpHZ: if ($ignore_mime === TRUE) { return TRUE; } goto cQhfS; cQhfS: if (isset($this->_mimes[$ext])) { return is_array($this->_mimes[$ext]) ? in_array($this->file_type, $this->_mimes[$ext], TRUE) : $this->_mimes[$ext] === $this->file_type; } goto MHbyg; Nt7uf: if (in_array($ext, array("\x67\x69\146", "\152\x70\x67", "\x6a\160\145\147", "\152\x70\x65", "\160\156\147"), TRUE) && @getimagesize($this->file_temp) === FALSE) { return FALSE; } goto zjpHZ; MDc2x: if ($this->allowed_types === "\52") { return TRUE; } goto BDUVr; BDUVr: if (empty($this->allowed_types) or !is_array($this->allowed_types)) { $this->set_error("\x75\x70\x6c\x6f\x61\x64\137\x6e\x6f\x5f\x66\151\x6c\x65\137\164\171\160\x65\x73", "\x64\145\x62\x75\x67"); return FALSE; } goto Iixkd; MHbyg: return FALSE; goto qYciy; XFCtr: if (!in_array($ext, $this->allowed_types, TRUE)) { return FALSE; } goto Nt7uf; qYciy: } public function is_allowed_filesize() { return $this->max_size === 0 or $this->max_size > $this->file_size; } public function is_allowed_dimensions() { goto mT_H9; sjyxF: if (function_exists("\147\145\164\x69\x6d\141\x67\145\x73\x69\172\x65")) { goto V9VnP; UVHnM: if ($this->min_width > 0 && $D[0] < $this->min_width) { return FALSE; } goto GvE1y; iBbvq: if ($this->max_height > 0 && $D[1] > $this->max_height) { return FALSE; } goto UVHnM; V9VnP: $D = @getimagesize($this->file_temp); goto eQGUN; GvE1y: if ($this->min_height > 0 && $D[1] < $this->min_height) { return FALSE; } goto v1dOq; eQGUN: if ($this->max_width > 0 && $D[0] > $this->max_width) { return FALSE; } goto iBbvq; v1dOq: } goto E_qlx; E_qlx: return TRUE; goto LhfCv; mT_H9: if (!$this->is_image()) { return TRUE; } goto sjyxF; LhfCv: } public function validate_upload_path() { goto wIHX4; Y7tya: $this->upload_path = preg_replace("\x2f\50\56\x2b\77\51\x5c\57\x2a\44\57", "\134\x31\x2f", $this->upload_path); goto SITzM; SITzM: return TRUE; goto GbQSA; aXSUN: if (realpath($this->upload_path) !== FALSE) { $this->upload_path = str_replace("\134", "\57", realpath($this->upload_path)); } goto zN6sb; zN6sb: if (!is_dir($this->upload_path)) { $this->set_error("\x75\160\154\x6f\x61\144\x5f\156\157\137\146\151\x6c\x65\160\141\x74\150", "\x65\162\x72\157\162"); return FALSE; } goto YkbRd; wIHX4: if ($this->upload_path === '') { $this->set_error("\165\x70\154\x6f\141\144\137\156\x6f\x5f\146\x69\154\x65\160\141\164\x68", "\x65\x72\x72\157\162"); return FALSE; } goto aXSUN; YkbRd: if (!is_really_writable($this->upload_path)) { $this->set_error("\165\x70\154\x6f\141\x64\137\x6e\157\x74\137\x77\x72\151\x74\141\x62\x6c\x65", "\145\162\x72\x6f\162"); return FALSE; } goto Y7tya; GbQSA: } public function get_extension($filename) { goto ed5Zp; mhd8H: if (count($x) === 1) { return ''; } goto Lbjtc; HkWmX: return "\56" . $ext; goto jjZZx; ed5Zp: $x = explode("\x2e", $filename); goto mhd8H; Lbjtc: $ext = $this->file_ext_tolower ? strtolower(end($x)) : end($x); goto HkWmX; jjZZx: } public function limit_filename_length($filename, $length) { goto sQGsM; tByVi: return substr($filename, 0, $length - strlen($ext)) . $ext; goto bkFyz; gAt7a: $ext = ''; goto qvkV1; sQGsM: if (strlen($filename) < $length) { return $filename; } goto gAt7a; qvkV1: if (strpos($filename, "\56") !== FALSE) { goto awiDM; Q7S1b: $ext = "\56" . array_pop($parts); goto Xinj9; Xinj9: $filename = implode("\56", $parts); goto Uc6jW; awiDM: $parts = explode("\x2e", $filename); goto Q7S1b; Uc6jW: } goto tByVi; bkFyz: } public function do_xss_clean() { goto tr3yw; qi3BL: return $this->_CI->security->xss_clean($data, TRUE); goto Vzono; I50S_: if (filesize($file) == 0) { return FALSE; } goto W0YUO; W0YUO: if (memory_get_usage() && ($memory_limit = ini_get("\x6d\145\155\157\x72\171\137\154\151\x6d\x69\x74")) > 0) { goto nskM3; U_zPa: ini_set("\155\145\x6d\x6f\x72\x79\137\154\x69\155\x69\x74", $memory_limit); goto nx0vr; nskM3: $memory_limit = str_split($memory_limit, strspn($memory_limit, "\61\x32\x33\64\x35\x36\67\x38\71\x30")); goto Ekqr8; UZroD: $memory_limit = (int) ceil(filesize($file) + $memory_limit[0]); goto U_zPa; Ekqr8: if (!empty($memory_limit[1])) { switch ($memory_limit[1][0]) { case "\147": case "\107": $memory_limit[0] *= 1024 * 1024 * 1024; break; case "\155": case "\x4d": $memory_limit[0] *= 1024 * 1024; break; default: break; } } goto UZroD; nx0vr: } goto rZDUV; rZDUV: if (function_exists("\x67\145\164\x69\x6d\x61\x67\x65\163\x69\172\x65") && @getimagesize($file) !== FALSE) { goto qqeR8; mIDhL: $opening_bytes = fread($file, 256); goto WNY6v; qqeR8: if (($file = @fopen($file, "\x72\x62")) === FALSE) { return FALSE; } goto mIDhL; WNY6v: fclose($file); goto lU_49; lU_49: return !preg_match("\x2f\x3c\50\x61\174\142\x6f\x64\171\174\x68\x65\141\x64\x7c\x68\164\x6d\x6c\174\x69\x6d\x67\174\x70\154\141\x69\156\x74\145\170\x74\x7c\160\162\145\174\x73\143\x72\x69\x70\x74\x7c\x74\x61\142\x6c\x65\174\164\151\x74\x6c\x65\51\x5b\x5c\163\x3e\x5d\57\x69", $opening_bytes); goto fK7aM; fK7aM: } goto oO0Nb; oO0Nb: if (($data = @file_get_contents($file)) === FALSE) { return FALSE; } goto qi3BL; tr3yw: $file = $this->file_temp; goto I50S_; Vzono: } public function set_error($msg, $log_level = "\x65\x72\x72\157\x72") { goto EiNVi; EiNVi: $this->_CI->lang->load("\165\x70\x6c\x6f\141\x64"); goto cisd9; GvuEk: return $this; goto lSOiK; cisd9: is_array($msg) or $msg = array($msg); goto h7rAM; h7rAM: foreach ($msg as $val) { goto Q6w6_; Tz1oF: $this->error_msg[] = $msg; goto X73Pg; X73Pg: log_message($log_level, $msg); goto vDoIv; Q6w6_: $msg = $this->_CI->lang->line($val) === FALSE ? $val : $this->_CI->lang->line($val); goto Tz1oF; vDoIv: } goto GvuEk; lSOiK: } public function display_errors($open = "\x3c\160\76", $close = "\74\57\x70\76") { return count($this->error_msg) > 0 ? $open . implode($close . $open, $this->error_msg) . $close : ''; } protected function _prep_filename($filename) { goto OdbYT; UR2eu: $filename = substr($filename, 0, $ext_pos); goto ida45; RiBEF: $ext = substr($filename, $ext_pos); goto UR2eu; ida45: return str_replace("\56", "\137", $filename) . $ext; goto DJUlN; OdbYT: if ($this->mod_mime_fix === FALSE or $this->allowed_types === "\52" or ($ext_pos = strrpos($filename, "\56")) === FALSE) { return $filename; } goto RiBEF; DJUlN: } protected function _file_mime_type($file) { goto aj8b5; jQBje: $this->file_type = $file["\164\x79\x70\x65"]; goto z1ILq; aj8b5: $regexp = "\x2f\136\x28\x5b\x61\x2d\x7a\134\55\135\x2b\x5c\57\133\x61\55\172\60\x2d\x39\x5c\x2d\x5c\56\x5c\53\135\53\51\50\x3b\134\x73\x2e\53\51\x3f\44\x2f"; goto i1Rnj; i1Rnj: if (function_exists("\146\x69\x6e\x66\157\x5f\146\151\154\145")) { $finfo = @finfo_open(FILEINFO_MIME); if (is_resource($finfo)) { goto CTRrQ; CTRrQ: $mime = @finfo_file($finfo, $file["\x74\x6d\x70\x5f\x6e\x61\x6d\x65"]); goto UlEFP; UlEFP: finfo_close($finfo); goto DMESn; DMESn: if (is_string($mime) && preg_match($regexp, $mime, $matches)) { $this->file_type = $matches[1]; return; } goto ZOqi6; ZOqi6: } } goto wi7Bl; wi7Bl: if (DIRECTORY_SEPARATOR !== "\134") { goto qHMPk; QpFCS: if (!ini_get("\x73\141\x66\x65\137\x6d\157\x64\145") && function_usable("\163\150\x65\154\x6c\137\x65\170\x65\143")) { $mime = @shell_exec($cmd); if (strlen($mime) > 0) { $mime = explode("\xa", trim($mime)); if (preg_match($regexp, $mime[count($mime) - 1], $matches)) { $this->file_type = $matches[1]; return; } } } goto prcqY; prcqY: if (function_usable("\x70\x6f\x70\145\x6e")) { $proc = @popen($cmd, "\x72"); if (is_resource($proc)) { goto ZErE1; ZErE1: $mime = @fread($proc, 512); goto zJn36; zJn36: @pclose($proc); goto VGBad; VGBad: if ($mime !== FALSE) { $mime = explode("\xa", trim($mime)); if (preg_match($regexp, $mime[count($mime) - 1], $matches)) { $this->file_type = $matches[1]; return; } } goto G7U9I; G7U9I: } } goto Gjmt_; qHMPk: $cmd = function_exists("\x65\x73\143\141\x70\x65\x73\150\145\x6c\x6c\x61\x72\147") ? "\146\x69\154\x65\40\x2d\55\142\162\x69\x65\x66\x20\x2d\55\x6d\151\x6d\145\x20" . escapeshellarg($file["\164\x6d\160\x5f\x6e\141\x6d\145"]) . "\x20\62\76\x26\61" : "\146\151\154\x65\x20\x2d\x2d\142\162\x69\x65\146\x20\55\x2d\155\x69\155\x65\40" . $file["\x74\155\x70\137\156\x61\x6d\145"] . "\40\x32\x3e\x26\61"; goto Q7Ney; Q7Ney: if (function_usable("\x65\170\145\x63")) { $mime = @exec($cmd, $mime, $return_status); if ($return_status === 0 && is_string($mime) && preg_match($regexp, $mime, $matches)) { $this->file_type = $matches[1]; return; } } goto QpFCS; Gjmt_: } goto XtVgp; XtVgp: if (function_exists("\155\x69\x6d\x65\x5f\x63\157\x6e\x74\145\156\x74\137\164\x79\x70\x65")) { $this->file_type = @mime_content_type($file["\164\x6d\160\x5f\x6e\141\155\145"]); if (strlen($this->file_type) > 0) { return; } } goto jQBje; z1ILq: } }
