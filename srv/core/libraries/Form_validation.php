<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\x42\101\x53\105\120\101\x54\x48") or exit("\x4e\157\x20\144\151\x72\x65\x63\164\40\163\143\162\x69\160\164\x20\x61\x63\x63\145\x73\x73\40\141\x6c\154\157\167\145\x64"); class CI_Form_validation { protected $CI; protected $_field_data = array(); protected $_config_rules = array(); protected $_error_array = array(); protected $_error_messages = array(); protected $_error_prefix = "\x3c\x70\76"; protected $_error_suffix = "\x3c\x2f\160\76"; protected $error_string = ''; protected $_safe_form_data = FALSE; public $validation_data = array(); public function __construct($rules = array()) { goto wdpVr; wdpVr: $this->CI =& get_instance(); goto ousSf; r0_29: log_message("\x69\156\146\x6f", "\x46\x6f\162\x6d\40\126\x61\154\x69\144\x61\164\x69\x6f\156\40\x43\x6c\141\163\163\40\111\156\151\x74\x69\x61\154\151\x7a\x65\144"); goto zv7V6; Vlv37: $this->CI->load->helper("\146\x6f\x72\155"); goto r0_29; ousSf: if (isset($rules["\x65\162\162\x6f\162\x5f\160\x72\145\146\151\x78"])) { $this->_error_prefix = $rules["\145\x72\162\x6f\162\137\x70\162\145\x66\x69\x78"]; unset($rules["\x65\162\162\x6f\162\137\160\162\145\146\x69\170"]); } goto XrU5e; XrU5e: if (isset($rules["\x65\162\162\157\162\x5f\163\165\146\146\x69\170"])) { $this->_error_suffix = $rules["\145\162\x72\x6f\162\137\x73\165\x66\x66\151\x78"]; unset($rules["\x65\162\162\x6f\x72\x5f\163\x75\146\x66\x69\170"]); } goto uveSA; uveSA: $this->_config_rules = $rules; goto Vlv37; zv7V6: } public function set_rules($field, $label = '', $rules = array(), $errors = array()) { goto kSAuO; kSAuO: if ($this->CI->input->method() !== "\160\x6f\163\164" && empty($this->validation_data)) { return $this; } goto QqgO2; pxRVw: if (!is_string($field) or $field === '' or empty($rules)) { return $this; } elseif (!is_array($rules)) { if (!is_string($rules)) { return $this; } $rules = preg_split("\57\x5c\174\x28\77\x21\x5b\x5e\134\x5b\135\52\x5c\x5d\x29\x2f", $rules); } goto wkM9t; avGcl: return $this; goto mV1bD; QqgO2: if (is_array($field)) { foreach ($field as $row) { goto fKPDC; fKPDC: if (!isset($row["\146\151\x65\154\x64"], $row["\x72\x75\x6c\145\x73"])) { continue; } goto Y3HaD; WBqMW: $errors = isset($row["\145\162\162\157\x72\163"]) && is_array($row["\145\x72\x72\x6f\x72\x73"]) ? $row["\145\162\162\157\x72\x73"] : array(); goto IIwSP; Y3HaD: $label = isset($row["\x6c\x61\142\145\x6c"]) ? $row["\x6c\141\142\145\154"] : $row["\x66\x69\145\154\144"]; goto WBqMW; IIwSP: $this->set_rules($row["\146\x69\x65\x6c\144"], $label, $row["\162\165\x6c\x65\x73"], $errors); goto VzHs7; VzHs7: } return $this; } goto pxRVw; Coc1t: $indexes = array(); goto dWrc7; VGHIv: $this->_field_data[$field] = array("\x66\151\x65\x6c\144" => $field, "\154\141\142\x65\154" => $label, "\162\165\154\145\163" => $rules, "\x65\162\162\x6f\x72\x73" => $errors, "\151\x73\137\x61\162\162\141\x79" => $is_array, "\153\145\171\x73" => $indexes, "\x70\x6f\163\164\x64\x61\164\x61" => NULL, "\x65\162\x72\157\162" => ''); goto avGcl; wkM9t: $label = $label === '' ? $field : $label; goto Coc1t; dWrc7: if (($is_array = (bool) preg_match_all("\57\134\x5b\50\x2e\52\x3f\51\134\x5d\x2f", $field, $matches)) === TRUE) { sscanf($field, "\x25\133\x5e\x5b\x5d\x5b", $indexes[0]); for ($i = 0, $c = count($matches[0]); $i < $c; $i++) { if ($matches[1][$i] !== '') { $indexes[] = $matches[1][$i]; } } } goto VGHIv; mV1bD: } public function set_data(array $data) { if (!empty($data)) { $this->validation_data = $data; } return $this; } public function set_message($lang, $val = '') { goto OsC8h; AEc3n: return $this; goto O2fIe; uvLdU: $this->_error_messages = array_merge($this->_error_messages, $lang); goto AEc3n; OsC8h: if (!is_array($lang)) { $lang = array($lang => $val); } goto uvLdU; O2fIe: } public function set_error_delimiters($prefix = "\74\x70\76", $suffix = "\74\57\160\x3e") { goto PV2r5; PV2r5: $this->_error_prefix = $prefix; goto p8MmI; sFvya: return $this; goto ljBW4; p8MmI: $this->_error_suffix = $suffix; goto sFvya; ljBW4: } public function error($field, $prefix = '', $suffix = '') { goto Sc8bI; J00qy: if ($suffix === '') { $suffix = $this->_error_suffix; } goto TYNI1; TYNI1: return $prefix . $this->_field_data[$field]["\145\162\x72\x6f\162"] . $suffix; goto vERy2; U_CKU: if ($prefix === '') { $prefix = $this->_error_prefix; } goto J00qy; Sc8bI: if (empty($this->_field_data[$field]["\145\162\162\x6f\162"])) { return ''; } goto U_CKU; vERy2: } public function error_array() { return $this->_error_array; } public function error_string($prefix = '', $suffix = '') { goto A2Kfb; b71Ui: foreach ($this->_error_array as $val) { if ($val !== '') { $str .= $prefix . $val . $suffix . "\12"; } } goto K44NP; A2Kfb: if (count($this->_error_array) === 0) { return ''; } goto EInfs; y82yQ: if ($suffix === '') { $suffix = $this->_error_suffix; } goto Wseao; EInfs: if ($prefix === '') { $prefix = $this->_error_prefix; } goto y82yQ; Wseao: $str = ''; goto b71Ui; K44NP: return $str; goto rfmcG; rfmcG: } public function run($group = '') { goto J6K9n; Q2m4_: $total_errors = count($this->_error_array); goto fZ_Us; ULg32: return $total_errors === 0; goto al1nK; ZURIg: empty($this->validation_data) && $this->_reset_post_array(); goto ULg32; f6S39: foreach ($this->_field_data as $field => &$row) { if (empty($row["\x72\x75\154\145\x73"])) { continue; } $this->_execute($row, $row["\162\x75\x6c\x65\163"], $row["\160\x6f\x73\x74\144\x61\x74\x61"]); } goto Q2m4_; khpRK: foreach ($this->_field_data as $field => &$row) { if ($row["\x69\163\x5f\141\162\162\141\171"] === TRUE) { $this->_field_data[$field]["\x70\157\163\164\144\141\x74\141"] = $this->_reduce_array($validation_array, $row["\x6b\145\x79\163"]); } elseif (isset($validation_array[$field])) { $this->_field_data[$field]["\x70\x6f\x73\164\144\141\x74\141"] = $validation_array[$field]; } } goto f6S39; fRPSr: if (count($this->_field_data) === 0) { goto pv1ed; GhlxB: if (count($this->_field_data) === 0) { log_message("\144\x65\x62\x75\147", "\125\156\x61\142\154\x65\40\164\157\40\146\x69\x6e\x64\40\166\141\x6c\x69\x64\141\164\151\x6f\x6e\40\162\x75\x6c\145\163"); return FALSE; } goto ADOtM; V0kMJ: if (empty($group)) { $group = trim($this->CI->uri->ruri_string(), "\57"); isset($this->_config_rules[$group]) or $group = $this->CI->router->class . "\57" . $this->CI->router->method; } goto e5Pl3; pv1ed: if (count($this->_config_rules) === 0) { return FALSE; } goto V0kMJ; e5Pl3: $this->set_rules(isset($this->_config_rules[$group]) ? $this->_config_rules[$group] : $this->_config_rules); goto GhlxB; ADOtM: } goto mfe8h; fZ_Us: if ($total_errors > 0) { $this->_safe_form_data = TRUE; } goto ZURIg; mfe8h: $this->CI->lang->load("\x66\x6f\x72\x6d\x5f\x76\x61\154\x69\x64\x61\164\x69\x6f\156"); goto khpRK; J6K9n: $validation_array = empty($this->validation_data) ? $_POST : $this->validation_data; goto fRPSr; al1nK: } protected function _prepare_rules($rules) { goto xYXno; ljJBC: $callbacks = array(); goto LUauD; LUauD: foreach ($rules as &$rule) { if ($rule === "\162\x65\x71\x75\151\162\x65\144") { array_unshift($new_rules, "\x72\145\x71\x75\x69\x72\145\x64"); } elseif ($rule === "\x69\x73\163\145\x74" && (empty($new_rules) or $new_rules[0] !== "\x72\x65\161\165\151\162\x65\x64")) { array_unshift($new_rules, "\151\163\x73\145\x74"); } elseif (is_string($rule) && strncmp("\x63\141\154\154\x62\x61\x63\x6b\137", $rule, 9) === 0) { $callbacks[] = $rule; } elseif (is_callable($rule)) { $callbacks[] = $rule; } elseif (is_array($rule) && isset($rule[0], $rule[1]) && is_callable($rule[1])) { $callbacks[] = $rule; } else { $new_rules[] = $rule; } } goto JCNuV; xYXno: $new_rules = array(); goto ljJBC; JCNuV: return array_merge($callbacks, $new_rules); goto eT4g6; eT4g6: } protected function _reduce_array($array, $keys, $i = 0) { if (is_array($array) && isset($keys[$i])) { return isset($array[$keys[$i]]) ? $this->_reduce_array($array[$keys[$i]], $keys, $i + 1) : NULL; } return $array === '' ? NULL : $array; } protected function _reset_post_array() { foreach ($this->_field_data as $field => $row) { if ($row["\x70\157\163\x74\x64\141\x74\141"] !== NULL) { if ($row["\x69\x73\x5f\x61\162\162\141\171"] === FALSE) { isset($_POST[$field]) && ($_POST[$field] = is_array($row["\160\157\x73\x74\x64\x61\x74\x61"]) ? NULL : $row["\160\157\163\x74\x64\141\x74\141"]); } else { goto t0LMy; RGDFr: $post_ref = $row["\160\157\163\x74\x64\x61\x74\x61"]; goto SJroT; oyI8F: if (count($row["\x6b\145\x79\163"]) === 1) { $post_ref =& $post_ref[current($row["\x6b\x65\x79\x73"])]; } else { foreach ($row["\153\x65\171\163"] as $val) { $post_ref =& $post_ref[$val]; } } goto RGDFr; t0LMy: $post_ref =& $_POST; goto oyI8F; SJroT: } } } } protected function _execute($row, $rules, $postdata = NULL, $cycles = 0) { goto S8vy0; S8vy0: if (is_array($postdata) && !empty($postdata)) { foreach ($postdata as $key => $val) { $this->_execute($row, $rules, $val, $key); } return; } goto hzdJ3; hzdJ3: $rules = $this->_prepare_rules($rules); goto oQ87h; oQ87h: foreach ($rules as $rule) { goto Zqkn2; pzVPI: $param = FALSE; goto sNVB2; otbDV: if ($row["\151\x73\137\x61\x72\x72\141\171"] === TRUE && is_array($this->_field_data[$row["\146\151\145\x6c\144"]]["\x70\x6f\x73\164\144\x61\164\x61"])) { goto Q_8dH; Q_8dH: if (!isset($this->_field_data[$row["\x66\151\145\154\144"]]["\x70\x6f\163\x74\144\141\x74\141"][$cycles])) { continue; } goto RY8c9; rbko3: $_in_array = TRUE; goto XhLu3; RY8c9: $postdata = $this->_field_data[$row["\146\151\x65\x6c\x64"]]["\160\x6f\x73\x74\x64\x61\x74\141"][$cycles]; goto rbko3; XhLu3: } else { $postdata = is_array($this->_field_data[$row["\x66\x69\145\154\x64"]]["\x70\157\x73\x74\x64\141\x74\x61"]) ? NULL : $this->_field_data[$row["\x66\x69\145\154\144"]]["\160\x6f\x73\x74\x64\141\164\x61"]; } goto Bd8NH; Bd8NH: $callback = $callable = FALSE; goto vgnW6; vgnW6: if (is_string($rule)) { if (strpos($rule, "\143\x61\x6c\x6c\x62\141\143\153\137") === 0) { $rule = substr($rule, 9); $callback = TRUE; } } elseif (is_callable($rule)) { $callable = TRUE; } elseif (is_array($rule) && isset($rule[0], $rule[1]) && is_callable($rule[1])) { $callable = $rule[0]; $rule = $rule[1]; } goto pzVPI; sNVB2: if (!$callable && preg_match("\57\x28\x2e\52\x3f\51\134\x5b\x28\x2e\52\x29\x5c\x5d\x2f", $rule, $match)) { $rule = $match[1]; $param = $match[2]; } goto hajGS; hajGS: if (($postdata === NULL or $postdata === '') && $callback === FALSE && $callable === FALSE && !in_array($rule, array("\x72\145\x71\165\x69\162\x65\x64", "\151\x73\163\145\x74", "\155\x61\164\143\x68\145\x73"), TRUE)) { continue; } goto bZ0x7; bZ0x7: if ($callback or $callable !== FALSE) { if ($callback) { if (!method_exists($this->CI, $rule)) { log_message("\144\x65\142\165\x67", "\x55\156\141\142\154\x65\x20\164\x6f\x20\x66\151\x6e\x64\40\143\141\154\154\142\x61\143\x6b\x20\166\x61\154\x69\x64\x61\164\x69\x6f\156\40\162\165\154\x65\x3a\40" . $rule); $result = FALSE; } else { $result = $this->CI->{$rule}($postdata, $param); } } else { $result = is_array($rule) ? $rule[0]->{$rule[1]}($postdata) : $rule($postdata); if ($callable !== FALSE) { $rule = $callable; } } if ($_in_array === TRUE) { $this->_field_data[$row["\x66\x69\145\x6c\144"]]["\160\157\x73\x74\x64\141\x74\x61"][$cycles] = is_bool($result) ? $postdata : $result; } else { $this->_field_data[$row["\x66\x69\145\154\x64"]]["\160\x6f\x73\x74\x64\141\x74\x61"] = is_bool($result) ? $postdata : $result; } } elseif (!method_exists($this, $rule)) { if (function_exists($rule)) { $result = $param !== FALSE ? $rule($postdata, $param) : $rule($postdata); if ($_in_array === TRUE) { $this->_field_data[$row["\146\151\145\x6c\x64"]]["\160\157\163\164\144\141\x74\141"][$cycles] = is_bool($result) ? $postdata : $result; } else { $this->_field_data[$row["\146\151\x65\x6c\144"]]["\160\157\163\x74\x64\x61\164\x61"] = is_bool($result) ? $postdata : $result; } } else { log_message("\x64\x65\x62\165\147", "\x55\x6e\141\142\x6c\x65\x20\164\x6f\x20\x66\151\156\144\x20\x76\x61\x6c\151\144\141\164\151\x6f\x6e\40\x72\x75\154\145\72\40" . $rule); $result = FALSE; } } else { $result = $this->{$rule}($postdata, $param); if ($_in_array === TRUE) { $this->_field_data[$row["\x66\x69\x65\154\144"]]["\x70\x6f\x73\164\x64\x61\x74\141"][$cycles] = is_bool($result) ? $postdata : $result; } else { $this->_field_data[$row["\146\151\145\154\144"]]["\x70\157\163\x74\144\141\x74\141"] = is_bool($result) ? $postdata : $result; } } goto GDYmh; Zqkn2: $_in_array = FALSE; goto otbDV; GDYmh: if ($result === FALSE) { goto FCkUi; ZiiV1: if (!isset($this->_error_array[$row["\x66\x69\x65\x6c\x64"]])) { $this->_error_array[$row["\146\151\x65\x6c\144"]] = $message; } goto nKmU8; FCkUi: if (!is_string($rule)) { $line = $this->CI->lang->line("\x66\157\x72\x6d\x5f\x76\x61\x6c\151\144\141\x74\151\157\x6e\x5f\x65\162\162\157\x72\137\x6d\145\x73\x73\141\147\145\x5f\156\157\x74\x5f\163\145\164") . "\50\x41\x6e\x6f\x6e\x79\155\x6f\165\163\40\146\165\x6e\143\164\151\x6f\x6e\51"; } else { $line = $this->_get_error_message($rule, $row["\146\151\x65\154\x64"]); } goto Qgta1; XWCPN: $this->_field_data[$row["\146\151\x65\154\x64"]]["\x65\x72\x72\157\x72"] = $message; goto ZiiV1; Qgta1: if (isset($this->_field_data[$param], $this->_field_data[$param]["\x6c\141\142\145\x6c"])) { $param = $this->_translate_fieldname($this->_field_data[$param]["\x6c\141\x62\x65\154"]); } goto dgTPT; nKmU8: return; goto HBgQx; dgTPT: $message = $this->_build_error_msg($line, $this->_translate_fieldname($row["\x6c\141\x62\145\154"]), $param); goto XWCPN; HBgQx: } goto iDSR2; iDSR2: } goto BNkaZ; BNkaZ: } protected function _get_error_message($rule, $field) { if (isset($this->_field_data[$field]["\145\162\162\157\x72\163"][$rule])) { return $this->_field_data[$field]["\145\x72\x72\x6f\x72\x73"][$rule]; } elseif (isset($this->_error_messages[$rule])) { return $this->_error_messages[$rule]; } elseif (FALSE !== ($line = $this->CI->lang->line("\146\157\162\155\x5f\166\141\154\151\x64\x61\x74\x69\157\x6e\137" . $rule))) { return $line; } elseif (FALSE !== ($line = $this->CI->lang->line($rule, FALSE))) { return $line; } return $this->CI->lang->line("\x66\x6f\162\155\x5f\x76\141\154\x69\x64\x61\164\151\x6f\x6e\137\x65\x72\x72\157\162\137\155\x65\x73\x73\x61\147\145\137\156\x6f\164\x5f\163\145\x74") . "\x28" . $rule . "\51"; } protected function _translate_fieldname($fieldname) { if (sscanf($fieldname, "\x6c\141\156\x67\72\45\x73", $line) === 1 && FALSE === ($fieldname = $this->CI->lang->line($line, FALSE))) { return $line; } return $fieldname; } protected function _build_error_msg($line, $field = '', $param = '') { if (strpos($line, "\45\x73") !== FALSE) { return sprintf($line, $field, $param); } return str_replace(array("\x7b\146\151\145\154\x64\175", "\x7b\160\x61\x72\x61\x6d\x7d"), array($field, $param), $line); } public function has_rule($field) { return isset($this->_field_data[$field]); } public function set_value($field = '', $default = '') { goto ZHtbc; uKOY8: return $this->_field_data[$field]["\160\x6f\x73\x74\x64\x61\x74\141"]; goto y1jXI; Ib4Xx: if (is_array($this->_field_data[$field]["\160\x6f\163\x74\x64\x61\x74\x61"])) { return array_shift($this->_field_data[$field]["\x70\157\x73\164\x64\x61\164\x61"]); } goto uKOY8; ZHtbc: if (!isset($this->_field_data[$field], $this->_field_data[$field]["\160\157\x73\164\144\x61\x74\x61"])) { return $default; } goto Ib4Xx; y1jXI: } public function set_select($field = '', $value = '', $default = FALSE) { goto tDH2z; vMBNt: $field = $this->_field_data[$field]["\160\157\163\x74\x64\x61\164\x61"]; goto CVzTM; CVzTM: $value = (string) $value; goto gSPM3; gSPM3: if (is_array($field)) { foreach ($field as &$v) { if ($value === $v) { return "\x20\163\x65\x6c\145\143\164\145\x64\x3d\42\163\145\154\145\143\x74\x65\144\x22"; } } return ''; } elseif ($field === '' or $value === '' or $field !== $value) { return ''; } goto kCzu6; tDH2z: if (!isset($this->_field_data[$field], $this->_field_data[$field]["\x70\157\x73\x74\144\x61\x74\141"])) { return $default === TRUE && count($this->_field_data) === 0 ? "\40\163\145\x6c\145\143\164\145\144\x3d\42\163\x65\154\145\x63\164\x65\x64\x22" : ''; } goto vMBNt; kCzu6: return "\40\163\x65\x6c\x65\143\x74\145\144\75\x22\x73\x65\x6c\x65\x63\x74\x65\144\42"; goto R_Ryc; R_Ryc: } public function set_radio($field = '', $value = '', $default = FALSE) { goto VN4ng; hzeCy: $value = (string) $value; goto pqYxH; YZtwQ: $field = $this->_field_data[$field]["\160\157\163\164\x64\141\x74\141"]; goto hzeCy; pqYxH: if (is_array($field)) { foreach ($field as &$v) { if ($value === $v) { return "\x20\143\150\145\143\x6b\x65\144\75\x22\x63\x68\145\x63\x6b\x65\144\x22"; } } return ''; } elseif ($field === '' or $value === '' or $field !== $value) { return ''; } goto dUKgi; VN4ng: if (!isset($this->_field_data[$field], $this->_field_data[$field]["\x70\157\x73\164\144\141\x74\141"])) { return $default === TRUE && count($this->_field_data) === 0 ? "\40\143\150\145\x63\153\x65\x64\x3d\42\143\x68\x65\x63\x6b\x65\x64\42" : ''; } goto YZtwQ; dUKgi: return "\40\143\150\x65\143\153\145\144\x3d\42\143\150\x65\143\153\145\144\42"; goto jPUbN; jPUbN: } public function set_checkbox($field = '', $value = '', $default = FALSE) { return $this->set_radio($field, $value, $default); } public function required($str) { return is_array($str) ? empty($str) === FALSE : trim($str) !== ''; } public function regex_match($str, $regex) { return (bool) preg_match($regex, $str); } public function matches($str, $field) { return isset($this->_field_data[$field], $this->_field_data[$field]["\160\x6f\x73\x74\144\x61\164\x61"]) ? $str === $this->_field_data[$field]["\x70\157\163\164\144\141\x74\x61"] : FALSE; } public function differs($str, $field) { return !(isset($this->_field_data[$field]) && $this->_field_data[$field]["\160\x6f\163\164\x64\141\164\x61"] === $str); } public function is_unique($str, $field) { sscanf($field, "\x25\x5b\x5e\56\x5d\x2e\45\x5b\x5e\56\x5d", $table, $field); return isset($this->CI->db) ? $this->CI->db->limit(1)->get_where($table, array($field => $str))->num_rows() === 0 : FALSE; } public function min_length($str, $val) { if (!is_numeric($val)) { return FALSE; } return $val <= mb_strlen($str); } public function max_length($str, $val) { if (!is_numeric($val)) { return FALSE; } return $val >= mb_strlen($str); } public function exact_length($str, $val) { if (!is_numeric($val)) { return FALSE; } return mb_strlen($str) === (int) $val; } public function valid_url($str) { goto FW2ys; Xu14M: return filter_var("\150\x74\x74\x70\72\x2f\x2f" . $str, FILTER_VALIDATE_URL) !== FALSE; goto QEktE; CnIOX: if (ctype_digit($str)) { return FALSE; } goto hSzqm; FW2ys: if (empty($str)) { return FALSE; } elseif (preg_match("\57\x5e\x28\x3f\x3a\50\x5b\x5e\72\x5d\52\x29\134\x3a\51\77\x5c\57\134\x2f\x28\56\x2b\x29\x24\x2f", $str, $matches)) { if (empty($matches[2])) { return FALSE; } elseif (!in_array(strtolower($matches[1]), array("\150\164\164\x70", "\150\x74\164\160\163"), TRUE)) { return FALSE; } $str = $matches[2]; } goto CnIOX; hSzqm: if (preg_match("\57\x5e\x5c\x5b\50\x5b\x5e\x5c\135\135\53\51\x5c\135\57", $str, $matches) && !is_php("\x37") && filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) !== FALSE) { $str = "\151\160\166\x36\x2e\150\157\163\x74" . substr($str, strlen($matches[1]) + 2); } goto Xu14M; QEktE: } public function valid_email($str) { if (function_exists("\151\x64\156\x5f\164\x6f\x5f\x61\x73\x63\x69\x69") && preg_match("\x23\134\x41\x28\133\x5e\100\135\x2b\x29\x40\x28\56\53\x29\134\x7a\x23", $str, $matches)) { $domain = defined("\x49\116\x54\114\137\111\x44\x4e\101\137\x56\x41\x52\x49\x41\116\x54\137\x55\124\123\64\x36") ? idn_to_ascii($matches[2], 0, INTL_IDNA_VARIANT_UTS46) : idn_to_ascii($matches[2]); if ($domain !== FALSE) { $str = $matches[1] . "\100" . $domain; } } return (bool) filter_var($str, FILTER_VALIDATE_EMAIL); } public function valid_emails($str) { goto d3SNh; DW7DA: foreach (explode("\54", $str) as $email) { if (trim($email) !== '' && $this->valid_email(trim($email)) === FALSE) { return FALSE; } } goto qdUle; qdUle: return TRUE; goto gPxYj; d3SNh: if (strpos($str, "\54") === FALSE) { return $this->valid_email(trim($str)); } goto DW7DA; gPxYj: } public function valid_ip($ip, $which = '') { return $this->CI->input->valid_ip($ip, $which); } public function alpha($str) { return ctype_alpha($str); } public function alpha_numeric($str) { return ctype_alnum((string) $str); } public function alpha_numeric_spaces($str) { return (bool) preg_match("\57\x5e\133\x41\x2d\132\60\55\x39\x20\x5d\x2b\x24\x2f\151", $str); } public function alpha_dash($str) { return (bool) preg_match("\57\136\133\141\x2d\172\x30\x2d\x39\x5f\55\135\x2b\x24\x2f\151", $str); } public function numeric($str) { return (bool) preg_match("\57\136\x5b\x5c\x2d\x2b\x5d\x3f\x5b\x30\x2d\x39\x5d\x2a\x5c\x2e\77\x5b\60\x2d\x39\135\x2b\44\57", $str); } public function integer($str) { return (bool) preg_match("\x2f\x5e\133\134\55\53\135\77\133\60\55\x39\x5d\x2b\44\x2f", $str); } public function decimal($str) { return (bool) preg_match("\57\x5e\x5b\x5c\55\x2b\135\77\x5b\60\55\x39\x5d\53\x5c\56\133\x30\55\x39\135\53\44\x2f", $str); } public function greater_than($str, $min) { return is_numeric($str) ? $str > $min : FALSE; } public function greater_than_equal_to($str, $min) { return is_numeric($str) ? $str >= $min : FALSE; } public function less_than($str, $max) { return is_numeric($str) ? $str < $max : FALSE; } public function less_than_equal_to($str, $max) { return is_numeric($str) ? $str <= $max : FALSE; } public function in_list($value, $list) { return in_array($value, explode("\54", $list), TRUE); } public function is_natural($str) { return ctype_digit((string) $str); } public function is_natural_no_zero($str) { return $str != 0 && ctype_digit((string) $str); } public function valid_base64($str) { return base64_encode(base64_decode($str)) === $str; } public function prep_for_form($data) { goto ERbXx; ERbXx: if ($this->_safe_form_data === FALSE or empty($data)) { return $data; } goto rgZs0; Z1xhS: return str_replace(array("\x27", "\x22", "\74", "\x3e"), array("\46\43\x33\x39\73", "\x26\x71\165\x6f\x74\x3b", "\x26\154\x74\x3b", "\x26\147\x74\73"), stripslashes($data)); goto THcXQ; rgZs0: if (is_array($data)) { foreach ($data as $key => $val) { $data[$key] = $this->prep_for_form($val); } return $data; } goto Z1xhS; THcXQ: } public function prep_url($str = '') { goto qEuwa; jgn7N: return $str; goto KCtO1; o5n2O: if (strpos($str, "\150\164\164\x70\x3a\x2f\x2f") !== 0 && strpos($str, "\150\164\x74\160\x73\72\x2f\x2f") !== 0) { return "\x68\x74\164\x70\72\x2f\57" . $str; } goto jgn7N; qEuwa: if ($str === "\x68\x74\164\x70\x3a\x2f\57" or $str === '') { return ''; } goto o5n2O; KCtO1: } public function strip_image_tags($str) { return $this->CI->security->strip_image_tags($str); } public function encode_php_tags($str) { return str_replace(array("\74\77", "\77\x3e"), array("\x26\154\x74\x3b\77", "\77\46\147\x74\x3b"), $str); } public function reset_validation() { goto L_r6M; L_r6M: $this->_field_data = array(); goto yCfk3; oOpah: $this->error_string = ''; goto qr7cB; yCfk3: $this->_error_array = array(); goto zijGU; zijGU: $this->_error_messages = array(); goto oOpah; qr7cB: return $this; goto f1gK9; f1gK9: } }
