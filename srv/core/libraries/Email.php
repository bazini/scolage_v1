<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:17              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\x41\123\x45\120\101\x54\110") or exit("\x4e\157\x20\144\151\x72\x65\x63\x74\x20\163\143\x72\x69\x70\x74\x20\x61\143\143\145\163\x73\x20\141\x6c\x6c\157\x77\x65\x64"); class CI_Email { public $useragent = "\x43\157\x64\145\x49\x67\156\x69\x74\x65\162"; public $mailpath = "\57\165\163\162\x2f\x73\142\x69\x6e\57\x73\145\156\x64\155\141\x69\154"; public $protocol = "\x6d\141\151\154"; public $smtp_host = ''; public $smtp_user = ''; public $smtp_pass = ''; public $smtp_port = 25; public $smtp_timeout = 5; public $smtp_keepalive = FALSE; public $smtp_crypto = ''; public $wordwrap = TRUE; public $wrapchars = 76; public $mailtype = "\x74\145\x78\x74"; public $charset = "\x55\124\106\x2d\70"; public $alt_message = ''; public $validate = FALSE; public $priority = 3; public $newline = "\xa"; public $crlf = "\xa"; public $dsn = FALSE; public $send_multipart = TRUE; public $bcc_batch_mode = FALSE; public $bcc_batch_size = 200; protected $_safe_mode = FALSE; protected $_subject = ''; protected $_body = ''; protected $_finalbody = ''; protected $_header_str = ''; protected $_smtp_connect = ''; protected $_encoding = "\70\142\x69\x74"; protected $_smtp_auth = FALSE; protected $_replyto_flag = FALSE; protected $_debug_msg = array(); protected $_recipients = array(); protected $_cc_array = array(); protected $_bcc_array = array(); protected $_headers = array(); protected $_attachments = array(); protected $_protocols = array("\155\x61\151\154", "\163\x65\x6e\x64\155\141\151\154", "\x73\x6d\x74\x70"); protected $_base_charsets = array("\x75\x73\55\141\x73\x63\x69\x69", "\x69\x73\157\55\x32\x30\62\62\55"); protected $_bit_depths = array("\67\142\x69\x74", "\70\x62\x69\x74"); protected $_priorities = array(1 => "\x31\x20\50\110\151\147\150\145\x73\164\x29", 2 => "\x32\x20\x28\110\151\147\150\51", 3 => "\x33\40\50\x4e\157\x72\155\x61\154\x29", 4 => "\x34\x20\x28\x4c\x6f\x77\51", 5 => "\65\40\50\x4c\x6f\167\145\163\164\51"); protected static $func_overload; public function __construct(array $config = array()) { goto Ckqvj; op1VK: log_message("\x69\x6e\146\x6f", "\105\155\x61\151\154\40\x43\x6c\x61\x73\163\x20\111\156\151\164\151\x61\x6c\151\172\145\144"); goto gnLXe; XWB5a: $this->_safe_mode = !is_php("\65\56\64") && ini_get("\163\x61\x66\145\x5f\x6d\x6f\144\x65"); goto AGWFo; gIJ4v: $this->initialize($config); goto XWB5a; Ckqvj: $this->charset = config_item("\143\150\x61\162\163\x65\164"); goto gIJ4v; AGWFo: isset(self::$func_overload) or self::$func_overload = extension_loaded("\155\x62\163\164\162\151\x6e\147") && ini_get("\155\142\163\x74\162\x69\x6e\147\x2e\146\x75\156\x63\137\157\x76\145\162\x6c\x6f\x61\x64"); goto op1VK; gnLXe: } public function initialize(array $config = array()) { goto ZQbPO; ZQbPO: $this->clear(); goto a48UY; bNis_: return $this; goto t56Tw; Ew0Go: $this->_smtp_auth = isset($this->smtp_user[0], $this->smtp_pass[0]); goto bNis_; qAlFW: $this->charset = strtoupper($this->charset); goto Ew0Go; a48UY: foreach ($config as $key => $val) { if (isset($this->{$key})) { $method = "\163\x65\x74\137" . $key; if (method_exists($this, $method)) { $this->{$method}($val); } else { $this->{$key} = $val; } } } goto qAlFW; t56Tw: } public function clear($clear_attachments = FALSE) { goto c6rbh; XQ41a: $this->_cc_array = array(); goto KXPkS; nV4qR: $this->_replyto_flag = FALSE; goto GtAr_; KXPkS: $this->_bcc_array = array(); goto gIijQ; C8dwB: $this->_debug_msg = array(); goto Czi05; YfkVz: $this->_body = ''; goto zBGyI; F3aUU: return $this; goto NyJWf; zBGyI: $this->_finalbody = ''; goto ISFHK; Czi05: $this->set_header("\104\141\x74\145", $this->_set_date()); goto A3MUR; A3MUR: if ($clear_attachments !== FALSE) { $this->_attachments = array(); } goto F3aUU; GtAr_: $this->_recipients = array(); goto XQ41a; c6rbh: $this->_subject = ''; goto YfkVz; ISFHK: $this->_header_str = ''; goto nV4qR; gIijQ: $this->_headers = array(); goto C8dwB; NyJWf: } public function from($from, $name = '', $return_path = NULL) { goto jC1q3; jC1q3: if (preg_match("\57\x5c\x3c\x28\x2e\52\51\134\76\57", $from, $match)) { $from = $match[1]; } goto E6Plw; E6Plw: if ($this->validate) { $this->validate_email($this->_str_to_array($from)); if ($return_path) { $this->validate_email($this->_str_to_array($return_path)); } } goto U6HwY; rKSAc: $this->set_header("\x46\x72\157\x6d", $name . "\x20\x3c" . $from . "\76"); goto B9uaf; B9uaf: isset($return_path) or $return_path = $from; goto L1QFV; mS3Zt: return $this; goto DHlth; L1QFV: $this->set_header("\x52\145\164\165\x72\x6e\55\120\141\164\150", "\74" . $return_path . "\x3e"); goto mS3Zt; U6HwY: if ($name !== '') { if (!preg_match("\57\x5b\134\62\60\x30\x2d\x5c\x33\67\67\x5d\57", $name)) { $name = "\x22" . addcslashes($name, "\x0\56\x2e\37\x7f\47\42\x5c") . "\42"; } else { $name = $this->_prep_q_encoding($name); } } goto rKSAc; DHlth: } public function reply_to($replyto, $name = '') { goto AFUxZ; f7tke: $this->set_header("\122\145\160\x6c\171\55\124\x6f", $name . "\40\x3c" . $replyto . "\76"); goto lTqUG; U_ZVS: if ($this->validate) { $this->validate_email($this->_str_to_array($replyto)); } goto E033_; lTqUG: $this->_replyto_flag = TRUE; goto tVtwE; E033_: if ($name !== '') { if (!preg_match("\57\133\x5c\62\60\60\x2d\x5c\x33\67\67\135\x2f", $name)) { $name = "\42" . addcslashes($name, "\x0\56\56\37\177\47\x22\x5c") . "\42"; } else { $name = $this->_prep_q_encoding($name); } } goto f7tke; tVtwE: return $this; goto BHTni; AFUxZ: if (preg_match("\x2f\x5c\x3c\x28\56\52\x29\134\x3e\57", $replyto, $match)) { $replyto = $match[1]; } goto U_ZVS; BHTni: } public function to($to) { goto ygJ2X; ICLX8: $to = $this->clean_email($to); goto SAu74; ygJ2X: $to = $this->_str_to_array($to); goto ICLX8; Pc32o: $this->_recipients = $to; goto ZSJwZ; ZJ_rc: if ($this->_get_protocol() !== "\155\141\x69\x6c") { $this->set_header("\x54\x6f", implode("\54\40", $to)); } goto Pc32o; ZSJwZ: return $this; goto uxfMv; SAu74: if ($this->validate) { $this->validate_email($to); } goto ZJ_rc; uxfMv: } public function cc($cc) { goto BSH7b; fEb0z: if ($this->_get_protocol() === "\163\155\x74\160") { $this->_cc_array = $cc; } goto ufFwk; BSH7b: $cc = $this->clean_email($this->_str_to_array($cc)); goto V9w_R; V9w_R: if ($this->validate) { $this->validate_email($cc); } goto O56Ap; ufFwk: return $this; goto PrP2G; O56Ap: $this->set_header("\103\x63", implode("\54\40", $cc)); goto fEb0z; PrP2G: } public function bcc($bcc, $limit = '') { goto yqHFd; eZRRN: $bcc = $this->clean_email($this->_str_to_array($bcc)); goto t591y; Cn3Zz: return $this; goto ZNfFf; yqHFd: if ($limit !== '' && is_numeric($limit)) { $this->bcc_batch_mode = TRUE; $this->bcc_batch_size = $limit; } goto eZRRN; ZEe0i: if ($this->_get_protocol() === "\x73\x6d\164\160" or $this->bcc_batch_mode && count($bcc) > $this->bcc_batch_size) { $this->_bcc_array = $bcc; } else { $this->set_header("\102\143\143", implode("\54\x20", $bcc)); } goto Cn3Zz; t591y: if ($this->validate) { $this->validate_email($bcc); } goto ZEe0i; ZNfFf: } public function subject($subject) { goto ZFh8_; jxXOk: return $this; goto BIpCK; q30uE: $this->set_header("\123\x75\142\152\x65\143\x74", $subject); goto jxXOk; ZFh8_: $subject = $this->_prep_q_encoding($subject); goto q30uE; BIpCK: } public function message($body) { goto ZYfWJ; Kw_G3: if (!is_php("\65\x2e\x34") && get_magic_quotes_gpc()) { $this->_body = stripslashes($this->_body); } goto eMhSI; eMhSI: return $this; goto ghkWS; ZYfWJ: $this->_body = rtrim(str_replace("\15", '', $body)); goto Kw_G3; ghkWS: } public function attach($file, $disposition = '', $newname = NULL, $mime = '') { goto HiZMj; HiZMj: if ($mime === '') { goto xoQHC; xoQHC: if (strpos($file, "\x3a\57\x2f") === FALSE && !file_exists($file)) { $this->_set_error_message("\154\141\x6e\x67\x3a\x65\155\x61\x69\154\137\x61\x74\x74\141\143\x68\x6d\x65\x6e\x74\137\x6d\x69\163\x73\151\x6e\147", $file); return FALSE; } goto oLOu0; RoxdI: $mime = $this->_mime_types(pathinfo($file, PATHINFO_EXTENSION)); goto y9_jf; y9_jf: fclose($fp); goto yBQSK; oLOu0: if (!($fp = @fopen($file, "\x72\142"))) { $this->_set_error_message("\154\x61\156\147\72\x65\x6d\x61\151\x6c\x5f\141\x74\x74\141\143\150\x6d\145\156\164\137\165\x6e\x72\145\141\144\x61\142\154\x65", $file); return FALSE; } goto w5w4h; w5w4h: $file_content = stream_get_contents($fp); goto RoxdI; yBQSK: } else { $file_content =& $file; } goto kZNtv; kZNtv: $this->_attachments[] = array("\156\x61\x6d\145" => array($file, $newname), "\x64\151\163\160\157\163\x69\164\151\157\156" => empty($disposition) ? "\x61\164\x74\x61\143\150\x6d\145\x6e\x74" : $disposition, "\164\x79\x70\145" => $mime, "\x63\x6f\x6e\164\145\x6e\x74" => chunk_split(base64_encode($file_content)), "\x6d\165\x6c\x74\x69\x70\141\162\164" => "\155\151\x78\x65\x64"); goto I20iA; I20iA: return $this; goto v5xUN; v5xUN: } public function attachment_cid($filename) { for ($i = 0, $c = count($this->_attachments); $i < $c; $i++) { if ($this->_attachments[$i]["\156\141\x6d\145"][0] === $filename) { goto ONwse; HM8mD: $this->_attachments[$i]["\143\151\x64"] = uniqid(basename($this->_attachments[$i]["\156\x61\155\x65"][0]) . "\x40"); goto PlZy2; PlZy2: return $this->_attachments[$i]["\x63\151\x64"]; goto UbzAb; ONwse: $this->_attachments[$i]["\x6d\x75\154\164\151\160\x61\162\x74"] = "\162\x65\154\x61\x74\x65\144"; goto HM8mD; UbzAb: } } return FALSE; } public function set_header($header, $value) { $this->_headers[$header] = str_replace(array("\xa", "\xd"), '', $value); return $this; } protected function _str_to_array($email) { if (!is_array($email)) { return strpos($email, "\x2c") !== FALSE ? preg_split("\x2f\x5b\x5c\163\x2c\x5d\x2f", $email, -1, PREG_SPLIT_NO_EMPTY) : (array) trim($email); } return $email; } public function set_alt_message($str) { $this->alt_message = (string) $str; return $this; } public function set_mailtype($type = "\x74\145\170\x74") { $this->mailtype = $type === "\150\164\155\154" ? "\150\x74\155\154" : "\164\x65\170\164"; return $this; } public function set_wordwrap($wordwrap = TRUE) { $this->wordwrap = (bool) $wordwrap; return $this; } public function set_protocol($protocol = "\155\x61\x69\x6c") { $this->protocol = in_array($protocol, $this->_protocols, TRUE) ? strtolower($protocol) : "\x6d\141\x69\154"; return $this; } public function set_priority($n = 3) { $this->priority = preg_match("\x2f\x5e\133\61\x2d\x35\135\44\x2f", $n) ? (int) $n : 3; return $this; } public function set_newline($newline = "\12") { $this->newline = in_array($newline, array("\xa", "\xd\12", "\15")) ? $newline : "\12"; return $this; } public function set_crlf($crlf = "\xa") { $this->crlf = $crlf !== "\12" && $crlf !== "\15\12" && $crlf !== "\xd" ? "\xa" : $crlf; return $this; } protected function _get_message_id() { $from = str_replace(array("\x3e", "\x3c"), '', $this->_headers["\x52\x65\164\165\x72\156\x2d\120\141\x74\x68"]); return "\x3c" . uniqid('') . strstr($from, "\x40") . "\76"; } protected function _get_protocol() { goto K9AX9; hhBbx: return $this->protocol; goto yk0vk; q5xxT: in_array($this->protocol, $this->_protocols, TRUE) or $this->protocol = "\x6d\141\151\154"; goto hhBbx; K9AX9: $this->protocol = strtolower($this->protocol); goto q5xxT; yk0vk: } protected function _get_encoding() { goto Rd0CR; YumKZ: foreach ($this->_base_charsets as $charset) { if (strpos($this->charset, $charset) === 0) { $this->_encoding = "\67\142\x69\164"; } } goto fYjv8; Rd0CR: in_array($this->_encoding, $this->_bit_depths) or $this->_encoding = "\70\x62\x69\164"; goto YumKZ; fYjv8: return $this->_encoding; goto hW3GY; hW3GY: } protected function _get_content_type() { if ($this->mailtype === "\x68\x74\x6d\x6c") { return empty($this->_attachments) ? "\150\164\155\x6c" : "\x68\164\155\154\55\x61\164\x74\x61\x63\150"; } elseif ($this->mailtype === "\164\145\x78\164" && !empty($this->_attachments)) { return "\x70\x6c\141\151\156\55\x61\x74\x74\141\x63\x68"; } return "\160\154\x61\x69\x6e"; } protected function _set_date() { goto bObcN; xZtfk: return sprintf("\x25\x73\40\45\x73\45\60\64\x64", date("\104\54\40\x6a\40\115\x20\131\40\x48\x3a\151\x3a\163"), $operator, $timezone); goto XSNIK; EXBsP: $timezone = floor($timezone / 3600) * 100 + $timezone % 3600 / 60; goto xZtfk; NV8Ia: $timezone = abs($timezone); goto EXBsP; eRDv5: $operator = $timezone[0] === "\55" ? "\x2d" : "\x2b"; goto NV8Ia; bObcN: $timezone = date("\x5a"); goto eRDv5; XSNIK: } protected function _get_mime_message() { return "\124\x68\x69\x73\x20\151\x73\x20\141\40\155\165\154\164\151\55\160\141\x72\x74\x20\x6d\145\x73\x73\x61\147\x65\40\151\156\40\x4d\111\115\105\x20\146\157\162\155\141\x74\56" . $this->newline . "\131\x6f\x75\x72\40\x65\x6d\141\x69\154\x20\x61\x70\160\x6c\x69\x63\141\x74\151\x6f\x6e\40\x6d\141\171\x20\156\x6f\164\40\163\165\x70\x70\157\x72\164\x20\164\150\151\x73\x20\x66\157\x72\155\x61\164\56"; } public function validate_email($email) { goto dYt1W; dYt1W: if (!is_array($email)) { $this->_set_error_message("\x6c\141\x6e\147\x3a\x65\155\141\151\x6c\x5f\x6d\165\163\164\x5f\x62\x65\137\x61\x72\162\141\x79"); return FALSE; } goto N6tNg; CzJkt: return TRUE; goto p0VSP; N6tNg: foreach ($email as $val) { if (!$this->valid_email($val)) { $this->_set_error_message("\x6c\141\156\147\72\145\155\141\151\x6c\137\151\x6e\166\141\154\151\144\x5f\x61\144\x64\162\x65\x73\x73", $val); return FALSE; } } goto CzJkt; p0VSP: } public function valid_email($email) { if (function_exists("\x69\144\x6e\137\x74\x6f\137\141\x73\x63\x69\x69") && strpos($email, "\x40")) { goto PbFt2; PbFt2: list($account, $domain) = explode("\100", $email, 2); goto MVtVH; aj1tD: if ($domain !== FALSE) { $email = $account . "\100" . $domain; } goto oHiTt; MVtVH: $domain = defined("\x49\x4e\124\x4c\x5f\111\104\x4e\101\x5f\126\x41\x52\111\101\x4e\x54\x5f\x55\124\x53\x34\x36") ? idn_to_ascii($domain, 0, INTL_IDNA_VARIANT_UTS46) : idn_to_ascii($domain); goto aj1tD; oHiTt: } return (bool) filter_var($email, FILTER_VALIDATE_EMAIL); } public function clean_email($email) { goto twukj; PtIrp: return $clean_email; goto wTina; r9BVA: $clean_email = array(); goto EmMOY; EmMOY: foreach ($email as $addy) { $clean_email[] = preg_match("\x2f\x5c\74\x28\56\52\51\x5c\76\57", $addy, $match) ? $match[1] : $addy; } goto PtIrp; twukj: if (!is_array($email)) { return preg_match("\x2f\134\74\50\x2e\x2a\51\134\x3e\x2f", $email, $match) ? $match[1] : $email; } goto r9BVA; wTina: } protected function _get_alt_message() { goto Zqujj; T1TiW: $body = preg_match("\x2f\134\x3c\142\x6f\x64\x79\56\x2a\77\134\x3e\50\x2e\52\x29\134\x3c\134\x2f\x62\157\x64\x79\134\76\57\163\x69", $this->_body, $match) ? $match[1] : $this->_body; goto HwSuQ; SFRmb: $body = preg_replace("\174\x20\x2b\x7c", "\x20", $body); goto rTiFZ; Zqujj: if (!empty($this->alt_message)) { return $this->wordwrap ? $this->word_wrap($this->alt_message, 76) : $this->alt_message; } goto T1TiW; F0GnR: for ($i = 20; $i >= 3; $i--) { $body = str_replace(str_repeat("\12", $i), "\xa\xa", $body); } goto SFRmb; HwSuQ: $body = str_replace("\11", '', preg_replace("\43\74\41\55\55\50\56\x2a\x29\x2d\x2d\x5c\x3e\43", '', trim(strip_tags($body)))); goto F0GnR; rTiFZ: return $this->wordwrap ? $this->word_wrap($body, 76) : $body; goto IdZ1k; IdZ1k: } public function word_wrap($str, $charlim = NULL) { goto eLgm7; M8X1U: $output = ''; goto V7YIo; JjJxt: return $output; goto w8rED; csNuy: if (count($unwrap) > 0) { foreach ($unwrap as $key => $val) { $output = str_replace("\x7b\x7b\x75\156\167\x72\x61\x70\160\145\x64" . $key . "\175\x7d", $val, $output); } } goto JjJxt; Rz3WK: $str = preg_replace("\174\x20\53\134\x6e\174", "\12", $str); goto rNWB0; VMs3T: if (preg_match_all("\x7c\134\x7b\165\x6e\x77\x72\141\160\x5c\175\50\56\53\77\x29\134\x7b\57\165\156\167\x72\141\x70\134\175\174\163", $str, $matches)) { for ($i = 0, $c = count($matches[0]); $i < $c; $i++) { $unwrap[] = $matches[1][$i]; $str = str_replace($matches[0][$i], "\x7b\x7b\165\156\x77\162\x61\x70\160\145\144" . $i . "\x7d\175", $str); } } goto uGEsQ; V7YIo: foreach (explode("\12", $str) as $line) { goto ujMbB; ujMbB: if (self::strlen($line) <= $charlim) { $output .= $line . $this->newline; continue; } goto lguLm; aLZGh: do { if (preg_match("\41\134\133\165\x72\x6c\56\53\x5c\135\x7c\72\57\57\174\167\x77\x77\x5c\x2e\x21", $line)) { break; } $temp .= self::substr($line, 0, $charlim - 1); $line = self::substr($line, $charlim - 1); } while (self::strlen($line) > $charlim); goto omfOx; lguLm: $temp = ''; goto aLZGh; DZzmf: $output .= $line . $this->newline; goto EKlph; omfOx: if ($temp !== '') { $output .= $temp . $this->newline; } goto DZzmf; EKlph: } goto csNuy; eLgm7: if (empty($charlim)) { $charlim = empty($this->wrapchars) ? 76 : $this->wrapchars; } goto BK5jf; uGEsQ: $str = wordwrap($str, $charlim, "\xa", FALSE); goto M8X1U; BK5jf: if (strpos($str, "\xd") !== FALSE) { $str = str_replace(array("\15\xa", "\xd"), "\xa", $str); } goto Rz3WK; rNWB0: $unwrap = array(); goto VMs3T; w8rED: } protected function _build_headers() { goto s_5Lg; s_5Lg: $this->set_header("\x55\163\x65\162\55\x41\x67\145\x6e\x74", $this->useragent); goto xgAYD; Ukg22: $this->set_header("\115\x65\163\x73\141\x67\145\x2d\111\104", $this->_get_message_id()); goto WzMdN; xgAYD: $this->set_header("\130\x2d\123\x65\156\x64\x65\x72", $this->clean_email($this->_headers["\x46\x72\157\x6d"])); goto M23F3; WzMdN: $this->set_header("\115\x69\x6d\145\x2d\126\x65\x72\x73\151\157\156", "\x31\56\x30"); goto frcQi; TpUaG: $this->set_header("\130\x2d\x50\x72\x69\x6f\162\151\x74\x79", $this->_priorities[$this->priority]); goto Ukg22; M23F3: $this->set_header("\130\x2d\x4d\141\x69\154\x65\x72", $this->useragent); goto TpUaG; frcQi: } protected function _write_headers() { goto pKkBq; IoHo2: $this->_header_str = ''; goto iFCZe; iFCZe: foreach ($this->_headers as $key => $val) { $val = trim($val); if ($val !== '') { $this->_header_str .= $key . "\72\40" . $val . $this->newline; } } goto S9bJf; JburF: reset($this->_headers); goto IoHo2; pKkBq: if ($this->protocol === "\x6d\x61\151\154") { if (isset($this->_headers["\123\x75\142\152\x65\143\164"])) { $this->_subject = $this->_headers["\x53\x75\142\x6a\x65\x63\164"]; unset($this->_headers["\123\x75\142\x6a\145\143\x74"]); } } goto JburF; S9bJf: if ($this->_get_protocol() === "\155\x61\x69\x6c") { $this->_header_str = rtrim($this->_header_str); } goto VALZM; VALZM: } protected function _build_message() { goto hkYJe; dgh7e: $body = ''; goto akNRy; akNRy: switch ($this->_get_content_type()) { case "\x70\x6c\x61\x69\156": goto vpA3l; U0Bgf: if ($this->_get_protocol() === "\x6d\141\151\x6c") { $this->_header_str .= $hdr; $this->_finalbody = $this->_body; } else { $this->_finalbody = $hdr . $this->newline . $this->newline . $this->_body; } goto iZM6R; vpA3l: $hdr .= "\103\x6f\156\164\x65\x6e\x74\x2d\124\171\x70\145\x3a\40\x74\145\170\164\x2f\x70\154\141\x69\x6e\73\40\143\x68\x61\162\x73\145\x74\75" . $this->charset . $this->newline . "\x43\157\156\x74\145\x6e\164\55\x54\162\141\156\163\x66\x65\162\55\105\156\x63\x6f\144\151\x6e\147\72\x20" . $this->_get_encoding(); goto U0Bgf; iZM6R: return; goto fexBA; fexBA: case "\150\x74\x6d\x6c": goto DP37b; DP37b: if ($this->send_multipart === FALSE) { $hdr .= "\x43\157\156\x74\x65\x6e\x74\x2d\124\171\160\x65\72\x20\x74\x65\170\164\x2f\x68\x74\x6d\x6c\73\x20\143\x68\x61\x72\163\x65\164\x3d" . $this->charset . $this->newline . "\x43\157\156\164\145\156\164\x2d\124\162\x61\x6e\x73\146\145\162\55\105\x6e\143\157\144\151\x6e\147\x3a\x20\161\165\157\x74\145\x64\x2d\160\162\151\x6e\x74\x61\142\x6c\x65"; } else { goto P5vVm; kMmUD: $body .= $this->_get_mime_message() . $this->newline . $this->newline . "\55\55" . $boundary . $this->newline . "\x43\157\x6e\x74\145\156\164\x2d\x54\171\160\x65\x3a\x20\164\x65\x78\164\x2f\160\154\x61\151\156\x3b\40\143\150\141\162\x73\x65\164\x3d" . $this->charset . $this->newline . "\103\157\x6e\x74\x65\156\x74\55\x54\x72\141\156\x73\x66\x65\162\x2d\x45\156\143\157\144\x69\156\147\x3a\x20" . $this->_get_encoding() . $this->newline . $this->newline . $this->_get_alt_message() . $this->newline . $this->newline . "\x2d\x2d" . $boundary . $this->newline . "\x43\157\156\164\x65\156\x74\55\124\171\x70\x65\x3a\40\164\x65\170\x74\57\x68\x74\155\154\x3b\40\143\150\141\162\x73\145\164\x3d" . $this->charset . $this->newline . "\x43\157\156\164\145\x6e\x74\x2d\x54\x72\x61\x6e\x73\x66\x65\x72\x2d\x45\x6e\x63\157\x64\x69\x6e\x67\x3a\40\161\x75\x6f\x74\145\x64\55\x70\x72\151\x6e\x74\x61\x62\x6c\145" . $this->newline . $this->newline; goto OJNbX; l9tRg: $hdr .= "\103\x6f\x6e\x74\x65\x6e\164\55\x54\x79\x70\145\x3a\x20\x6d\165\154\x74\151\x70\141\162\164\x2f\x61\x6c\x74\145\x72\156\x61\164\x69\x76\x65\73\x20\142\x6f\165\x6e\144\x61\x72\171\75\x22" . $boundary . "\42"; goto kMmUD; P5vVm: $boundary = uniqid("\102\137\x41\x4c\x54\137"); goto l9tRg; OJNbX: } goto qWdyJ; XjEf1: return; goto RA1M9; bYG2r: if ($this->_get_protocol() === "\x6d\141\x69\154") { $this->_header_str .= $hdr; } else { $this->_finalbody = $hdr . $this->newline . $this->newline . $this->_finalbody; } goto YvN9E; YvN9E: if ($this->send_multipart !== FALSE) { $this->_finalbody .= "\55\55" . $boundary . "\55\55"; } goto XjEf1; qWdyJ: $this->_finalbody = $body . $this->_prep_quoted_printable($this->_body) . $this->newline . $this->newline; goto bYG2r; RA1M9: case "\160\x6c\141\151\x6e\55\141\164\164\141\x63\150": goto Id3ko; EhtlC: $body .= $this->_get_mime_message() . $this->newline . $this->newline . "\55\55" . $boundary . $this->newline . "\103\x6f\x6e\164\x65\x6e\164\55\x54\x79\x70\145\72\x20\x74\145\x78\x74\x2f\x70\x6c\x61\151\x6e\73\40\x63\x68\x61\x72\163\145\164\x3d" . $this->charset . $this->newline . "\103\x6f\156\x74\x65\156\x74\x2d\124\x72\141\156\x73\x66\x65\x72\55\105\156\143\x6f\x64\x69\x6e\147\72\40" . $this->_get_encoding() . $this->newline . $this->newline . $this->_body . $this->newline . $this->newline; goto i3Ckq; Y0io_: if ($this->_get_protocol() === "\x6d\x61\151\154") { $this->_header_str .= $hdr; } goto EhtlC; rWwtb: $hdr .= "\103\x6f\156\164\145\156\164\55\x54\x79\160\x65\x3a\40\x6d\165\154\164\151\x70\x61\162\x74\57\155\151\170\x65\144\73\40\142\x6f\165\156\x64\141\x72\x79\75\x22" . $boundary . "\x22"; goto Y0io_; i3Ckq: $this->_append_attachments($body, $boundary); goto Xpjea; Xpjea: break; goto atQGl; Id3ko: $boundary = uniqid("\102\x5f\101\124\103\137"); goto rWwtb; atQGl: case "\150\164\155\154\55\141\164\x74\x61\x63\150": goto ODFVb; Ls57A: if (!empty($atc_boundary)) { $body .= $this->newline . $this->newline; $this->_append_attachments($body, $atc_boundary, "\x6d\151\x78\x65\144"); } goto luVSk; IhGz1: $last_boundary = NULL; goto XwmF2; X5oto: $body .= $this->_get_mime_message() . $this->newline . $this->newline . "\55\55" . $last_boundary . $this->newline . "\103\x6f\x6e\164\145\x6e\164\55\124\171\160\145\x3a\x20\155\165\x6c\164\151\x70\x61\x72\164\x2f\x61\x6c\164\x65\162\x6e\x61\164\x69\x76\145\x3b\x20\142\x6f\x75\x6e\x64\141\162\x79\75\x22" . $alt_boundary . "\42" . $this->newline . $this->newline . "\x2d\x2d" . $alt_boundary . $this->newline . "\x43\157\x6e\x74\145\156\164\x2d\124\x79\x70\145\72\x20\164\145\170\x74\x2f\x70\154\x61\151\x6e\x3b\x20\143\x68\141\x72\163\x65\x74\x3d" . $this->charset . $this->newline . "\103\x6f\156\x74\145\156\164\x2d\124\162\141\156\163\146\145\x72\55\x45\156\143\157\x64\x69\156\147\x3a\40" . $this->_get_encoding() . $this->newline . $this->newline . $this->_get_alt_message() . $this->newline . $this->newline . "\x2d\55" . $alt_boundary . $this->newline . "\x43\157\x6e\x74\x65\156\164\55\x54\171\160\145\72\x20\164\x65\170\164\x2f\x68\x74\155\x6c\73\40\x63\x68\141\162\x73\145\x74\x3d" . $this->charset . $this->newline . "\103\157\156\x74\145\156\164\x2d\x54\x72\141\156\163\146\145\x72\55\105\x6e\143\157\x64\151\156\x67\x3a\x20\161\165\x6f\x74\145\144\55\x70\x72\x69\156\164\141\142\x6c\145" . $this->newline . $this->newline . $this->_prep_quoted_printable($this->_body) . $this->newline . $this->newline . "\x2d\55" . $alt_boundary . "\x2d\55" . $this->newline . $this->newline; goto z1jiS; frvSC: self::strlen($body) && ($body .= $this->newline . $this->newline); goto X5oto; luVSk: break; goto sO4aE; A9L40: if ($this->_attachments_have_multipart("\x72\x65\154\x61\x74\145\x64")) { goto YZIw8; BerIS: $last_boundary = $rel_boundary; goto BRJlc; X6993: if (isset($last_boundary)) { $body .= "\x2d\x2d" . $last_boundary . $this->newline . $rel_boundary_header; } else { $hdr .= $rel_boundary_header; } goto BerIS; gtqa4: $rel_boundary_header = "\103\x6f\x6e\x74\x65\x6e\164\x2d\124\171\x70\x65\72\x20\x6d\165\x6c\x74\x69\x70\141\162\164\57\x72\x65\154\x61\164\145\144\x3b\x20\142\x6f\165\x6e\144\x61\162\171\x3d\x22" . $rel_boundary . "\x22"; goto X6993; YZIw8: $rel_boundary = uniqid("\x42\137\122\105\x4c\x5f"); goto gtqa4; BRJlc: } goto b0cfw; b0cfw: if ($this->_get_protocol() === "\x6d\x61\x69\x6c") { $this->_header_str .= $hdr; } goto frvSC; z1jiS: if (!empty($rel_boundary)) { $body .= $this->newline . $this->newline; $this->_append_attachments($body, $rel_boundary, "\162\145\154\x61\x74\x65\144"); } goto Ls57A; XwmF2: if ($this->_attachments_have_multipart("\155\x69\x78\145\x64")) { goto Ke5rF; imwJT: $last_boundary = $atc_boundary; goto C6dVE; BnkrG: $hdr .= "\103\157\x6e\164\145\156\164\x2d\x54\x79\160\145\x3a\40\155\x75\154\x74\151\160\141\x72\x74\57\155\x69\170\145\144\x3b\x20\x62\157\x75\x6e\144\x61\162\171\75\x22" . $atc_boundary . "\x22"; goto imwJT; Ke5rF: $atc_boundary = uniqid("\102\x5f\x41\x54\103\137"); goto BnkrG; C6dVE: } goto A9L40; ODFVb: $alt_boundary = uniqid("\x42\x5f\x41\114\x54\137"); goto IhGz1; sO4aE: } goto CHO8a; FLoj5: return TRUE; goto qc7Ju; Rsite: $hdr = $this->_get_protocol() === "\x6d\x61\151\x6c" ? $this->newline : ''; goto dgh7e; hkYJe: if ($this->wordwrap === TRUE && $this->mailtype !== "\x68\164\x6d\x6c") { $this->_body = $this->word_wrap($this->_body); } goto E2D7E; CHO8a: $this->_finalbody = $this->_get_protocol() === "\155\x61\x69\154" ? $body : $hdr . $this->newline . $this->newline . $body; goto FLoj5; E2D7E: $this->_write_headers(); goto Rsite; qc7Ju: } protected function _attachments_have_multipart($type) { foreach ($this->_attachments as &$attachment) { if ($attachment["\155\165\154\164\x69\160\x61\162\164"] === $type) { return TRUE; } } return FALSE; } protected function _append_attachments(&$body, $boundary, $multipart = null) { for ($i = 0, $c = count($this->_attachments); $i < $c; $i++) { if (isset($multipart) && $this->_attachments[$i]["\x6d\165\154\164\151\160\141\162\164"] !== $multipart) { continue; } $name = isset($this->_attachments[$i]["\x6e\x61\155\145"][1]) ? $this->_attachments[$i]["\156\141\155\145"][1] : basename($this->_attachments[$i]["\156\x61\x6d\x65"][0]); $body .= "\x2d\x2d" . $boundary . $this->newline . "\x43\x6f\x6e\164\145\156\x74\55\x54\171\x70\x65\x3a\40" . $this->_attachments[$i]["\x74\171\160\x65"] . "\x3b\40\156\x61\x6d\145\x3d\42" . $name . "\x22" . $this->newline . "\103\157\156\164\145\156\164\55\104\151\x73\160\x6f\x73\x69\164\151\x6f\156\72\x20" . $this->_attachments[$i]["\144\151\x73\x70\157\163\x69\164\x69\157\x6e"] . "\73" . $this->newline . "\x43\157\156\164\x65\x6e\x74\55\x54\162\x61\x6e\163\146\145\x72\x2d\x45\x6e\143\x6f\x64\151\156\x67\72\40\x62\141\x73\x65\66\64" . $this->newline . (empty($this->_attachments[$i]["\143\151\x64"]) ? '' : "\103\157\156\164\x65\156\x74\55\x49\x44\72\40\x3c" . $this->_attachments[$i]["\143\x69\144"] . "\76" . $this->newline) . $this->newline . $this->_attachments[$i]["\143\x6f\156\164\x65\156\164"] . $this->newline; } empty($name) or $body .= "\x2d\55" . $boundary . "\55\55"; } protected function _prep_quoted_printable($str) { goto uinFK; uinFK: static $ascii_safe_chars = array(39, 40, 41, 43, 44, 45, 46, 47, 58, 61, 63, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122); goto PChxJ; zQiIR: $escape = "\x3d"; goto YIpk9; PChxJ: $str = str_replace(array("\173\165\x6e\167\162\141\x70\175", "\x7b\x2f\165\x6e\x77\x72\x61\x70\x7d"), '', $str); goto zZ82M; YIpk9: $output = ''; goto uCB9a; sWJZl: return self::substr($output, 0, self::strlen($this->crlf) * -1); goto rzabB; v3QVR: $str = preg_replace(array("\x7c\x20\x2b\174", "\57\x5c\170\60\x30\x2b\57"), array("\x20", ''), $str); goto dMO27; zZ82M: if ($this->crlf === "\xd\12") { return quoted_printable_encode($str); } goto v3QVR; uCB9a: foreach (explode("\xa", $str) as $line) { goto iYSTb; xlqJn: $output .= $temp . $this->crlf; goto bvpyx; vZtHY: for ($i = 0; $i < $length; $i++) { $char = $line[$i]; $ascii = ord($char); if ($ascii === 32 or $ascii === 9) { if ($i === $length - 1) { $char = $escape . sprintf("\45\x30\x32\x73", dechex($ascii)); } } elseif ($ascii === 61) { $char = $escape . strtoupper(sprintf("\45\60\x32\x73", dechex($ascii))); } elseif (!in_array($ascii, $ascii_safe_chars, TRUE)) { $char = $escape . strtoupper(sprintf("\45\60\62\163", dechex($ascii))); } if (self::strlen($temp) + self::strlen($char) >= 76) { $output .= $temp . $escape . $this->crlf; $temp = ''; } $temp .= $char; } goto xlqJn; iYSTb: $length = self::strlen($line); goto kxwYx; kxwYx: $temp = ''; goto vZtHY; bvpyx: } goto sWJZl; dMO27: if (strpos($str, "\xd") !== FALSE) { $str = str_replace(array("\xd\12", "\15"), "\xa", $str); } goto zQiIR; rzabB: } protected function _prep_q_encoding($str) { goto cmgN_; SeyCh: for ($i = 0, $length = self::strlen($output); $i < $chars; $i++) { $chr = $this->charset === "\125\x54\x46\x2d\70" && ICONV_ENABLED === TRUE ? "\x3d" . implode("\75", str_split(strtoupper(bin2hex(iconv_substr($str, $i, 1, $this->charset))), 2)) : "\75" . strtoupper(bin2hex($str[$i])); if ($length + ($l = self::strlen($chr)) > 74) { $output .= "\77\x3d" . $this->crlf . "\x20\75\x3f" . $this->charset . "\77\121\x3f" . $chr; $length = 6 + self::strlen($this->charset) + $l; } else { $output .= $chr; $length += $l; } } goto rrOzU; Pd3Du: $output = "\x3d\x3f" . $this->charset . "\77\121\77"; goto SeyCh; B0gTl: isset($chars) or $chars = self::strlen($str); goto Pd3Du; cmgN_: $str = str_replace(array("\15", "\12"), '', $str); goto fl5PS; rrOzU: return $output . "\x3f\x3d"; goto pBhoZ; fl5PS: if ($this->charset === "\125\x54\x46\55\70") { if (ICONV_ENABLED === TRUE) { goto InZy7; InZy7: $output = @iconv_mime_encode('', $str, array("\163\x63\x68\x65\x6d\145" => "\x51", "\154\151\x6e\x65\55\x6c\145\156\147\164\150" => 76, "\x69\x6e\160\165\x74\x2d\x63\x68\x61\162\163\145\x74" => $this->charset, "\157\165\164\x70\165\164\55\143\150\x61\162\163\145\x74" => $this->charset, "\154\x69\156\x65\55\x62\162\x65\141\153\x2d\x63\x68\141\x72\163" => $this->crlf)); goto Xf_le; Xf_le: if ($output !== FALSE) { return self::substr($output, 2); } goto zbDVQ; zbDVQ: $chars = iconv_strlen($str, "\x55\x54\x46\55\x38"); goto qmffo; qmffo: } elseif (MB_ENABLED === TRUE) { $chars = mb_strlen($str, "\125\x54\106\55\70"); } } goto B0gTl; pBhoZ: } public function send($auto_clear = TRUE) { goto gOLQn; OTTiK: if ($result && $auto_clear) { $this->clear(); } goto tEvVU; d4XIh: if ($this->bcc_batch_mode && count($this->_bcc_array) > $this->bcc_batch_size) { goto TgN7V; RV6mg: return $result; goto Wlwrk; TgN7V: $result = $this->batch_bcc_send(); goto tTdLN; tTdLN: if ($result && $auto_clear) { $this->clear(); } goto RV6mg; Wlwrk: } goto DyNbZ; DyNbZ: if ($this->_build_message() === FALSE) { return FALSE; } goto JO3Cm; myKDv: if ($this->_replyto_flag === FALSE) { $this->reply_to($this->_headers["\x46\x72\x6f\x6d"]); } goto Mm0iB; Q2jj9: $this->_build_headers(); goto d4XIh; JO3Cm: $result = $this->_spool_email(); goto OTTiK; Mm0iB: if (!isset($this->_recipients) && !isset($this->_headers["\124\157"]) && !isset($this->_bcc_array) && !isset($this->_headers["\x42\x63\x63"]) && !isset($this->_headers["\103\x63"])) { $this->_set_error_message("\154\141\x6e\x67\x3a\145\x6d\x61\151\154\x5f\x6e\x6f\x5f\162\145\143\151\x70\x69\x65\x6e\x74\x73"); return FALSE; } goto Q2jj9; tEvVU: return $result; goto YCINJ; gOLQn: if (!isset($this->_headers["\106\x72\x6f\155"])) { $this->_set_error_message("\154\x61\156\x67\72\145\155\x61\151\154\x5f\156\x6f\137\146\162\x6f\x6d"); return FALSE; } goto myKDv; YCINJ: } public function batch_bcc_send() { goto bd9tP; PWNML: for ($i = 0, $c = count($this->_bcc_array); $i < $c; $i++) { if (isset($this->_bcc_array[$i])) { $set .= "\54\40" . $this->_bcc_array[$i]; } if ($i === $float) { goto TGG2E; TGG2E: $chunk[] = self::substr($set, 1); goto Ry7Re; Ry7Re: $float += $this->bcc_batch_size; goto GLAE8; GLAE8: $set = ''; goto ask_q; ask_q: } if ($i === $c - 1) { $chunk[] = self::substr($set, 1); } } goto A2C5_; rBhte: $set = ''; goto FaVox; A2C5_: for ($i = 0, $c = count($chunk); $i < $c; $i++) { unset($this->_headers["\102\143\143"]); $bcc = $this->clean_email($this->_str_to_array($chunk[$i])); if ($this->protocol !== "\x73\x6d\164\x70") { $this->set_header("\102\143\143", implode("\x2c\40", $bcc)); } else { $this->_bcc_array = $bcc; } if ($this->_build_message() === FALSE) { return FALSE; } $this->_spool_email(); } goto HTcwC; FaVox: $chunk = array(); goto PWNML; bd9tP: $float = $this->bcc_batch_size - 1; goto rBhte; HTcwC: } protected function _unwrap_specials() { $this->_finalbody = preg_replace_callback("\x2f\x5c\x7b\x75\156\167\x72\x61\160\x5c\x7d\50\56\52\x3f\x29\134\x7b\x5c\x2f\165\x6e\167\x72\x61\160\134\175\57\x73\151", array($this, "\137\162\145\x6d\x6f\x76\x65\137\156\x6c\x5f\x63\x61\x6c\x6c\142\141\x63\153"), $this->_finalbody); } protected function _remove_nl_callback($matches) { if (strpos($matches[1], "\15") !== FALSE or strpos($matches[1], "\xa") !== FALSE) { $matches[1] = str_replace(array("\xd\xa", "\xd", "\xa"), '', $matches[1]); } return $matches[1]; } protected function _spool_email() { goto FMIdT; FMIdT: $this->_unwrap_specials(); goto knuyw; UDRum: return TRUE; goto O0zvQ; knuyw: $protocol = $this->_get_protocol(); goto x_Rhq; AC1it: if (!$this->{$method}()) { $this->_set_error_message("\x6c\141\x6e\147\x3a\145\155\141\x69\154\137\163\x65\x6e\x64\137\x66\x61\x69\x6c\165\162\x65\x5f" . ($protocol === "\x6d\x61\x69\154" ? "\x70\150\160\x6d\141\151\154" : $protocol)); return FALSE; } goto yjkjx; yjkjx: $this->_set_error_message("\x6c\x61\156\x67\x3a\x65\155\141\x69\x6c\137\163\x65\x6e\x74", $protocol); goto UDRum; x_Rhq: $method = "\137\163\145\156\x64\x5f\167\151\164\150\x5f" . $protocol; goto AC1it; O0zvQ: } protected function _validate_email_for_shell(&$email) { if (function_exists("\x69\x64\156\137\x74\x6f\x5f\141\163\143\151\151") && strpos($email, "\100")) { goto R4Tdh; R4Tdh: list($account, $domain) = explode("\100", $email, 2); goto fLXxS; fLXxS: $domain = defined("\x49\x4e\x54\x4c\137\x49\x44\116\101\137\126\101\122\111\x41\x4e\124\137\x55\124\123\64\x36") ? idn_to_ascii($domain, 0, INTL_IDNA_VARIANT_UTS46) : idn_to_ascii($domain); goto v_c6r; v_c6r: if ($domain !== FALSE) { $email = $account . "\x40" . $domain; } goto oHyt4; oHyt4: } return filter_var($email, FILTER_VALIDATE_EMAIL) === $email && preg_match("\43\134\x41\133\141\x2d\x7a\x30\55\71\56\137\53\x2d\x5d\53\100\x5b\141\55\x7a\60\55\x39\56\x2d\135\x7b\61\x2c\x32\x35\x33\x7d\134\172\x23\x69", $email); } protected function _send_with_mail() { goto rlH9C; rlH9C: if (is_array($this->_recipients)) { $this->_recipients = implode("\x2c\x20", $this->_recipients); } goto txI0K; WUsIA: if ($this->_safe_mode === TRUE || !$this->_validate_email_for_shell($from)) { return mail($this->_recipients, $this->_subject, $this->_finalbody, $this->_header_str); } else { return mail($this->_recipients, $this->_subject, $this->_finalbody, $this->_header_str, "\x2d\x66\40" . $from); } goto mB0v9; txI0K: $from = $this->clean_email($this->_headers["\x52\145\x74\x75\x72\156\55\x50\141\x74\x68"]); goto WUsIA; mB0v9: } protected function _send_with_sendmail() { goto ivIBB; oJeeb: if (!function_usable("\x70\157\x70\145\x6e") or FALSE === ($fp = @popen($this->mailpath . "\40\x2d\157\x69\x20" . $from . "\x20\55\164", "\167"))) { return FALSE; } goto o_vqJ; on5uG: fputs($fp, $this->_finalbody); goto o1UKb; o1UKb: $status = pclose($fp); goto RQoKp; T5MKP: return TRUE; goto NMpAy; o_vqJ: fputs($fp, $this->_header_str); goto on5uG; n3Vcw: if ($this->_validate_email_for_shell($from)) { $from = "\x2d\146\40" . $from; } else { $from = ''; } goto oJeeb; ivIBB: $from = $this->clean_email($this->_headers["\106\162\x6f\155"]); goto n3Vcw; RQoKp: if ($status !== 0) { goto E1EmZ; vdJHN: return FALSE; goto DRfT1; Ye8or: $this->_set_error_message("\x6c\x61\x6e\147\72\x65\155\x61\x69\154\x5f\x6e\x6f\137\x73\x6f\x63\x6b\x65\x74"); goto vdJHN; E1EmZ: $this->_set_error_message("\154\x61\x6e\x67\x3a\145\155\141\x69\x6c\x5f\145\x78\x69\x74\137\x73\x74\141\164\x75\163", $status); goto Ye8or; DRfT1: } goto T5MKP; NMpAy: } protected function _send_with_smtp() { goto DZaTY; yMGId: $this->_send_data($this->_header_str . preg_replace("\x2f\136\134\x2e\57\155", "\56\x2e\x24\61", $this->_finalbody)); goto ifsJW; DZaTY: if ($this->smtp_host === '') { $this->_set_error_message("\x6c\141\x6e\x67\72\145\x6d\141\151\x6c\x5f\156\157\137\x68\157\163\x74\156\x61\x6d\x65"); return FALSE; } goto t9Ain; ifsJW: $this->_send_data("\56"); goto YI2Hs; Dpl9h: return TRUE; goto zI6Oz; K3ISg: if (count($this->_cc_array) > 0) { foreach ($this->_cc_array as $val) { if ($val !== '' && !$this->_send_command("\x74\x6f", $val)) { $this->_smtp_end(); return FALSE; } } } goto HIbfE; PZNrN: $this->_smtp_end(); goto F8RCW; NDyPH: if (!$this->_send_command("\x66\x72\x6f\x6d", $this->clean_email($this->_headers["\106\x72\157\x6d"]))) { $this->_smtp_end(); return FALSE; } goto fOUFO; t9Ain: if (!$this->_smtp_connect() or !$this->_smtp_authenticate()) { return FALSE; } goto NDyPH; YI2Hs: $reply = $this->_get_smtp_data(); goto aXezF; HIbfE: if (count($this->_bcc_array) > 0) { foreach ($this->_bcc_array as $val) { if ($val !== '' && !$this->_send_command("\164\157", $val)) { $this->_smtp_end(); return FALSE; } } } goto ZC9fU; aXezF: $this->_set_error_message($reply); goto PZNrN; fOUFO: foreach ($this->_recipients as $val) { if (!$this->_send_command("\x74\x6f", $val)) { $this->_smtp_end(); return FALSE; } } goto K3ISg; F8RCW: if (strpos($reply, "\x32\x35\x30") !== 0) { $this->_set_error_message("\x6c\141\156\147\72\x65\x6d\141\151\x6c\x5f\x73\155\x74\x70\137\145\162\162\157\x72", $reply); return FALSE; } goto Dpl9h; ZC9fU: if (!$this->_send_command("\x64\x61\x74\141")) { $this->_smtp_end(); return FALSE; } goto yMGId; zI6Oz: } protected function _smtp_end() { $this->smtp_keepalive ? $this->_send_command("\x72\145\163\145\x74") : $this->_send_command("\161\165\x69\164"); } protected function _smtp_connect() { goto c_NW1; c_NW1: if (is_resource($this->_smtp_connect)) { return TRUE; } goto I3yjd; FoCtX: stream_set_timeout($this->_smtp_connect, $this->smtp_timeout); goto j48v2; j48v2: $this->_set_error_message($this->_get_smtp_data()); goto aVAZG; rQLq_: if (!is_resource($this->_smtp_connect)) { $this->_set_error_message("\154\141\156\147\72\x65\155\x61\151\x6c\137\x73\155\x74\160\137\145\x72\162\157\x72", $errno . "\40" . $errstr); return FALSE; } goto FoCtX; aVAZG: if ($this->smtp_crypto === "\x74\154\x73") { goto WbnER; cU12e: $crypto = stream_socket_enable_crypto($this->_smtp_connect, TRUE, $method); goto KjF61; WbnER: $this->_send_command("\x68\145\154\x6c\157"); goto hAOp0; KVTz3: $method = is_php("\x35\56\66") ? STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT | STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT | STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT : STREAM_CRYPTO_METHOD_TLS_CLIENT; goto cU12e; KjF61: if ($crypto !== TRUE) { $this->_set_error_message("\x6c\x61\156\x67\72\x65\155\x61\x69\x6c\x5f\x73\155\x74\160\x5f\x65\162\x72\x6f\162", $this->_get_smtp_data()); return FALSE; } goto k6_c2; hAOp0: $this->_send_command("\x73\164\x61\x72\x74\x74\x6c\x73"); goto KVTz3; k6_c2: } goto ZVETL; dJVJa: $this->_smtp_connect = fsockopen($ssl . $this->smtp_host, $this->smtp_port, $errno, $errstr, $this->smtp_timeout); goto rQLq_; ZVETL: return $this->_send_command("\x68\145\x6c\x6c\157"); goto wudFL; I3yjd: $ssl = $this->smtp_crypto === "\x73\163\154" ? "\x73\163\154\72\x2f\57" : ''; goto dJVJa; wudFL: } protected function _send_command($cmd, $data = '') { goto tb0pn; YJpUc: return TRUE; goto ppsbR; uSHjx: $this->_debug_msg[] = "\x3c\x70\x72\145\x3e" . $cmd . "\72\40" . $reply . "\x3c\x2f\x70\162\145\76"; goto MV9wT; tb0pn: switch ($cmd) { case "\150\145\154\154\x6f": goto uJy0G; uJy0G: if ($this->_smtp_auth or $this->_get_encoding() === "\x38\142\151\x74") { $this->_send_data("\105\110\114\x4f\x20" . $this->_get_hostname()); } else { $this->_send_data("\110\x45\114\117\40" . $this->_get_hostname()); } goto fMNAJ; P2usk: break; goto WSTje; fMNAJ: $resp = 250; goto P2usk; WSTje: case "\163\164\141\162\x74\164\x6c\163": goto cKNE5; gGt1N: break; goto Vrv24; cKNE5: $this->_send_data("\x53\124\x41\122\124\x54\114\123"); goto w6hF_; w6hF_: $resp = 220; goto gGt1N; Vrv24: case "\146\162\157\155": goto QQSpW; QQSpW: $this->_send_data("\115\101\x49\x4c\40\106\122\x4f\115\72\x3c" . $data . "\76"); goto kzG_1; kzG_1: $resp = 250; goto BYpdJ; BYpdJ: break; goto P02Xy; P02Xy: case "\x74\x6f": goto V7BOI; V7BOI: if ($this->dsn) { $this->_send_data("\122\103\x50\124\40\x54\x4f\72\x3c" . $data . "\x3e\x20\116\x4f\x54\111\x46\131\75\x53\125\103\103\x45\123\x53\54\x44\x45\x4c\101\x59\54\x46\x41\x49\x4c\x55\x52\105\40\117\x52\103\x50\x54\x3d\162\146\x63\x38\x32\x32\73" . $data); } else { $this->_send_data("\x52\103\x50\x54\x20\x54\117\x3a\x3c" . $data . "\76"); } goto Xfj6O; Tshr1: break; goto zUZXj; Xfj6O: $resp = 250; goto Tshr1; zUZXj: case "\144\141\x74\x61": goto CRDqm; f_hMf: $resp = 354; goto EkPr1; EkPr1: break; goto FtlgF; CRDqm: $this->_send_data("\x44\x41\x54\x41"); goto f_hMf; FtlgF: case "\162\x65\163\145\x74": goto yvNE7; dtb9l: break; goto jd7js; b37Ee: $resp = 250; goto dtb9l; yvNE7: $this->_send_data("\x52\x53\x45\124"); goto b37Ee; jd7js: case "\x71\x75\x69\164": goto H2BWk; H2BWk: $this->_send_data("\121\x55\x49\124"); goto VeqZF; VeqZF: $resp = 221; goto iJcbj; iJcbj: break; goto MlMNZ; MlMNZ: } goto WjhqZ; MV9wT: if ((int) self::substr($reply, 0, 3) !== $resp) { $this->_set_error_message("\154\x61\x6e\147\72\145\155\141\x69\154\137\163\155\x74\160\137\145\x72\162\x6f\x72", $reply); return FALSE; } goto VL0u1; WjhqZ: $reply = $this->_get_smtp_data(); goto uSHjx; VL0u1: if ($cmd === "\x71\x75\x69\164") { fclose($this->_smtp_connect); } goto YJpUc; ppsbR: } protected function _smtp_authenticate() { goto dW8G1; qOzUI: if (strpos($reply, "\x33\63\x34") !== 0) { $this->_set_error_message("\x6c\x61\156\x67\x3a\x65\155\x61\x69\154\x5f\163\x6d\164\160\x5f\x61\165\x74\150\137\x75\x6e", $reply); return FALSE; } goto D2_o1; G8wPJ: $reply = $this->_get_smtp_data(); goto qOzUI; D2_o1: $this->_send_data(base64_encode($this->smtp_pass)); goto XfFsN; dW8G1: if (!$this->_smtp_auth) { return TRUE; } goto X8uN5; dlJxn: $this->_send_data(base64_encode($this->smtp_user)); goto G8wPJ; CooFX: if (strpos($reply, "\65\x30\x33") === 0) { return TRUE; } elseif (strpos($reply, "\63\63\64") !== 0) { $this->_set_error_message("\154\x61\156\147\72\x65\x6d\x61\x69\154\x5f\x66\141\151\154\145\x64\x5f\163\x6d\x74\x70\137\x6c\157\x67\x69\156", $reply); return FALSE; } goto dlJxn; zFi5O: if (strpos($reply, "\x32\x33\x35") !== 0) { $this->_set_error_message("\154\x61\156\147\72\145\x6d\x61\151\154\x5f\163\155\x74\160\137\x61\165\164\x68\137\x70\x77", $reply); return FALSE; } goto qwhCQ; qwhCQ: if ($this->smtp_keepalive) { $this->_smtp_auth = FALSE; } goto JJVw5; X8uN5: if ($this->smtp_user === '' && $this->smtp_pass === '') { $this->_set_error_message("\x6c\x61\156\x67\x3a\145\x6d\141\151\x6c\137\x6e\157\137\163\155\x74\x70\137\165\x6e\x70\167"); return FALSE; } goto S6tcp; XfFsN: $reply = $this->_get_smtp_data(); goto zFi5O; R1wRd: $reply = $this->_get_smtp_data(); goto CooFX; S6tcp: $this->_send_data("\101\x55\x54\x48\x20\x4c\x4f\107\x49\x4e"); goto R1wRd; JJVw5: return TRUE; goto n3kYH; n3kYH: } protected function _send_data($data) { goto xtwm3; vBOSM: if ($result === FALSE) { $this->_set_error_message("\154\141\156\x67\72\145\155\141\x69\154\x5f\163\x6d\164\160\137\x64\x61\164\141\x5f\146\141\x69\x6c\165\x72\145", $data); return FALSE; } goto Gxkbq; ViszB: for ($written = $timestamp = 0, $length = self::strlen($data); $written < $length; $written += $result) { if (($result = fwrite($this->_smtp_connect, self::substr($data, $written))) === FALSE) { break; } elseif ($result === 0) { goto M5T01; rut1J: continue; goto Is1vu; o_o8I: usleep(250000); goto rut1J; M5T01: if ($timestamp === 0) { $timestamp = time(); } elseif ($timestamp < time() - $this->smtp_timeout) { $result = FALSE; break; } goto o_o8I; Is1vu: } $timestamp = 0; } goto vBOSM; xtwm3: $data .= $this->newline; goto ViszB; Gxkbq: return TRUE; goto WhrHg; WhrHg: } protected function _get_smtp_data() { goto uz4bt; YmsPk: while ($str = fgets($this->_smtp_connect, 512)) { $data .= $str; if ($str[3] === "\40") { break; } } goto VNGCf; uz4bt: $data = ''; goto YmsPk; VNGCf: return $data; goto FC2Z2; FC2Z2: } protected function _get_hostname() { if (isset($_SERVER["\x53\x45\122\126\105\x52\137\x4e\101\x4d\105"])) { return $_SERVER["\x53\x45\x52\126\105\x52\x5f\x4e\x41\x4d\x45"]; } return isset($_SERVER["\123\x45\x52\126\105\122\137\x41\x44\x44\122"]) ? "\x5b" . $_SERVER["\123\105\x52\x56\105\122\x5f\x41\104\104\x52"] . "\135" : "\133\61\x32\x37\x2e\60\56\60\x2e\x31\x5d"; } public function print_debugger($include = array("\x68\145\x61\x64\145\162\163", "\163\165\x62\152\145\143\164", "\142\157\144\171")) { goto ArQ5B; il1Wh: is_array($include) or $include = array($include); goto S4iYC; ArQ5B: $msg = ''; goto VtVHg; IY52I: return $msg . ($raw_data === '' ? '' : "\74\x70\x72\145\x3e" . $raw_data . "\x3c\x2f\x70\x72\145\x3e"); goto l_1ZJ; sroAQ: if (in_array("\x62\x6f\144\171", $include, TRUE)) { $raw_data .= htmlspecialchars($this->_finalbody); } goto IY52I; VtVHg: if (count($this->_debug_msg) > 0) { foreach ($this->_debug_msg as $val) { $msg .= $val; } } goto nHNVI; S4iYC: if (in_array("\x68\x65\141\x64\x65\162\163", $include, TRUE)) { $raw_data = htmlspecialchars($this->_header_str) . "\xa"; } goto vRd1C; nHNVI: $raw_data = ''; goto il1Wh; vRd1C: if (in_array("\163\x75\x62\152\145\x63\x74", $include, TRUE)) { $raw_data .= htmlspecialchars($this->_subject) . "\xa"; } goto sroAQ; l_1ZJ: } protected function _set_error_message($msg, $val = '') { goto LfGMb; E1REi: if (sscanf($msg, "\154\x61\x6e\147\72\x25\x73", $line) !== 1 or FALSE === ($line = $CI->lang->line($line))) { $this->_debug_msg[] = str_replace("\x25\x73", $val, $msg) . "\x3c\142\x72\x20\x2f\x3e"; } else { $this->_debug_msg[] = str_replace("\45\163", $val, $line) . "\x3c\x62\162\40\57\76"; } goto A2O1c; LfGMb: $CI =& get_instance(); goto jSPkR; jSPkR: $CI->lang->load("\145\155\141\151\x6c"); goto E1REi; A2O1c: } protected function _mime_types($ext = '') { goto QuPcx; XCfpj: $mimes =& get_mimes(); goto vRPyL; K40BK: return "\141\160\x70\x6c\151\x63\x61\164\x69\157\156\57\170\x2d\165\156\x6b\x6e\157\167\156\55\x63\157\x6e\164\145\156\164\55\164\171\160\145"; goto hicR3; QuPcx: $ext = strtolower($ext); goto XCfpj; vRPyL: if (isset($mimes[$ext])) { return is_array($mimes[$ext]) ? current($mimes[$ext]) : $mimes[$ext]; } goto K40BK; hicR3: } public function __destruct() { is_resource($this->_smtp_connect) && $this->_send_command("\x71\165\151\x74"); } protected static function strlen($str) { return self::$func_overload ? mb_strlen($str, "\70\x62\151\164") : strlen($str); } protected static function substr($str, $start, $length = NULL) { if (self::$func_overload) { isset($length) or $length = $start >= 0 ? self::strlen($str) - $start : -$start; return mb_substr($str, $start, $length, "\x38\x62\151\164"); } return isset($length) ? substr($str, $start, $length) : substr($str, $start); } }
