<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\x41\123\105\120\101\x54\110") or exit("\x4e\x6f\x20\144\151\162\x65\x63\x74\40\163\143\x72\151\x70\x74\x20\141\143\x63\x65\x73\x73\40\x61\x6c\x6c\157\x77\x65\144"); class CI_DB_ibase_forge extends CI_DB_forge { protected $_create_table_if = FALSE; protected $_rename_table = FALSE; protected $_drop_table_if = FALSE; protected $_unsigned = array("\123\115\x41\114\x4c\x49\x4e\x54" => "\111\116\124\x45\107\105\x52", "\x49\116\124\x45\107\105\x52" => "\x49\116\124\x36\x34", "\106\114\x4f\101\124" => "\104\117\x55\102\114\105\40\x50\122\105\103\x49\123\111\117\x4e"); protected $_null = "\x4e\125\114\x4c"; public function create_database($db_name) { empty($this->db->hostname) or $db_name = $this->hostname . "\72" . $db_name; return parent::create_database("\x22" . $db_name . "\x22"); } public function drop_database($db_name) { if (!ibase_drop_db($this->conn_id)) { return $this->db->db_debug ? $this->db->display_error("\x64\x62\137\165\x6e\141\x62\x6c\145\x5f\164\x6f\x5f\144\x72\157\x70") : FALSE; } elseif (!empty($this->db->data_cache["\x64\142\137\x6e\x61\155\145\163"])) { $key = array_search(strtolower($this->db->database), array_map("\163\x74\x72\x74\x6f\x6c\157\x77\145\x72", $this->db->data_cache["\x64\142\137\156\x61\155\145\163"]), TRUE); if ($key !== FALSE) { unset($this->db->data_cache["\144\x62\137\x6e\x61\155\145\163"][$key]); } } return TRUE; } protected function _alter_table($alter_type, $table, $field) { goto QpKR9; u4Xgd: for ($i = 0, $c = count($field); $i < $c; $i++) { if ($field[$i]["\x5f\154\151\164\145\162\x61\x6c"] !== FALSE) { return FALSE; } if (isset($field[$i]["\164\171\x70\145"])) { $sqls[] = $sql . "\x20\x41\x4c\x54\x45\x52\40\103\x4f\114\125\x4d\x4e\40" . $this->db->escape_identififers($field[$i]["\x6e\x61\155\145"]) . "\x20\x54\131\120\105\x20" . $field[$i]["\x74\x79\x70\x65"] . $field[$i]["\x6c\145\156\x67\x74\x68"]; } if (!empty($field[$i]["\144\145\146\141\x75\x6c\x74"])) { $sqls[] = $sql . "\40\x41\114\x54\105\122\40\103\x4f\x4c\x55\115\x4e\40" . $this->db->escape_identifiers($field[$i]["\156\x61\x6d\x65"]) . "\x20\x53\x45\x54\40\x44\105\106\101\x55\x4c\124\x20" . $field[$i]["\144\145\x66\x61\x75\154\x74"]; } if (isset($field[$i]["\156\x75\x6c\154"])) { $sqls[] = "\125\x50\104\101\x54\x45\x20\42\x52\104\x42\x24\122\105\114\x41\x54\x49\x4f\116\x5f\106\x49\x45\114\x44\x53\x22\40\x53\x45\x54\x20\x22\122\x44\x42\44\116\125\114\x4c\137\x46\x4c\101\107\42\x20\75\x20" . ($field[$i]["\156\165\154\x6c"] === TRUE ? "\x4e\x55\x4c\114" : "\x31") . "\40\127\110\x45\122\x45\40\42\122\x44\102\44\x46\x49\105\x4c\x44\137\116\x41\x4d\105\x22\x20\75\40" . $this->db->escape($field[$i]["\156\x61\155\x65"]) . "\40\101\x4e\x44\x20\42\122\x44\102\44\x52\x45\114\101\x54\x49\117\116\x5f\x4e\101\115\105\42\x20\x3d\x20" . $this->db->escape($table); } if (!empty($field[$i]["\x6e\x65\167\137\x6e\141\155\x65"])) { $sqls[] = $sql . "\x20\101\114\x54\x45\122\40\103\117\x4c\x55\115\116\x20" . $this->db->escape_identifiers($field[$i]["\x6e\x61\155\145"]) . "\x20\x54\x4f\x20" . $this->db->escape_identifiers($field[$i]["\x6e\x65\167\137\x6e\141\x6d\145"]); } } goto dCAUW; lFGl_: $sql = "\x41\114\124\105\122\x20\124\x41\x42\x4c\x45\x20" . $this->db->escape_identifiers($table); goto sXLmJ; sXLmJ: $sqls = array(); goto u4Xgd; QpKR9: if (in_array($alter_type, array("\x44\122\117\x50", "\101\104\x44"), TRUE)) { return parent::_alter_table($alter_type, $table, $field); } goto lFGl_; dCAUW: return $sqls; goto D1yDy; D1yDy: } protected function _process_column($field) { return $this->db->escape_identifiers($field["\x6e\x61\155\x65"]) . "\40" . $field["\x74\x79\x70\x65"] . $field["\x6c\x65\x6e\x67\164\x68"] . $field["\156\165\x6c\x6c"] . $field["\165\x6e\151\x71\165\145"] . $field["\144\x65\x66\x61\165\154\x74"]; } protected function _attr_type(&$attributes) { switch (strtoupper($attributes["\x54\x59\120\x45"])) { case "\x54\x49\116\131\111\x4e\124": goto FRvzy; ViDDt: return; goto uReZJ; FRvzy: $attributes["\124\131\x50\105"] = "\123\x4d\101\x4c\x4c\x49\116\124"; goto zikod; zikod: $attributes["\x55\116\x53\111\107\116\105\104"] = FALSE; goto ViDDt; uReZJ: case "\x4d\105\104\111\x55\x4d\111\116\x54": goto tOFwE; tOFwE: $attributes["\x54\131\x50\105"] = "\111\x4e\x54\x45\107\x45\122"; goto THS7a; THS7a: $attributes["\125\x4e\x53\111\x47\x4e\x45\104"] = FALSE; goto VvLwm; VvLwm: return; goto JohYr; JohYr: case "\x49\116\x54": $attributes["\x54\131\x50\x45"] = "\x49\x4e\124\105\107\x45\x52"; return; case "\102\x49\107\111\116\124": $attributes["\x54\x59\x50\105"] = "\x49\116\x54\66\64"; return; default: return; } } protected function _attr_auto_increment(&$attributes, &$field) { } }
