<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\101\123\x45\x50\101\x54\110") or exit("\116\x6f\x20\x64\x69\x72\x65\143\164\40\x73\143\x72\x69\x70\x74\x20\141\x63\143\145\163\x73\x20\x61\x6c\154\157\167\145\144"); class CI_DB_sqlsrv_driver extends CI_DB { public $dbdriver = "\163\161\x6c\163\162\166"; public $scrollable; protected $_random_keyword = array("\x4e\105\127\x49\104\x28\51", "\122\101\x4e\104\50\45\x64\51"); protected $_quoted_identifier = TRUE; public function __construct($params) { parent::__construct($params); if ($this->scrollable === NULL) { $this->scrollable = defined("\123\121\x4c\x53\x52\x56\x5f\103\x55\122\x53\117\x52\x5f\103\x4c\x49\105\x4e\x54\x5f\x42\x55\x46\106\x45\122\105\x44") ? SQLSRV_CURSOR_CLIENT_BUFFERED : FALSE; } } public function db_connect($pooling = FALSE) { goto gzUJd; Ku8AV: if (empty($connection["\x55\x49\104"]) && empty($connection["\120\127\104"])) { unset($connection["\125\111\104"], $connection["\120\x57\104"]); } goto co0Gj; co0Gj: if (FALSE !== ($this->conn_id = sqlsrv_connect($this->hostname, $connection))) { goto Wx4iB; URrRG: $this->_quoted_identifier = empty($query) ? FALSE : (bool) $query["\161\151"]; goto RZ7Ld; RZ7Ld: $this->_escape_char = $this->_quoted_identifier ? "\42" : array("\133", "\135"); goto s0Jbm; n2lGR: $query = $query->row_array(); goto URrRG; Wx4iB: $query = $this->query("\123\105\114\x45\x43\x54\40\103\101\123\105\x20\127\x48\105\x4e\40\50\100\100\x4f\120\124\111\117\116\123\40\174\40\62\x35\x36\x29\40\x3d\x20\x40\x40\x4f\120\x54\111\117\116\x53\x20\124\x48\105\x4e\40\61\40\x45\x4c\123\105\40\60\x20\105\116\104\40\x41\123\40\161\151"); goto n2lGR; s0Jbm: } goto CuDrZ; p9dXg: $connection = array("\125\x49\104" => empty($this->username) ? '' : $this->username, "\x50\127\104" => empty($this->password) ? '' : $this->password, "\104\141\x74\141\142\x61\163\145" => $this->database, "\x43\x6f\x6e\156\x65\x63\x74\151\x6f\x6e\x50\x6f\x6f\x6c\151\156\147" => $pooling === TRUE ? 1 : 0, "\x43\150\x61\162\x61\143\164\x65\162\x53\x65\164" => $charset, "\x45\156\143\162\171\x70\x74" => $this->encrypt === TRUE ? 1 : 0, "\122\x65\164\x75\162\156\104\141\x74\145\163\101\x73\123\164\162\x69\156\x67\x73" => 1); goto Ku8AV; CuDrZ: return $this->conn_id; goto N61BB; gzUJd: $charset = in_array(strtolower($this->char_set), array("\x75\x74\x66\55\70", "\x75\x74\x66\x38"), TRUE) ? "\125\124\106\x2d\70" : SQLSRV_ENC_CHAR; goto p9dXg; N61BB: } public function db_select($database = '') { goto ptv65; Fo0xE: return FALSE; goto DCJAw; FRNEK: if ($this->_execute("\125\123\105\x20" . $this->escape_identifiers($database))) { goto F0gT8; F0gT8: $this->database = $database; goto B1HlB; B1HlB: $this->data_cache = array(); goto Q427N; Q427N: return TRUE; goto TBBm9; TBBm9: } goto Fo0xE; ptv65: if ($database === '') { $database = $this->database; } goto FRNEK; DCJAw: } protected function _execute($sql) { return ($this->scrollable === FALSE or $this->is_write_type($sql)) ? sqlsrv_query($this->conn_id, $sql) : sqlsrv_query($this->conn_id, $sql, NULL, array("\123\x63\162\x6f\154\154\x61\142\154\x65" => $this->scrollable)); } protected function _trans_begin() { return sqlsrv_begin_transaction($this->conn_id); } protected function _trans_commit() { return sqlsrv_commit($this->conn_id); } protected function _trans_rollback() { return sqlsrv_rollback($this->conn_id); } public function affected_rows() { return sqlsrv_rows_affected($this->result_id); } public function insert_id() { return $this->query("\123\105\114\x45\103\x54\x20\123\x43\x4f\x50\105\x5f\x49\x44\105\x4e\x54\111\124\x59\x28\51\40\x41\123\40\151\x6e\163\145\x72\x74\137\151\144")->row()->insert_id; } public function version() { goto o7415; t67NX: return $this->data_cache["\166\145\x72\x73\151\x6f\156"] = $info["\123\121\114\123\145\x72\166\145\x72\126\145\162\163\151\157\x6e"]; goto ylPIb; o7415: if (isset($this->data_cache["\x76\x65\x72\x73\151\x6f\x6e"])) { return $this->data_cache["\x76\x65\x72\163\x69\x6f\156"]; } goto iZtZz; iZtZz: if (!$this->conn_id or ($info = sqlsrv_server_info($this->conn_id)) === FALSE) { return FALSE; } goto t67NX; ylPIb: } protected function _list_tables($prefix_limit = FALSE) { goto FKJM4; EsEzM: return $sql . "\x20\x4f\122\x44\x45\122\x20\x42\131\x20" . $this->escape_identifiers("\x6e\141\x6d\x65"); goto jyZxH; WZnMm: if ($prefix_limit === TRUE && $this->dbprefix !== '') { $sql .= "\x20\101\x4e\x44\40" . $this->escape_identifiers("\156\x61\155\145") . "\x20\x4c\x49\113\x45\40\x27" . $this->escape_like_str($this->dbprefix) . "\45\47\x20" . sprintf($this->_escape_like_str, $this->_escape_like_chr); } goto EsEzM; FKJM4: $sql = "\x53\105\114\105\x43\x54\x20" . $this->escape_identifiers("\x6e\x61\155\145") . "\x20\x46\x52\x4f\x4d\40" . $this->escape_identifiers("\163\x79\163\x6f\142\x6a\145\x63\164\163") . "\40\x57\x48\x45\122\x45\40" . $this->escape_identifiers("\x74\x79\x70\x65") . "\40\75\40\47\125\x27"; goto WZnMm; jyZxH: } protected function _list_columns($table = '') { return "\x53\105\114\105\x43\124\40\x43\x4f\114\125\x4d\x4e\x5f\x4e\x41\x4d\105\xa\11\11\11\106\x52\117\115\40\111\116\x46\x4f\122\115\101\x54\x49\117\116\137\123\103\x48\105\115\101\x2e\x43\x6f\154\x75\155\156\163\12\x9\x9\x9\x57\x48\105\x52\x45\40\125\x50\120\105\122\x28\x54\101\102\x4c\105\137\116\x41\x4d\x45\51\x20\75\x20" . $this->escape(strtoupper($table)); } public function field_data($table) { goto I1Lnd; I1Lnd: $sql = "\123\105\114\x45\103\124\40\x43\117\114\125\115\x4e\x5f\x4e\101\115\105\x2c\x20\x44\x41\x54\x41\x5f\x54\131\x50\x45\x2c\x20\103\x48\101\122\x41\x43\124\105\122\x5f\x4d\x41\130\x49\115\125\x4d\x5f\114\105\116\x47\x54\110\54\x20\x4e\125\115\x45\122\x49\103\137\x50\x52\x45\x43\111\x53\x49\117\x4e\54\x20\103\117\x4c\125\x4d\x4e\137\x44\105\106\x41\x55\x4c\x54\xa\11\x9\x9\x46\122\x4f\x4d\40\111\x4e\x46\x4f\x52\115\101\x54\x49\x4f\116\x5f\x53\103\x48\x45\x4d\101\56\103\157\154\x75\x6d\x6e\163\xa\11\x9\11\x57\110\x45\122\x45\40\125\120\x50\105\x52\x28\x54\101\x42\x4c\105\x5f\116\101\115\105\x29\x20\x3d\40" . $this->escape(strtoupper($table)); goto Te7r0; p0CIs: return $retval; goto OyFAI; Jb1hR: $retval = array(); goto uXgqe; W3n7l: $query = $query->result_object(); goto Jb1hR; Te7r0: if (($query = $this->query($sql)) === FALSE) { return FALSE; } goto W3n7l; uXgqe: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]->COLUMN_NAME; $retval[$i]->type = $query[$i]->DATA_TYPE; $retval[$i]->max_length = $query[$i]->CHARACTER_MAXIMUM_LENGTH > 0 ? $query[$i]->CHARACTER_MAXIMUM_LENGTH : $query[$i]->NUMERIC_PRECISION; $retval[$i]->default = $query[$i]->COLUMN_DEFAULT; } goto p0CIs; OyFAI: } public function error() { goto KRZfC; dM5XE: if (isset($sqlsrv_error["\x53\121\x4c\x53\x54\x41\x54\x45"])) { $error["\143\x6f\x64\145"] = isset($sqlsrv_error["\143\x6f\x64\145"]) ? $sqlsrv_error["\123\x51\114\x53\124\101\124\105"] . "\57" . $sqlsrv_error["\143\x6f\x64\x65"] : $sqlsrv_error["\123\121\x4c\123\x54\x41\124\105"]; } elseif (isset($sqlsrv_error["\x63\157\144\x65"])) { $error["\x63\x6f\144\145"] = $sqlsrv_error["\x63\x6f\144\145"]; } goto V_rOl; KRZfC: $error = array("\143\x6f\144\145" => "\60\x30\x30\60\x30", "\155\145\x73\163\141\147\145" => ''); goto eWwZy; mHsFH: $sqlsrv_error = array_shift($sqlsrv_errors); goto dM5XE; V_rOl: if (isset($sqlsrv_error["\x6d\145\163\163\x61\x67\x65"])) { $error["\x6d\145\163\163\x61\147\145"] = $sqlsrv_error["\155\x65\163\163\141\147\x65"]; } goto VR3bM; VR3bM: return $error; goto XAREb; Uxy5u: if (!is_array($sqlsrv_errors)) { return $error; } goto mHsFH; eWwZy: $sqlsrv_errors = sqlsrv_errors(SQLSRV_ERR_ERRORS); goto Uxy5u; XAREb: } protected function _update($table, $values) { goto xkGMK; mzoXc: return parent::_update($table, $values); goto rN6vw; xkGMK: $this->qb_limit = FALSE; goto FcT8F; FcT8F: $this->qb_orderby = array(); goto mzoXc; rN6vw: } protected function _truncate($table) { return "\124\122\x55\116\103\101\124\x45\x20\124\101\x42\114\x45\40" . $table; } protected function _delete($table) { if ($this->qb_limit) { return "\127\x49\x54\110\x20\143\x69\137\144\145\x6c\x65\164\x65\x20\101\x53\x20\x28\123\105\x4c\x45\x43\124\40\124\x4f\x50\x20" . $this->qb_limit . "\40\52\x20\106\x52\x4f\115\x20" . $table . $this->_compile_wh("\161\x62\137\167\150\x65\x72\145") . "\x29\x20\x44\105\x4c\x45\x54\105\x20\x46\122\x4f\115\40\143\151\x5f\x64\145\154\145\x74\145"; } return parent::_delete($table); } protected function _limit($sql) { goto fVXqo; GIcEA: if ($this->qb_offset && !empty($this->qb_orderby)) { goto LKQYB; WBxkq: return "\x53\105\114\105\x43\x54\x20" . $select . "\x20\x46\122\117\115\40\50\xa\12" . preg_replace("\x2f\136\x28\123\105\114\105\x43\x54\x28\40\104\x49\x53\x54\x49\x4e\103\x54\x29\77\51\x2f\x69", "\134\61\x20\122\x4f\x57\x5f\116\125\115\x42\105\x52\x28\x29\40\117\126\105\x52\50" . trim($orderby) . "\51\x20\101\123\x20" . $this->escape_identifiers("\x43\x49\137\x72\157\x77\x6e\x75\155") . "\54\x20", $sql) . "\xa\12\x29\x20" . $this->escape_identifiers("\x43\111\137\163\x75\142\161\165\145\162\x79") . "\xa\x57\110\x45\122\105\x20" . $this->escape_identifiers("\x43\111\137\162\x6f\x77\156\x75\x6d") . "\40\102\105\124\x57\x45\x45\116\x20" . ($this->qb_offset + 1) . "\40\101\x4e\104\x20" . $limit; goto xAB1j; hu4zH: if (count($this->qb_select) === 0 or strpos(implode("\54", $this->qb_select), "\x2a") !== FALSE) { $select = "\52"; } else { goto PFWSN; ZBfLe: $select = implode("\x2c\40", $select); goto nE_FT; WwtEk: $field_regexp = $this->_quoted_identifier ? "\x28\x22\x5b\136\134\42\135\x2b\42\x29" : "\x28\134\133\133\x5e\134\x5d\x5d\53\x5c\x5d\x29"; goto kfP3r; kfP3r: for ($i = 0, $c = count($this->qb_select); $i < $c; $i++) { $select[] = preg_match("\x2f\50\77\x3a\x5c\x73\174\134\56\51" . $field_regexp . "\x24\x2f\x69", $this->qb_select[$i], $m) ? $m[1] : $this->qb_select[$i]; } goto ZBfLe; PFWSN: $select = array(); goto WwtEk; nE_FT: } goto WBxkq; LKQYB: $orderby = $this->_compile_order_by(); goto egGlG; egGlG: $sql = trim(substr($sql, 0, strrpos($sql, $orderby))); goto hu4zH; xAB1j: } goto A11sR; O5vt2: $limit = $this->qb_offset + $this->qb_limit; goto GIcEA; fVXqo: if (version_compare($this->version(), "\x31\61", "\76\x3d")) { empty($this->qb_orderby) && ($sql .= "\40\x4f\x52\x44\x45\122\40\x42\131\40\61"); return $sql . "\40\x4f\x46\106\123\105\x54\40" . (int) $this->qb_offset . "\40\122\x4f\x57\x53\x20\106\105\124\x43\x48\40\x4e\105\130\x54\40" . $this->qb_limit . "\40\122\x4f\x57\123\40\x4f\x4e\114\131"; } goto O5vt2; A11sR: return preg_replace("\x2f\50\136\134\x53\x45\x4c\105\x43\x54\40\50\104\111\x53\124\111\x4e\x43\x54\51\77\51\x2f\x69", "\134\61\40\124\x4f\x50\x20" . $limit . "\40", $sql); goto sMFgx; sMFgx: } protected function _insert_batch($table, $keys, $values) { if (version_compare($this->version(), "\61\60", "\x3e\x3d")) { return parent::_insert_batch($table, $keys, $values); } return $this->db_debug ? $this->display_error("\x64\x62\137\x75\156\x73\x75\160\x70\x6f\x72\164\x65\x64\137\146\145\x61\164\165\x72\x65") : FALSE; } protected function _close() { sqlsrv_close($this->conn_id); } }
