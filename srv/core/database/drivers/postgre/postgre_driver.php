<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\x42\x41\x53\x45\120\101\x54\110") or exit("\116\157\40\144\151\x72\145\x63\164\40\163\143\162\x69\x70\x74\40\141\143\x63\145\163\163\40\x61\154\154\x6f\167\145\x64"); class CI_DB_postgre_driver extends CI_DB { public $dbdriver = "\160\x6f\x73\x74\x67\x72\x65"; public $schema = "\x70\165\142\x6c\x69\x63"; protected $_random_keyword = array("\122\x41\116\x44\117\x4d\50\51", "\x52\101\116\x44\117\115\50\51"); public function __construct($params) { goto tfnCK; caLH6: if (strpos($this->hostname, "\x2f") !== FALSE) { $this->port = ''; } goto FLjM1; Ya9v6: if ($this->username !== '') { $this->dsn .= "\165\x73\145\x72\x3d" . $this->username . "\x20"; $this->password === NULL or $this->dsn .= "\160\x61\x73\163\167\157\162\x64\x3d\47" . $this->password . "\x27\40"; } goto FoKQB; rnjy0: if (!empty($this->port) && ctype_digit($this->port)) { $this->dsn .= "\160\x6f\162\x74\x3d" . $this->port . "\40"; } goto Ya9v6; FoKQB: $this->database === '' or $this->dsn .= "\x64\x62\156\x61\155\x65\x3d" . $this->database . "\40"; goto LNuG5; YK9uC: if (!empty($this->dsn)) { return; } goto ZJjR1; tfnCK: parent::__construct($params); goto YK9uC; LNuG5: foreach (array("\143\x6f\x6e\156\145\x63\x74\x5f\164\x69\155\145\x6f\x75\164", "\x6f\x70\x74\151\x6f\x6e\163", "\x73\163\x6c\155\x6f\144\145", "\163\145\x72\166\x69\143\145") as $key) { if (isset($this->{$key}) && is_string($this->{$key}) && $this->{$key} !== '') { $this->dsn .= $key . "\75\47" . $this->{$key} . "\x27\x20"; } } goto By5Xp; ZJjR1: $this->dsn === '' or $this->dsn = ''; goto caLH6; FLjM1: $this->hostname === '' or $this->dsn = "\x68\x6f\x73\x74\x3d" . $this->hostname . "\40"; goto rnjy0; By5Xp: $this->dsn = rtrim($this->dsn); goto ZoOdK; ZoOdK: } public function db_connect($persistent = FALSE) { goto wP37A; zkG3R: return $this->conn_id; goto Tcrxh; f_RyY: if ($this->conn_id !== FALSE) { if ($persistent === TRUE && pg_connection_status($this->conn_id) === PGSQL_CONNECTION_BAD && pg_ping($this->conn_id) === FALSE) { return FALSE; } empty($this->schema) or $this->simple_query("\123\105\124\x20\x73\145\141\x72\x63\x68\x5f\160\141\164\150\x20\124\117\40" . $this->schema . "\x2c\x70\x75\142\x6c\151\143"); } goto zkG3R; wP37A: $this->conn_id = $persistent === TRUE ? pg_pconnect($this->dsn) : pg_connect($this->dsn); goto f_RyY; Tcrxh: } public function reconnect() { if (pg_ping($this->conn_id) === FALSE) { $this->conn_id = FALSE; } } protected function _db_set_charset($charset) { return pg_set_client_encoding($this->conn_id, $charset) === 0; } public function version() { goto fy87U; MmkFv: if (!$this->conn_id or ($pg_version = pg_version($this->conn_id)) === FALSE) { return FALSE; } goto EWURL; EWURL: return isset($pg_version["\163\x65\162\x76\145\162"]) && preg_match("\x23\x5e\x28\134\x64\x2b\134\56\134\x64\x2b\51\x23", $pg_version["\x73\145\162\166\x65\162"], $match) ? $this->data_cache["\166\x65\x72\163\151\157\156"] = $match[1] : parent::version(); goto LJbMx; fy87U: if (isset($this->data_cache["\166\x65\162\163\151\x6f\156"])) { return $this->data_cache["\x76\145\162\163\151\x6f\156"]; } goto MmkFv; LJbMx: } protected function _execute($sql) { return pg_query($this->conn_id, $sql); } protected function _trans_begin() { return (bool) pg_query($this->conn_id, "\x42\x45\107\x49\x4e"); } protected function _trans_commit() { return (bool) pg_query($this->conn_id, "\103\x4f\x4d\115\x49\x54"); } protected function _trans_rollback() { return (bool) pg_query($this->conn_id, "\122\117\114\x4c\102\x41\x43\x4b"); } public function is_write_type($sql) { if (preg_match("\43\136\x28\x49\116\123\x45\122\124\174\125\120\x44\101\x54\105\x29\56\52\x52\105\124\x55\x52\116\111\116\107\x5c\163\x2e\x2b\x28\x5c\x2c\x5c\163\77\56\x2b\51\52\x24\x23\151\x73", $sql)) { return FALSE; } return parent::is_write_type($sql); } protected function _escape_str($str) { return pg_escape_string($this->conn_id, $str); } public function escape($str) { if (is_php("\65\x2e\x34\56\x34") && (is_string($str) or is_object($str) && method_exists($str, "\x5f\x5f\164\x6f\x53\x74\162\x69\156\x67"))) { return pg_escape_literal($this->conn_id, $str); } elseif (is_bool($str)) { return $str ? "\x54\122\x55\105" : "\x46\x41\x4c\123\105"; } return parent::escape($str); } public function affected_rows() { return pg_affected_rows($this->result_id); } public function insert_id() { goto tXfnk; z6Jlr: $query = $query->row(); goto h8uLl; leylX: $column = func_num_args() > 1 ? func_get_arg(1) : NULL; goto sJ1Ti; sTqOR: $table = func_num_args() > 0 ? func_get_arg(0) : NULL; goto leylX; h8uLl: return (int) $query->ins_id; goto s1_yV; tXfnk: $v = $this->version(); goto sTqOR; xX3dk: $query = $this->query($sql); goto z6Jlr; sJ1Ti: if ($table === NULL && $v >= "\70\56\61") { $sql = "\123\x45\114\105\x43\124\x20\114\101\x53\x54\x56\x41\x4c\50\x29\x20\101\x53\40\x69\156\163\x5f\151\144"; } elseif ($table !== NULL) { if ($column !== NULL && $v >= "\70\x2e\x30") { goto hsqed; Uumbj: $query = $this->query($sql); goto n3i_J; hsqed: $sql = "\x53\x45\114\x45\103\124\40\x70\x67\x5f\147\145\164\137\163\145\x72\151\141\x6c\137\x73\x65\x71\x75\x65\156\x63\145\x28\47" . $table . "\47\54\40\x27" . $column . "\x27\x29\x20\x41\123\x20\163\145\x71"; goto Uumbj; YaeSN: $seq = $query->seq; goto qJsCD; n3i_J: $query = $query->row(); goto YaeSN; qJsCD: } else { $seq = $table; } $sql = "\123\x45\114\105\x43\x54\x20\103\125\122\122\126\x41\x4c\50\x27" . $seq . "\x27\51\x20\x41\x53\x20\x69\156\163\x5f\x69\x64"; } else { return pg_last_oid($this->result_id); } goto xX3dk; s1_yV: } protected function _list_tables($prefix_limit = FALSE) { goto Pp7sP; JCbR2: return $sql; goto AfbYT; Pp7sP: $sql = "\x53\x45\114\105\x43\124\x20\42\x74\141\142\x6c\145\x5f\x6e\141\x6d\145\42\x20\x46\122\x4f\x4d\40\42\x69\156\146\157\162\155\141\164\x69\x6f\x6e\137\x73\x63\150\145\155\x61\42\56\x22\x74\141\x62\x6c\145\x73\42\x20\x57\x48\x45\x52\105\x20\42\x74\x61\x62\x6c\x65\x5f\x73\143\x68\145\155\141\x22\x20\x3d\40\x27" . $this->schema . "\x27"; goto VcHCi; VcHCi: if ($prefix_limit !== FALSE && $this->dbprefix !== '') { return $sql . "\x20\x41\116\104\x20\x22\164\x61\x62\x6c\x65\137\x6e\x61\155\x65\42\40\114\x49\113\x45\40\x27" . $this->escape_like_str($this->dbprefix) . "\45\x27\x20" . sprintf($this->_like_escape_str, $this->_like_escape_chr); } goto JCbR2; AfbYT: } protected function _list_columns($table = '') { return "\x53\105\114\x45\x43\124\40\42\143\x6f\154\165\155\156\x5f\156\141\155\x65\42\xa\11\11\x9\x46\x52\117\x4d\x20\x22\x69\156\146\x6f\162\155\141\x74\151\x6f\156\x5f\x73\143\x68\145\x6d\x61\42\56\42\143\157\x6c\165\155\x6e\163\42\xa\x9\11\11\x57\x48\105\x52\105\x20\114\117\x57\105\x52\x28\42\164\x61\142\154\x65\x5f\156\x61\155\x65\42\x29\40\x3d\x20" . $this->escape(strtolower($table)); } public function field_data($table) { goto ap_o5; P5Rbs: $query = $query->result_object(); goto ag2TH; zwurx: if (($query = $this->query($sql)) === FALSE) { return FALSE; } goto P5Rbs; ag2TH: $retval = array(); goto mGvqk; lPsTc: return $retval; goto JHTmz; ap_o5: $sql = "\123\105\x4c\x45\103\124\x20\42\x63\x6f\x6c\x75\x6d\156\x5f\156\141\x6d\x65\x22\54\x20\x22\144\x61\x74\141\x5f\x74\171\x70\x65\42\x2c\x20\42\143\x68\x61\162\x61\x63\164\x65\x72\x5f\155\x61\x78\x69\155\x75\155\x5f\x6c\x65\156\x67\164\x68\42\x2c\40\42\x6e\165\x6d\x65\x72\151\143\137\x70\x72\145\x63\x69\x73\x69\157\x6e\42\54\x20\x22\x63\157\x6c\x75\x6d\x6e\x5f\144\145\146\141\x75\x6c\x74\x22\xa\x9\x9\x9\106\x52\x4f\115\x20\x22\151\x6e\146\x6f\162\x6d\x61\x74\151\x6f\x6e\x5f\163\x63\150\x65\x6d\141\42\x2e\x22\143\x6f\x6c\165\155\x6e\x73\42\xa\x9\11\11\127\110\105\122\x45\40\114\117\x57\105\x52\x28\x22\164\x61\142\154\145\x5f\x6e\141\x6d\145\42\x29\x20\75\40" . $this->escape(strtolower($table)); goto zwurx; mGvqk: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]->column_name; $retval[$i]->type = $query[$i]->data_type; $retval[$i]->max_length = $query[$i]->character_maximum_length > 0 ? $query[$i]->character_maximum_length : $query[$i]->numeric_precision; $retval[$i]->default = $query[$i]->column_default; } goto lPsTc; JHTmz: } public function error() { return array("\x63\157\144\x65" => '', "\x6d\145\163\163\141\x67\145" => pg_last_error($this->conn_id)); } public function order_by($orderby, $direction = '', $escape = NULL) { goto hThDb; hThDb: $direction = strtoupper(trim($direction)); goto lvbU0; mvXLg: return parent::order_by($orderby, $direction, $escape); goto oSYXv; lvbU0: if ($direction === "\x52\101\116\x44\117\x4d") { goto vfcCB; a1iQW: $orderby = $this->_random_keyword[0]; goto v5bi5; v5bi5: $direction = ''; goto tHrme; vfcCB: if (!is_float($orderby) && ctype_digit((string) $orderby)) { $orderby = $orderby > 1 ? (float) "\60\56" . $orderby : (float) $orderby; } goto qFR6U; qFR6U: if (is_float($orderby)) { $this->simple_query("\123\105\124\x20\123\x45\105\104\40" . $orderby); } goto a1iQW; tHrme: $escape = FALSE; goto Uo2wk; Uo2wk: } goto mvXLg; oSYXv: } protected function _update($table, $values) { goto W4B2S; ysjgn: $this->qb_orderby = array(); goto dRbpc; W4B2S: $this->qb_limit = FALSE; goto ysjgn; dRbpc: return parent::_update($table, $values); goto rycGg; rycGg: } protected function _update_batch($table, $values, $index) { goto lpg8k; nydRj: return "\125\x50\x44\101\124\105\40" . $table . "\x20\123\105\124\x20" . substr($cases, 0, -2) . $this->_compile_wh("\161\x62\x5f\167\x68\145\162\x65"); goto k8oB0; CoXpq: $this->where($val[$index]["\x66\x69\145\154\x64"] . "\x20\111\116\50" . implode("\54", $ids) . "\x29", NULL, FALSE); goto nydRj; NR270: foreach ($final as $k => $v) { $cases .= $k . "\40\x3d\x20\x28\x43\101\123\x45\40" . $val[$index]["\x66\151\145\154\x64"] . "\xa" . implode("\12", $v) . "\xa" . "\105\x4c\x53\105\40" . $k . "\40\105\116\104\51\54\40"; } goto CoXpq; lpg8k: $ids = array(); goto prj_n; k6qyt: $cases = ''; goto NR270; prj_n: foreach ($values as $key => $val) { $ids[] = $val[$index]["\166\x61\154\165\145"]; foreach (array_keys($val) as $field) { if ($field !== $index) { $final[$val[$field]["\146\x69\x65\154\x64"]][] = "\x57\x48\x45\116\40" . $val[$index]["\x76\x61\154\165\145"] . "\40\124\110\x45\116\x20" . $val[$field]["\x76\x61\x6c\x75\145"]; } } } goto k6qyt; k8oB0: } protected function _delete($table) { $this->qb_limit = FALSE; return parent::_delete($table); } protected function _limit($sql) { return $sql . "\x20\x4c\x49\x4d\111\x54\40" . $this->qb_limit . ($this->qb_offset ? "\40\x4f\106\x46\123\105\124\x20" . $this->qb_offset : ''); } protected function _close() { pg_close($this->conn_id); } }
