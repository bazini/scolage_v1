<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\x41\123\105\x50\101\124\x48") or exit("\116\x6f\x20\144\x69\x72\x65\143\164\40\x73\143\162\151\160\164\x20\141\143\x63\x65\163\x73\x20\x61\x6c\154\x6f\167\x65\144"); class CI_DB_sqlite3_driver extends CI_DB { public $dbdriver = "\x73\x71\x6c\151\x74\145\63"; protected $_random_keyword = array("\x52\101\x4e\104\x4f\115\x28\51", "\x52\x41\116\104\117\115\x28\x29"); public function db_connect($persistent = FALSE) { if ($persistent) { log_message("\144\x65\x62\165\147", "\123\x51\x4c\x69\164\145\63\40\x64\x6f\145\163\156\47\x74\40\x73\x75\x70\x70\157\x72\164\x20\x70\145\162\163\x69\x73\164\x65\156\164\x20\x63\157\x6e\x6e\145\x63\x74\151\x6f\156\x73"); } try { return !$this->password ? new SQLite3($this->database) : new SQLite3($this->database, SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE, $this->password); } catch (Exception $e) { return FALSE; } } public function version() { goto K1BQi; niJ7G: $version = SQLite3::version(); goto ATe0p; K1BQi: if (isset($this->data_cache["\166\145\x72\163\x69\157\x6e"])) { return $this->data_cache["\166\x65\162\163\151\157\x6e"]; } goto niJ7G; ATe0p: return $this->data_cache["\x76\x65\162\x73\151\157\x6e"] = $version["\x76\145\162\163\151\157\x6e\123\x74\162\x69\156\x67"]; goto BAsfs; BAsfs: } protected function _execute($sql) { return $this->is_write_type($sql) ? $this->conn_id->exec($sql) : $this->conn_id->query($sql); } protected function _trans_begin() { return $this->conn_id->exec("\102\x45\107\x49\116\x20\124\122\101\x4e\123\x41\x43\124\111\x4f\116"); } protected function _trans_commit() { return $this->conn_id->exec("\x45\x4e\x44\x20\x54\x52\x41\x4e\x53\x41\x43\124\x49\117\116"); } protected function _trans_rollback() { return $this->conn_id->exec("\x52\x4f\x4c\x4c\102\x41\103\113"); } protected function _escape_str($str) { return $this->conn_id->escapeString($str); } public function affected_rows() { return $this->conn_id->changes(); } public function insert_id() { return $this->conn_id->lastInsertRowID(); } protected function _list_tables($prefix_limit = FALSE) { return "\x53\x45\114\105\103\124\40\x22\x4e\101\115\x45\x22\40\106\x52\x4f\x4d\40\x22\123\121\x4c\x49\x54\x45\x5f\x4d\x41\x53\124\105\x52\x22\40\127\x48\x45\122\105\40\42\x54\131\120\x45\42\40\x3d\x20\47\x74\x61\x62\154\145\47" . ($prefix_limit !== FALSE && $this->dbprefix != '' ? "\40\101\116\x44\x20\x22\116\101\x4d\105\x22\40\x4c\111\x4b\x45\40\47" . $this->escape_like_str($this->dbprefix) . "\x25\47\40" . sprintf($this->_like_escape_str, $this->_like_escape_chr) : ''); } public function list_fields($table) { goto niJ1O; Cyvbd: $fields = array(); goto q3nHV; q3nHV: foreach ($result->result_array() as $row) { $fields[] = $row["\x6e\x61\155\x65"]; } goto Eeq0n; Eeq0n: return $fields; goto TfwPh; niJ1O: if (($result = $this->query("\120\122\x41\107\115\x41\x20\124\101\x42\x4c\105\x5f\111\x4e\x46\117\50" . $this->protect_identifiers($table, TRUE, NULL, FALSE) . "\x29")) === FALSE) { return FALSE; } goto Cyvbd; TfwPh: } public function field_data($table) { goto CXG8p; tB8a2: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]["\x6e\x61\x6d\145"]; $retval[$i]->type = $query[$i]["\x74\171\160\x65"]; $retval[$i]->max_length = NULL; $retval[$i]->default = $query[$i]["\x64\146\x6c\x74\x5f\166\x61\154\x75\145"]; $retval[$i]->primary_key = isset($query[$i]["\160\153"]) ? (int) $query[$i]["\160\x6b"] : 0; } goto FnlTk; CXG8p: if (($query = $this->query("\120\x52\101\x47\115\x41\40\x54\101\x42\114\105\137\x49\x4e\106\117\x28" . $this->protect_identifiers($table, TRUE, NULL, FALSE) . "\51")) === FALSE) { return FALSE; } goto ODKK3; gjfHa: $retval = array(); goto tB8a2; ODKK3: $query = $query->result_array(); goto HzmT5; FnlTk: return $retval; goto bsgWp; HzmT5: if (empty($query)) { return FALSE; } goto gjfHa; bsgWp: } public function error() { return array("\143\x6f\x64\x65" => $this->conn_id->lastErrorCode(), "\155\x65\x73\163\141\x67\x65" => $this->conn_id->lastErrorMsg()); } protected function _replace($table, $keys, $values) { return "\x49\116\123\x45\x52\x54\x20\x4f\122\x20" . parent::_replace($table, $keys, $values); } protected function _truncate($table) { return "\104\x45\x4c\105\124\x45\40\106\x52\x4f\115\x20" . $table; } protected function _close() { $this->conn_id->close(); } }
