<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\x41\123\x45\x50\101\x54\x48") or exit("\116\157\x20\144\x69\162\145\x63\164\x20\163\x63\x72\151\x70\164\x20\141\143\x63\x65\163\x73\x20\x61\x6c\x6c\157\x77\145\x64"); class CI_DB_mysqli_result extends CI_DB_result { public function num_rows() { return is_int($this->num_rows) ? $this->num_rows : ($this->num_rows = $this->result_id->num_rows); } public function num_fields() { return $this->result_id->field_count; } public function list_fields() { goto h1GvD; E6B0J: $this->result_id->field_seek(0); goto fZ0oW; Kwp4R: return $field_names; goto trWc6; h1GvD: $field_names = array(); goto E6B0J; fZ0oW: while ($field = $this->result_id->fetch_field()) { $field_names[] = $field->name; } goto Kwp4R; trWc6: } public function field_data() { goto sA88x; RSwxO: return $retval; goto Nw_BU; iy3K2: for ($i = 0, $c = count($field_data); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $field_data[$i]->name; $retval[$i]->type = static::_get_field_type($field_data[$i]->type); $retval[$i]->max_length = $field_data[$i]->max_length; $retval[$i]->primary_key = (int) ($field_data[$i]->flags & MYSQLI_PRI_KEY_FLAG); $retval[$i]->default = $field_data[$i]->def; } goto RSwxO; sA88x: $retval = array(); goto cgbTo; cgbTo: $field_data = $this->result_id->fetch_fields(); goto iy3K2; Nw_BU: } private static function _get_field_type($type) { goto KG2Ay; i3kMR: return isset($map[$type]) ? $map[$type] : $type; goto L9ETM; KG2Ay: static $map; goto mYvD6; mYvD6: isset($map) or $map = array(MYSQLI_TYPE_DECIMAL => "\144\x65\x63\151\155\x61\x6c", MYSQLI_TYPE_BIT => "\x62\x69\164", MYSQLI_TYPE_TINY => "\164\151\x6e\171\x69\156\164", MYSQLI_TYPE_SHORT => "\163\155\141\154\154\x69\x6e\x74", MYSQLI_TYPE_INT24 => "\155\145\144\151\165\155\x69\x6e\164", MYSQLI_TYPE_LONG => "\151\x6e\x74", MYSQLI_TYPE_LONGLONG => "\x62\151\147\x69\156\x74", MYSQLI_TYPE_FLOAT => "\146\154\x6f\141\164", MYSQLI_TYPE_DOUBLE => "\x64\157\165\142\154\145", MYSQLI_TYPE_TIMESTAMP => "\164\151\x6d\145\x73\164\141\x6d\x70", MYSQLI_TYPE_DATE => "\x64\x61\x74\x65", MYSQLI_TYPE_TIME => "\164\151\155\145", MYSQLI_TYPE_DATETIME => "\x64\141\x74\145\164\x69\x6d\x65", MYSQLI_TYPE_YEAR => "\171\x65\x61\x72", MYSQLI_TYPE_NEWDATE => "\144\x61\x74\145", MYSQLI_TYPE_INTERVAL => "\x69\x6e\164\x65\162\x76\x61\x6c", MYSQLI_TYPE_ENUM => "\x65\156\x75\155", MYSQLI_TYPE_SET => "\163\x65\164", MYSQLI_TYPE_TINY_BLOB => "\x74\x69\156\x79\x62\154\157\142", MYSQLI_TYPE_MEDIUM_BLOB => "\155\145\144\x69\x75\155\x62\154\x6f\x62", MYSQLI_TYPE_BLOB => "\142\x6c\157\142", MYSQLI_TYPE_LONG_BLOB => "\154\157\x6e\147\x62\154\157\142", MYSQLI_TYPE_STRING => "\143\x68\141\x72", MYSQLI_TYPE_VAR_STRING => "\166\141\x72\x63\x68\141\x72", MYSQLI_TYPE_GEOMETRY => "\x67\x65\157\155\x65\164\x72\171"); goto i3kMR; L9ETM: } public function free_result() { if (is_object($this->result_id)) { $this->result_id->free(); $this->result_id = FALSE; } } public function data_seek($n = 0) { return $this->result_id->data_seek($n); } protected function _fetch_assoc() { return $this->result_id->fetch_assoc(); } protected function _fetch_object($class_name = "\163\164\x64\103\154\141\x73\163") { return $this->result_id->fetch_object($class_name); } }
