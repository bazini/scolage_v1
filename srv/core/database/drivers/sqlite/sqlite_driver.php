<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\x41\123\105\x50\101\x54\x48") or exit("\x4e\x6f\x20\144\x69\162\145\143\164\x20\x73\143\x72\151\160\164\40\141\x63\143\x65\163\x73\40\x61\154\154\x6f\x77\x65\144"); class CI_DB_sqlite_driver extends CI_DB { public $dbdriver = "\163\161\154\151\x74\145"; protected $_random_keyword = array("\122\101\116\x44\117\x4d\x28\x29", "\x52\101\x4e\104\x4f\x4d\x28\51"); public function db_connect($persistent = FALSE) { goto VfS2h; i44Bf: return $conn_id; goto Rsm3I; gFAmA: $conn_id = $persistent === TRUE ? sqlite_popen($this->database, 0666, $error) : sqlite_open($this->database, 0666, $error); goto jqDFP; jqDFP: isset($error) && log_message("\x65\x72\x72\x6f\x72", $error); goto i44Bf; VfS2h: $error = NULL; goto gFAmA; Rsm3I: } public function version() { return isset($this->data_cache["\x76\145\162\163\151\157\156"]) ? $this->data_cache["\x76\145\162\x73\x69\157\156"] : ($this->data_cache["\166\x65\x72\163\x69\157\x6e"] = sqlite_libversion()); } protected function _execute($sql) { return $this->is_write_type($sql) ? sqlite_exec($this->conn_id, $sql) : sqlite_query($this->conn_id, $sql); } protected function _trans_begin() { return $this->simple_query("\x42\105\107\111\x4e\40\x54\122\101\116\123\x41\x43\x54\x49\x4f\x4e"); } protected function _trans_commit() { return $this->simple_query("\x43\x4f\115\x4d\x49\x54"); } protected function _trans_rollback() { return $this->simple_query("\122\x4f\x4c\114\102\x41\103\x4b"); } protected function _escape_str($str) { return sqlite_escape_string($str); } public function affected_rows() { return sqlite_changes($this->conn_id); } public function insert_id() { return sqlite_last_insert_rowid($this->conn_id); } protected function _list_tables($prefix_limit = FALSE) { goto gaVBX; gaVBX: $sql = "\x53\105\114\x45\x43\124\x20\156\141\155\145\40\106\x52\x4f\115\x20\163\x71\154\151\x74\x65\137\155\141\163\x74\x65\x72\40\x57\x48\x45\122\x45\40\x74\x79\x70\145\75\x27\x74\x61\x62\154\145\x27"; goto qrfwW; fO4g7: return $sql; goto WJAwp; qrfwW: if ($prefix_limit !== FALSE && $this->dbprefix != '') { return $sql . "\40\101\x4e\104\40\x27\156\x61\x6d\145\47\40\114\x49\113\105\40\47" . $this->escape_like_str($this->dbprefix) . "\x25\47\x20" . sprintf($this->_like_escape_str, $this->_like_escape_chr); } goto fO4g7; WJAwp: } protected function _list_columns($table = '') { return FALSE; } public function field_data($table) { goto Mh5C0; nCo1u: $query = $query->result_array(); goto Vi0nl; Vi0nl: if (empty($query)) { return FALSE; } goto zvV21; cl_X_: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]["\156\x61\x6d\x65"]; $retval[$i]->type = $query[$i]["\164\x79\x70\x65"]; $retval[$i]->max_length = NULL; $retval[$i]->default = $query[$i]["\x64\x66\154\164\x5f\x76\x61\154\x75\x65"]; $retval[$i]->primary_key = isset($query[$i]["\x70\x6b"]) ? (int) $query[$i]["\x70\153"] : 0; } goto IAtAc; zvV21: $retval = array(); goto cl_X_; IAtAc: return $retval; goto zav7u; Mh5C0: if (($query = $this->query("\x50\122\x41\x47\x4d\101\x20\x54\x41\x42\x4c\105\x5f\x49\x4e\x46\x4f\x28" . $this->protect_identifiers($table, TRUE, NULL, FALSE) . "\x29")) === FALSE) { return FALSE; } goto nCo1u; zav7u: } public function error() { goto PR7T2; PR7T2: $error = array("\143\x6f\144\145" => sqlite_last_error($this->conn_id)); goto hKO2F; PjVgk: return $error; goto lYHyc; hKO2F: $error["\x6d\x65\163\x73\x61\x67\145"] = sqlite_error_string($error["\143\x6f\x64\145"]); goto PjVgk; lYHyc: } protected function _replace($table, $keys, $values) { return "\111\x4e\123\105\x52\x54\40\x4f\122\x20" . parent::_replace($table, $keys, $values); } protected function _truncate($table) { return "\104\105\114\x45\x54\x45\40\x46\122\117\115\x20" . $table; } protected function _close() { sqlite_close($this->conn_id); } }
