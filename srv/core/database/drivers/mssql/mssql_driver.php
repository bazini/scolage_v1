<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\101\x53\x45\120\101\x54\110") or exit("\x4e\x6f\40\x64\x69\162\145\x63\164\x20\163\143\162\151\x70\164\40\x61\x63\143\x65\163\163\x20\141\x6c\154\157\x77\145\144"); class CI_DB_mssql_driver extends CI_DB { public $dbdriver = "\x6d\163\x73\161\154"; protected $_random_keyword = array("\116\105\x57\x49\x44\x28\51", "\x52\101\116\104\x28\x25\144\x29"); protected $_quoted_identifier = TRUE; public function __construct($params) { parent::__construct($params); if (!empty($this->port)) { $this->hostname .= (DIRECTORY_SEPARATOR === "\x5c" ? "\54" : "\72") . $this->port; } } public function db_connect($persistent = FALSE) { goto OC0qP; G2ppq: if ($this->database !== '' && !$this->db_select()) { log_message("\145\162\162\157\x72", "\125\156\x61\142\x6c\x65\40\x74\157\40\163\x65\154\x65\x63\x74\40\144\141\164\x61\x62\141\163\x65\x3a\40" . $this->database); return $this->db_debug === TRUE ? $this->display_error("\144\x62\x5f\x75\x6e\141\x62\154\x65\x5f\x74\x6f\x5f\x73\145\x6c\145\x63\164", $this->database) : FALSE; } goto rqRKz; Gh2dn: return $this->conn_id; goto lHGxd; OC0qP: $this->conn_id = $persistent ? mssql_pconnect($this->hostname, $this->username, $this->password) : mssql_connect($this->hostname, $this->username, $this->password); goto SBtKk; SBtKk: if (!$this->conn_id) { return FALSE; } goto G2ppq; yjwbs: $this->_escape_char = $this->_quoted_identifier ? "\x22" : array("\133", "\x5d"); goto Gh2dn; rqRKz: $query = $this->query("\x53\105\114\105\x43\x54\40\x43\x41\123\105\x20\127\x48\x45\116\x20\50\100\x40\x4f\x50\124\x49\117\116\123\x20\174\x20\62\65\x36\51\40\x3d\40\100\100\117\120\x54\111\117\116\x53\40\x54\x48\105\x4e\40\61\x20\x45\114\x53\105\x20\60\40\105\116\104\40\x41\123\x20\161\x69"); goto d3XCb; d3XCb: $query = $query->row_array(); goto HA26R; HA26R: $this->_quoted_identifier = empty($query) ? FALSE : (bool) $query["\161\x69"]; goto yjwbs; lHGxd: } public function db_select($database = '') { goto IhjAU; es2Qk: if (mssql_select_db("\x5b" . $database . "\135", $this->conn_id)) { goto Fi2Oy; JP0b6: return TRUE; goto nU0PA; Fi2Oy: $this->database = $database; goto z8fJH; z8fJH: $this->data_cache = array(); goto JP0b6; nU0PA: } goto tmDRI; IhjAU: if ($database === '') { $database = $this->database; } goto es2Qk; tmDRI: return FALSE; goto CU6BC; CU6BC: } protected function _execute($sql) { return mssql_query($sql, $this->conn_id); } protected function _trans_begin() { return $this->simple_query("\x42\x45\x47\x49\116\x20\124\122\101\116"); } protected function _trans_commit() { return $this->simple_query("\x43\117\115\x4d\x49\x54\x20\x54\122\x41\116"); } protected function _trans_rollback() { return $this->simple_query("\122\x4f\x4c\114\x42\x41\103\113\40\x54\122\101\x4e"); } public function affected_rows() { return mssql_rows_affected($this->conn_id); } public function insert_id() { goto kzveC; kzveC: $query = version_compare($this->version(), "\x38", "\76\x3d") ? "\123\105\114\105\x43\124\x20\123\x43\x4f\x50\105\137\111\x44\x45\116\124\x49\124\131\50\x29\x20\x41\x53\x20\154\141\163\164\x5f\x69\144" : "\123\x45\x4c\105\x43\x54\40\100\100\111\104\105\x4e\x54\x49\x54\x59\x20\101\x53\40\x6c\141\x73\x74\137\151\x64"; goto UFQfQ; UFQfQ: $query = $this->query($query); goto b5MSs; qWuyX: return $query->last_id; goto C7v7V; b5MSs: $query = $query->row(); goto qWuyX; C7v7V: } protected function _db_set_charset($charset) { return ini_set("\x6d\163\x73\161\154\56\x63\150\141\162\x73\x65\x74", $charset) !== FALSE; } protected function _version() { return "\123\x45\x4c\105\x43\x54\x20\123\105\122\x56\x45\122\120\x52\117\120\105\x52\x54\131\x28\47\x50\x72\x6f\x64\165\143\x74\126\145\x72\163\x69\x6f\x6e\x27\x29\40\101\123\40\x76\145\162"; } protected function _list_tables($prefix_limit = FALSE) { goto DrODQ; SaduQ: return $sql . "\40\117\122\104\x45\122\x20\x42\x59\40" . $this->escape_identifiers("\x6e\x61\155\145"); goto OgT1W; DrODQ: $sql = "\x53\x45\114\x45\x43\x54\40" . $this->escape_identifiers("\x6e\141\155\x65") . "\x20\x46\x52\x4f\x4d\x20" . $this->escape_identifiers("\x73\171\x73\157\x62\x6a\x65\143\164\163") . "\x20\127\110\x45\x52\105\x20" . $this->escape_identifiers("\164\171\x70\x65") . "\40\x3d\x20\47\125\47"; goto ZRxZH; ZRxZH: if ($prefix_limit !== FALSE && $this->dbprefix !== '') { $sql .= "\x20\x41\x4e\104\40" . $this->escape_identifiers("\156\x61\x6d\x65") . "\x20\114\x49\113\105\x20\x27" . $this->escape_like_str($this->dbprefix) . "\x25\47\x20" . sprintf($this->_like_escape_str, $this->_like_escape_chr); } goto SaduQ; OgT1W: } protected function _list_columns($table = '') { return "\x53\105\x4c\x45\103\x54\x20\103\117\x4c\x55\115\116\x5f\x4e\x41\115\x45\xa\x9\x9\x9\x46\x52\117\x4d\x20\111\x4e\x46\117\122\115\x41\x54\111\x4f\x4e\137\x53\103\x48\105\115\101\x2e\x43\157\154\x75\155\x6e\x73\xa\11\11\x9\127\110\105\x52\x45\40\x55\x50\120\105\122\50\124\x41\x42\x4c\105\137\x4e\101\115\x45\x29\x20\75\x20" . $this->escape(strtoupper($table)); } public function field_data($table) { goto YqD7W; G_LDT: if (($query = $this->query($sql)) === FALSE) { return FALSE; } goto B7bvf; lLU7x: $retval = array(); goto NqaAT; uSHyj: return $retval; goto XCX2A; B7bvf: $query = $query->result_object(); goto lLU7x; YqD7W: $sql = "\123\105\x4c\x45\x43\124\40\x43\x4f\x4c\x55\x4d\x4e\137\116\101\115\x45\54\40\104\101\x54\x41\137\124\131\x50\105\x2c\x20\103\110\x41\x52\101\x43\x54\105\122\137\x4d\x41\x58\x49\115\x55\115\137\114\105\116\x47\124\110\x2c\x20\116\x55\115\105\x52\x49\103\x5f\x50\122\105\103\x49\123\x49\117\x4e\54\x20\x43\117\114\x55\x4d\116\x5f\104\x45\x46\x41\x55\114\x54\12\x9\x9\x9\106\x52\x4f\x4d\x20\111\x4e\106\117\x52\x4d\x41\x54\x49\x4f\x4e\x5f\x53\x43\x48\x45\x4d\101\56\103\x6f\154\165\x6d\x6e\163\12\11\11\x9\127\x48\105\x52\105\x20\x55\x50\x50\x45\122\50\x54\x41\102\114\105\137\x4e\101\115\x45\x29\x20\75\40" . $this->escape(strtoupper($table)); goto G_LDT; NqaAT: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]->COLUMN_NAME; $retval[$i]->type = $query[$i]->DATA_TYPE; $retval[$i]->max_length = $query[$i]->CHARACTER_MAXIMUM_LENGTH > 0 ? $query[$i]->CHARACTER_MAXIMUM_LENGTH : $query[$i]->NUMERIC_PRECISION; $retval[$i]->default = $query[$i]->COLUMN_DEFAULT; } goto uSHyj; XCX2A: } public function error() { goto Qi3Qb; vfJcw: return $error; goto R1XAz; dPo5u: if (!empty($message)) { $error["\x63\x6f\x64\145"] = $this->query("\123\x45\114\105\x43\124\40\100\x40\x45\122\x52\x4f\x52\x20\x41\x53\x20\x63\x6f\144\145")->row()->code; $error["\x6d\x65\163\163\141\x67\x65"] = $message; } goto vfJcw; Qi3Qb: static $error = array("\x63\x6f\144\x65" => 0, "\155\145\163\163\x61\x67\x65" => NULL); goto vMDpU; vMDpU: $message = mssql_get_last_message(); goto dPo5u; R1XAz: } protected function _update($table, $values) { goto xfoUc; xfoUc: $this->qb_limit = FALSE; goto KYx4G; KYx4G: $this->qb_orderby = array(); goto fvEx_; fvEx_: return parent::_update($table, $values); goto zrJ3F; zrJ3F: } protected function _truncate($table) { return "\x54\122\x55\116\103\101\124\x45\x20\124\101\102\x4c\105\40" . $table; } protected function _delete($table) { if ($this->qb_limit) { return "\127\111\124\x48\40\143\151\x5f\144\x65\x6c\x65\x74\x65\x20\x41\x53\x20\x28\123\105\114\105\103\x54\x20\x54\x4f\120\40" . $this->qb_limit . "\x20\x2a\x20\x46\x52\x4f\115\40" . $table . $this->_compile_wh("\161\x62\137\167\150\x65\x72\x65") . "\51\x20\x44\105\114\x45\x54\105\40\x46\122\x4f\x4d\x20\143\151\x5f\144\x65\x6c\145\x74\145"; } return parent::_delete($table); } protected function _limit($sql) { goto Qivjt; A3cJZ: if (version_compare($this->version(), "\x39", "\76\x3d") && $this->qb_offset && !empty($this->qb_orderby)) { goto WNdzC; WNdzC: $orderby = $this->_compile_order_by(); goto dB9YC; s_uFe: if (count($this->qb_select) === 0 or strpos(implode("\54", $this->qb_select), "\x2a") !== FALSE) { $select = "\x2a"; } else { goto h3EEL; Ls_3a: $select = implode("\x2c\x20", $select); goto HPm38; hRjUL: for ($i = 0, $c = count($this->qb_select); $i < $c; $i++) { $select[] = preg_match("\x2f\x28\77\72\134\163\174\134\x2e\x29" . $field_regexp . "\x24\x2f\151", $this->qb_select[$i], $m) ? $m[1] : $this->qb_select[$i]; } goto Ls_3a; h3EEL: $select = array(); goto OAX1N; OAX1N: $field_regexp = $this->_quoted_identifier ? "\50\x22\x5b\x5e\134\42\135\53\x22\51" : "\x28\x5c\133\133\x5e\134\x5d\x5d\x2b\134\x5d\x29"; goto hRjUL; HPm38: } goto LQNHw; LQNHw: return "\123\105\x4c\x45\103\124\40" . $select . "\40\106\x52\x4f\x4d\x20\x28\12\xa" . preg_replace("\57\136\x28\x53\x45\x4c\x45\103\124\x28\x20\x44\111\123\x54\x49\x4e\103\x54\51\x3f\51\57\151", "\134\x31\40\x52\117\127\x5f\116\x55\115\x42\105\122\x28\x29\x20\117\126\105\122\50" . trim($orderby) . "\51\40\101\123\40" . $this->escape_identifiers("\103\111\x5f\162\157\x77\156\x75\155") . "\54\40", $sql) . "\12\12\x29\40" . $this->escape_identifiers("\103\x49\x5f\163\x75\142\161\x75\x65\162\171") . "\xa\127\x48\x45\122\x45\40" . $this->escape_identifiers("\x43\111\x5f\162\157\167\x6e\x75\x6d") . "\x20\102\105\x54\x57\105\105\116\x20" . ($this->qb_offset + 1) . "\x20\101\x4e\104\40" . $limit; goto JUavT; dB9YC: $sql = trim(substr($sql, 0, strrpos($sql, $orderby))); goto s_uFe; JUavT: } goto fKRir; Qivjt: $limit = $this->qb_offset + $this->qb_limit; goto A3cJZ; fKRir: return preg_replace("\57\50\136\x5c\123\x45\114\105\103\124\40\x28\104\x49\x53\124\x49\x4e\x43\x54\x29\77\51\x2f\151", "\134\x31\x20\x54\117\120\x20" . $limit . "\x20", $sql); goto nLzpN; nLzpN: } protected function _insert_batch($table, $keys, $values) { if (version_compare($this->version(), "\x31\60", "\76\75")) { return parent::_insert_batch($table, $keys, $values); } return $this->db_debug ? $this->display_error("\144\142\137\x75\x6e\x73\x75\160\160\157\x72\x74\x65\144\137\x66\x65\x61\x74\165\x72\x65") : FALSE; } protected function _close() { mssql_close($this->conn_id); } }
