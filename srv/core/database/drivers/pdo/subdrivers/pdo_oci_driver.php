<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\x42\x41\x53\105\120\101\x54\110") or exit("\x4e\x6f\x20\x64\151\162\145\x63\x74\x20\x73\143\x72\151\160\164\40\x61\x63\x63\x65\x73\163\40\x61\154\154\157\167\145\144"); class CI_DB_pdo_oci_driver extends CI_DB_pdo_driver { public $subdriver = "\x6f\143\x69"; protected $_reserved_identifiers = array("\x2a", "\x72\x6f\x77\x6e\165\155"); protected $_random_keyword = array("\x41\x53\103", "\101\x53\x43"); protected $_count_string = "\123\x45\114\x45\103\124\x20\103\117\x55\x4e\124\50\x31\x29\40\x41\123\x20"; public function __construct($params) { parent::__construct($params); if (empty($this->dsn)) { goto vmQQO; Yu7uo: empty($this->char_set) or $this->dsn .= "\73\143\150\x61\162\x73\145\164\x3d" . $this->char_set; goto KY88G; vmQQO: $this->dsn = "\x6f\143\x69\72\x64\x62\x6e\141\155\145\x3d"; goto YIqVg; YIqVg: if (empty($this->hostname) && empty($this->port)) { $this->dsn .= $this->database; } else { $this->dsn .= "\57\x2f" . (empty($this->hostname) ? "\x31\62\x37\x2e\x30\x2e\60\56\x31" : $this->hostname) . (empty($this->port) ? '' : "\72" . $this->port) . "\57"; empty($this->database) or $this->dsn .= $this->database; } goto Yu7uo; KY88G: } elseif (!empty($this->char_set) && strpos($this->dsn, "\x63\x68\x61\162\x73\x65\x74\75", 4) === FALSE) { $this->dsn .= "\x3b\x63\150\141\x72\x73\145\x74\x3d" . $this->char_set; } } public function version() { goto a0J0d; PLsKV: return FALSE; goto Nu5sp; l3zC2: $version_string = parent::version(); goto YJAtx; YJAtx: if (preg_match("\43\x52\145\154\x65\x61\163\145\134\163\x28\x3f\74\x76\x65\x72\163\151\x6f\x6e\76\x5c\144\53\x28\77\x3a\134\56\x5c\x64\53\51\53\51\43", $version_string, $match)) { return $this->data_cache["\166\145\x72\163\151\157\156"] = $match[1]; } goto PLsKV; a0J0d: if (isset($this->data_cache["\166\x65\162\163\x69\x6f\x6e"])) { return $this->data_cache["\x76\145\x72\163\151\157\x6e"]; } goto l3zC2; Nu5sp: } protected function _list_tables($prefix_limit = FALSE) { goto FC3Hi; q63nH: if ($prefix_limit === TRUE && $this->dbprefix !== '') { return $sql . "\x20\x57\x48\x45\122\105\x20\42\124\x41\x42\114\105\x5f\x4e\x41\115\105\x22\x20\x4c\111\x4b\x45\x20\x27" . $this->escape_like_str($this->dbprefix) . "\x25\x27\40" . sprintf($this->_like_escape_str, $this->_like_escape_chr); } goto cdUrw; FC3Hi: $sql = "\x53\105\x4c\x45\103\124\x20\42\124\101\102\x4c\105\x5f\x4e\x41\115\105\42\40\106\x52\x4f\x4d\40\x22\101\114\x4c\x5f\124\x41\102\x4c\x45\x53\42"; goto q63nH; cdUrw: return $sql; goto khkXG; khkXG: } protected function _list_columns($table = '') { if (strpos($table, "\56") !== FALSE) { sscanf($table, "\x25\x5b\136\56\135\56\x25\x73", $owner, $table); } else { $owner = $this->username; } return "\x53\105\x4c\x45\x43\124\x20\x43\x4f\x4c\x55\x4d\x4e\137\116\x41\115\x45\x20\x46\122\117\115\x20\101\x4c\114\137\124\x41\102\137\x43\117\114\x55\115\116\123\xa\11\x9\11\127\110\x45\x52\105\x20\x55\x50\x50\105\122\50\117\x57\x4e\105\122\x29\x20\75\x20" . $this->escape(strtoupper($owner)) . "\12\11\11\11\x9\x41\x4e\x44\40\x55\x50\x50\x45\x52\x28\x54\x41\102\114\x45\137\x4e\101\115\x45\51\x20\x3d\40" . $this->escape(strtoupper($table)); } public function field_data($table) { goto gk5O1; t4Fgq: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]->COLUMN_NAME; $retval[$i]->type = $query[$i]->DATA_TYPE; $length = $query[$i]->CHAR_LENGTH > 0 ? $query[$i]->CHAR_LENGTH : $query[$i]->DATA_PRECISION; if ($length === NULL) { $length = $query[$i]->DATA_LENGTH; } $retval[$i]->max_length = $length; $default = $query[$i]->DATA_DEFAULT; if ($default === NULL && $query[$i]->NULLABLE === "\x4e") { $default = ''; } $retval[$i]->default = $query[$i]->COLUMN_DEFAULT; } goto KJMbr; KJMbr: return $retval; goto zUS5c; w5HRW: $retval = array(); goto t4Fgq; pm0jm: $sql = "\x53\105\x4c\x45\103\x54\40\103\117\x4c\x55\115\x4e\x5f\116\101\115\x45\54\x20\104\x41\124\x41\x5f\x54\x59\x50\x45\54\40\x43\x48\101\x52\137\x4c\105\116\107\124\x48\54\x20\x44\101\x54\x41\x5f\120\x52\105\103\111\123\111\x4f\x4e\54\x20\x44\x41\x54\x41\137\x4c\x45\116\107\x54\110\54\x20\x44\x41\124\101\137\x44\105\x46\101\x55\114\124\x2c\x20\116\125\114\114\101\102\114\105\12\11\x9\x9\x46\122\x4f\115\40\x41\x4c\114\137\124\101\x42\137\103\117\114\x55\115\116\x53\xa\11\x9\11\127\x48\x45\x52\105\40\x55\x50\120\x45\122\50\117\x57\116\x45\122\51\x20\x3d\40" . $this->escape(strtoupper($owner)) . "\xa\x9\x9\11\x9\x41\116\x44\40\125\120\120\105\122\x28\124\101\102\x4c\x45\x5f\116\x41\115\105\51\40\x3d\40" . $this->escape(strtoupper($table)); goto U4rYX; gk5O1: if (strpos($table, "\x2e") !== FALSE) { sscanf($table, "\45\133\136\56\x5d\x2e\x25\x73", $owner, $table); } else { $owner = $this->username; } goto pm0jm; japve: $query = $query->result_object(); goto w5HRW; U4rYX: if (($query = $this->query($sql)) === FALSE) { return FALSE; } goto japve; zUS5c: } protected function _insert_batch($table, $keys, $values) { goto jNX19; b35P0: return $sql . "\123\x45\114\x45\x43\x54\x20\52\40\106\x52\x4f\115\x20\144\x75\x61\154"; goto krxFd; jNX19: $keys = implode("\54\x20", $keys); goto DyUDR; DyUDR: $sql = "\111\x4e\x53\x45\122\124\x20\101\114\x4c\12"; goto ixJhp; ixJhp: for ($i = 0, $c = count($values); $i < $c; $i++) { $sql .= "\11\x49\116\x54\x4f\40" . $table . "\40\50" . $keys . "\x29\x20\x56\x41\114\x55\105\x53\x20" . $values[$i] . "\xa"; } goto b35P0; krxFd: } protected function _delete($table) { if ($this->qb_limit) { $this->where("\162\157\167\x6e\x75\x6d\x20\x3c\x3d\x20", $this->qb_limit, FALSE); $this->qb_limit = FALSE; } return parent::_delete($table); } protected function _limit($sql) { if (version_compare($this->version(), "\61\62\56\61", "\76\75")) { empty($this->qb_orderby) && ($sql .= "\40\x4f\x52\104\x45\x52\40\x42\131\x20\61"); return $sql . "\40\x4f\x46\106\x53\x45\x54\40" . (int) $this->qb_offset . "\x20\122\x4f\127\123\x20\106\x45\x54\103\110\40\x4e\105\x58\x54\40" . $this->qb_limit . "\40\122\x4f\127\123\x20\x4f\x4e\114\x59"; } return "\x53\105\114\x45\103\x54\40\52\x20\x46\x52\117\x4d\x20\x28\123\x45\114\105\x43\124\x20\151\x6e\156\x65\x72\x5f\x71\x75\x65\162\x79\56\52\54\x20\x72\157\167\x6e\165\155\40\x72\156\x75\155\40\x46\122\117\115\40\50" . $sql . "\51\40\151\x6e\156\x65\x72\x5f\161\165\x65\x72\x79\40\127\110\105\122\x45\40\162\157\x77\x6e\165\155\40\x3c\40" . ($this->qb_offset + $this->qb_limit + 1) . "\51" . ($this->qb_offset ? "\40\x57\x48\105\x52\105\40\162\156\x75\155\x20\76\x3d\40" . ($this->qb_offset + 1) : ''); } }
