<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\101\123\x45\x50\101\x54\x48") or exit("\116\x6f\40\144\x69\162\x65\x63\x74\x20\163\x63\x72\151\160\x74\x20\141\143\143\x65\163\163\x20\141\x6c\x6c\157\167\x65\x64"); class CI_DB_pdo_cubrid_forge extends CI_DB_pdo_forge { protected $_create_database = FALSE; protected $_drop_database = FALSE; protected $_create_table_keys = TRUE; protected $_drop_table_if = "\x44\x52\x4f\x50\x20\x54\x41\102\x4c\x45\x20\x49\106\x20\x45\x58\111\123\124\123"; protected $_unsigned = array("\x53\110\117\x52\x54" => "\111\116\124\105\107\105\122", "\123\x4d\x41\x4c\x4c\111\x4e\x54" => "\x49\116\x54\105\107\x45\122", "\111\116\x54" => "\102\111\x47\x49\116\x54", "\111\x4e\x54\105\x47\x45\x52" => "\102\x49\107\x49\x4e\124", "\102\x49\x47\x49\x4e\x54" => "\116\125\x4d\x45\122\111\x43", "\106\114\x4f\x41\124" => "\x44\x4f\125\x42\x4c\105", "\122\105\101\x4c" => "\104\117\125\102\114\105"); protected function _alter_table($alter_type, $table, $field) { goto DMphJ; BgVEb: for ($i = 0, $c = count($field); $i < $c; $i++) { if ($field[$i]["\x5f\x6c\x69\164\x65\x72\141\x6c"] !== FALSE) { $sqls[] = $sql . "\x20\103\x48\x41\116\x47\x45\40" . $field[$i]["\137\154\151\x74\x65\162\141\x6c"]; } else { $alter_type = empty($field[$i]["\x6e\x65\167\137\156\x61\155\x65"]) ? "\40\115\x4f\x44\111\106\131\x20" : "\x20\x43\x48\101\116\107\x45\x20"; $sqls[] = $sql . $alter_type . $this->_process_column($field[$i]); } } goto IP9U2; DMphJ: if (in_array($alter_type, array("\x44\x52\x4f\x50", "\101\104\x44"), TRUE)) { return parent::_alter_table($alter_type, $table, $field); } goto Zyxdw; hMC_5: $sqls = array(); goto BgVEb; Zyxdw: $sql = "\x41\x4c\124\105\x52\40\124\101\x42\x4c\105\40" . $this->db->escape_identifiers($table); goto hMC_5; IP9U2: return $sqls; goto b5VjM; b5VjM: } protected function _process_column($field) { goto E4WCT; kKVU3: if (empty($extra_clause) && isset($field["\x66\151\162\163\164"]) && $field["\146\x69\x72\163\164"] === TRUE) { $extra_clause = "\x20\x46\111\122\x53\124"; } goto q9Ad7; E4WCT: $extra_clause = isset($field["\x61\x66\164\145\x72"]) ? "\x20\x41\106\x54\105\x52\x20" . $this->db->escape_identifiers($field["\x61\146\x74\x65\162"]) : ''; goto kKVU3; q9Ad7: return $this->db->escape_identifiers($field["\x6e\141\x6d\145"]) . (empty($field["\x6e\x65\x77\x5f\x6e\x61\155\145"]) ? '' : "\40" . $this->db->escape_identifiers($field["\x6e\145\x77\x5f\156\x61\155\x65"])) . "\40" . $field["\x74\171\x70\145"] . $field["\x6c\x65\x6e\147\x74\150"] . $field["\x75\x6e\163\151\147\x6e\145\144"] . $field["\x6e\165\154\154"] . $field["\x64\145\x66\x61\x75\x6c\164"] . $field["\x61\x75\x74\157\137\151\x6e\143\x72\145\155\x65\x6e\164"] . $field["\165\156\151\161\x75\145"] . $extra_clause; goto QKN4e; QKN4e: } protected function _attr_type(&$attributes) { switch (strtoupper($attributes["\124\x59\x50\105"])) { case "\124\111\x4e\131\x49\x4e\x54": goto eTDu_; lOd1z: $attributes["\x55\116\x53\111\107\x4e\105\104"] = FALSE; goto Y1Gzu; eTDu_: $attributes["\x54\131\120\105"] = "\x53\x4d\101\x4c\114\x49\116\x54"; goto lOd1z; Y1Gzu: return; goto qPI2s; qPI2s: case "\115\x45\x44\x49\125\x4d\111\116\x54": goto Pdpf6; Pdpf6: $attributes["\x54\131\120\x45"] = "\111\116\124\105\107\105\x52"; goto Ey_3o; Ey_3o: $attributes["\125\x4e\123\111\107\x4e\105\104"] = FALSE; goto kbTfm; kbTfm: return; goto nUl7O; nUl7O: case "\x4c\117\116\x47\124\x45\130\124": $attributes["\x54\131\120\x45"] = "\123\x54\x52\111\x4e\107"; return; default: return; } } protected function _process_indexes($table) { goto hf0Ke; vBsqD: for ($i = 0, $c = count($this->keys); $i < $c; $i++) { if (is_array($this->keys[$i])) { for ($i2 = 0, $c2 = count($this->keys[$i]); $i2 < $c2; $i2++) { if (!isset($this->fields[$this->keys[$i][$i2]])) { unset($this->keys[$i][$i2]); continue; } } } elseif (!isset($this->fields[$this->keys[$i]])) { unset($this->keys[$i]); continue; } is_array($this->keys[$i]) or $this->keys[$i] = array($this->keys[$i]); $sql .= "\x2c\12\x9\113\105\131\40" . $this->db->escape_identifiers(implode("\x5f", $this->keys[$i])) . "\x20\x28" . implode("\54\x20", $this->db->escape_identifiers($this->keys[$i])) . "\x29"; } goto bj6RB; hf0Ke: $sql = ''; goto vBsqD; y5FHi: return $sql; goto sPPeh; bj6RB: $this->keys = array(); goto y5FHi; sPPeh: } }
