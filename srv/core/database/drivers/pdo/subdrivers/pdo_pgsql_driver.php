<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\x41\123\x45\x50\x41\x54\x48") or exit("\116\157\x20\x64\x69\x72\x65\x63\x74\x20\x73\143\x72\151\160\x74\x20\141\x63\x63\145\163\x73\40\x61\154\x6c\x6f\x77\145\x64"); class CI_DB_pdo_pgsql_driver extends CI_DB_pdo_driver { public $subdriver = "\160\x67\x73\161\154"; public $schema = "\x70\165\x62\x6c\151\x63"; protected $_random_keyword = array("\122\101\116\x44\117\115\x28\x29", "\x52\x41\116\104\117\x4d\x28\51"); public function __construct($params) { parent::__construct($params); if (empty($this->dsn)) { goto P201J; P201J: $this->dsn = "\x70\147\163\161\x6c\x3a\150\x6f\163\164\x3d" . (empty($this->hostname) ? "\x31\x32\x37\56\x30\56\x30\56\61" : $this->hostname); goto CBnr_; CBnr_: empty($this->port) or $this->dsn .= "\73\160\157\162\164\x3d" . $this->port; goto HQw9y; j5S4I: if (!empty($this->username)) { $this->dsn .= "\x3b\165\163\x65\x72\x3d" . $this->username; empty($this->password) or $this->dsn .= "\x3b\x70\141\163\x73\x77\x6f\x72\x64\75" . $this->password; } goto YEy4S; HQw9y: empty($this->database) or $this->dsn .= "\x3b\x64\142\156\141\x6d\145\75" . $this->database; goto j5S4I; YEy4S: } } public function db_connect($persistent = FALSE) { goto CYlbN; CYlbN: $this->conn_id = parent::db_connect($persistent); goto qtGnh; qtGnh: if (is_object($this->conn_id) && !empty($this->schema)) { $this->simple_query("\123\x45\x54\x20\163\145\141\x72\x63\x68\137\x70\141\164\150\40\x54\117\x20" . $this->schema . "\x2c\160\165\142\x6c\151\143"); } goto NXQpe; NXQpe: return $this->conn_id; goto aGEHV; aGEHV: } public function insert_id($name = NULL) { if ($name === NULL && version_compare($this->version(), "\x38\56\x31", "\x3e\x3d")) { goto Z8nrT; o2EmL: return $query->ins_id; goto K1I5Q; Z8nrT: $query = $this->query("\x53\x45\114\x45\103\x54\x20\x4c\x41\x53\x54\126\101\x4c\x28\51\40\x41\x53\40\x69\156\x73\137\x69\x64"); goto rPGlQ; rPGlQ: $query = $query->row(); goto o2EmL; K1I5Q: } return $this->conn_id->lastInsertId($name); } public function is_write_type($sql) { if (preg_match("\x23\x5e\50\x49\116\123\x45\122\x54\x7c\125\120\x44\101\x54\105\51\x2e\52\x52\105\124\125\122\116\x49\116\x47\134\163\x2e\x2b\x28\134\54\x5c\x73\77\x2e\53\x29\x2a\x24\43\x69\163", $sql)) { return FALSE; } return parent::is_write_type($sql); } public function escape($str) { if (is_bool($str)) { return $str ? "\x54\122\x55\x45" : "\x46\101\114\123\105"; } return parent::escape($str); } public function order_by($orderby, $direction = '', $escape = NULL) { goto NgQ0q; wp3O6: return parent::order_by($orderby, $direction, $escape); goto mS03K; fT1Li: if ($direction === "\122\101\x4e\x44\x4f\x4d") { goto ks0k6; MsNaB: $escape = FALSE; goto g82K4; B9irE: $orderby = $this->_random_keyword[0]; goto k9602; k9602: $direction = ''; goto MsNaB; OQ62G: if (is_float($orderby)) { $this->simple_query("\123\x45\x54\40\x53\105\105\x44\x20" . $orderby); } goto B9irE; ks0k6: if (!is_float($orderby) && ctype_digit((string) $orderby)) { $orderby = $orderby > 1 ? (float) "\60\56" . $orderby : (float) $orderby; } goto OQ62G; g82K4: } goto wp3O6; NgQ0q: $direction = strtoupper(trim($direction)); goto fT1Li; mS03K: } protected function _list_tables($prefix_limit = FALSE) { goto M02na; dtPk3: if ($prefix_limit === TRUE && $this->dbprefix !== '') { return $sql . "\40\101\x4e\104\x20\42\164\141\142\154\145\x5f\x6e\x61\155\145\42\40\114\111\x4b\105\40\x27" . $this->escape_like_str($this->dbprefix) . "\x25\47\x20" . sprintf($this->_like_escape_str, $this->_like_escape_chr); } goto arfDe; M02na: $sql = "\x53\105\x4c\105\103\124\40\x22\x74\141\142\154\x65\x5f\x6e\141\155\x65\42\40\x46\122\x4f\x4d\x20\42\151\x6e\146\x6f\x72\x6d\x61\x74\151\x6f\156\137\163\143\150\x65\x6d\141\42\56\42\164\141\x62\x6c\x65\x73\x22\x20\x57\x48\105\122\105\40\42\164\141\x62\x6c\x65\x5f\163\x63\x68\x65\x6d\141\42\40\x3d\40\x27" . $this->schema . "\x27"; goto dtPk3; arfDe: return $sql; goto iCD2B; iCD2B: } protected function _list_columns($table = '') { return "\x53\105\x4c\105\x43\x54\x20\x22\143\x6f\x6c\165\x6d\x6e\x5f\x6e\141\155\x65\x22\12\11\x9\x9\x46\122\x4f\115\40\42\151\156\146\x6f\x72\x6d\x61\164\151\x6f\156\x5f\x73\x63\150\x65\x6d\x61\42\x2e\42\143\x6f\x6c\x75\155\156\x73\x22\12\11\x9\11\127\110\105\x52\105\40\x4c\117\127\105\x52\50\x22\x74\x61\142\154\145\137\x6e\x61\x6d\x65\42\51\40\x3d\40" . $this->escape(strtolower($table)); } public function field_data($table) { goto qBjbq; yXY0Y: $retval = array(); goto xxPKS; xxPKS: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]->column_name; $retval[$i]->type = $query[$i]->data_type; $retval[$i]->max_length = $query[$i]->character_maximum_length > 0 ? $query[$i]->character_maximum_length : $query[$i]->numeric_precision; $retval[$i]->default = $query[$i]->column_default; } goto S8ZC5; NoPl6: if (($query = $this->query($sql)) === FALSE) { return FALSE; } goto D6Ek9; D6Ek9: $query = $query->result_object(); goto yXY0Y; qBjbq: $sql = "\123\105\114\105\x43\x54\40\x22\143\157\x6c\165\x6d\x6e\137\156\141\155\x65\42\x2c\40\42\x64\x61\164\x61\x5f\x74\x79\160\x65\x22\54\x20\42\x63\x68\141\x72\x61\143\164\145\162\137\x6d\141\x78\x69\155\165\x6d\x5f\x6c\145\156\147\164\x68\x22\54\x20\x22\x6e\165\155\x65\162\x69\x63\x5f\160\x72\x65\x63\x69\163\x69\157\x6e\42\x2c\40\x22\x63\157\154\x75\155\156\137\144\145\x66\x61\165\154\x74\42\12\11\x9\11\x46\x52\117\x4d\x20\x22\x69\x6e\146\x6f\x72\155\x61\164\151\x6f\x6e\137\x73\143\150\x65\155\141\42\56\42\143\157\x6c\165\155\x6e\163\x22\xa\x9\x9\x9\x57\110\105\x52\x45\x20\x4c\117\127\105\x52\x28\x22\x74\141\x62\x6c\145\x5f\x6e\141\155\x65\42\x29\40\75\40" . $this->escape(strtolower($table)); goto NoPl6; S8ZC5: return $retval; goto Wbkoe; Wbkoe: } protected function _update($table, $values) { goto O6TFY; mGobR: $this->qb_orderby = array(); goto LEsTD; LEsTD: return parent::_update($table, $values); goto Yi3D_; O6TFY: $this->qb_limit = FALSE; goto mGobR; Yi3D_: } protected function _update_batch($table, $values, $index) { goto XzIo8; BnxVZ: foreach ($values as $key => $val) { $ids[] = $val[$index]["\166\141\x6c\x75\x65"]; foreach (array_keys($val) as $field) { if ($field !== $index) { $final[$val[$field]["\x66\151\x65\154\144"]][] = "\127\x48\105\x4e\x20" . $val[$index]["\166\141\x6c\x75\x65"] . "\x20\x54\110\x45\x4e\40" . $val[$field]["\166\141\x6c\x75\x65"]; } } } goto PdW3E; Kyt8D: $this->where($val[$index]["\146\x69\x65\154\x64"] . "\40\x49\116\50" . implode("\x2c", $ids) . "\x29", NULL, FALSE); goto kPnIk; PdW3E: $cases = ''; goto qBIIv; kPnIk: return "\125\120\x44\101\124\x45\40" . $table . "\40\x53\105\x54\x20" . substr($cases, 0, -2) . $this->_compile_wh("\161\x62\137\167\150\x65\162\x65"); goto dUf8V; XzIo8: $ids = array(); goto BnxVZ; qBIIv: foreach ($final as $k => $v) { $cases .= $k . "\40\x3d\40\x28\103\x41\x53\105\40" . $val[$index]["\146\151\145\x6c\144"] . "\12" . implode("\12", $v) . "\12" . "\x45\x4c\x53\x45\x20" . $k . "\x20\x45\x4e\x44\51\54\40"; } goto Kyt8D; dUf8V: } protected function _delete($table) { $this->qb_limit = FALSE; return parent::_delete($table); } protected function _limit($sql) { return $sql . "\40\x4c\111\115\x49\124\x20" . $this->qb_limit . ($this->qb_offset ? "\40\117\x46\x46\123\x45\x54\40" . $this->qb_offset : ''); } }
