<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\101\x53\105\x50\x41\124\110") or exit("\116\157\x20\x64\x69\162\x65\143\x74\40\x73\143\x72\151\160\164\x20\141\143\143\x65\x73\x73\x20\x61\154\x6c\157\x77\x65\144"); class CI_DB_pdo_sqlsrv_driver extends CI_DB_pdo_driver { public $subdriver = "\163\161\x6c\x73\162\x76"; protected $_random_keyword = array("\116\105\x57\111\104\50\x29", "\122\x41\x4e\x44\50\45\144\51"); protected $_quoted_identifier; public function __construct($params) { parent::__construct($params); if (empty($this->dsn)) { goto FJ_Oj; ejlDH: if (isset($this->TrustServerCertificate)) { $this->dsn .= "\73\x54\x72\x75\163\x74\123\x65\x72\166\145\162\x43\x65\162\x74\151\146\x69\x63\141\164\x65\75" . $this->TrustServerCertificate; } goto Dkwc4; geDOR: empty($this->LoginTimeout) or $this->dsn .= "\x3b\114\157\147\151\x6e\124\151\x6d\x65\x6f\165\164\75" . $this->LoginTimeout; goto I6oGQ; mPrxw: empty($this->TraceFile) or $this->dsn .= "\x3b\x54\162\x61\143\145\x46\x69\154\145\x3d" . $this->TraceFile; goto Mhgz3; RFF1Z: if (isset($this->TraceOn)) { $this->dsn .= "\x3b\124\162\141\x63\145\117\156\75" . $this->TraceOn; } goto ejlDH; J3vh2: if ($this->encrypt === TRUE) { $this->dsn .= "\73\x45\156\143\x72\171\160\164\x3d\x31"; } goto RFF1Z; Dkwc4: empty($this->APP) or $this->dsn .= "\x3b\101\120\x50\x3d" . $this->APP; goto piVtf; jeGRi: empty($this->database) or $this->dsn .= "\73\x44\141\164\141\142\x61\x73\145\75" . $this->database; goto A5TNm; Mhgz3: empty($this->WSID) or $this->dsn .= "\x3b\x57\123\111\x44\75" . $this->WSID; goto fTUrz; A5TNm: if (isset($this->QuotedId)) { $this->dsn .= "\x3b\x51\165\x6f\164\145\x64\111\144\75" . $this->QuotedId; $this->_quoted_identifier = (bool) $this->QuotedId; } goto zoxsh; piVtf: empty($this->Failover_Partner) or $this->dsn .= "\73\x46\141\151\x6c\157\166\145\162\x5f\x50\141\x72\x74\x6e\145\162\75" . $this->Failover_Partner; goto geDOR; zoxsh: if (isset($this->ConnectionPooling)) { $this->dsn .= "\x3b\103\157\x6e\156\x65\143\x74\x69\x6f\x6e\120\x6f\x6f\x6c\151\156\147\75" . $this->ConnectionPooling; } goto J3vh2; qf2io: empty($this->port) or $this->dsn .= "\x2c" . $this->port; goto jeGRi; I6oGQ: empty($this->MultipleActiveResultSets) or $this->dsn .= "\73\115\165\154\164\x69\160\154\145\101\x63\x74\151\166\x65\x52\x65\x73\165\x6c\164\x53\145\x74\163\x3d" . $this->MultipleActiveResultSets; goto mPrxw; FJ_Oj: $this->dsn = "\x73\x71\154\163\x72\x76\x3a\x53\x65\162\x76\x65\x72\75" . (empty($this->hostname) ? "\x31\62\x37\56\60\56\x30\56\x31" : $this->hostname); goto qf2io; fTUrz: } elseif (preg_match("\x2f\121\165\x6f\x74\x65\144\x49\144\75\x28\x30\x7c\61\x29\57", $this->dsn, $match)) { $this->_quoted_identifier = (bool) $match[1]; } } public function db_connect($persistent = FALSE) { goto Ul857; Ul857: if (!empty($this->char_set) && preg_match("\x2f\x75\164\146\x5b\136\x38\x5d\52\x38\57\151", $this->char_set)) { $this->options[PDO::SQLSRV_ENCODING_UTF8] = 1; } goto LxG5W; pQLMJ: $query = $this->query("\x53\x45\114\x45\103\x54\x20\103\101\x53\105\40\127\110\105\116\x20\x28\x40\100\x4f\x50\124\x49\117\x4e\x53\40\x7c\x20\62\x35\66\51\40\x3d\40\100\x40\117\x50\124\111\x4f\x4e\123\x20\x54\x48\x45\116\x20\61\x20\105\x4c\123\x45\x20\x30\x20\105\x4e\x44\x20\x41\123\x20\x71\151"); goto H7_0f; emET3: if (!is_object($this->conn_id) or is_bool($this->_quoted_identifier)) { return $this->conn_id; } goto pQLMJ; LxG5W: $this->conn_id = parent::db_connect($persistent); goto emET3; ALJlj: $this->_escape_char = $this->_quoted_identifier ? "\42" : array("\133", "\x5d"); goto zZz2G; H7_0f: $query = $query->row_array(); goto p87Tu; p87Tu: $this->_quoted_identifier = empty($query) ? FALSE : (bool) $query["\x71\x69"]; goto ALJlj; zZz2G: return $this->conn_id; goto bABv8; bABv8: } protected function _list_tables($prefix_limit = FALSE) { goto aJM6g; TzEPD: if ($prefix_limit === TRUE && $this->dbprefix !== '') { $sql .= "\x20\x41\116\104\40" . $this->escape_identifiers("\x6e\141\x6d\x65") . "\x20\x4c\x49\x4b\105\40\x27" . $this->escape_like_str($this->dbprefix) . "\x25\x27\40" . sprintf($this->_like_escape_str, $this->_like_escape_chr); } goto LLYgI; aJM6g: $sql = "\123\105\114\x45\103\x54\40" . $this->escape_identifiers("\x6e\141\x6d\145") . "\x20\x46\x52\117\115\40" . $this->escape_identifiers("\x73\x79\163\x6f\x62\x6a\145\143\164\163") . "\40\127\110\x45\x52\105\40" . $this->escape_identifiers("\x74\171\x70\x65") . "\40\x3d\40\x27\125\x27"; goto TzEPD; LLYgI: return $sql . "\x20\x4f\122\104\105\122\40\x42\x59\x20" . $this->escape_identifiers("\156\141\155\x65"); goto kfotC; kfotC: } protected function _list_columns($table = '') { return "\123\x45\x4c\x45\103\124\x20\103\x4f\x4c\x55\x4d\116\137\x4e\x41\x4d\x45\12\11\11\11\106\122\117\x4d\40\x49\x4e\106\117\122\x4d\x41\x54\x49\117\x4e\x5f\x53\103\x48\x45\115\101\56\x43\157\x6c\x75\x6d\x6e\x73\xa\11\11\x9\x57\x48\105\122\105\x20\x55\120\x50\105\122\x28\x54\x41\x42\x4c\x45\x5f\x4e\101\115\105\51\x20\x3d\40" . $this->escape(strtoupper($table)); } public function field_data($table) { goto jHfaw; jHfaw: $sql = "\123\x45\114\105\103\124\40\103\x4f\114\x55\x4d\116\x5f\116\101\115\105\54\x20\x44\x41\x54\101\x5f\124\x59\120\105\x2c\x20\103\x48\101\122\101\x43\124\x45\x52\137\x4d\101\x58\x49\x4d\125\x4d\x5f\x4c\105\x4e\107\x54\110\54\40\x4e\x55\x4d\105\x52\111\x43\137\120\x52\x45\103\x49\123\x49\x4f\x4e\x2c\x20\103\117\x4c\x55\x4d\116\137\x44\x45\106\x41\125\x4c\x54\xa\11\x9\x9\106\x52\x4f\x4d\40\111\x4e\106\x4f\x52\115\x41\124\111\117\116\137\123\x43\x48\x45\115\101\56\x43\157\x6c\x75\x6d\x6e\x73\xa\11\11\11\127\x48\105\x52\105\x20\125\120\120\105\122\50\124\101\102\114\105\137\x4e\x41\x4d\105\51\x20\75\40" . $this->escape(strtoupper($table)); goto caD2s; Ddt4U: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]->COLUMN_NAME; $retval[$i]->type = $query[$i]->DATA_TYPE; $retval[$i]->max_length = $query[$i]->CHARACTER_MAXIMUM_LENGTH > 0 ? $query[$i]->CHARACTER_MAXIMUM_LENGTH : $query[$i]->NUMERIC_PRECISION; $retval[$i]->default = $query[$i]->COLUMN_DEFAULT; } goto nwGw4; nwGw4: return $retval; goto MaaIJ; QUlFo: $retval = array(); goto Ddt4U; z0QS9: $query = $query->result_object(); goto QUlFo; caD2s: if (($query = $this->query($sql)) === FALSE) { return FALSE; } goto z0QS9; MaaIJ: } protected function _update($table, $values) { goto N4eOY; N4eOY: $this->qb_limit = FALSE; goto JORQb; JORQb: $this->qb_orderby = array(); goto mK1Xd; mK1Xd: return parent::_update($table, $values); goto rs6ol; rs6ol: } protected function _delete($table) { if ($this->qb_limit) { return "\127\x49\124\110\x20\x63\151\137\144\145\154\x65\x74\145\x20\101\x53\x20\50\123\x45\x4c\x45\x43\124\x20\124\x4f\120\x20" . $this->qb_limit . "\x20\x2a\40\x46\122\x4f\115\x20" . $table . $this->_compile_wh("\x71\x62\x5f\167\x68\x65\162\x65") . "\x29\40\x44\x45\x4c\105\x54\105\x20\x46\122\117\x4d\x20\143\x69\x5f\144\x65\x6c\145\164\x65"; } return parent::_delete($table); } protected function _limit($sql) { goto kcCBe; yKsAc: $limit = $this->qb_offset + $this->qb_limit; goto H7at8; BB9he: return preg_replace("\57\x28\136\134\x53\x45\x4c\105\103\x54\x20\50\x44\111\123\x54\111\116\103\124\x29\77\51\x2f\x69", "\134\x31\x20\124\117\x50\40" . $limit . "\x20", $sql); goto pqhRz; H7at8: if ($this->qb_offset && !empty($this->qb_orderby)) { goto c3e6t; t1913: return "\123\x45\114\x45\x43\124\x20" . $select . "\40\106\122\117\115\40\50\12\12" . preg_replace("\x2f\x5e\x28\x53\x45\114\x45\x43\124\50\x20\x44\111\123\x54\x49\116\x43\x54\51\x3f\x29\57\x69", "\134\61\40\122\117\x57\137\x4e\x55\115\102\105\122\x28\x29\x20\x4f\126\105\122\x28" . trim($orderby) . "\x29\x20\101\123\x20" . $this->escape_identifiers("\103\x49\x5f\162\x6f\x77\156\165\155") . "\54\40", $sql) . "\12\xa\51\40" . $this->escape_identifiers("\103\x49\x5f\163\165\x62\161\x75\x65\x72\171") . "\xa\x57\x48\x45\x52\105\40" . $this->escape_identifiers("\103\111\137\162\157\x77\x6e\165\x6d") . "\40\x42\105\124\x57\105\x45\x4e\x20" . ($this->qb_offset + 1) . "\x20\101\116\x44\40" . $limit; goto hxDug; c3e6t: $orderby = $this->_compile_order_by(); goto X0qGx; iswV2: if (count($this->qb_select) === 0 or strpos(implode("\x2c", $this->qb_select), "\x2a") !== FALSE) { $select = "\52"; } else { goto M68Vf; KytvC: $select = implode("\x2c\40", $select); goto K7shL; M68Vf: $select = array(); goto HVgWt; HVgWt: $field_regexp = $this->_quoted_identifier ? "\50\42\133\x5e\134\x22\x5d\53\x22\51" : "\x28\134\x5b\133\136\x5c\x5d\x5d\53\x5c\x5d\51"; goto X3EcW; X3EcW: for ($i = 0, $c = count($this->qb_select); $i < $c; $i++) { $select[] = preg_match("\x2f\50\77\72\x5c\x73\x7c\134\x2e\x29" . $field_regexp . "\44\57\151", $this->qb_select[$i], $m) ? $m[1] : $this->qb_select[$i]; } goto KytvC; K7shL: } goto t1913; X0qGx: $sql = trim(substr($sql, 0, strrpos($sql, $orderby))); goto iswV2; hxDug: } goto BB9he; kcCBe: if (version_compare($this->version(), "\x31\61", "\x3e\75")) { empty($this->qb_orderby) && ($sql .= "\40\117\122\104\105\122\40\102\131\x20\x31"); return $sql . "\40\x4f\106\x46\123\x45\x54\x20" . (int) $this->qb_offset . "\40\122\117\x57\x53\x20\x46\x45\124\103\x48\x20\x4e\x45\130\124\40" . $this->qb_limit . "\x20\x52\x4f\127\123\x20\117\116\x4c\x59"; } goto yKsAc; pqhRz: } protected function _insert_batch($table, $keys, $values) { if (version_compare($this->version(), "\61\60", "\x3e\75")) { return parent::_insert_batch($table, $keys, $values); } return $this->db_debug ? $this->display_error("\144\142\x5f\x75\156\163\x75\x70\x70\x6f\x72\164\145\x64\137\x66\x65\x61\164\165\162\145") : FALSE; } }
