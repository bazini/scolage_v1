<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\x42\101\x53\x45\120\101\x54\110") or exit("\116\x6f\40\144\151\x72\145\x63\x74\x20\x73\143\162\x69\x70\x74\x20\141\x63\143\x65\163\163\x20\x61\x6c\x6c\157\x77\145\144"); class CI_DB_pdo_dblib_driver extends CI_DB_pdo_driver { public $subdriver = "\144\142\154\x69\142"; protected $_random_keyword = array("\116\105\x57\x49\104\x28\51", "\122\x41\116\104\x28\45\x64\x29"); protected $_quoted_identifier; public function __construct($params) { parent::__construct($params); if (empty($this->dsn)) { goto Zlvr0; K705H: empty($this->database) or $this->dsn .= "\x3b\144\142\156\x61\x6d\x65\x3d" . $this->database; goto m3KyX; m3KyX: empty($this->char_set) or $this->dsn .= "\x3b\143\150\x61\162\x73\x65\x74\75" . $this->char_set; goto p2t3l; Zlvr0: $this->dsn = $params["\x73\165\142\144\162\x69\x76\145\162"] . "\x3a\150\x6f\x73\x74\75" . (empty($this->hostname) ? "\61\x32\x37\x2e\60\x2e\x30\56\x31" : $this->hostname); goto E8W1l; p2t3l: empty($this->appname) or $this->dsn .= "\73\x61\160\160\x6e\x61\155\145\x3d" . $this->appname; goto uzfGi; E8W1l: if (!empty($this->port)) { $this->dsn .= (DIRECTORY_SEPARATOR === "\134" ? "\x2c" : "\x3a") . $this->port; } goto K705H; uzfGi: } else { if (!empty($this->char_set) && strpos($this->dsn, "\x63\150\x61\x72\x73\145\x74\x3d", 6) === FALSE) { $this->dsn .= "\x3b\x63\x68\x61\x72\x73\x65\164\x3d" . $this->char_set; } $this->subdriver = "\x64\142\x6c\151\x62"; } } public function db_connect($persistent = FALSE) { goto EKfGG; pI88a: $this->_quoted_identifier = empty($query) ? FALSE : (bool) $query["\x71\151"]; goto qRfDs; EKfGG: if ($persistent === TRUE) { log_message("\144\145\x62\x75\147", "\x64\x62\x6c\x69\142\x20\144\x72\151\x76\145\162\x20\x64\157\145\163\x6e\47\x74\x20\163\x75\x70\160\157\162\164\x20\160\x65\162\163\x69\x73\164\x65\156\x74\40\143\x6f\156\x6e\x65\x63\164\x69\x6f\x6e\x73"); } goto IeZ63; kgt8b: if (!is_object($this->conn_id)) { return $this->conn_id; } goto mmGEF; MMiaP: return $this->conn_id; goto XCpaf; IeZ63: $this->conn_id = parent::db_connect(FALSE); goto kgt8b; mmGEF: $query = $this->query("\123\105\114\x45\103\x54\x20\x43\x41\x53\x45\40\x57\x48\x45\x4e\x20\x28\x40\x40\117\x50\x54\111\x4f\116\123\x20\174\x20\62\x35\66\51\40\75\40\100\100\x4f\x50\x54\111\117\116\x53\40\x54\110\x45\116\40\x31\x20\105\114\x53\105\40\x30\40\x45\x4e\104\x20\101\123\x20\x71\151"); goto FzOM9; FzOM9: $query = $query->row_array(); goto pI88a; qRfDs: $this->_escape_char = $this->_quoted_identifier ? "\x22" : array("\x5b", "\x5d"); goto MMiaP; XCpaf: } protected function _list_tables($prefix_limit = FALSE) { goto gLTJp; Dl4er: if ($prefix_limit === TRUE && $this->dbprefix !== '') { $sql .= "\40\101\116\104\40" . $this->escape_identifiers("\x6e\x61\x6d\145") . "\x20\x4c\x49\x4b\105\40\47" . $this->escape_like_str($this->dbprefix) . "\45\x27\40" . sprintf($this->_like_escape_str, $this->_like_escape_chr); } goto UQ3WT; UQ3WT: return $sql . "\x20\117\x52\x44\x45\x52\40\102\131\40" . $this->escape_identifiers("\156\x61\155\x65"); goto cxgeC; gLTJp: $sql = "\123\x45\114\105\x43\124\x20" . $this->escape_identifiers("\x6e\x61\x6d\x65") . "\40\x46\122\x4f\x4d\x20" . $this->escape_identifiers("\x73\171\163\157\142\x6a\145\143\x74\x73") . "\x20\127\x48\x45\122\105\40" . $this->escape_identifiers("\164\171\160\145") . "\x20\75\x20\47\125\47"; goto Dl4er; cxgeC: } protected function _list_columns($table = '') { return "\123\x45\114\x45\103\124\40\103\117\114\125\x4d\x4e\x5f\116\101\115\x45\xa\11\11\x9\106\122\x4f\115\x20\111\x4e\106\x4f\x52\115\101\x54\x49\x4f\116\x5f\123\x43\110\105\x4d\101\x2e\103\x6f\154\x75\155\x6e\163\12\11\x9\x9\127\x48\105\x52\105\40\x55\120\x50\x45\x52\x28\124\101\x42\114\x45\137\116\x41\x4d\x45\51\40\75\40" . $this->escape(strtoupper($table)); } public function field_data($table) { goto OK6jQ; FHe_I: return $retval; goto njNne; OK6jQ: $sql = "\123\105\x4c\x45\103\x54\x20\103\x4f\114\x55\115\x4e\137\x4e\101\115\x45\x2c\40\104\101\124\101\x5f\124\131\120\105\x2c\40\103\110\x41\122\x41\103\124\105\x52\x5f\x4d\x41\130\x49\115\125\x4d\x5f\114\105\x4e\107\x54\110\x2c\x20\116\x55\115\105\122\x49\x43\137\x50\122\105\x43\x49\x53\x49\x4f\116\54\40\x43\x4f\x4c\x55\x4d\116\x5f\x44\x45\x46\x41\x55\114\124\xa\11\11\11\106\x52\x4f\115\40\x49\x4e\106\117\122\x4d\101\124\111\x4f\116\x5f\x53\103\110\x45\115\101\56\103\x6f\x6c\165\x6d\156\163\xa\x9\11\x9\x57\110\x45\122\x45\40\x55\120\120\105\122\50\x54\x41\102\114\x45\137\x4e\x41\115\x45\51\x20\x3d\x20" . $this->escape(strtoupper($table)); goto FdWPv; pNY2n: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]->COLUMN_NAME; $retval[$i]->type = $query[$i]->DATA_TYPE; $retval[$i]->max_length = $query[$i]->CHARACTER_MAXIMUM_LENGTH > 0 ? $query[$i]->CHARACTER_MAXIMUM_LENGTH : $query[$i]->NUMERIC_PRECISION; $retval[$i]->default = $query[$i]->COLUMN_DEFAULT; } goto FHe_I; M6qYQ: $retval = array(); goto pNY2n; yICx1: $query = $query->result_object(); goto M6qYQ; FdWPv: if (($query = $this->query($sql)) === FALSE) { return FALSE; } goto yICx1; njNne: } protected function _update($table, $values) { goto Xuz3w; SVgVb: $this->qb_orderby = array(); goto YK2ot; Xuz3w: $this->qb_limit = FALSE; goto SVgVb; YK2ot: return parent::_update($table, $values); goto MuAok; MuAok: } protected function _delete($table) { if ($this->qb_limit) { return "\x57\x49\x54\x48\40\x63\x69\x5f\144\x65\x6c\145\164\x65\x20\101\123\x20\x28\x53\105\114\105\x43\124\40\x54\117\x50\40" . $this->qb_limit . "\x20\52\x20\106\122\117\x4d\x20" . $table . $this->_compile_wh("\x71\x62\x5f\x77\150\x65\x72\x65") . "\x29\x20\104\105\114\x45\x54\x45\40\106\122\117\115\x20\143\x69\x5f\144\x65\154\x65\x74\145"; } return parent::_delete($table); } protected function _limit($sql) { goto RGVbF; L4hMA: if (version_compare($this->version(), "\x39", "\76\75") && $this->qb_offset && !empty($this->qb_orderby)) { goto kk2m2; tHrHT: $sql = trim(substr($sql, 0, strrpos($sql, $orderby))); goto i6SlB; i6SlB: if (count($this->qb_select) === 0 or strpos(implode("\x2c", $this->qb_select), "\x2a") !== FALSE) { $select = "\x2a"; } else { goto ZgdVU; ZgdVU: $select = array(); goto SO6NE; SO6NE: $field_regexp = $this->_quoted_identifier ? "\x28\x22\x5b\x5e\x5c\42\135\x2b\x22\x29" : "\50\134\133\x5b\x5e\134\135\135\53\x5c\x5d\x29"; goto gIale; KcduX: $select = implode("\x2c\x20", $select); goto Jy3Ak; gIale: for ($i = 0, $c = count($this->qb_select); $i < $c; $i++) { $select[] = preg_match("\57\x28\77\72\x5c\163\174\134\56\x29" . $field_regexp . "\44\57\151", $this->qb_select[$i], $m) ? $m[1] : $this->qb_select[$i]; } goto KcduX; Jy3Ak: } goto DolN7; kk2m2: $orderby = $this->_compile_order_by(); goto tHrHT; DolN7: return "\123\x45\114\x45\x43\124\40" . $select . "\x20\x46\x52\117\x4d\x20\x28\xa\12" . preg_replace("\x2f\136\x28\x53\x45\114\105\x43\124\x28\x20\x44\111\x53\124\111\x4e\x43\x54\x29\77\x29\57\x69", "\x5c\61\40\122\x4f\127\x5f\x4e\x55\x4d\102\105\x52\50\x29\x20\x4f\x56\x45\122\x28" . trim($orderby) . "\x29\x20\101\123\40" . $this->escape_identifiers("\103\111\x5f\x72\x6f\x77\x6e\x75\x6d") . "\54\40", $sql) . "\xa\xa\x29\x20" . $this->escape_identifiers("\103\x49\x5f\163\x75\142\x71\165\x65\162\171") . "\xa\x57\110\x45\x52\x45\40" . $this->escape_identifiers("\x43\111\137\x72\x6f\x77\x6e\x75\x6d") . "\40\x42\x45\x54\127\105\x45\116\40" . ($this->qb_offset + 1) . "\x20\101\116\104\x20" . $limit; goto Dk878; Dk878: } goto QW36Q; RGVbF: $limit = $this->qb_offset + $this->qb_limit; goto L4hMA; QW36Q: return preg_replace("\x2f\50\x5e\x5c\123\105\x4c\105\103\x54\x20\50\104\111\123\x54\x49\116\x43\x54\51\77\51\x2f\x69", "\x5c\61\x20\x54\117\120\x20" . $limit . "\40", $sql); goto kYJMM; kYJMM: } protected function _insert_batch($table, $keys, $values) { if (version_compare($this->version(), "\x31\60", "\76\x3d")) { return parent::_insert_batch($table, $keys, $values); } return $this->db_debug ? $this->display_error("\x64\x62\x5f\165\156\163\165\x70\160\x6f\162\x74\x65\x64\x5f\146\x65\x61\164\165\x72\145") : FALSE; } public function version() { if (isset($this->data_cache["\166\145\162\x73\151\157\x6e"])) { return $this->data_cache["\166\x65\162\163\x69\x6f\156"]; } return $this->data_cache["\166\x65\162\163\x69\157\x6e"] = $this->conn_id->query("\x53\x45\114\x45\x43\124\x20\x53\x45\122\x56\105\x52\120\122\117\x50\105\122\x54\x59\x28\47\x50\x72\157\144\165\143\164\x56\x65\x72\x73\151\x6f\156\47\51\40\101\x53\40\166\145\x72")->fetchColumn(0); } }
