<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\102\101\123\x45\120\101\124\x48") or exit("\116\157\x20\144\151\x72\145\x63\164\40\163\143\x72\151\x70\164\x20\x61\143\x63\x65\x73\163\40\141\154\x6c\x6f\167\x65\144"); class CI_DB_pdo_sqlite_driver extends CI_DB_pdo_driver { public $subdriver = "\163\x71\154\151\x74\145"; protected $_random_keyword = array("\x52\101\116\104\x4f\x4d\50\51", "\122\101\116\104\117\115\50\x29"); public function __construct($params) { parent::__construct($params); if (empty($this->dsn)) { goto tUSLD; KUC70: if (empty($this->database) && empty($this->hostname)) { $this->database = "\x3a\155\145\155\x6f\162\x79\72"; } goto rDQhy; rDQhy: $this->database = empty($this->database) ? $this->hostname : $this->database; goto goYcH; tUSLD: $this->dsn = "\163\x71\x6c\151\x74\145\72"; goto KUC70; goYcH: } } protected function _list_tables($prefix_limit = FALSE) { goto CvhGT; CvhGT: $sql = "\x53\x45\x4c\x45\103\124\x20\42\116\101\x4d\105\x22\x20\106\122\117\x4d\40\x22\123\x51\114\111\x54\x45\x5f\115\101\123\124\x45\x52\42\40\x57\110\x45\x52\105\40\42\x54\x59\120\105\42\x20\75\40\47\164\141\142\x6c\x65\x27"; goto XNblu; XNblu: if ($prefix_limit === TRUE && $this->dbprefix !== '') { return $sql . "\40\101\x4e\104\x20\42\116\101\115\105\42\x20\114\x49\113\105\40\47" . $this->escape_like_str($this->dbprefix) . "\45\47\x20" . sprintf($this->_like_escape_str, $this->_like_escape_chr); } goto snKC1; snKC1: return $sql; goto JmBLo; JmBLo: } public function list_fields($table) { goto gRolH; C21JA: return $fields; goto Prxhj; gRolH: if (($result = $this->query("\120\122\x41\x47\x4d\x41\40\x54\101\102\x4c\105\x5f\111\116\x46\117\x28" . $this->protect_identifiers($table, TRUE, NULL, FALSE) . "\51")) === FALSE) { return FALSE; } goto yGI2y; Um2dF: foreach ($result->result_array() as $row) { $fields[] = $row["\156\141\x6d\145"]; } goto C21JA; yGI2y: $fields = array(); goto Um2dF; Prxhj: } public function field_data($table) { goto IYICa; IYICa: if (($query = $this->query("\x50\x52\101\107\x4d\101\40\x54\101\102\x4c\x45\137\111\116\106\x4f\x28" . $this->protect_identifiers($table, TRUE, NULL, FALSE) . "\x29")) === FALSE) { return FALSE; } goto jLeMp; wB4wZ: $retval = array(); goto ZoVKS; jLeMp: $query = $query->result_array(); goto V01vY; V01vY: if (empty($query)) { return FALSE; } goto wB4wZ; ZoVKS: for ($i = 0, $c = count($query); $i < $c; $i++) { $retval[$i] = new stdClass(); $retval[$i]->name = $query[$i]["\156\x61\155\x65"]; $retval[$i]->type = $query[$i]["\164\171\160\x65"]; $retval[$i]->max_length = NULL; $retval[$i]->default = $query[$i]["\x64\146\154\164\x5f\x76\141\x6c\165\145"]; $retval[$i]->primary_key = isset($query[$i]["\x70\153"]) ? (int) $query[$i]["\x70\x6b"] : 0; } goto dJi7o; dJi7o: return $retval; goto Fzh08; Fzh08: } protected function _replace($table, $keys, $values) { return "\111\116\x53\105\122\124\40\x4f\122\40" . parent::_replace($table, $keys, $values); } protected function _truncate($table) { return "\104\x45\x4c\105\124\105\x20\106\122\117\115\40" . $table; } }
