<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:16              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 defined("\x42\x41\x53\105\120\101\124\x48") or exit("\116\157\x20\x64\x69\x72\145\143\164\40\x73\143\162\x69\160\x74\x20\141\x63\143\145\x73\163\x20\x61\x6c\154\x6f\x77\x65\144"); class CI_Lang { public $language = array(); public $is_loaded = array(); public function __construct() { log_message("\151\156\146\157", "\x4c\141\x6e\147\165\x61\x67\145\40\103\x6c\x61\x73\x73\40\x49\156\x69\x74\151\x61\x6c\151\x7a\145\x64"); } public function load($langfile, $idiom = '', $return = FALSE, $add_suffix = TRUE, $alt_path = '') { goto A2_Qm; bOyvo: if ($alt_path !== '') { $alt_path .= "\x6c\x61\x6e\147\x75\141\x67\145\x2f" . $idiom . "\57" . $langfile; if (file_exists($alt_path)) { include $alt_path; $found = TRUE; } } else { foreach (get_instance()->load->get_package_paths(TRUE) as $package_path) { $package_path .= "\x6c\x61\x6e\147\x75\141\x67\145\x2f" . $idiom . "\x2f" . $langfile; if ($basepath !== $package_path && file_exists($package_path)) { goto xgteH; nJuBm: break; goto FhPM8; xgteH: include $package_path; goto vHujx; vHujx: $found = TRUE; goto nJuBm; FhPM8: } } } goto C1GFX; juyzm: if ($return === FALSE && isset($this->is_loaded[$langfile]) && $this->is_loaded[$langfile] === $idiom) { return; } goto ZDJk0; djAKA: if (empty($idiom) or !preg_match("\57\x5e\133\141\x2d\172\x5f\x2d\x5d\x2b\44\x2f\x69", $idiom)) { $config =& get_config(); $idiom = empty($config["\154\141\156\147\165\141\x67\x65"]) ? "\145\x6e\x67\154\151\163\x68" : $config["\x6c\x61\156\147\165\141\147\x65"]; } goto juyzm; ozd1K: if ($return === TRUE) { return $lang; } goto a7Lam; C1GFX: if ($found !== TRUE) { show_error("\125\x6e\141\142\x6c\x65\40\164\157\x20\x6c\157\141\x64\40\164\150\x65\40\x72\x65\x71\165\145\163\164\x65\144\40\154\x61\156\x67\x75\141\x67\x65\x20\x66\x69\154\x65\72\40\x6c\x61\x6e\x67\165\141\x67\145\x2f" . $idiom . "\57" . $langfile); } goto F0QWh; syMrQ: $this->language = array_merge($this->language, $lang); goto NaVoA; ZDJk0: $basepath = BASEPATH . "\154\141\156\x67\165\x61\147\x65\57" . $idiom . "\x2f" . $langfile; goto A_2uJ; F0QWh: if (!isset($lang) or !is_array($lang)) { goto bD7Xj; Ys1XT: return; goto qVRcs; bD7Xj: log_message("\x65\x72\162\x6f\x72", "\x4c\141\x6e\x67\165\141\147\x65\40\x66\151\154\145\x20\143\157\x6e\x74\x61\151\156\163\x20\x6e\x6f\40\144\141\x74\141\72\x20\154\141\x6e\147\x75\x61\x67\x65\57" . $idiom . "\57" . $langfile); goto kUQpn; kUQpn: if ($return === TRUE) { return array(); } goto Ys1XT; qVRcs: } goto ozd1K; A2_Qm: if (is_array($langfile)) { foreach ($langfile as $value) { $this->load($value, $idiom, $return, $add_suffix, $alt_path); } return; } goto T2QfY; J2oAy: $langfile .= "\56\160\150\x70"; goto djAKA; T2QfY: $langfile = str_replace("\56\160\150\160", '', $langfile); goto IxQih; IxQih: if ($add_suffix === TRUE) { $langfile = preg_replace("\57\137\154\141\156\x67\44\x2f", '', $langfile) . "\137\154\141\156\x67"; } goto J2oAy; A_2uJ: if (($found = file_exists($basepath)) === TRUE) { include $basepath; } goto bOyvo; NaVoA: log_message("\151\x6e\146\x6f", "\x4c\141\x6e\147\x75\141\147\145\x20\x66\x69\x6c\145\40\154\157\141\144\x65\x64\x3a\40\x6c\141\156\147\x75\141\x67\x65\57" . $idiom . "\57" . $langfile); goto ocKws; a7Lam: $this->is_loaded[$langfile] = $idiom; goto syMrQ; ocKws: return TRUE; goto Wi1Om; Wi1Om: } public function line($line, $log_errors = TRUE) { goto xTqVV; FN0HF: if ($value === FALSE && $log_errors === TRUE) { log_message("\145\162\162\157\162", "\103\x6f\x75\x6c\144\40\x6e\x6f\164\40\x66\151\156\144\x20\x74\150\x65\40\x6c\x61\x6e\x67\165\x61\x67\x65\x20\154\x69\x6e\x65\40\x22" . $line . "\x22"); } goto oSaFb; oSaFb: return $value; goto IWgct; xTqVV: $value = isset($this->language[$line]) ? $this->language[$line] : FALSE; goto FN0HF; IWgct: } }
