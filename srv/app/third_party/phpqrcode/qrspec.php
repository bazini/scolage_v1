<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:09              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto iQ1vf; qkeSN: define("\x51\122\x43\x41\120\137\x52\105\x4d\x49\116\x44\105\122", 2); goto B12_s; B12_s: define("\121\122\x43\x41\120\x5f\x45\103", 3); goto JMFY9; Cqmkk: define("\121\122\x43\101\120\x5f\127\111\x44\124\110", 0); goto WX12v; WX12v: define("\x51\x52\x43\x41\120\137\127\117\122\104\x53", 1); goto qkeSN; iQ1vf: define("\x51\x52\x53\x50\105\103\137\126\x45\122\123\111\117\116\x5f\x4d\x41\130", 40); goto cEnw7; cEnw7: define("\x51\x52\123\x50\x45\103\x5f\x57\x49\104\124\x48\x5f\x4d\101\130", 177); goto Cqmkk; JMFY9: class QRspec { public static $capacity = array(array(0, 0, 0, array(0, 0, 0, 0)), array(21, 26, 0, array(7, 10, 13, 17)), array(25, 44, 7, array(10, 16, 22, 28)), array(29, 70, 7, array(15, 26, 36, 44)), array(33, 100, 7, array(20, 36, 52, 64)), array(37, 134, 7, array(26, 48, 72, 88)), array(41, 172, 7, array(36, 64, 96, 112)), array(45, 196, 0, array(40, 72, 108, 130)), array(49, 242, 0, array(48, 88, 132, 156)), array(53, 292, 0, array(60, 110, 160, 192)), array(57, 346, 0, array(72, 130, 192, 224)), array(61, 404, 0, array(80, 150, 224, 264)), array(65, 466, 0, array(96, 176, 260, 308)), array(69, 532, 0, array(104, 198, 288, 352)), array(73, 581, 3, array(120, 216, 320, 384)), array(77, 655, 3, array(132, 240, 360, 432)), array(81, 733, 3, array(144, 280, 408, 480)), array(85, 815, 3, array(168, 308, 448, 532)), array(89, 901, 3, array(180, 338, 504, 588)), array(93, 991, 3, array(196, 364, 546, 650)), array(97, 1085, 3, array(224, 416, 600, 700)), array(101, 1156, 4, array(224, 442, 644, 750)), array(105, 1258, 4, array(252, 476, 690, 816)), array(109, 1364, 4, array(270, 504, 750, 900)), array(113, 1474, 4, array(300, 560, 810, 960)), array(117, 1588, 4, array(312, 588, 870, 1050)), array(121, 1706, 4, array(336, 644, 952, 1110)), array(125, 1828, 4, array(360, 700, 1020, 1200)), array(129, 1921, 3, array(390, 728, 1050, 1260)), array(133, 2051, 3, array(420, 784, 1140, 1350)), array(137, 2185, 3, array(450, 812, 1200, 1440)), array(141, 2323, 3, array(480, 868, 1290, 1530)), array(145, 2465, 3, array(510, 924, 1350, 1620)), array(149, 2611, 3, array(540, 980, 1440, 1710)), array(153, 2761, 3, array(570, 1036, 1530, 1800)), array(157, 2876, 0, array(570, 1064, 1590, 1890)), array(161, 3034, 0, array(600, 1120, 1680, 1980)), array(165, 3196, 0, array(630, 1204, 1770, 2100)), array(169, 3362, 0, array(660, 1260, 1860, 2220)), array(173, 3532, 0, array(720, 1316, 1950, 2310)), array(177, 3706, 0, array(750, 1372, 2040, 2430))); public static function getDataLength($version, $level) { return self::$capacity[$version][QRCAP_WORDS] - self::$capacity[$version][QRCAP_EC][$level]; } public static function getECCLength($version, $level) { return self::$capacity[$version][QRCAP_EC][$level]; } public static function getWidth($version) { return self::$capacity[$version][QRCAP_WIDTH]; } public static function getRemainder($version) { return self::$capacity[$version][QRCAP_REMINDER]; } public static function getMinimumVersion($size, $level) { for ($i = 1; $i <= QRSPEC_VERSION_MAX; $i++) { $words = self::$capacity[$i][QRCAP_WORDS] - self::$capacity[$i][QRCAP_EC][$level]; if ($words >= $size) { return $i; } } return -1; } public static $lengthTableBits = array(array(10, 12, 14), array(9, 11, 13), array(8, 16, 16), array(8, 10, 12)); public static function lengthIndicator($mode, $version) { goto chCj0; cnk7k: return self::$lengthTableBits[$mode][$l]; goto JwS4g; chCj0: if ($mode == QR_MODE_STRUCTURE) { return 0; } goto ftIlo; ftIlo: if ($version <= 9) { $l = 0; } else { if ($version <= 26) { $l = 1; } else { $l = 2; } } goto cnk7k; JwS4g: } public static function maximumWords($mode, $version) { goto Dd1TZ; Dd1TZ: if ($mode == QR_MODE_STRUCTURE) { return 3; } goto o3wlS; Xb0eR: $words = (1 << $bits) - 1; goto pzP0M; o3wlS: if ($version <= 9) { $l = 0; } else { if ($version <= 26) { $l = 1; } else { $l = 2; } } goto imk1I; nljtB: return $words; goto xz3qG; pzP0M: if ($mode == QR_MODE_KANJI) { $words *= 2; } goto nljtB; imk1I: $bits = self::$lengthTableBits[$mode][$l]; goto Xb0eR; xz3qG: } public static $eccTable = array(array(array(0, 0), array(0, 0), array(0, 0), array(0, 0)), array(array(1, 0), array(1, 0), array(1, 0), array(1, 0)), array(array(1, 0), array(1, 0), array(1, 0), array(1, 0)), array(array(1, 0), array(1, 0), array(2, 0), array(2, 0)), array(array(1, 0), array(2, 0), array(2, 0), array(4, 0)), array(array(1, 0), array(2, 0), array(2, 2), array(2, 2)), array(array(2, 0), array(4, 0), array(4, 0), array(4, 0)), array(array(2, 0), array(4, 0), array(2, 4), array(4, 1)), array(array(2, 0), array(2, 2), array(4, 2), array(4, 2)), array(array(2, 0), array(3, 2), array(4, 4), array(4, 4)), array(array(2, 2), array(4, 1), array(6, 2), array(6, 2)), array(array(4, 0), array(1, 4), array(4, 4), array(3, 8)), array(array(2, 2), array(6, 2), array(4, 6), array(7, 4)), array(array(4, 0), array(8, 1), array(8, 4), array(12, 4)), array(array(3, 1), array(4, 5), array(11, 5), array(11, 5)), array(array(5, 1), array(5, 5), array(5, 7), array(11, 7)), array(array(5, 1), array(7, 3), array(15, 2), array(3, 13)), array(array(1, 5), array(10, 1), array(1, 15), array(2, 17)), array(array(5, 1), array(9, 4), array(17, 1), array(2, 19)), array(array(3, 4), array(3, 11), array(17, 4), array(9, 16)), array(array(3, 5), array(3, 13), array(15, 5), array(15, 10)), array(array(4, 4), array(17, 0), array(17, 6), array(19, 6)), array(array(2, 7), array(17, 0), array(7, 16), array(34, 0)), array(array(4, 5), array(4, 14), array(11, 14), array(16, 14)), array(array(6, 4), array(6, 14), array(11, 16), array(30, 2)), array(array(8, 4), array(8, 13), array(7, 22), array(22, 13)), array(array(10, 2), array(19, 4), array(28, 6), array(33, 4)), array(array(8, 4), array(22, 3), array(8, 26), array(12, 28)), array(array(3, 10), array(3, 23), array(4, 31), array(11, 31)), array(array(7, 7), array(21, 7), array(1, 37), array(19, 26)), array(array(5, 10), array(19, 10), array(15, 25), array(23, 25)), array(array(13, 3), array(2, 29), array(42, 1), array(23, 28)), array(array(17, 0), array(10, 23), array(10, 35), array(19, 35)), array(array(17, 1), array(14, 21), array(29, 19), array(11, 46)), array(array(13, 6), array(14, 23), array(44, 7), array(59, 1)), array(array(12, 7), array(12, 26), array(39, 14), array(22, 41)), array(array(6, 14), array(6, 34), array(46, 10), array(2, 64)), array(array(17, 4), array(29, 14), array(49, 10), array(24, 46)), array(array(4, 18), array(13, 32), array(48, 14), array(42, 32)), array(array(20, 4), array(40, 7), array(43, 22), array(10, 67)), array(array(19, 6), array(18, 31), array(34, 34), array(20, 61))); public static function getEccSpec($version, $level, array &$spec) { goto flPxU; flPxU: if (count($spec) < 5) { $spec = array(0, 0, 0, 0, 0); } goto iimdb; qQGNA: $data = self::getDataLength($version, $level); goto VdtYa; Xd9pL: if ($b2 == 0) { goto dBEvB; dBEvB: $spec[0] = $b1; goto QTjS5; QTjS5: $spec[1] = (int) ($data / $b1); goto n3PBN; uQXBf: $spec[4] = 0; goto Yid6a; tX6yW: $spec[3] = 0; goto uQXBf; n3PBN: $spec[2] = (int) ($ecc / $b1); goto tX6yW; Yid6a: } else { goto OhTkd; OhTkd: $spec[0] = $b1; goto v8_CT; GIsJn: $spec[3] = $b2; goto Eryac; v8_CT: $spec[1] = (int) ($data / ($b1 + $b2)); goto TzAh5; Eryac: $spec[4] = $spec[1] + 1; goto eaVsP; TzAh5: $spec[2] = (int) ($ecc / ($b1 + $b2)); goto GIsJn; eaVsP: } goto JWIpf; iimdb: $b1 = self::$eccTable[$version][$level][0]; goto VeQtU; VdtYa: $ecc = self::getECCLength($version, $level); goto Xd9pL; VeQtU: $b2 = self::$eccTable[$version][$level][1]; goto qQGNA; JWIpf: } public static $alignmentPattern = array(array(0, 0), array(0, 0), array(18, 0), array(22, 0), array(26, 0), array(30, 0), array(34, 0), array(22, 38), array(24, 42), array(26, 46), array(28, 50), array(30, 54), array(32, 58), array(34, 62), array(26, 46), array(26, 48), array(26, 50), array(30, 54), array(30, 56), array(30, 58), array(34, 62), array(28, 50), array(26, 50), array(30, 54), array(28, 54), array(32, 58), array(30, 58), array(34, 62), array(26, 50), array(30, 54), array(26, 52), array(30, 56), array(34, 60), array(30, 58), array(34, 62), array(30, 54), array(24, 50), array(28, 54), array(32, 58), array(26, 54), array(30, 58)); public static function putAlignmentMarker(array &$frame, $ox, $oy) { goto pAziV; XU6SH: $yStart = $oy - 2; goto hW6fn; pAziV: $finder = array("\241\xa1\xa1\241\241", "\xa1\240\xa0\xa0\xa1", "\xa1\240\241\240\xa1", "\xa1\240\240\xa0\xa1", "\xa1\xa1\241\241\xa1"); goto XU6SH; hW6fn: $xStart = $ox - 2; goto pf77q; pf77q: for ($y = 0; $y < 5; $y++) { QRstr::set($frame, $xStart, $yStart + $y, $finder[$y]); } goto Ynxlg; Ynxlg: } public static function putAlignmentPattern($version, &$frame, $width) { goto BHgvC; qUoX3: $cy = self::$alignmentPattern[$version][0]; goto u86f1; BSPxq: for ($x = 1; $x < $w - 1; $x++) { self::putAlignmentMarker($frame, 6, $cx); self::putAlignmentMarker($frame, $cx, 6); $cx += $d; } goto qUoX3; WWhTx: if ($w * $w - 3 == 1) { goto IKWQj; cLKn8: self::putAlignmentMarker($frame, $x, $y); goto G1Zlk; G1Zlk: return; goto qUaws; ekq_L: $y = self::$alignmentPattern[$version][0]; goto cLKn8; IKWQj: $x = self::$alignmentPattern[$version][0]; goto ekq_L; qUaws: } goto dotO7; x12TZ: $d = self::$alignmentPattern[$version][1] - self::$alignmentPattern[$version][0]; goto hpeeH; hpeeH: if ($d < 0) { $w = 2; } else { $w = (int) (($width - self::$alignmentPattern[$version][0]) / $d + 2); } goto WWhTx; u86f1: for ($y = 0; $y < $w - 1; $y++) { $cx = self::$alignmentPattern[$version][0]; for ($x = 0; $x < $w - 1; $x++) { self::putAlignmentMarker($frame, $cx, $cy); $cx += $d; } $cy += $d; } goto GVIfZ; dotO7: $cx = self::$alignmentPattern[$version][0]; goto BSPxq; BHgvC: if ($version < 2) { return; } goto x12TZ; GVIfZ: } public static $versionPattern = array(0x7c94, 0x85bc, 0x9a99, 0xa4d3, 0xbbf6, 0xc762, 0xd847, 0xe60d, 0xf928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6, 0x15683, 0x168c9, 0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75, 0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64, 0x27541, 0x28c69); public static function getVersionPattern($version) { if ($version < 7 || $version > QRSPEC_VERSION_MAX) { return 0; } return self::$versionPattern[$version - 7]; } public static $formatInfo = array(array(0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976), array(0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0), array(0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed), array(0x1689, 0x13be, 0x1ce7, 0x19d0, 0x762, 0x255, 0xd0c, 0x83b)); public static function getFormatInfo($mask, $level) { goto CehgE; CehgE: if ($mask < 0 || $mask > 7) { return 0; } goto VTjGq; pIB88: return self::$formatInfo[$level][$mask]; goto d7rTf; VTjGq: if ($level < 0 || $level > 3) { return 0; } goto pIB88; d7rTf: } public static $frames = array(); public static function putFinderPattern(&$frame, $ox, $oy) { $finder = array("\301\xc1\301\xc1\xc1\xc1\301", "\301\300\300\300\300\300\301", "\xc1\300\301\xc1\xc1\xc0\xc1", "\xc1\300\301\301\xc1\300\301", "\301\300\xc1\301\xc1\xc0\301", "\301\300\xc0\xc0\xc0\xc0\301", "\xc1\301\301\301\301\xc1\301"); for ($y = 0; $y < 7; $y++) { QRstr::set($frame, $ox, $oy + $y, $finder[$y]); } } public static function createFrame($version) { goto XjDy9; pb8js: QRstr::set($frame, $width - 8, 7, $setPattern); goto xwsEC; K7kbo: $setPattern = str_repeat("\x84", 9); goto QImx_; oLJQW: for ($y = 0; $y < 7; $y++) { $frame[$y][7] = "\300"; $frame[$y][$width - 8] = "\xc0"; $frame[$yOffset][7] = "\xc0"; $yOffset++; } goto IopvZ; MyHIB: $frame = array_fill(0, $width, $frameLine); goto oTQc2; fb84O: QRstr::set($frame, 0, 7, $setPattern); goto pb8js; WhElc: self::putAlignmentPattern($version, $frame, $width); goto DiRwp; XjDy9: $width = self::$capacity[$version][QRCAP_WIDTH]; goto tCPBY; DiRwp: if ($version >= 7) { goto VSDNH; kBWtF: $v = $vinf; goto bD5tv; v229P: $v = $vinf; goto Fbi3l; VSDNH: $vinf = self::getVersionPattern($version); goto kBWtF; Fbi3l: for ($y = 0; $y < 6; $y++) { for ($x = 0; $x < 3; $x++) { $frame[$y][$x + ($width - 11)] = chr(0x88 | $v & 1); $v = $v >> 1; } } goto Bbvir; bD5tv: for ($x = 0; $x < 6; $x++) { for ($y = 0; $y < 3; $y++) { $frame[$width - 11 + $y][$x] = chr(0x88 | $v & 1); $v = $v >> 1; } } goto v229P; Bbvir: } goto xdfOj; tCPBY: $frameLine = str_repeat("\x0", $width); goto MyHIB; oTQc2: self::putFinderPattern($frame, 0, 0); goto ZKvxk; ZKvxk: self::putFinderPattern($frame, $width - 7, 0); goto dhcpX; iQHMv: $yOffset = $width - 7; goto oLJQW; L1SYg: $yOffset = $width - 8; goto RgIkg; xdfOj: $frame[$width - 8][8] = "\x81"; goto y1h4y; xwsEC: QRstr::set($frame, 0, $width - 8, $setPattern); goto K7kbo; QImx_: QRstr::set($frame, 0, 8, $setPattern); goto lTXuN; lTXuN: QRstr::set($frame, $width - 8, 8, $setPattern, 8); goto L1SYg; uW6Dk: for ($i = 1; $i < $width - 15; $i++) { $frame[6][7 + $i] = chr(0x90 | $i & 1); $frame[7 + $i][6] = chr(0x90 | $i & 1); } goto WhElc; dhcpX: self::putFinderPattern($frame, 0, $width - 7); goto iQHMv; y1h4y: return $frame; goto U3Lkx; IopvZ: $setPattern = str_repeat("\300", 8); goto fb84O; RgIkg: for ($y = 0; $y < 8; $y++, $yOffset++) { $frame[$y][8] = "\x84"; $frame[$yOffset][8] = "\204"; } goto uW6Dk; U3Lkx: } public static function debug($frame, $binary_mode = false) { if ($binary_mode) { goto S9IUB; dRyI9: echo "\74\57\x74\164\76\x3c\x2f\x70\x72\x65\x3e\74\142\x72\57\x20\76\74\142\x72\x2f\40\x3e\74\x62\x72\x2f\40\76\74\142\162\57\x20\x3e\x3c\142\x72\57\x20\76\x3c\142\162\x2f\40\x3e"; goto Fmc3l; S9IUB: foreach ($frame as &$frameLine) { $frameLine = join("\74\x73\x70\x61\x6e\40\143\154\x61\x73\163\75\42\x6d\x22\x3e\46\x6e\142\x73\x70\x3b\46\x6e\x62\163\160\x3b\x3c\x2f\x73\x70\141\x6e\76", explode("\x30", $frameLine)); $frameLine = join("\x26\43\x39\66\x30\x38\73\x26\x23\71\66\60\x38\73", explode("\61", $frameLine)); } goto nT86L; CcRr6: echo "\x3c\160\x72\x65\x3e\x3c\164\x74\76\x3c\142\162\57\40\76\x3c\142\x72\57\x20\76\74\x62\162\x2f\40\76\x26\156\142\163\x70\x3b\x26\x6e\x62\x73\x70\73\46\156\142\163\160\x3b\x26\156\x62\163\160\x3b\x26\x6e\x62\x73\x70\73\46\156\142\x73\160\73\x26\156\142\x73\160\x3b\x26\x6e\x62\163\160\x3b"; goto FKPay; nT86L: echo "\x20\x20\x20\x20\40\40\x20\x20\40\x20\40\x20\x20\40\40\x20\x3c\x73\x74\x79\154\x65\x3e\15\xa\40\40\40\x20\40\40\40\40\40\40\x20\x20\40\40\x20\x20\x20\x20\40\x20\x2e\x6d\x20\x7b\40\x62\x61\x63\x6b\x67\x72\x6f\x75\156\x64\55\143\157\x6c\157\162\72\x20\167\x68\x69\x74\x65\x3b\40\175\xd\12\x20\40\40\x20\40\40\x20\x20\40\x20\40\40\40\40\40\x20\74\x2f\163\164\x79\x6c\145\x3e\15\xa\x20\40\40\x20\40\40\x20\x20\x20\40\40\x20\x20\40\x20\40"; goto CcRr6; FKPay: echo join("\x3c\x62\162\x2f\x20\x3e\x26\x6e\x62\163\160\73\46\x6e\x62\x73\160\73\46\156\x62\163\160\73\46\x6e\x62\x73\x70\73\x26\156\x62\163\x70\x3b\46\x6e\x62\163\x70\73\46\x6e\142\x73\x70\73\x26\156\142\x73\x70\73", $frame); goto dRyI9; Fmc3l: } else { goto A8bB7; NI1Xw: echo "\x3c\x70\x72\145\76\x3c\164\x74\x3e"; goto nFHWv; A8bB7: foreach ($frame as &$frameLine) { goto t61Da; I1N72: $frameLine = join("\x26\x23\71\70\63\60\73", explode("\x1", $frameLine)); goto ZFR1Q; agXWi: $frameLine = join("\x3c\163\160\x61\156\x20\143\x6c\141\163\x73\75\42\x73\x22\76\46\43\71\66\67\60\73\74\x2f\x73\x70\141\156\76", explode("\205", $frameLine)); goto Ofqsa; segYT: $frameLine = join("\74\163\x70\141\x6e\40\x63\x6c\x61\x73\163\x3d\x22\143\42\x3e\46\x6e\142\x73\x70\73\x3c\57\163\160\x61\156\x3e", explode("\x90", $frameLine)); goto kGOzk; n1ZGN: $frameLine = join("\74\163\x70\141\x6e\x20\143\154\141\163\x73\75\42\146\42\76\46\x6e\142\163\x70\x3b\x3c\x2f\163\x70\141\156\76", explode("\x88", $frameLine)); goto C8MeX; Bee5g: $frameLine = join("\74\163\160\141\156\x20\143\154\x61\x73\163\x3d\42\x6d\42\x3e\46\x23\71\x36\x31\x38\73\74\57\x73\x70\141\x6e\x3e", explode("\301", $frameLine)); goto W1uST; C8MeX: $frameLine = join("\74\163\160\x61\156\x20\143\x6c\141\x73\x73\75\x22\146\x22\x3e\46\43\x39\66\61\70\x3b\74\x2f\163\160\141\156\76", explode("\211", $frameLine)); goto I1N72; kGOzk: $frameLine = join("\x3c\x73\x70\x61\x6e\x20\143\154\141\x73\x73\75\42\143\x22\x3e\x26\43\71\x37\x31\71\73\74\x2f\163\160\141\x6e\x3e", explode("\x91", $frameLine)); goto n1ZGN; Ofqsa: $frameLine = join("\74\x73\160\141\156\40\x63\x6c\141\x73\163\75\42\170\x22\76\46\43\71\x37\x36\x32\x3b\x3c\x2f\163\160\141\x6e\x3e", explode("\201", $frameLine)); goto segYT; z3eyk: $frameLine = join("\x3c\x73\160\x61\x6e\x20\143\154\x61\163\x73\75\42\163\42\76\x26\43\71\66\67\x31\x3b\74\57\x73\160\141\156\x3e", explode("\x84", $frameLine)); goto agXWi; t61Da: $frameLine = join("\x3c\163\x70\141\156\40\x63\x6c\141\x73\163\x3d\42\155\42\x3e\x26\156\x62\x73\x70\73\74\57\x73\x70\141\x6e\x3e", explode("\xc0", $frameLine)); goto Bee5g; aAmyG: $frameLine = join("\74\163\160\x61\x6e\40\x63\x6c\x61\163\x73\x3d\42\160\42\x3e\x26\43\x39\66\61\x38\x3b\x3c\57\163\160\141\x6e\76", explode("\xa1", $frameLine)); goto z3eyk; ZFR1Q: $frameLine = join("\x26\x23\x38\x39\60\61\73", explode("\0", $frameLine)); goto qkGr6; W1uST: $frameLine = join("\74\163\160\141\x6e\40\143\x6c\x61\163\163\x3d\42\x70\x22\76\x26\156\142\x73\x70\x3b\74\57\163\160\141\156\x3e", explode("\240", $frameLine)); goto aAmyG; qkGr6: } goto aPyyA; KPwMb: echo "\74\57\164\164\x3e\x3c\57\160\x72\145\x3e"; goto BtFEe; aPyyA: echo "\40\40\40\40\x20\x20\x20\x20\x20\x20\x20\40\x20\x20\40\x20\x3c\163\164\171\x6c\x65\76\15\xa\x20\x20\40\40\40\40\x20\40\x20\x20\x20\x20\x20\x20\x20\40\x20\x20\x20\x20\x2e\160\40\x7b\x20\x62\x61\143\153\147\x72\157\165\156\144\x2d\x63\157\x6c\x6f\x72\72\40\x79\145\x6c\x6c\157\167\x3b\x20\x7d\xd\xa\x20\x20\x20\x20\40\x20\40\40\x20\40\x20\x20\40\x20\x20\x20\40\40\40\x20\x2e\155\x20\x7b\x20\142\x61\x63\153\x67\x72\157\165\156\144\55\143\x6f\x6c\157\x72\x3a\40\43\x30\60\106\x46\x30\60\x3b\x20\175\15\xa\40\x20\x20\x20\40\40\40\x20\40\40\x20\x20\40\40\40\x20\40\40\x20\x20\56\163\40\x7b\x20\142\141\143\x6b\147\162\157\165\x6e\144\55\143\x6f\154\x6f\162\72\40\43\106\x46\60\x30\x30\60\73\x20\175\xd\12\x20\x20\40\40\40\40\x20\x20\x20\x20\x20\x20\x20\40\x20\40\x20\x20\40\40\x2e\x63\x20\173\40\142\x61\x63\x6b\147\162\157\x75\x6e\x64\x2d\143\x6f\154\157\x72\72\40\141\x71\x75\x61\73\x20\175\15\12\x20\40\40\x20\40\x20\x20\40\40\40\40\x20\40\x20\40\x20\x20\40\40\40\56\170\x20\173\x20\142\x61\x63\153\x67\162\x6f\165\x6e\144\x2d\143\x6f\154\x6f\162\72\x20\x70\151\x6e\153\x3b\40\175\15\xa\40\x20\40\x20\40\x20\40\x20\x20\40\40\40\x20\x20\x20\40\x20\x20\x20\40\56\146\40\x7b\x20\x62\141\143\x6b\147\162\x6f\x75\x6e\x64\55\x63\157\x6c\x6f\162\x3a\x20\147\x6f\x6c\144\x3b\40\175\15\12\x20\40\40\x20\40\40\x20\40\x20\x20\40\x20\40\40\x20\40\74\x2f\x73\164\x79\154\145\76\15\12\40\x20\x20\x20\x20\x20\40\40\40\x20\x20\x20\40\x20\40\40"; goto NI1Xw; nFHWv: echo join("\x3c\142\x72\57\x20\76", $frame); goto KPwMb; BtFEe: } } public static function serial($frame) { return gzcompress(join("\12", $frame), 9); } public static function unserial($code) { return explode("\xa", gzuncompress($code)); } public static function newFrame($version) { goto PQaZG; Qnimc: if (is_null(self::$frames[$version])) { return null; } goto qGpka; PQaZG: if ($version < 1 || $version > QRSPEC_VERSION_MAX) { return null; } goto tbzm8; qGpka: return self::$frames[$version]; goto CM4Ni; tbzm8: if (!isset(self::$frames[$version])) { $fileName = QR_CACHE_DIR . "\x66\162\141\155\x65\137" . $version . "\56\144\x61\164"; if (QR_CACHEABLE) { if (file_exists($fileName)) { self::$frames[$version] = self::unserial(file_get_contents($fileName)); } else { self::$frames[$version] = self::createFrame($version); file_put_contents($fileName, self::serial(self::$frames[$version])); } } else { self::$frames[$version] = self::createFrame($version); } } goto Qnimc; CM4Ni: } public static function rsBlockNum($spec) { return $spec[0] + $spec[3]; } public static function rsBlockNum1($spec) { return $spec[0]; } public static function rsDataCodes1($spec) { return $spec[1]; } public static function rsEccCodes1($spec) { return $spec[2]; } public static function rsBlockNum2($spec) { return $spec[3]; } public static function rsDataCodes2($spec) { return $spec[4]; } public static function rsEccCodes2($spec) { return $spec[2]; } public static function rsDataLength($spec) { return $spec[0] * $spec[1] + $spec[3] * $spec[4]; } public static function rsEccLength($spec) { return ($spec[0] + $spec[3]) * $spec[2]; } }
