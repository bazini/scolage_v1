<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:09              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto iSx9n; vQcqx: class QRinputItem { public $mode; public $size; public $data; public $bstream; public function __construct($mode, $size, $data, $bstream = null) { goto r9Zsq; iWrh0: $this->size = $size; goto TLuvS; RWBTZ: $this->bstream = $bstream; goto k9l2H; r9Zsq: $setData = array_slice($data, 0, $size); goto DczWh; mxBW3: $this->mode = $mode; goto iWrh0; DczWh: if (count($setData) < $size) { $setData = array_merge($setData, array_fill(0, $size - count($setData), 0)); } goto oMsea; oMsea: if (!QRinput::check($mode, $size, $setData)) { throw new Exception("\x45\x72\x72\157\162\x20\155\x3a" . $mode . "\54\x73\x3a" . $size . "\54\x64\72" . join("\54", $setData)); return null; } goto mxBW3; TLuvS: $this->data = $setData; goto RWBTZ; k9l2H: } public function encodeModeNum($version) { try { goto ZQU5l; b1sOh: $bs = new QRbitstream(); goto VARx1; sLlpM: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_NUM, $version), $this->size); goto e46Sm; SWwjp: if ($this->size - $words * 3 == 1) { $val = ord($this->data[$words * 3]) - ord("\x30"); $bs->appendNum(4, $val); } else { if ($this->size - $words * 3 == 2) { goto Fxaa3; Fxaa3: $val = (ord($this->data[$words * 3]) - ord("\60")) * 10; goto boapV; boapV: $val += ord($this->data[$words * 3 + 1]) - ord("\x30"); goto jg91O; jg91O: $bs->appendNum(7, $val); goto A_hMW; A_hMW: } } goto Rej7z; lR8jN: $bs->appendNum(4, $val); goto sLlpM; e46Sm: for ($i = 0; $i < $words; $i++) { $val = (ord($this->data[$i * 3]) - ord("\x30")) * 100; $val += (ord($this->data[$i * 3 + 1]) - ord("\x30")) * 10; $val += ord($this->data[$i * 3 + 2]) - ord("\x30"); $bs->appendNum(10, $val); } goto SWwjp; Rej7z: $this->bstream = $bs; goto SOkPw; VARx1: $val = 0x1; goto lR8jN; ZQU5l: $words = (int) ($this->size / 3); goto b1sOh; SOkPw: return 0; goto YDKc_; YDKc_: } catch (Exception $e) { return -1; } } public function encodeModeAn($version) { try { goto TE0MN; wfpr3: for ($i = 0; $i < $words; $i++) { $val = (int) QRinput::lookAnTable(ord($this->data[$i * 2])) * 45; $val += (int) QRinput::lookAnTable(ord($this->data[$i * 2 + 1])); $bs->appendNum(11, $val); } goto HXXsn; VsmCW: $this->bstream = $bs; goto o1p55; jzMtz: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_AN, $version), $this->size); goto wfpr3; cdXxv: $bs = new QRbitstream(); goto xu4Zy; HXXsn: if ($this->size & 1) { $val = QRinput::lookAnTable(ord($this->data[$words * 2])); $bs->appendNum(6, $val); } goto VsmCW; TE0MN: $words = (int) ($this->size / 2); goto cdXxv; xu4Zy: $bs->appendNum(4, 0x2); goto jzMtz; o1p55: return 0; goto dKTYh; dKTYh: } catch (Exception $e) { return -1; } } public function encodeMode8($version) { try { goto VnV6S; VnV6S: $bs = new QRbitstream(); goto JI0Q1; UmtWZ: return 0; goto JjiRl; iTaSR: for ($i = 0; $i < $this->size; $i++) { $bs->appendNum(8, ord($this->data[$i])); } goto SFSRs; SFSRs: $this->bstream = $bs; goto UmtWZ; JI0Q1: $bs->appendNum(4, 0x4); goto geRPc; geRPc: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_8, $version), $this->size); goto iTaSR; JjiRl: } catch (Exception $e) { return -1; } } public function encodeModeKanji($version) { try { goto qZJUv; ZEk1S: for ($i = 0; $i < $this->size; $i += 2) { $val = ord($this->data[$i]) << 8 | ord($this->data[$i + 1]); if ($val <= 0x9ffc) { $val -= 0x8140; } else { $val -= 0xc140; } $h = ($val >> 8) * 0xc0; $val = ($val & 0xff) + $h; $bs->appendNum(13, $val); } goto Hmj9l; hNaux: $bs->appendNum(4, 0x8); goto pcLOU; yfGm0: return 0; goto womtU; pcLOU: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_KANJI, $version), (int) ($this->size / 2)); goto ZEk1S; qZJUv: $bs = new QRbitrtream(); goto hNaux; Hmj9l: $this->bstream = $bs; goto yfGm0; womtU: } catch (Exception $e) { return -1; } } public function encodeModeStructure() { try { goto GwT1I; jV8aQ: $bs->appendNum(8, ord($this->data[2])); goto QC9mu; QC9mu: $this->bstream = $bs; goto hEAS3; DahNo: $bs->appendNum(4, 0x3); goto aOfoS; hEAS3: return 0; goto cg7ud; ta9Cz: $bs->appendNum(4, ord($this->data[0]) - 1); goto jV8aQ; aOfoS: $bs->appendNum(4, ord($this->data[1]) - 1); goto ta9Cz; GwT1I: $bs = new QRbitstream(); goto DahNo; cg7ud: } catch (Exception $e) { return -1; } } public function estimateBitStreamSizeOfEntry($version) { goto kwrTE; dkoFl: $l = QRspec::lengthIndicator($this->mode, $version); goto QlzbH; Lptc9: if ($version == 0) { $version = 1; } goto q45K1; mzcBp: $num = (int) (($this->size + $m - 1) / $m); goto yTIVF; q45K1: switch ($this->mode) { case QR_MODE_NUM: $bits = QRinput::estimateBitsModeNum($this->size); break; case QR_MODE_AN: $bits = QRinput::estimateBitsModeAn($this->size); break; case QR_MODE_8: $bits = QRinput::estimateBitsMode8($this->size); break; case QR_MODE_KANJI: $bits = QRinput::estimateBitsModeKanji($this->size); break; case QR_MODE_STRUCTURE: return STRUCTURE_HEADER_BITS; default: return 0; } goto dkoFl; kwrTE: $bits = 0; goto Lptc9; yTIVF: $bits += $num * (4 + $l); goto Sh7La; Sh7La: return $bits; goto Gs9eq; QlzbH: $m = 1 << $l; goto mzcBp; Gs9eq: } public function encodeBitStream($version) { try { goto lDWIc; fMZCA: return $this->bstream->size(); goto A0rcQ; c4r5n: $words = QRspec::maximumWords($this->mode, $version); goto NbXkU; NbXkU: if ($this->size > $words) { goto oGKx2; uOLn7: $this->bstream->append($st2->bstream); goto o28uH; avr_X: $st2->encodeBitStream($version); goto FH1qF; XzZeP: $st1->encodeBitStream($version); goto avr_X; oGKx2: $st1 = new QRinputItem($this->mode, $words, $this->data); goto jQONA; SIdUu: unset($st2); goto dy9SV; jQONA: $st2 = new QRinputItem($this->mode, $this->size - $words, array_slice($this->data, $words)); goto XzZeP; WqNr1: $this->bstream->append($st1->bstream); goto uOLn7; FH1qF: $this->bstream = new QRbitstream(); goto WqNr1; o28uH: unset($st1); goto SIdUu; dy9SV: } else { goto ntPFt; KVjX8: if ($ret < 0) { return -1; } goto GIr0r; TrIIk: switch ($this->mode) { case QR_MODE_NUM: $ret = $this->encodeModeNum($version); break; case QR_MODE_AN: $ret = $this->encodeModeAn($version); break; case QR_MODE_8: $ret = $this->encodeMode8($version); break; case QR_MODE_KANJI: $ret = $this->encodeModeKanji($version); break; case QR_MODE_STRUCTURE: $ret = $this->encodeModeStructure(); break; default: break; } goto KVjX8; ntPFt: $ret = 0; goto TrIIk; GIr0r: } goto fMZCA; lDWIc: unset($this->bstream); goto c4r5n; A0rcQ: } catch (Exception $e) { return -1; } } } goto Glt36; WiOMH: define("\x51\122\x5f\x49\115\101\107\x45", true); goto tnUIE; F4fuG: define("\116\63", 40); goto LzqtJ; ULYHb: define("\x51\122\137\115\117\x44\x45\137\70", 2); goto UdQGq; S0f2r: class QRcode { public $version; public $width; public $data; public function encodeMask(QRinput $input, $mask) { goto bYpdz; FlddJ: QRtools::markTime("\x61\x66\164\x65\162\137\x72\141\167"); goto h0Pqe; CluhA: if (is_null($filler)) { return NULL; } goto N8H7u; GKkAl: QRtools::markTime("\141\146\x74\x65\162\137\146\151\x6c\154\x65\x72"); goto PmiOh; LRR8F: $this->width = $width; goto n41jQ; I4ywZ: $j = QRspec::getRemainder($version); goto hK2kC; h0Pqe: $version = $raw->version; goto PAaGJ; opOg3: $frame = $filler->frame; goto AHMdk; hK2kC: for ($i = 0; $i < $j; $i++) { $addr = $filler->next(); $filler->setFrameAt($addr, 0x2); } goto opOg3; n41jQ: $this->data = $masked; goto aIHRh; aIHRh: return $this; goto aI3_S; PmiOh: unset($raw); goto I4ywZ; T8AHc: $this->version = $version; goto LRR8F; PAaGJ: $width = QRspec::getWidth($version); goto RdGGN; kZ5Gh: if ($input->getErrorCorrectionLevel() > QR_ECLEVEL_H) { throw new Exception("\167\x72\x6f\x6e\147\40\x6c\145\166\x65\x6c"); } goto t6B1Z; t7wm9: $maskObj = new QRmask(); goto xYCYp; JCQuR: QRtools::markTime("\141\x66\x74\145\162\137\x6d\x61\x73\153"); goto T8AHc; bYpdz: if ($input->getVersion() < 0 || $input->getVersion() > QRSPEC_VERSION_MAX) { throw new Exception("\167\x72\x6f\156\x67\40\166\145\x72\x73\x69\x6f\156"); } goto kZ5Gh; oZvrH: $filler = new FrameFiller($width, $frame); goto CluhA; R48R1: if ($masked == NULL) { return NULL; } goto JCQuR; AHMdk: unset($filler); goto t7wm9; N8H7u: for ($i = 0; $i < $raw->dataLength + $raw->eccLength; $i++) { $code = $raw->getCode(); $bit = 0x80; for ($j = 0; $j < 8; $j++) { $addr = $filler->next(); $filler->setFrameAt($addr, 0x2 | ($bit & $code) != 0); $bit = $bit >> 1; } } goto GKkAl; t6B1Z: $raw = new QRrawcode($input); goto FlddJ; xYCYp: if ($mask < 0) { if (QR_FIND_BEST_MASK) { $masked = $maskObj->mask($width, $frame, $input->getErrorCorrectionLevel()); } else { $masked = $maskObj->makeMask($width, $frame, intval(QR_DEFAULT_MASK) % 8, $input->getErrorCorrectionLevel()); } } else { $masked = $maskObj->makeMask($width, $frame, $mask, $input->getErrorCorrectionLevel()); } goto R48R1; RdGGN: $frame = QRspec::newFrame($version); goto oZvrH; aI3_S: } public function encodeInput(QRinput $input) { return $this->encodeMask($input, -1); } public function encodeString8bit($string, $version, $level) { goto DW37N; mSBjr: if ($input == NULL) { return NULL; } goto IiIx1; w8AUk: $input = new QRinput($version, $level); goto mSBjr; UM_wC: if ($ret < 0) { unset($input); return NULL; } goto N0C5c; DW37N: if (string == NULL) { throw new Exception("\x65\x6d\x70\x74\x79\40\x73\164\x72\151\x6e\x67\x21"); return NULL; } goto w8AUk; IiIx1: $ret = $input->append($input, QR_MODE_8, strlen($string), str_split($string)); goto UM_wC; N0C5c: return $this->encodeInput($input); goto ArSgf; ArSgf: } public function encodeString($string, $version, $level, $hint, $casesensitive) { goto YBugh; lbikg: if ($ret < 0) { return NULL; } goto Okmbl; iPjY2: if ($input == NULL) { return NULL; } goto YdgCn; Okmbl: return $this->encodeInput($input); goto xBk1Y; YBugh: if ($hint != QR_MODE_8 && $hint != QR_MODE_KANJI) { throw new Exception("\142\141\x64\x20\150\151\156\164"); return NULL; } goto qPxUF; qPxUF: $input = new QRinput($version, $level); goto iPjY2; YdgCn: $ret = QRsplit::splitStringToQRinput($string, $input, $hint, $casesensitive); goto lbikg; xBk1Y: } public static function png($text, $outfile = false, $level = QR_ECLEVEL_L, $size = 3, $margin = 4, $saveandprint = false) { $enc = QRencode::factory($level, $size, $margin); return $enc->encodePNG($text, $outfile, $saveandprint = false); } public static function text($text, $outfile = false, $level = QR_ECLEVEL_L, $size = 3, $margin = 4) { $enc = QRencode::factory($level, $size, $margin); return $enc->encode($text, $outfile); } public static function raw($text, $outfile = false, $level = QR_ECLEVEL_L, $size = 3, $margin = 4) { $enc = QRencode::factory($level, $size, $margin); return $enc->encodeRAW($text, $outfile); } } goto JbXSy; Z3nZj: class QRsplit { public $dataStr = ''; public $input; public $modeHint; public function __construct($dataStr, $input, $modeHint) { goto rIeSc; yVgUA: $this->modeHint = $modeHint; goto sFhc8; rIeSc: $this->dataStr = $dataStr; goto B_jbf; B_jbf: $this->input = $input; goto yVgUA; sFhc8: } public static function isdigitat($str, $pos) { if ($pos >= strlen($str)) { return false; } return ord($str[$pos]) >= ord("\x30") && ord($str[$pos]) <= ord("\71"); } public static function isalnumat($str, $pos) { if ($pos >= strlen($str)) { return false; } return QRinput::lookAnTable(ord($str[$pos])) >= 0; } public function identifyMode($pos) { goto kE28Y; kE28Y: if ($pos >= strlen($this->dataStr)) { return QR_MODE_NUL; } goto A6CN3; mL8An: return QR_MODE_8; goto Hiw2o; A6CN3: $c = $this->dataStr[$pos]; goto FLO9_; FLO9_: if (self::isdigitat($this->dataStr, $pos)) { return QR_MODE_NUM; } else { if (self::isalnumat($this->dataStr, $pos)) { return QR_MODE_AN; } else { if ($this->modeHint == QR_MODE_KANJI) { if ($pos + 1 < strlen($this->dataStr)) { goto Ejd3X; kxIaC: if ($word >= 0x8140 && $word <= 0x9ffc || $word >= 0xe040 && $word <= 0xebbf) { return QR_MODE_KANJI; } goto I5Wwy; Ejd3X: $d = $this->dataStr[$pos + 1]; goto QeCod; QeCod: $word = ord($c) << 8 | ord($d); goto kxIaC; I5Wwy: } } } } goto mL8An; Hiw2o: } public function eatNum() { goto xQphw; Rm0R6: $run = $p; goto bGVe8; D2p73: $p = 0; goto FGNnw; GwmOX: if ($mode == QR_MODE_8) { $dif = QRinput::estimateBitsModeNum($run) + 4 + $ln + QRinput::estimateBitsMode8(1) - QRinput::estimateBitsMode8($run + 1); if ($dif > 0) { return $this->eat8(); } } goto PGGT_; SB_3W: $ret = $this->input->append(QR_MODE_NUM, $run, str_split($this->dataStr)); goto QzEda; xQphw: $ln = QRspec::lengthIndicator(QR_MODE_NUM, $this->input->getVersion()); goto D2p73; PGGT_: if ($mode == QR_MODE_AN) { $dif = QRinput::estimateBitsModeNum($run) + 4 + $ln + QRinput::estimateBitsModeAn(1) - QRinput::estimateBitsModeAn($run + 1); if ($dif > 0) { return $this->eatAn(); } } goto SB_3W; QzEda: if ($ret < 0) { return -1; } goto sHfjJ; sHfjJ: return $run; goto VZ0SQ; bGVe8: $mode = $this->identifyMode($p); goto GwmOX; FGNnw: while (self::isdigitat($this->dataStr, $p)) { $p++; } goto Rm0R6; VZ0SQ: } public function eatAn() { goto ppUQe; tvhJ1: $run = $p; goto alf5B; wZwQf: if ($ret < 0) { return -1; } goto dqe44; rE28L: $p = 0; goto w2gUl; w2gUl: while (self::isalnumat($this->dataStr, $p)) { if (self::isdigitat($this->dataStr, $p)) { goto PhumW; sxE4y: while (self::isdigitat($this->dataStr, $q)) { $q++; } goto jdM8W; PhumW: $q = $p; goto sxE4y; jdM8W: $dif = QRinput::estimateBitsModeAn($p) + QRinput::estimateBitsModeNum($q - $p) + 4 + $ln - QRinput::estimateBitsModeAn($q); goto v0vcJ; v0vcJ: if ($dif < 0) { break; } else { $p = $q; } goto GCgo0; GCgo0: } else { $p++; } } goto tvhJ1; ppUQe: $la = QRspec::lengthIndicator(QR_MODE_AN, $this->input->getVersion()); goto APJ8B; dqe44: return $run; goto nTJgo; alf5B: if (!self::isalnumat($this->dataStr, $p)) { $dif = QRinput::estimateBitsModeAn($run) + 4 + $la + QRinput::estimateBitsMode8(1) - QRinput::estimateBitsMode8($run + 1); if ($dif > 0) { return $this->eat8(); } } goto yETaJ; yETaJ: $ret = $this->input->append(QR_MODE_AN, $run, str_split($this->dataStr)); goto wZwQf; APJ8B: $ln = QRspec::lengthIndicator(QR_MODE_NUM, $this->input->getVersion()); goto rE28L; nTJgo: } public function eatKanji() { goto Mv11p; oOsLQ: while ($this->identifyMode($p) == QR_MODE_KANJI) { $p += 2; } goto QM8Cn; EW8aM: if ($ret < 0) { return -1; } goto QT9vY; QM8Cn: $ret = $this->input->append(QR_MODE_KANJI, $p, str_split($this->dataStr)); goto EW8aM; QT9vY: return $run; goto KK7MT; Mv11p: $p = 0; goto oOsLQ; KK7MT: } public function eat8() { goto lyBs5; tcveO: $ret = $this->input->append(QR_MODE_8, $run, str_split($this->dataStr)); goto sPPIs; sPPIs: if ($ret < 0) { return -1; } goto I0thw; lyBs5: $la = QRspec::lengthIndicator(QR_MODE_AN, $this->input->getVersion()); goto IW5AF; I0thw: return $run; goto ysm6R; ngoHO: $dataStrLen = strlen($this->dataStr); goto QQVsC; IW5AF: $ln = QRspec::lengthIndicator(QR_MODE_NUM, $this->input->getVersion()); goto xNx3X; QQVsC: while ($p < $dataStrLen) { $mode = $this->identifyMode($p); if ($mode == QR_MODE_KANJI) { break; } if ($mode == QR_MODE_NUM) { goto c8LH3; PSSR3: while (self::isdigitat($this->dataStr, $q)) { $q++; } goto KGsc_; c8LH3: $q = $p; goto PSSR3; hL8yk: if ($dif < 0) { break; } else { $p = $q; } goto iSoIA; KGsc_: $dif = QRinput::estimateBitsMode8($p) + QRinput::estimateBitsModeNum($q - $p) + 4 + $ln - QRinput::estimateBitsMode8($q); goto hL8yk; iSoIA: } else { if ($mode == QR_MODE_AN) { goto GL7Mz; cUvS7: $dif = QRinput::estimateBitsMode8($p) + QRinput::estimateBitsModeAn($q - $p) + 4 + $la - QRinput::estimateBitsMode8($q); goto xHOIu; qt_qF: while (self::isalnumat($this->dataStr, $q)) { $q++; } goto cUvS7; xHOIu: if ($dif < 0) { break; } else { $p = $q; } goto sKH9Q; GL7Mz: $q = $p; goto qt_qF; sKH9Q: } else { $p++; } } } goto aW79Q; xNx3X: $p = 1; goto ngoHO; aW79Q: $run = $p; goto tcveO; ysm6R: } public function splitString() { while (strlen($this->dataStr) > 0) { if ($this->dataStr == '') { return 0; } $mode = $this->identifyMode(0); switch ($mode) { case QR_MODE_NUM: $length = $this->eatNum(); break; case QR_MODE_AN: $length = $this->eatAn(); break; case QR_MODE_KANJI: if ($hint == QR_MODE_KANJI) { $length = $this->eatKanji(); } else { $length = $this->eat8(); } break; default: $length = $this->eat8(); break; } if ($length == 0) { return 0; } if ($length < 0) { return -1; } $this->dataStr = substr($this->dataStr, $length); } } public function toUpper() { goto BqS12; BpzvW: $p = 0; goto SHwJY; V119h: return $this->dataStr; goto HFSlH; BqS12: $stringLen = strlen($this->dataStr); goto BpzvW; SHwJY: while ($p < $stringLen) { $mode = self::identifyMode(substr($this->dataStr, $p), $this->modeHint); if ($mode == QR_MODE_KANJI) { $p += 2; } else { if (ord($this->dataStr[$p]) >= ord("\141") && ord($this->dataStr[$p]) <= ord("\172")) { $this->dataStr[$p] = chr(ord($this->dataStr[$p]) - 32); } $p++; } } goto V119h; HFSlH: } public static function splitStringToQRinput($string, QRinput $input, $modeHint, $casesensitive = true) { goto DyIh0; VdXW5: $split = new QRsplit($string, $input, $modeHint); goto uomQX; uomQX: if (!$casesensitive) { $split->toUpper(); } goto CqNuh; CqNuh: return $split->splitString(); goto xP9og; DyIh0: if (is_null($string) || $string == "\x5c\60" || $string == '') { throw new Exception("\145\x6d\160\x74\171\40\x73\x74\162\151\x6e\147\41\41\x21"); } goto VdXW5; xP9og: } } goto n7yYX; y1_5N: class QRrsblock { public $dataLength; public $data = array(); public $eccLength; public $ecc = array(); public function __construct($dl, $data, $el, &$ecc, QRrsItem $rs) { goto z4IA6; roL3r: $this->ecc = $ecc; goto HtL05; OG4xK: $this->data = $data; goto PXqip; PXqip: $this->eccLength = $el; goto roL3r; z4IA6: $rs->encode_rs_char($data, $ecc); goto X4Gjz; X4Gjz: $this->dataLength = $dl; goto OG4xK; HtL05: } } goto ltYlI; JADn2: define("\123\124\122\x55\103\x54\125\122\x45\x5f\x48\105\101\x44\x45\x52\137\x42\111\124\x53", 20); goto p37Wm; SU_is: define("\x51\x52\137\120\116\107\137\x4d\101\130\x49\x4d\125\115\137\123\111\x5a\105", 1024); goto cb7EG; wnvmY: define("\121\x52\137\x46\x49\x4e\104\137\102\105\123\124\137\x4d\101\123\113", true); goto mU2ZR; powDQ: class QRmask { public $runLength = array(); public function __construct() { $this->runLength = array_fill(0, QRSPEC_WIDTH_MAX + 1, 0); } public function writeFormatInformation($width, &$frame, $mask, $level) { goto vlMxZ; LXmDq: for ($i = 0; $i < 7; $i++) { if ($format & 1) { $blacks += 2; $v = 0x85; } else { $v = 0x84; } $frame[$width - 7 + $i][8] = chr($v); if ($i == 0) { $frame[8][7] = chr($v); } else { $frame[8][6 - $i] = chr($v); } $format = $format >> 1; } goto Bkhk8; kBHiS: $format = QRspec::getFormatInfo($mask, $level); goto eej21; eej21: for ($i = 0; $i < 8; $i++) { if ($format & 1) { $blacks += 2; $v = 0x85; } else { $v = 0x84; } $frame[8][$width - 1 - $i] = chr($v); if ($i < 6) { $frame[$i][8] = chr($v); } else { $frame[$i + 1][8] = chr($v); } $format = $format >> 1; } goto LXmDq; vlMxZ: $blacks = 0; goto kBHiS; Bkhk8: return $blacks; goto WGUAb; WGUAb: } public function mask0($x, $y) { return $x + $y & 1; } public function mask1($x, $y) { return $y & 1; } public function mask2($x, $y) { return $x % 3; } public function mask3($x, $y) { return ($x + $y) % 3; } public function mask4($x, $y) { return (int) ($y / 2) + (int) ($x / 3) & 1; } public function mask5($x, $y) { return ($x * $y & 1) + $x * $y % 3; } public function mask6($x, $y) { return ($x * $y & 1) + $x * $y % 3 & 1; } public function mask7($x, $y) { return $x * $y % 3 + ($x + $y & 1) & 1; } private function generateMaskNo($maskNo, $width, $frame) { goto XGgpM; GiHhV: for ($y = 0; $y < $width; $y++) { for ($x = 0; $x < $width; $x++) { if (ord($frame[$y][$x]) & 0x80) { $bitMask[$y][$x] = 0; } else { $maskFunc = call_user_func(array($this, "\x6d\x61\x73\x6b" . $maskNo), $x, $y); $bitMask[$y][$x] = $maskFunc == 0 ? 1 : 0; } } } goto rIKoE; XGgpM: $bitMask = array_fill(0, $width, array_fill(0, $width, 0)); goto GiHhV; rIKoE: return $bitMask; goto RY2R0; RY2R0: } public static function serial($bitFrame) { goto kBGrr; R8vDd: foreach ($bitFrame as $line) { $codeArr[] = join('', $line); } goto W7PWg; kBGrr: $codeArr = array(); goto R8vDd; W7PWg: return gzcompress(join("\12", $codeArr), 9); goto ckNb8; ckNb8: } public static function unserial($code) { goto FKFOJ; kEV2F: $codeLines = explode("\xa", gzuncompress($code)); goto aNrnQ; FKFOJ: $codeArr = array(); goto kEV2F; aNrnQ: foreach ($codeLines as $line) { $codeArr[] = str_split($line); } goto tduJh; tduJh: return $codeArr; goto X7w5Q; X7w5Q: } public function makeMaskNo($maskNo, $width, $s, &$d, $maskGenOnly = false) { goto lpG6H; OroMD: for ($y = 0; $y < $width; $y++) { for ($x = 0; $x < $width; $x++) { if ($bitMask[$y][$x] == 1) { $d[$y][$x] = chr(ord($s[$y][$x]) ^ (int) $bitMask[$y][$x]); } $b += (int) (ord($d[$y][$x]) & 1); } } goto WhayM; g1hdP: $fileName = QR_CACHE_DIR . "\x6d\x61\163\x6b\137" . $maskNo . DIRECTORY_SEPARATOR . "\x6d\141\163\153\137" . $width . "\x5f" . $maskNo . "\x2e\x64\x61\x74"; goto MwBdq; WhayM: return $b; goto YOcK_; nxfD4: $bitMask = array(); goto g1hdP; lpG6H: $b = 0; goto nxfD4; nuk3S: if ($maskGenOnly) { return; } goto aTf6w; MwBdq: if (QR_CACHEABLE) { if (file_exists($fileName)) { $bitMask = self::unserial(file_get_contents($fileName)); } else { goto aPF5C; rSw8o: file_put_contents($fileName, self::serial($bitMask)); goto he1Rm; aPF5C: $bitMask = $this->generateMaskNo($maskNo, $width, $s, $d); goto dvyIs; dvyIs: if (!file_exists(QR_CACHE_DIR . "\x6d\x61\163\153\137" . $maskNo)) { mkdir(QR_CACHE_DIR . "\155\141\x73\153\137" . $maskNo); } goto rSw8o; he1Rm: } } else { $bitMask = $this->generateMaskNo($maskNo, $width, $s, $d); } goto nuk3S; aTf6w: $d = $s; goto OroMD; YOcK_: } public function makeMask($width, $frame, $maskNo, $level) { goto OMHcA; JyQR3: $this->writeFormatInformation($width, $masked, $maskNo, $level); goto MSFz1; OMHcA: $masked = array_fill(0, $width, str_repeat("\0", $width)); goto auuNe; MSFz1: return $masked; goto U6S_b; auuNe: $this->makeMaskNo($maskNo, $width, $frame, $masked); goto JyQR3; U6S_b: } public function calcN1N3($length) { goto TJxza; b4dzZ: for ($i = 0; $i < $length; $i++) { if ($this->runLength[$i] >= 5) { $demerit += N1 + ($this->runLength[$i] - 5); } if ($i & 1) { if ($i >= 3 && $i < $length - 2 && $this->runLength[$i] % 3 == 0) { $fact = (int) ($this->runLength[$i] / 3); if ($this->runLength[$i - 2] == $fact && $this->runLength[$i - 1] == $fact && $this->runLength[$i + 1] == $fact && $this->runLength[$i + 2] == $fact) { if ($this->runLength[$i - 3] < 0 || $this->runLength[$i - 3] >= 4 * $fact) { $demerit += N3; } else { if ($i + 3 >= $length || $this->runLength[$i + 3] >= 4 * $fact) { $demerit += N3; } } } } } } goto MBHnY; MBHnY: return $demerit; goto NBwYw; TJxza: $demerit = 0; goto b4dzZ; NBwYw: } public function evaluateSymbol($width, $frame) { goto XLq57; YP0oA: return $demerit; goto x5cH_; UOmpv: for ($x = 0; $x < $width; $x++) { $head = 0; $this->runLength[0] = 1; for ($y = 0; $y < $width; $y++) { if ($y == 0 && ord($frame[$y][$x]) & 1) { goto zOdld; zOdld: $this->runLength[0] = -1; goto e0rED; opWje: $this->runLength[$head] = 1; goto NVxki; e0rED: $head = 1; goto opWje; NVxki: } else { if ($y > 0) { if ((ord($frame[$y][$x]) ^ ord($frame[$y - 1][$x])) & 1) { $head++; $this->runLength[$head] = 1; } else { $this->runLength[$head]++; } } } } $demerit += $this->calcN1N3($head + 1); } goto YP0oA; XLq57: $head = 0; goto Ydb8V; Ydb8V: $demerit = 0; goto Ct3Bs; Ct3Bs: for ($y = 0; $y < $width; $y++) { $head = 0; $this->runLength[0] = 1; $frameY = $frame[$y]; if ($y > 0) { $frameYM = $frame[$y - 1]; } for ($x = 0; $x < $width; $x++) { if ($x > 0 && $y > 0) { goto hKcTN; uvA0_: if (($b22 | $w22 ^ 1) & 1) { $demerit += N2; } goto D1JNX; hKcTN: $b22 = ord($frameY[$x]) & ord($frameY[$x - 1]) & ord($frameYM[$x]) & ord($frameYM[$x - 1]); goto Fgbmt; Fgbmt: $w22 = ord($frameY[$x]) | ord($frameY[$x - 1]) | ord($frameYM[$x]) | ord($frameYM[$x - 1]); goto uvA0_; D1JNX: } if ($x == 0 && ord($frameY[$x]) & 1) { goto f907r; jQ0Jy: $head = 1; goto mY6gA; f907r: $this->runLength[0] = -1; goto jQ0Jy; mY6gA: $this->runLength[$head] = 1; goto inII8; inII8: } else { if ($x > 0) { if ((ord($frameY[$x]) ^ ord($frameY[$x - 1])) & 1) { $head++; $this->runLength[$head] = 1; } else { $this->runLength[$head]++; } } } } $demerit += $this->calcN1N3($head + 1); } goto UOmpv; x5cH_: } public function mask($width, $frame, $level) { goto D7zlr; OPEMc: $bestMask = array(); goto uLLNe; uLLNe: $checked_masks = array(0, 1, 2, 3, 4, 5, 6, 7); goto pL3Rd; wAO5a: $bestMaskNum = 0; goto OPEMc; D7zlr: $minDemerit = PHP_INT_MAX; goto wAO5a; Sknso: $bestMask = $frame; goto UqMBg; qGAfL: return $bestMask; goto YzkBW; pL3Rd: if (QR_FIND_FROM_RANDOM !== false) { $howManuOut = 8 - QR_FIND_FROM_RANDOM % 9; for ($i = 0; $i < $howManuOut; $i++) { $remPos = rand(0, count($checked_masks) - 1); unset($checked_masks[$remPos]); $checked_masks = array_values($checked_masks); } } goto Sknso; UqMBg: foreach ($checked_masks as $i) { goto U0Fji; cyXsx: $blacks = (int) (100 * $blacks / ($width * $width)); goto SkPsZ; SkPsZ: $demerit = (int) ((int) (abs($blacks - 50) / 5) * N4); goto SSRxE; H2XMq: if ($demerit < $minDemerit) { goto eUk2b; qX3A1: $bestMask = $mask; goto qnuTH; eUk2b: $minDemerit = $demerit; goto qX3A1; qnuTH: $bestMaskNum = $i; goto veDa7; veDa7: } goto bMXfe; Fx1He: $blacks += $this->writeFormatInformation($width, $mask, $i, $level); goto cyXsx; RZV9Y: $blacks = $this->makeMaskNo($i, $width, $frame, $mask); goto Fx1He; FFXCc: $demerit = 0; goto voYvI; voYvI: $blacks = 0; goto RZV9Y; SSRxE: $demerit += $this->evaluateSymbol($width, $mask); goto H2XMq; U0Fji: $mask = array_fill(0, $width, str_repeat("\0", $width)); goto FFXCc; bMXfe: } goto qGAfL; YzkBW: } } goto y1_5N; ip9hk: define("\x51\x52\103\101\x50\137\122\105\115\111\116\x44\105\122", 2); goto EJIbf; evDPx: define("\x51\x52\137\x45\103\x4c\105\126\x45\x4c\x5f\x48", 3); goto ZWWjT; NXsU2: define("\x51\x52\103\101\x50\137\x57\x4f\122\104\123", 1); goto ip9hk; UnBZq: QRtools::markTime("\163\x74\x61\x72\164"); goto XNOIb; yWHig: define("\x51\x52\137\103\x41\x43\110\x45\101\x42\x4c\x45", false); goto z_iCo; z_iCo: define("\121\122\x5f\x43\101\x43\x48\105\x5f\104\x49\122", false); goto zRL5h; JbXSy: class FrameFiller { public $width; public $frame; public $x; public $y; public $dir; public $bit; public function __construct($width, &$frame) { goto BOn0J; Z1Is1: $this->bit = -1; goto B3xJx; QTTJb: $this->y = $width - 1; goto HGZq1; HGZq1: $this->dir = -1; goto Z1Is1; wZbsa: $this->x = $width - 1; goto QTTJb; BOn0J: $this->width = $width; goto Co6mR; Co6mR: $this->frame = $frame; goto wZbsa; B3xJx: } public function setFrameAt($at, $val) { $this->frame[$at["\x79"]][$at["\x78"]] = chr($val); } public function getFrameAt($at) { return ord($this->frame[$at["\171"]][$at["\170"]]); } public function next() { do { if ($this->bit == -1) { $this->bit = 0; return array("\x78" => $this->x, "\x79" => $this->y); } $x = $this->x; $y = $this->y; $w = $this->width; if ($this->bit == 0) { $x--; $this->bit++; } else { goto Dwza6; b2uHU: $y += $this->dir; goto VF2YW; Dwza6: $x++; goto b2uHU; VF2YW: $this->bit--; goto p4yrm; p4yrm: } if ($this->dir < 0) { if ($y < 0) { goto OhffK; LtL1U: $this->dir = 1; goto x9LcB; x9LcB: if ($x == 6) { $x--; $y = 9; } goto whDDx; OhffK: $y = 0; goto cYVM9; cYVM9: $x -= 2; goto LtL1U; whDDx: } } else { if ($y == $w) { goto yzrLQ; W5lIG: $x -= 2; goto qKkrq; SYtRm: if ($x == 6) { $x--; $y -= 8; } goto CpIVV; qKkrq: $this->dir = -1; goto SYtRm; yzrLQ: $y = $w - 1; goto W5lIG; CpIVV: } } if ($x < 0 || $y < 0) { return null; } $this->x = $x; $this->y = $y; } while (ord($this->frame[$y][$x]) & 0x80); return array("\x78" => $x, "\171" => $y); } } goto NBqXt; TY8cm: define("\121\x52\137\x44\105\x46\x41\x55\114\124\x5f\x4d\101\123\x4b", 2); goto SU_is; UdQGq: define("\x51\122\137\115\117\x44\105\137\113\101\116\112\x49", 3); goto Arp26; rAnG9: define("\x51\x52\x5f\105\103\x4c\105\x56\105\x4c\x5f\121", 2); goto evDPx; n7yYX: class QRrsItem { public $mm; public $nn; public $alpha_to = array(); public $index_of = array(); public $genpoly = array(); public $nroots; public $fcr; public $prim; public $iprim; public $pad; public $gfpoly; public function modnn($x) { while ($x >= $this->nn) { $x -= $this->nn; $x = ($x >> $this->mm) + ($x & $this->nn); } return $x; } public static function init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) { goto aCsvL; nhgW4: for ($i = 0; $i < $rs->nn; $i++) { $rs->index_of[$sr] = $i; $rs->alpha_to[$i] = $sr; $sr <<= 1; if ($sr & 1 << $symsize) { $sr ^= $gfpoly; } $sr &= $rs->nn; } goto UreZc; h00eA: $sr = 1; goto nhgW4; qYs3l: $A0 =& $NN; goto I8Gym; OE4uR: if ($symsize < 0 || $symsize > 8) { return $rs; } goto uqNLV; r45IN: $rs->alpha_to = array_fill(0, $rs->nn + 1, 0); goto UDpJe; W6hGR: $rs->alpha_to[$A0] = 0; goto h00eA; WHbgP: $rs->nn = (1 << $symsize) - 1; goto Eebui; I8Gym: $rs->index_of[0] = $A0; goto W6hGR; n1UOJ: $rs->fcr = $fcr; goto eFRag; eFRag: $rs->prim = $prim; goto GPcHk; HmvG5: return $rs; goto gxI_M; mnYKa: if ($prim <= 0 || $prim >= 1 << $symsize) { return $rs; } goto SDeHY; EirSZ: for ($i = 0, $root = $fcr * $prim; $i < $nroots; $i++, $root += $prim) { $rs->genpoly[$i + 1] = 1; for ($j = $i; $j > 0; $j--) { if ($rs->genpoly[$j] != 0) { $rs->genpoly[$j] = $rs->genpoly[$j - 1] ^ $rs->alpha_to[$rs->modnn($rs->index_of[$rs->genpoly[$j]] + $root)]; } else { $rs->genpoly[$j] = $rs->genpoly[$j - 1]; } } $rs->genpoly[0] = $rs->alpha_to[$rs->modnn($rs->index_of[$rs->genpoly[0]] + $root)]; } goto S99_h; ewoT9: $NN =& $rs->nn; goto qYs3l; UreZc: if ($sr != 1) { $rs = NULL; return $rs; } goto twxW2; UDpJe: $rs->index_of = array_fill(0, $rs->nn + 1, 0); goto ewoT9; twxW2: $rs->genpoly = array_fill(0, $nroots + 1, 0); goto n1UOJ; GPcHk: $rs->nroots = $nroots; goto wJE8g; uqNLV: if ($fcr < 0 || $fcr >= 1 << $symsize) { return $rs; } goto mnYKa; SKQxL: $rs->iprim = (int) ($iprim / $prim); goto JNZli; Eebui: $rs->pad = $pad; goto r45IN; wJE8g: $rs->gfpoly = $gfpoly; goto uEvDy; ruqJH: if ($pad < 0 || $pad >= (1 << $symsize) - 1 - $nroots) { return $rs; } goto a6HXA; JNZli: $rs->genpoly[0] = 1; goto EirSZ; uEvDy: for ($iprim = 1; $iprim % $prim != 0; $iprim += $rs->nn) { } goto SKQxL; a6HXA: $rs = new QRrsItem(); goto z1En3; z1En3: $rs->mm = $symsize; goto WHbgP; aCsvL: $rs = null; goto OE4uR; S99_h: for ($i = 0; $i <= $nroots; $i++) { $rs->genpoly[$i] = $rs->index_of[$rs->genpoly[$i]]; } goto HmvG5; SDeHY: if ($nroots < 0 || $nroots >= 1 << $symsize) { return $rs; } goto ruqJH; gxI_M: } public function encode_rs_char($data, &$parity) { goto o00CF; jTjWD: for ($i = 0; $i < $NN - $NROOTS - $PAD; $i++) { $feedback = $INDEX_OF[$data[$i] ^ $parity[0]]; if ($feedback != $A0) { $feedback = $this->modnn($NN - $GENPOLY[$NROOTS] + $feedback); for ($j = 1; $j < $NROOTS; $j++) { $parity[$j] ^= $ALPHA_TO[$this->modnn($feedback + $GENPOLY[$NROOTS - $j])]; } } array_shift($parity); if ($feedback != $A0) { array_push($parity, $ALPHA_TO[$this->modnn($feedback + $GENPOLY[0])]); } else { array_push($parity, 0); } } goto fr5H0; gzkzE: $GENPOLY =& $this->genpoly; goto RO1lt; w5EKL: $PRIM =& $this->prim; goto WATw1; WATw1: $IPRIM =& $this->iprim; goto hHfOG; sYd_S: $ALPHA_TO =& $this->alpha_to; goto k_sfc; hHfOG: $PAD =& $this->pad; goto JGv_N; i_ecS: $NN =& $this->nn; goto sYd_S; RO1lt: $NROOTS =& $this->nroots; goto dlEr8; Z8wYp: $parity = array_fill(0, $NROOTS, 0); goto jTjWD; k_sfc: $INDEX_OF =& $this->index_of; goto gzkzE; JGv_N: $A0 =& $NN; goto Z8wYp; o00CF: $MM =& $this->mm; goto i_ecS; dlEr8: $FCR =& $this->fcr; goto w5EKL; fr5H0: } } goto xOSEC; xOSEC: class QRrs { public static $items = array(); public static function init_rs($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) { goto sb1iK; bHmt8: $rs = QRrsItem::init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad); goto PAT5Q; PAT5Q: array_unshift(self::$items, $rs); goto x0eHM; sb1iK: foreach (self::$items as $rs) { goto muVmn; Tmjyx: if ($rs->mm != $symsize) { continue; } goto uBsNx; X3UOK: if ($rs->fcr != $fcr) { continue; } goto Aliu0; J7yrG: return $rs; goto ACI4C; Aliu0: if ($rs->prim != $prim) { continue; } goto J7yrG; uBsNx: if ($rs->gfpoly != $gfpoly) { continue; } goto X3UOK; kJ1hV: if ($rs->nroots != $nroots) { continue; } goto Tmjyx; muVmn: if ($rs->pad != $pad) { continue; } goto kJ1hV; ACI4C: } goto bHmt8; x0eHM: return $rs; goto NiDVV; NiDVV: } } goto pvrBq; p37Wm: define("\x4d\x41\x58\137\123\x54\122\x55\x43\124\125\x52\x45\x44\137\123\x59\x4d\x42\x4f\114\x53", 16); goto vQcqx; KsU6K: define("\121\122\137\x46\x4f\122\x4d\x41\124\137\x50\116\107", 1); goto ZH81D; XNOIb: define("\121\122\x53\x50\x45\103\137\x56\x45\122\x53\111\117\116\x5f\115\101\130", 40); goto sTxd4; sTxd4: define("\121\x52\123\x50\x45\x43\x5f\127\111\x44\x54\x48\137\115\101\130", 177); goto AtQhu; usdgB: class QRspec { public static $capacity = array(array(0, 0, 0, array(0, 0, 0, 0)), array(21, 26, 0, array(7, 10, 13, 17)), array(25, 44, 7, array(10, 16, 22, 28)), array(29, 70, 7, array(15, 26, 36, 44)), array(33, 100, 7, array(20, 36, 52, 64)), array(37, 134, 7, array(26, 48, 72, 88)), array(41, 172, 7, array(36, 64, 96, 112)), array(45, 196, 0, array(40, 72, 108, 130)), array(49, 242, 0, array(48, 88, 132, 156)), array(53, 292, 0, array(60, 110, 160, 192)), array(57, 346, 0, array(72, 130, 192, 224)), array(61, 404, 0, array(80, 150, 224, 264)), array(65, 466, 0, array(96, 176, 260, 308)), array(69, 532, 0, array(104, 198, 288, 352)), array(73, 581, 3, array(120, 216, 320, 384)), array(77, 655, 3, array(132, 240, 360, 432)), array(81, 733, 3, array(144, 280, 408, 480)), array(85, 815, 3, array(168, 308, 448, 532)), array(89, 901, 3, array(180, 338, 504, 588)), array(93, 991, 3, array(196, 364, 546, 650)), array(97, 1085, 3, array(224, 416, 600, 700)), array(101, 1156, 4, array(224, 442, 644, 750)), array(105, 1258, 4, array(252, 476, 690, 816)), array(109, 1364, 4, array(270, 504, 750, 900)), array(113, 1474, 4, array(300, 560, 810, 960)), array(117, 1588, 4, array(312, 588, 870, 1050)), array(121, 1706, 4, array(336, 644, 952, 1110)), array(125, 1828, 4, array(360, 700, 1020, 1200)), array(129, 1921, 3, array(390, 728, 1050, 1260)), array(133, 2051, 3, array(420, 784, 1140, 1350)), array(137, 2185, 3, array(450, 812, 1200, 1440)), array(141, 2323, 3, array(480, 868, 1290, 1530)), array(145, 2465, 3, array(510, 924, 1350, 1620)), array(149, 2611, 3, array(540, 980, 1440, 1710)), array(153, 2761, 3, array(570, 1036, 1530, 1800)), array(157, 2876, 0, array(570, 1064, 1590, 1890)), array(161, 3034, 0, array(600, 1120, 1680, 1980)), array(165, 3196, 0, array(630, 1204, 1770, 2100)), array(169, 3362, 0, array(660, 1260, 1860, 2220)), array(173, 3532, 0, array(720, 1316, 1950, 2310)), array(177, 3706, 0, array(750, 1372, 2040, 2430))); public static function getDataLength($version, $level) { return self::$capacity[$version][QRCAP_WORDS] - self::$capacity[$version][QRCAP_EC][$level]; } public static function getECCLength($version, $level) { return self::$capacity[$version][QRCAP_EC][$level]; } public static function getWidth($version) { return self::$capacity[$version][QRCAP_WIDTH]; } public static function getRemainder($version) { return self::$capacity[$version][QRCAP_REMINDER]; } public static function getMinimumVersion($size, $level) { for ($i = 1; $i <= QRSPEC_VERSION_MAX; $i++) { $words = self::$capacity[$i][QRCAP_WORDS] - self::$capacity[$i][QRCAP_EC][$level]; if ($words >= $size) { return $i; } } return -1; } public static $lengthTableBits = array(array(10, 12, 14), array(9, 11, 13), array(8, 16, 16), array(8, 10, 12)); public static function lengthIndicator($mode, $version) { goto OLYYT; OLYYT: if ($mode == QR_MODE_STRUCTURE) { return 0; } goto bg01D; bg01D: if ($version <= 9) { $l = 0; } else { if ($version <= 26) { $l = 1; } else { $l = 2; } } goto Vai9h; Vai9h: return self::$lengthTableBits[$mode][$l]; goto h2Evp; h2Evp: } public static function maximumWords($mode, $version) { goto x0q_L; UpFk2: return $words; goto Ln76f; x0q_L: if ($mode == QR_MODE_STRUCTURE) { return 3; } goto uqzA8; lDYkL: $words = (1 << $bits) - 1; goto fZSxZ; uqzA8: if ($version <= 9) { $l = 0; } else { if ($version <= 26) { $l = 1; } else { $l = 2; } } goto igrie; fZSxZ: if ($mode == QR_MODE_KANJI) { $words *= 2; } goto UpFk2; igrie: $bits = self::$lengthTableBits[$mode][$l]; goto lDYkL; Ln76f: } public static $eccTable = array(array(array(0, 0), array(0, 0), array(0, 0), array(0, 0)), array(array(1, 0), array(1, 0), array(1, 0), array(1, 0)), array(array(1, 0), array(1, 0), array(1, 0), array(1, 0)), array(array(1, 0), array(1, 0), array(2, 0), array(2, 0)), array(array(1, 0), array(2, 0), array(2, 0), array(4, 0)), array(array(1, 0), array(2, 0), array(2, 2), array(2, 2)), array(array(2, 0), array(4, 0), array(4, 0), array(4, 0)), array(array(2, 0), array(4, 0), array(2, 4), array(4, 1)), array(array(2, 0), array(2, 2), array(4, 2), array(4, 2)), array(array(2, 0), array(3, 2), array(4, 4), array(4, 4)), array(array(2, 2), array(4, 1), array(6, 2), array(6, 2)), array(array(4, 0), array(1, 4), array(4, 4), array(3, 8)), array(array(2, 2), array(6, 2), array(4, 6), array(7, 4)), array(array(4, 0), array(8, 1), array(8, 4), array(12, 4)), array(array(3, 1), array(4, 5), array(11, 5), array(11, 5)), array(array(5, 1), array(5, 5), array(5, 7), array(11, 7)), array(array(5, 1), array(7, 3), array(15, 2), array(3, 13)), array(array(1, 5), array(10, 1), array(1, 15), array(2, 17)), array(array(5, 1), array(9, 4), array(17, 1), array(2, 19)), array(array(3, 4), array(3, 11), array(17, 4), array(9, 16)), array(array(3, 5), array(3, 13), array(15, 5), array(15, 10)), array(array(4, 4), array(17, 0), array(17, 6), array(19, 6)), array(array(2, 7), array(17, 0), array(7, 16), array(34, 0)), array(array(4, 5), array(4, 14), array(11, 14), array(16, 14)), array(array(6, 4), array(6, 14), array(11, 16), array(30, 2)), array(array(8, 4), array(8, 13), array(7, 22), array(22, 13)), array(array(10, 2), array(19, 4), array(28, 6), array(33, 4)), array(array(8, 4), array(22, 3), array(8, 26), array(12, 28)), array(array(3, 10), array(3, 23), array(4, 31), array(11, 31)), array(array(7, 7), array(21, 7), array(1, 37), array(19, 26)), array(array(5, 10), array(19, 10), array(15, 25), array(23, 25)), array(array(13, 3), array(2, 29), array(42, 1), array(23, 28)), array(array(17, 0), array(10, 23), array(10, 35), array(19, 35)), array(array(17, 1), array(14, 21), array(29, 19), array(11, 46)), array(array(13, 6), array(14, 23), array(44, 7), array(59, 1)), array(array(12, 7), array(12, 26), array(39, 14), array(22, 41)), array(array(6, 14), array(6, 34), array(46, 10), array(2, 64)), array(array(17, 4), array(29, 14), array(49, 10), array(24, 46)), array(array(4, 18), array(13, 32), array(48, 14), array(42, 32)), array(array(20, 4), array(40, 7), array(43, 22), array(10, 67)), array(array(19, 6), array(18, 31), array(34, 34), array(20, 61))); public static function getEccSpec($version, $level, array &$spec) { goto hqyvU; paM4R: if ($b2 == 0) { goto d_pVs; n4FE5: $spec[1] = (int) ($data / $b1); goto bQbs6; d_pVs: $spec[0] = $b1; goto n4FE5; EqnDT: $spec[3] = 0; goto iL4OV; iL4OV: $spec[4] = 0; goto dR6i1; bQbs6: $spec[2] = (int) ($ecc / $b1); goto EqnDT; dR6i1: } else { goto fBTOQ; ER8FX: $spec[1] = (int) ($data / ($b1 + $b2)); goto zmSv2; qgeJ8: $spec[3] = $b2; goto IleED; zmSv2: $spec[2] = (int) ($ecc / ($b1 + $b2)); goto qgeJ8; fBTOQ: $spec[0] = $b1; goto ER8FX; IleED: $spec[4] = $spec[1] + 1; goto BCqMd; BCqMd: } goto Yhk55; sUywe: $b2 = self::$eccTable[$version][$level][1]; goto eHpeR; kGGxG: $b1 = self::$eccTable[$version][$level][0]; goto sUywe; ocmMc: $ecc = self::getECCLength($version, $level); goto paM4R; hqyvU: if (count($spec) < 5) { $spec = array(0, 0, 0, 0, 0); } goto kGGxG; eHpeR: $data = self::getDataLength($version, $level); goto ocmMc; Yhk55: } public static $alignmentPattern = array(array(0, 0), array(0, 0), array(18, 0), array(22, 0), array(26, 0), array(30, 0), array(34, 0), array(22, 38), array(24, 42), array(26, 46), array(28, 50), array(30, 54), array(32, 58), array(34, 62), array(26, 46), array(26, 48), array(26, 50), array(30, 54), array(30, 56), array(30, 58), array(34, 62), array(28, 50), array(26, 50), array(30, 54), array(28, 54), array(32, 58), array(30, 58), array(34, 62), array(26, 50), array(30, 54), array(26, 52), array(30, 56), array(34, 60), array(30, 58), array(34, 62), array(30, 54), array(24, 50), array(28, 54), array(32, 58), array(26, 54), array(30, 58)); public static function putAlignmentMarker(array &$frame, $ox, $oy) { goto Vw3XY; oQ2dZ: for ($y = 0; $y < 5; $y++) { QRstr::set($frame, $xStart, $yStart + $y, $finder[$y]); } goto OOLNj; X9xTY: $yStart = $oy - 2; goto y77pt; y77pt: $xStart = $ox - 2; goto oQ2dZ; Vw3XY: $finder = array("\241\241\241\241\xa1", "\xa1\xa0\xa0\xa0\xa1", "\xa1\240\xa1\240\xa1", "\241\240\240\xa0\241", "\xa1\241\241\xa1\241"); goto X9xTY; OOLNj: } public static function putAlignmentPattern($version, &$frame, $width) { goto O6lHp; O6lHp: if ($version < 2) { return; } goto tEmvr; BWZbu: for ($y = 0; $y < $w - 1; $y++) { $cx = self::$alignmentPattern[$version][0]; for ($x = 0; $x < $w - 1; $x++) { self::putAlignmentMarker($frame, $cx, $cy); $cx += $d; } $cy += $d; } goto Gnbk0; Low02: $cx = self::$alignmentPattern[$version][0]; goto O0l81; CU5oG: if ($d < 0) { $w = 2; } else { $w = (int) (($width - self::$alignmentPattern[$version][0]) / $d + 2); } goto swELe; swELe: if ($w * $w - 3 == 1) { goto oGyqT; QHqLD: return; goto p3BBi; OPzGS: $y = self::$alignmentPattern[$version][0]; goto VcJM7; VcJM7: self::putAlignmentMarker($frame, $x, $y); goto QHqLD; oGyqT: $x = self::$alignmentPattern[$version][0]; goto OPzGS; p3BBi: } goto Low02; tEmvr: $d = self::$alignmentPattern[$version][1] - self::$alignmentPattern[$version][0]; goto CU5oG; oBfWK: $cy = self::$alignmentPattern[$version][0]; goto BWZbu; O0l81: for ($x = 1; $x < $w - 1; $x++) { self::putAlignmentMarker($frame, 6, $cx); self::putAlignmentMarker($frame, $cx, 6); $cx += $d; } goto oBfWK; Gnbk0: } public static $versionPattern = array(0x7c94, 0x85bc, 0x9a99, 0xa4d3, 0xbbf6, 0xc762, 0xd847, 0xe60d, 0xf928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6, 0x15683, 0x168c9, 0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75, 0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64, 0x27541, 0x28c69); public static function getVersionPattern($version) { if ($version < 7 || $version > QRSPEC_VERSION_MAX) { return 0; } return self::$versionPattern[$version - 7]; } public static $formatInfo = array(array(0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976), array(0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0), array(0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed), array(0x1689, 0x13be, 0x1ce7, 0x19d0, 0x762, 0x255, 0xd0c, 0x83b)); public static function getFormatInfo($mask, $level) { goto f26xR; wxI_B: return self::$formatInfo[$level][$mask]; goto I8evU; f26xR: if ($mask < 0 || $mask > 7) { return 0; } goto jE59F; jE59F: if ($level < 0 || $level > 3) { return 0; } goto wxI_B; I8evU: } public static $frames = array(); public static function putFinderPattern(&$frame, $ox, $oy) { $finder = array("\301\xc1\301\xc1\xc1\xc1\301", "\xc1\300\300\300\xc0\300\xc1", "\xc1\xc0\301\301\301\300\xc1", "\xc1\300\301\301\301\300\xc1", "\301\xc0\xc1\301\xc1\300\xc1", "\xc1\300\300\xc0\xc0\xc0\xc1", "\xc1\301\xc1\301\xc1\xc1\301"); for ($y = 0; $y < 7; $y++) { QRstr::set($frame, $ox, $oy + $y, $finder[$y]); } } public static function createFrame($version) { goto ywodB; gZHUS: return $frame; goto zAQEC; v8EQ4: QRstr::set($frame, 0, 7, $setPattern); goto cgqZS; jcOdc: QRstr::set($frame, $width - 8, 8, $setPattern, 8); goto W3fm3; qDKY4: for ($i = 1; $i < $width - 15; $i++) { $frame[6][7 + $i] = chr(0x90 | $i & 1); $frame[7 + $i][6] = chr(0x90 | $i & 1); } goto ciFqg; OeQL5: self::putFinderPattern($frame, 0, $width - 7); goto Gvxs9; FMrLX: for ($y = 0; $y < 8; $y++, $yOffset++) { $frame[$y][8] = "\x84"; $frame[$yOffset][8] = "\x84"; } goto qDKY4; W3fm3: $yOffset = $width - 8; goto FMrLX; ciFqg: self::putAlignmentPattern($version, $frame, $width); goto dgtai; ojD_d: QRstr::set($frame, 0, 8, $setPattern); goto jcOdc; cgqZS: QRstr::set($frame, $width - 8, 7, $setPattern); goto tFogS; tFogS: QRstr::set($frame, 0, $width - 8, $setPattern); goto dj5jS; ywodB: $width = self::$capacity[$version][QRCAP_WIDTH]; goto NnIyT; dgtai: if ($version >= 7) { goto FE446; udbBD: for ($y = 0; $y < 6; $y++) { for ($x = 0; $x < 3; $x++) { $frame[$y][$x + ($width - 11)] = chr(0x88 | $v & 1); $v = $v >> 1; } } goto GCqBa; Ygnj2: for ($x = 0; $x < 6; $x++) { for ($y = 0; $y < 3; $y++) { $frame[$width - 11 + $y][$x] = chr(0x88 | $v & 1); $v = $v >> 1; } } goto wWRqZ; OLWH6: $v = $vinf; goto Ygnj2; wWRqZ: $v = $vinf; goto udbBD; FE446: $vinf = self::getVersionPattern($version); goto OLWH6; GCqBa: } goto s1dbg; NnIyT: $frameLine = str_repeat("\x0", $width); goto N4qMQ; Gvxs9: $yOffset = $width - 7; goto EJa1O; dj5jS: $setPattern = str_repeat("\204", 9); goto ojD_d; pg1GO: self::putFinderPattern($frame, 0, 0); goto N1N7J; ofACF: $setPattern = str_repeat("\300", 8); goto v8EQ4; EJa1O: for ($y = 0; $y < 7; $y++) { $frame[$y][7] = "\xc0"; $frame[$y][$width - 8] = "\300"; $frame[$yOffset][7] = "\300"; $yOffset++; } goto ofACF; N4qMQ: $frame = array_fill(0, $width, $frameLine); goto pg1GO; N1N7J: self::putFinderPattern($frame, $width - 7, 0); goto OeQL5; s1dbg: $frame[$width - 8][8] = "\201"; goto gZHUS; zAQEC: } public static function debug($frame, $binary_mode = false) { if ($binary_mode) { goto Dsy0e; Dsy0e: foreach ($frame as &$frameLine) { $frameLine = join("\x3c\163\160\x61\x6e\40\143\x6c\x61\163\163\75\42\155\42\x3e\46\156\142\163\x70\x3b\x26\156\x62\x73\160\x3b\74\x2f\163\x70\141\156\x3e", explode("\x30", $frameLine)); $frameLine = join("\x26\x23\x39\x36\60\x38\73\46\43\x39\x36\60\70\73", explode("\61", $frameLine)); } goto zrBAZ; zrBAZ: echo "\x20\40\40\40\40\40\40\40\x20\x20\x20\40\40\40\x20\40\x3c\163\x74\x79\154\145\76\15\12\x20\x20\x20\x20\x20\40\40\40\x20\40\40\40\x20\40\x20\x20\40\40\x20\40\x2e\155\x20\173\40\x62\x61\x63\153\147\x72\x6f\x75\x6e\144\55\x63\x6f\x6c\x6f\162\72\x20\167\150\151\x74\145\73\x20\175\xd\12\40\40\x20\40\x20\40\x20\40\40\40\40\40\x20\40\40\x20\74\57\163\x74\171\x6c\x65\76\15\12\x20\x20\x20\40\40\x20\40\40\40\x20\40\40\x20\x20\x20\40"; goto njQsp; njQsp: echo "\x3c\x70\x72\x65\x3e\x3c\x74\164\76\x3c\142\x72\x2f\40\76\x3c\142\162\57\40\76\x3c\x62\162\x2f\x20\76\x26\156\x62\x73\160\x3b\46\x6e\142\163\160\73\46\156\x62\x73\x70\73\x26\x6e\142\x73\x70\73\x26\x6e\x62\x73\x70\73\x26\x6e\142\x73\160\73\x26\x6e\x62\x73\x70\x3b\46\x6e\x62\163\160\73"; goto HS408; HS408: echo join("\74\x62\162\57\40\76\x26\x6e\142\x73\160\73\x26\156\x62\163\x70\73\x26\x6e\142\163\x70\73\46\x6e\142\x73\160\73\46\x6e\x62\163\x70\x3b\x26\x6e\142\163\x70\x3b\46\x6e\x62\x73\160\73\x26\x6e\x62\x73\x70\x3b", $frame); goto Lrhxl; Lrhxl: echo "\x3c\x2f\164\164\76\x3c\57\x70\x72\145\x3e\x3c\x62\x72\57\x20\x3e\x3c\142\162\x2f\x20\x3e\x3c\142\162\x2f\x20\x3e\x3c\142\162\57\x20\76\x3c\x62\162\x2f\x20\76\x3c\142\162\57\x20\76"; goto MDo7c; MDo7c: } else { goto jYdAO; Wiq09: echo join("\x3c\142\x72\57\x20\76", $frame); goto en7cS; Mlx75: echo "\x3c\x70\162\x65\76\x3c\x74\164\76"; goto Wiq09; en7cS: echo "\74\57\164\x74\x3e\x3c\x2f\160\162\145\76"; goto KdN4k; VvSSw: echo "\40\x20\x20\40\x20\x20\40\x20\40\40\x20\40\x20\40\x20\x20\74\x73\164\x79\x6c\x65\76\15\12\40\40\x20\x20\x20\x20\x20\x20\x20\x20\x20\40\x20\40\x20\40\x20\40\x20\40\x2e\160\x20\x7b\40\x62\x61\143\x6b\147\162\x6f\165\x6e\144\x2d\143\157\x6c\157\x72\x3a\40\171\x65\x6c\154\157\167\73\40\x7d\15\xa\x20\40\40\40\40\x20\x20\x20\40\x20\40\x20\x20\x20\40\40\40\x20\x20\x20\56\x6d\40\173\x20\x62\x61\143\153\147\x72\157\x75\156\x64\x2d\x63\157\x6c\x6f\162\72\x20\43\x30\x30\x46\x46\60\x30\x3b\40\x7d\15\xa\40\40\40\40\x20\x20\x20\x20\x20\40\x20\x20\40\x20\40\40\x20\40\40\40\x2e\x73\x20\173\x20\142\141\143\153\147\x72\x6f\165\x6e\x64\55\143\x6f\154\x6f\162\x3a\x20\x23\106\x46\60\x30\x30\x30\73\x20\x7d\15\12\40\40\x20\x20\x20\40\x20\40\x20\x20\40\x20\40\40\40\40\x20\x20\x20\40\x2e\143\40\x7b\x20\x62\x61\143\x6b\x67\x72\157\165\x6e\x64\x2d\x63\157\154\x6f\x72\72\x20\x61\161\165\x61\x3b\x20\175\15\xa\40\40\x20\x20\40\40\x20\x20\40\x20\40\40\x20\40\x20\x20\x20\x20\40\x20\56\x78\x20\x7b\40\142\x61\x63\x6b\147\162\157\x75\x6e\x64\55\x63\157\x6c\157\162\x3a\40\160\x69\156\x6b\73\40\x7d\xd\12\x20\40\x20\x20\40\40\40\x20\x20\x20\40\x20\40\40\40\40\40\40\x20\x20\56\x66\40\173\x20\142\141\x63\153\x67\x72\157\165\156\144\55\x63\x6f\x6c\x6f\162\x3a\40\147\157\154\144\x3b\x20\x7d\15\12\40\40\x20\x20\x20\x20\x20\x20\40\x20\40\x20\40\40\40\x20\x3c\57\163\x74\x79\x6c\x65\x3e\xd\12\40\40\40\x20\x20\40\40\40\40\x20\x20\40\x20\40\40\x20"; goto Mlx75; jYdAO: foreach ($frame as &$frameLine) { goto XunGy; hC2cm: $frameLine = join("\74\163\160\141\x6e\x20\143\x6c\141\163\x73\75\42\x70\x22\x3e\x26\x23\x39\x36\61\70\x3b\74\57\x73\x70\x61\x6e\76", explode("\241", $frameLine)); goto CjnbI; XunGy: $frameLine = join("\74\x73\x70\141\x6e\x20\143\x6c\141\163\163\75\42\155\42\76\46\x6e\x62\163\x70\73\x3c\x2f\x73\160\141\x6e\76", explode("\xc0", $frameLine)); goto pE_FX; xm4Iu: $frameLine = join("\46\x23\71\70\x33\60\x3b", explode("\1", $frameLine)); goto jkXZE; pE_FX: $frameLine = join("\74\163\x70\141\x6e\x20\x63\154\141\163\x73\x3d\42\x6d\42\x3e\46\x23\x39\66\61\x38\x3b\x3c\x2f\163\160\141\x6e\x3e", explode("\301", $frameLine)); goto J2717; xt9nS: $frameLine = join("\x3c\163\x70\x61\x6e\x20\143\x6c\x61\x73\x73\75\42\146\42\x3e\x26\43\x39\x36\61\70\73\x3c\57\x73\x70\x61\156\76", explode("\211", $frameLine)); goto xm4Iu; b2NZ8: $frameLine = join("\x3c\x73\160\x61\156\40\143\x6c\141\x73\163\75\42\146\x22\76\x26\156\142\x73\160\73\74\57\x73\x70\141\x6e\76", explode("\x88", $frameLine)); goto xt9nS; jkXZE: $frameLine = join("\46\x23\70\71\60\61\73", explode("\x0", $frameLine)); goto uvTqh; dY7MK: $frameLine = join("\74\163\x70\x61\156\40\143\154\141\163\163\x3d\42\143\x22\x3e\x26\x23\x39\x37\x31\71\73\x3c\57\x73\160\141\x6e\76", explode("\221", $frameLine)); goto b2NZ8; eTv9N: $frameLine = join("\74\163\160\141\x6e\x20\143\x6c\141\163\x73\75\42\x73\42\76\46\x23\x39\66\x37\x30\x3b\74\x2f\x73\x70\141\x6e\76", explode("\205", $frameLine)); goto p10MN; J2717: $frameLine = join("\x3c\x73\x70\x61\156\40\x63\154\x61\163\x73\75\x22\160\42\x3e\46\x6e\142\x73\160\x3b\x3c\x2f\x73\160\141\x6e\x3e", explode("\xa0", $frameLine)); goto hC2cm; CjnbI: $frameLine = join("\74\x73\x70\x61\x6e\40\143\x6c\141\x73\x73\75\42\x73\x22\x3e\46\43\x39\x36\x37\x31\73\x3c\57\x73\x70\x61\156\x3e", explode("\x84", $frameLine)); goto eTv9N; p10MN: $frameLine = join("\74\x73\x70\141\156\40\x63\x6c\141\x73\163\75\x22\x78\42\76\x26\43\x39\67\x36\62\73\x3c\57\x73\160\141\156\76", explode("\201", $frameLine)); goto muW4p; muW4p: $frameLine = join("\74\x73\x70\141\156\x20\x63\154\x61\163\x73\x3d\x22\x63\x22\76\46\x6e\142\x73\160\x3b\x3c\57\x73\160\141\x6e\x3e", explode("\x90", $frameLine)); goto dY7MK; uvTqh: } goto VvSSw; KdN4k: } } public static function serial($frame) { return gzcompress(join("\12", $frame), 9); } public static function unserial($code) { return explode("\12", gzuncompress($code)); } public static function newFrame($version) { goto ZK3_j; DrTEL: if (!isset(self::$frames[$version])) { $fileName = QR_CACHE_DIR . "\x66\162\x61\155\145\x5f" . $version . "\56\x64\141\164"; if (QR_CACHEABLE) { if (file_exists($fileName)) { self::$frames[$version] = self::unserial(file_get_contents($fileName)); } else { self::$frames[$version] = self::createFrame($version); file_put_contents($fileName, self::serial(self::$frames[$version])); } } else { self::$frames[$version] = self::createFrame($version); } } goto C3qXp; s6gMt: return self::$frames[$version]; goto y_Hxg; ZK3_j: if ($version < 1 || $version > QRSPEC_VERSION_MAX) { return null; } goto DrTEL; C3qXp: if (is_null(self::$frames[$version])) { return null; } goto s6gMt; y_Hxg: } public static function rsBlockNum($spec) { return $spec[0] + $spec[3]; } public static function rsBlockNum1($spec) { return $spec[0]; } public static function rsDataCodes1($spec) { return $spec[1]; } public static function rsEccCodes1($spec) { return $spec[2]; } public static function rsBlockNum2($spec) { return $spec[3]; } public static function rsDataCodes2($spec) { return $spec[4]; } public static function rsEccCodes2($spec) { return $spec[2]; } public static function rsDataLength($spec) { return $spec[0] * $spec[1] + $spec[3] * $spec[4]; } public static function rsEccLength($spec) { return ($spec[0] + $spec[3]) * $spec[2]; } } goto WiOMH; tnUIE: class QRimage { public static function png($frame, $filename = false, $pixelPerPoint = 4, $outerFrame = 4, $saveandprint = FALSE) { goto Ft28M; SzPv0: ImageDestroy($image); goto Hh9hZ; Ft28M: $image = self::image($frame, $pixelPerPoint, $outerFrame); goto Us8xU; Us8xU: if ($filename === false) { Header("\x43\157\x6e\x74\145\156\x74\x2d\164\x79\160\145\72\40\151\155\141\147\145\x2f\160\156\x67"); ImagePng($image); } else { if ($saveandprint === TRUE) { goto STYPX; FvoWZ: header("\103\157\156\164\x65\156\164\x2d\x74\171\160\x65\x3a\x20\151\155\x61\x67\x65\57\160\156\x67"); goto A9Tk0; STYPX: ImagePng($image, $filename); goto FvoWZ; A9Tk0: ImagePng($image); goto gSUjT; gSUjT: } else { ImagePng($image, $filename); } } goto SzPv0; Hh9hZ: } public static function jpg($frame, $filename = false, $pixelPerPoint = 8, $outerFrame = 4, $q = 85) { goto e0q_z; TRLB0: if ($filename === false) { Header("\x43\157\156\x74\145\x6e\x74\x2d\164\171\x70\x65\72\x20\151\x6d\x61\147\x65\x2f\152\160\x65\147"); ImageJpeg($image, null, $q); } else { ImageJpeg($image, $filename, $q); } goto AoiG9; AoiG9: ImageDestroy($image); goto QEgJM; e0q_z: $image = self::image($frame, $pixelPerPoint, $outerFrame); goto TRLB0; QEgJM: } private static function image($frame, $pixelPerPoint = 4, $outerFrame = 4) { goto jvxC3; jvxC3: $h = count($frame); goto GBwGZ; GKkBY: $col[0] = ImageColorAllocate($base_image, 255, 255, 255); goto oEAQB; mjlQM: for ($y = 0; $y < $h; $y++) { for ($x = 0; $x < $w; $x++) { if ($frame[$y][$x] == "\61") { ImageSetPixel($base_image, $x + $outerFrame, $y + $outerFrame, $col[1]); } } } goto B3AgE; B3AgE: $target_image = ImageCreate($imgW * $pixelPerPoint, $imgH * $pixelPerPoint); goto pupTq; FGpKs: ImageDestroy($base_image); goto mm9am; pupTq: ImageCopyResized($target_image, $base_image, 0, 0, 0, 0, $imgW * $pixelPerPoint, $imgH * $pixelPerPoint, $imgW, $imgH); goto FGpKs; mm9am: return $target_image; goto EHNZT; GBwGZ: $w = strlen($frame[0]); goto j6fY6; kZlCs: imagefill($base_image, 0, 0, $col[0]); goto mjlQM; oEAQB: $col[1] = ImageColorAllocate($base_image, 0, 0, 0); goto kZlCs; j6fY6: $imgW = $w + 2 * $outerFrame; goto rcFz1; rcFz1: $imgH = $h + 2 * $outerFrame; goto ilL4P; ilL4P: $base_image = ImageCreate($imgW, $imgH); goto GKkBY; EHNZT: } } goto JADn2; EJIbf: define("\x51\122\x43\x41\x50\137\105\103", 3); goto usdgB; AtQhu: define("\x51\122\103\x41\x50\137\x57\x49\x44\x54\x48", 0); goto NXsU2; ODnal: define("\x4e\x32", 3); goto F4fuG; nQo2P: define("\121\x52\x5f\105\x43\x4c\105\126\x45\114\137\x4c", 0); goto vVDOv; ZH81D: class qrstr { public static function set(&$srctab, $x, $y, $repl, $replLen = false) { $srctab[$y] = substr_replace($srctab[$y], $replLen !== false ? substr($repl, 0, $replLen) : $repl, $x, $replLen !== false ? $replLen : strlen($repl)); } } goto yWHig; CFKWh: class QRbitstream { public $data = array(); public function size() { return count($this->data); } public function allocate($setLength) { $this->data = array_fill(0, $setLength, 0); return 0; } public static function newFromNum($bits, $num) { goto ZNEu0; f2taH: return $bstream; goto V0WAY; ZNEu0: $bstream = new QRbitstream(); goto RMwqr; Nu09z: for ($i = 0; $i < $bits; $i++) { if ($num & $mask) { $bstream->data[$i] = 1; } else { $bstream->data[$i] = 0; } $mask = $mask >> 1; } goto f2taH; UIg64: $mask = 1 << $bits - 1; goto Nu09z; RMwqr: $bstream->allocate($bits); goto UIg64; V0WAY: } public static function newFromBytes($size, $data) { goto kt06c; cmA6Z: return $bstream; goto oari2; OVlCj: $p = 0; goto LGldY; WJ0Uo: $bstream->allocate($size * 8); goto OVlCj; kt06c: $bstream = new QRbitstream(); goto WJ0Uo; LGldY: for ($i = 0; $i < $size; $i++) { $mask = 0x80; for ($j = 0; $j < 8; $j++) { if ($data[$i] & $mask) { $bstream->data[$p] = 1; } else { $bstream->data[$p] = 0; } $p++; $mask = $mask >> 1; } } goto cmA6Z; oari2: } public function append(QRbitstream $arg) { goto E0nRJ; p7sDL: if ($this->size() == 0) { $this->data = $arg->data; return 0; } goto xyy1L; eSSQ8: return 0; goto ZMFqP; xyy1L: $this->data = array_values(array_merge($this->data, $arg->data)); goto eSSQ8; f2_ca: if ($arg->size() == 0) { return 0; } goto p7sDL; E0nRJ: if (is_null($arg)) { return -1; } goto f2_ca; ZMFqP: } public function appendNum($bits, $num) { goto k7twT; sy5xi: $ret = $this->append($b); goto Aj2SG; mECMH: $b = QRbitstream::newFromNum($bits, $num); goto a1foX; a1foX: if (is_null($b)) { return -1; } goto sy5xi; k7twT: if ($bits == 0) { return 0; } goto mECMH; tHxSj: return $ret; goto Si4pW; Aj2SG: unset($b); goto tHxSj; Si4pW: } public function appendBytes($size, $data) { goto wiksv; qdlWe: unset($b); goto MRy7u; wiksv: if ($size == 0) { return 0; } goto f76ot; f76ot: $b = QRbitstream::newFromBytes($size, $data); goto j7F9p; VvpSf: $ret = $this->append($b); goto qdlWe; j7F9p: if (is_null($b)) { return -1; } goto VvpSf; MRy7u: return $ret; goto IDA7d; IDA7d: } public function toByte() { goto qDtmZ; ANd_i: return $data; goto v_1af; Y7RPe: if ($size & 7) { goto jNvgO; wKFUC: for ($j = 0; $j < ($size & 7); $j++) { $v = $v << 1; $v |= $this->data[$p]; $p++; } goto DQNi4; DQNi4: $data[$bytes] = $v; goto lOMvi; jNvgO: $v = 0; goto wKFUC; lOMvi: } goto ANd_i; qDtmZ: $size = $this->size(); goto n51Bt; BMwK1: $bytes = (int) ($size / 8); goto IRmGb; n51Bt: if ($size == 0) { return array(); } goto rbn_Q; IRmGb: $p = 0; goto CH0vb; CH0vb: for ($i = 0; $i < $bytes; $i++) { $v = 0; for ($j = 0; $j < 8; $j++) { $v = $v << 1; $v |= $this->data[$p]; $p++; } $data[$i] = $v; } goto Y7RPe; rbn_Q: $data = array_fill(0, (int) (($size + 7) / 8), 0); goto BMwK1; v_1af: } } goto Z3nZj; pvrBq: define("\x4e\61", 3); goto ODnal; Glt36: class QRinput { public $items; private $version; private $level; public function __construct($version = 0, $level = QR_ECLEVEL_L) { goto rlCWD; eBTxa: $this->level = $level; goto QD9b9; HgFZm: $this->version = $version; goto eBTxa; rlCWD: if ($version < 0 || $version > QRSPEC_VERSION_MAX || $level > QR_ECLEVEL_H) { throw new Exception("\111\156\166\141\x6c\151\144\x20\x76\x65\x72\163\151\157\x6e\40\156\x6f"); return NULL; } goto HgFZm; QD9b9: } public function getVersion() { return $this->version; } public function setVersion($version) { goto e2CQj; pPQse: return 0; goto Nqbzm; e2CQj: if ($version < 0 || $version > QRSPEC_VERSION_MAX) { throw new Exception("\x49\156\166\x61\x6c\151\x64\40\x76\x65\162\163\151\x6f\x6e\x20\x6e\157"); return -1; } goto AuItl; AuItl: $this->version = $version; goto pPQse; Nqbzm: } public function getErrorCorrectionLevel() { return $this->level; } public function setErrorCorrectionLevel($level) { goto BDUup; jwp7S: $this->level = $level; goto jkLO9; BDUup: if ($level > QR_ECLEVEL_H) { throw new Exception("\x49\156\166\141\154\x69\x64\x20\x45\103\114\105\126\105\114"); return -1; } goto jwp7S; jkLO9: return 0; goto XEwpq; XEwpq: } public function appendEntry(QRinputItem $entry) { $this->items[] = $entry; } public function append($mode, $size, $data) { try { goto tOJv7; tOJv7: $entry = new QRinputItem($mode, $size, $data); goto ZANws; Z5V1j: return 0; goto raUae; ZANws: $this->items[] = $entry; goto Z5V1j; raUae: } catch (Exception $e) { return -1; } } public function insertStructuredAppendHeader($size, $index, $parity) { goto i1L8p; i1L8p: if ($size > MAX_STRUCTURED_SYMBOLS) { throw new Exception("\x69\x6e\163\145\x72\x74\123\x74\x72\x75\143\164\165\162\x65\144\x41\x70\160\145\156\144\x48\x65\141\144\x65\x72\x20\167\x72\x6f\156\x67\40\163\x69\x7a\x65"); } goto RdbqE; boyRS: try { goto us0sd; cvoFF: array_unshift($this->items, $entry); goto gDtKV; us0sd: $entry = new QRinputItem(QR_MODE_STRUCTURE, 3, buf); goto cvoFF; gDtKV: return 0; goto sV6LP; sV6LP: } catch (Exception $e) { return -1; } goto UuRSX; DLXcC: $buf = array($size, $index, $parity); goto boyRS; RdbqE: if ($index <= 0 || $index > MAX_STRUCTURED_SYMBOLS) { throw new Exception("\151\156\163\145\x72\164\x53\x74\x72\165\143\164\165\x72\x65\144\101\x70\160\145\156\x64\110\145\141\x64\x65\162\40\167\162\157\x6e\147\40\151\156\x64\145\x78"); } goto DLXcC; UuRSX: } public function calcParity() { goto Gopaw; Gopaw: $parity = 0; goto cXXy2; MfMX9: return $parity; goto DWWOn; cXXy2: foreach ($this->items as $item) { if ($item->mode != QR_MODE_STRUCTURE) { for ($i = $item->size - 1; $i >= 0; $i--) { $parity ^= $item->data[$i]; } } } goto MfMX9; DWWOn: } public static function checkModeNum($size, $data) { for ($i = 0; $i < $size; $i++) { if (ord($data[$i]) < ord("\x30") || ord($data[$i]) > ord("\x39")) { return false; } } return true; } public static function estimateBitsModeNum($size) { goto VAx5p; op4Mk: $bits = $w * 10; goto uSPUr; uSPUr: switch ($size - $w * 3) { case 1: $bits += 4; break; case 2: $bits += 7; break; default: break; } goto D2115; D2115: return $bits; goto K98K6; VAx5p: $w = (int) $size / 3; goto op4Mk; K98K6: } public static $anTable = array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1); public static function lookAnTable($c) { return $c > 127 ? -1 : self::$anTable[$c]; } public static function checkModeAn($size, $data) { for ($i = 0; $i < $size; $i++) { if (self::lookAnTable(ord($data[$i])) == -1) { return false; } } return true; } public static function estimateBitsModeAn($size) { goto kBQeM; cm3IH: return $bits; goto Z1uRC; kBQeM: $w = (int) ($size / 2); goto N4wod; N4wod: $bits = $w * 11; goto ymRKR; ymRKR: if ($size & 1) { $bits += 6; } goto cm3IH; Z1uRC: } public static function estimateBitsMode8($size) { return $size * 8; } public function estimateBitsModeKanji($size) { return (int) ($size / 2 * 13); } public static function checkModeKanji($size, $data) { goto Z57og; TAo1P: for ($i = 0; $i < $size; $i += 2) { $val = ord($data[$i]) << 8 | ord($data[$i + 1]); if ($val < 0x8140 || $val > 0x9ffc && $val < 0xe040 || $val > 0xebbf) { return false; } } goto gmDoY; gmDoY: return true; goto QDOwz; Z57og: if ($size & 1) { return false; } goto TAo1P; QDOwz: } public static function check($mode, $size, $data) { goto PFzdU; PFzdU: if ($size <= 0) { return false; } goto ku1Vb; haG6S: return false; goto cAfqZ; ku1Vb: switch ($mode) { case QR_MODE_NUM: return self::checkModeNum($size, $data); break; case QR_MODE_AN: return self::checkModeAn($size, $data); break; case QR_MODE_KANJI: return self::checkModeKanji($size, $data); break; case QR_MODE_8: return true; break; case QR_MODE_STRUCTURE: return true; break; default: break; } goto haG6S; cAfqZ: } public function estimateBitStreamSize($version) { goto YbaLE; YbaLE: $bits = 0; goto cjvaQ; cjvaQ: foreach ($this->items as $item) { $bits += $item->estimateBitStreamSizeOfEntry($version); } goto K3C7y; K3C7y: return $bits; goto Sm7vj; Sm7vj: } public function estimateVersion() { goto QikSk; QikSk: $version = 0; goto sDSnW; rJ2FS: do { $prev = $version; $bits = $this->estimateBitStreamSize($prev); $version = QRspec::getMinimumVersion((int) (($bits + 7) / 8), $this->level); if ($version < 0) { return -1; } } while ($version > $prev); goto Ylqrf; Ylqrf: return $version; goto FxX0c; sDSnW: $prev = 0; goto rJ2FS; FxX0c: } public static function lengthOfCode($mode, $version, $bits) { goto gIrFg; edak_: if ($size < 0) { $size = 0; } goto p2CEd; pGzDc: return $size; goto BF2DD; p2CEd: if ($size > $maxsize) { $size = $maxsize; } goto pGzDc; gIrFg: $payload = $bits - 4 - QRspec::lengthIndicator($mode, $version); goto lY1wz; lY1wz: switch ($mode) { case QR_MODE_NUM: goto ZYv6_; WxjrI: $remain = $payload - $chunks * 10; goto Rfive; b1r8z: if ($remain >= 7) { $size += 2; } else { if ($remain >= 4) { $size += 1; } } goto GIfNF; Rfive: $size = $chunks * 3; goto b1r8z; ZYv6_: $chunks = (int) ($payload / 10); goto WxjrI; GIfNF: break; goto dyTQO; dyTQO: case QR_MODE_AN: goto BDgTI; g51NS: break; goto Glvf4; rG919: $remain = $payload - $chunks * 11; goto n4Rxh; BDgTI: $chunks = (int) ($payload / 11); goto rG919; vhwyM: if ($remain >= 6) { $size++; } goto g51NS; n4Rxh: $size = $chunks * 2; goto vhwyM; Glvf4: case QR_MODE_8: $size = (int) ($payload / 8); break; case QR_MODE_KANJI: $size = (int) ($payload / 13 * 2); break; case QR_MODE_STRUCTURE: $size = (int) ($payload / 8); break; default: $size = 0; break; } goto tBUA_; tBUA_: $maxsize = QRspec::maximumWords($mode, $version); goto edak_; BF2DD: } public function createBitStream() { goto q6HdM; q6HdM: $total = 0; goto ivRsW; ivRsW: foreach ($this->items as $item) { goto CB04v; d1QY8: $total += $bits; goto BjZDN; KG7aj: if ($bits < 0) { return -1; } goto d1QY8; CB04v: $bits = $item->encodeBitStream($this->version); goto KG7aj; BjZDN: } goto Vl5mB; Vl5mB: return $total; goto FaWRh; FaWRh: } public function convertData() { goto fjV9g; BmvaM: return 0; goto PL1Bn; V6JWj: if ($ver > $this->getVersion()) { $this->setVersion($ver); } goto j5nCG; fjV9g: $ver = $this->estimateVersion(); goto V6JWj; j5nCG: for (;;) { $bits = $this->createBitStream(); if ($bits < 0) { return -1; } $ver = QRspec::getMinimumVersion((int) (($bits + 7) / 8), $this->level); if ($ver < 0) { throw new Exception("\127\122\117\x4e\107\40\126\x45\x52\123\x49\x4f\116"); return -1; } else { if ($ver > $this->getVersion()) { $this->setVersion($ver); } else { break; } } } goto BmvaM; PL1Bn: } public function appendPaddingBit(&$bstream) { goto ZbB7J; KbklF: if ($maxbits - $bits < 5) { return $bstream->appendNum($maxbits - $bits, 0); } goto hJPQ8; LOwXK: if ($padlen > 0) { goto PzFra; jYp2c: if ($ret < 0) { return $ret; } goto SJ4EU; wYhbC: $ret = $padding->appendBytes($padlen, $padbuf); goto jYp2c; PzFra: $padbuf = array(); goto nO6a_; nO6a_: for ($i = 0; $i < $padlen; $i++) { $padbuf[$i] = $i & 1 ? 0x11 : 0xec; } goto wYhbC; SJ4EU: } goto Dxqo9; IrwvN: $words = (int) (($bits + 7) / 8); goto WNVrG; XDAFM: return $ret; goto xTnjy; WNVrG: $padding = new QRbitstream(); goto wvlnl; SkKBM: if ($ret < 0) { return $ret; } goto gJazA; mfd0R: $maxbits = $maxwords * 8; goto UyRs3; UyRs3: if ($maxbits == $bits) { return 0; } goto KbklF; gJazA: $padlen = $maxwords - $words; goto LOwXK; YjUSq: $maxwords = QRspec::getDataLength($this->version, $this->level); goto mfd0R; ZbB7J: $bits = $bstream->size(); goto YjUSq; hJPQ8: $bits += 4; goto IrwvN; wvlnl: $ret = $padding->appendNum($words * 8 - $bits + 4, 0); goto SkKBM; Dxqo9: $ret = $bstream->append($padding); goto XDAFM; xTnjy: } public function mergeBitStream() { goto DX3kE; DX3kE: if ($this->convertData() < 0) { return null; } goto z7Yxe; z7Yxe: $bstream = new QRbitstream(); goto w5ksz; x6sO_: return $bstream; goto DbqU1; w5ksz: foreach ($this->items as $item) { $ret = $bstream->append($item->bstream); if ($ret < 0) { return null; } } goto x6sO_; DbqU1: } public function getBitStream() { goto jY13v; ShmcO: $ret = $this->appendPaddingBit($bstream); goto NssMH; NssMH: if ($ret < 0) { return null; } goto O8Gn3; jY13v: $bstream = $this->mergeBitStream(); goto YpN7D; YpN7D: if ($bstream == null) { return null; } goto ShmcO; O8Gn3: return $bstream; goto kGxyE; kGxyE: } public function getByteStream() { goto krQ1e; krQ1e: $bstream = $this->getBitStream(); goto HV66Q; YWPsZ: return $bstream->toByte(); goto y3m1r; HV66Q: if ($bstream == null) { return null; } goto YWPsZ; y3m1r: } } goto CFKWh; ZWWjT: define("\x51\x52\x5f\x46\117\x52\115\x41\124\x5f\124\x45\x58\x54", 0); goto KsU6K; vVDOv: define("\x51\x52\x5f\x45\x43\114\105\x56\105\114\x5f\115", 1); goto rAnG9; cb7EG: class QRtools { public static function binarize($frame) { goto sSeT9; gzqef: foreach ($frame as &$frameLine) { for ($i = 0; $i < $len; $i++) { $frameLine[$i] = ord($frameLine[$i]) & 1 ? "\x31" : "\x30"; } } goto dczVc; dczVc: return $frame; goto mrNGc; sSeT9: $len = count($frame); goto gzqef; mrNGc: } public static function tcpdfBarcodeArray($code, $mode = "\121\x52\x2c\x4c", $tcPdfVersion = "\x34\x2e\65\56\60\63\67") { goto vZlmQ; y_yjh: $barcode_array["\156\x75\x6d\137\x63\157\x6c\163"] = $size; goto qQk2o; hzYgh: if (count($mode) > 1) { $eccLevel = $mode[1]; } goto jZRX3; vZlmQ: $barcode_array = array(); goto LWTsJ; eHbmu: $size = count($qrTab); goto D3vec; NBHSC: foreach ($qrTab as $line) { goto klSXr; JVzuC: $barcode_array["\142\143\157\x64\145"][] = $arrAdd; goto qfTuT; klSXr: $arrAdd = array(); goto D2r1n; D2r1n: foreach (str_split($line) as $char) { $arrAdd[] = $char == "\61" ? 1 : 0; } goto JVzuC; qfTuT: } goto sCcvQ; D3vec: $barcode_array["\x6e\165\155\x5f\x72\157\x77\x73"] = $size; goto y_yjh; sCcvQ: return $barcode_array; goto CCjvU; VhyCf: $eccLevel = "\x4c"; goto hzYgh; jZRX3: $qrTab = QRcode::text($code, false, $eccLevel); goto eHbmu; qQk2o: $barcode_array["\142\143\157\144\145"] = array(); goto NBHSC; LWTsJ: if (!is_array($mode)) { $mode = explode("\x2c", $mode); } goto VhyCf; CCjvU: } public static function clearCache() { self::$frames = array(); } public static function buildCache() { goto rVisy; BX6zM: for ($a = 1; $a <= QRSPEC_VERSION_MAX; $a++) { $frame = QRspec::newFrame($a); if (QR_IMAGE) { $fileName = QR_CACHE_DIR . "\x66\x72\x61\155\145\137" . $a . "\x2e\x70\156\147"; QRimage::png(self::binarize($frame), $fileName, 1, 0); } $width = count($frame); $bitMask = array_fill(0, $width, array_fill(0, $width, 0)); for ($maskNo = 0; $maskNo < 8; $maskNo++) { $mask->makeMaskNo($maskNo, $width, $frame, $bitMask, true); } } goto Z0psP; b5z0c: $mask = new QRmask(); goto BX6zM; rVisy: QRtools::markTime("\x62\x65\146\x6f\162\145\137\x62\x75\151\154\x64\x5f\143\x61\x63\150\145"); goto b5z0c; Z0psP: QRtools::markTime("\x61\x66\x74\x65\162\x5f\142\x75\151\154\144\137\x63\x61\x63\x68\145"); goto RgEhH; RgEhH: } public static function log($outfile, $err) { if (QR_LOG_DIR !== false) { if ($err != '') { if ($outfile !== false) { file_put_contents(QR_LOG_DIR . basename($outfile) . "\55\145\162\162\x6f\x72\163\56\164\170\164", date("\131\x2d\155\55\x64\40\x48\x3a\x69\x3a\163") . "\x3a\40" . $err, FILE_APPEND); } else { file_put_contents(QR_LOG_DIR . "\145\162\162\157\x72\163\56\x74\x78\164", date("\131\55\155\x2d\144\40\x48\72\151\72\163") . "\x3a\40" . $err, FILE_APPEND); } } } } public static function dumpMask($frame) { $width = count($frame); for ($y = 0; $y < $width; $y++) { for ($x = 0; $x < $width; $x++) { echo ord($frame[$y][$x]) . "\x2c"; } } } public static function markTime($markerId) { goto AZiQ_; PlXUe: $time = (float) $usec + (float) $sec; goto RsOxY; RsOxY: if (!isset($GLOBALS["\x71\x72\x5f\164\x69\x6d\145\x5f\x62\145\x6e\x63\x68"])) { $GLOBALS["\161\x72\137\164\x69\155\145\137\142\145\x6e\143\150"] = array(); } goto Iw1Qs; Iw1Qs: $GLOBALS["\x71\162\x5f\164\x69\x6d\x65\137\x62\145\x6e\x63\150"][$markerId] = $time; goto r3gLp; AZiQ_: list($usec, $sec) = explode("\x20", microtime()); goto PlXUe; r3gLp: } public static function timeBenchmark() { goto HAKZO; oB1cA: $lastTime = 0; goto xqOy3; nyZnH: $p = 0; goto a90Fa; a90Fa: echo "\74\x74\141\142\x6c\x65\x20\143\x65\x6c\x6c\x70\x61\144\144\x69\x6e\147\75\42\63\x22\40\x63\x65\x6c\x6c\x73\160\141\x63\x69\156\147\x3d\42\61\x22\76\xd\12\40\x20\40\x20\40\x20\x20\40\x20\40\x20\x20\40\40\40\x20\40\x20\40\40\74\164\x68\145\141\144\76\74\x74\162\40\x73\x74\171\154\145\75\x22\142\157\x72\x64\x65\162\55\142\x6f\x74\x74\157\x6d\x3a\x31\160\x78\40\163\x6f\154\151\x64\40\x73\x69\x6c\x76\x65\162\42\x3e\x3c\x74\x64\x20\143\x6f\154\163\x70\x61\x6e\75\x22\62\x22\x20\x73\164\x79\x6c\145\x3d\42\x74\145\x78\164\x2d\x61\154\x69\x67\156\x3a\143\145\x6e\164\145\162\42\x3e\102\105\x4e\103\x48\x4d\101\x52\x4b\x3c\57\x74\144\76\74\57\x74\x72\x3e\x3c\x2f\x74\x68\145\141\x64\x3e\xd\12\x20\x20\x20\40\40\x20\40\40\x20\40\40\40\x20\40\x20\40\x20\40\40\x20\x3c\x74\142\157\144\x79\x3e"; goto ndgwn; xqOy3: $startTime = 0; goto nyZnH; ajkuR: echo "\x3c\57\164\x62\x6f\144\171\x3e\x3c\164\146\x6f\x6f\x74\76\xd\12\40\x20\40\x20\x20\x20\40\40\x20\40\x20\40\x20\40\40\40\74\164\x72\40\163\164\x79\x6c\145\75\x22\142\x6f\x72\144\x65\162\x2d\164\x6f\160\72\62\160\x78\40\x73\x6f\154\x69\144\x20\142\154\141\143\x6b\42\76\74\164\150\40\x73\x74\x79\154\145\x3d\x22\164\145\170\164\55\x61\x6c\151\147\x6e\72\162\151\x67\150\x74\x22\76\124\117\x54\101\114\x3a\40\x3c\x2f\x74\150\x3e\x3c\164\144\x3e" . number_format($lastTime - $startTime, 6) . "\163\x3c\57\x74\144\x3e\x3c\57\x74\162\x3e\15\12\40\40\x20\40\40\x20\x20\40\40\40\x20\x20\74\57\x74\146\157\157\164\76\xd\12\40\x20\40\x20\40\40\40\x20\40\x20\40\x20\74\x2f\164\x61\x62\154\x65\76"; goto BQDIL; ndgwn: foreach ($GLOBALS["\161\162\137\x74\151\155\x65\x5f\x62\145\156\143\x68"] as $markerId => $thisTime) { goto yuDfh; KP1ui: $lastTime = $thisTime; goto qujNq; yuDfh: if ($p > 0) { echo "\x3c\x74\162\x3e\x3c\x74\x68\x20\163\x74\x79\x6c\145\75\42\164\x65\x78\x74\x2d\x61\154\x69\147\156\x3a\x72\x69\x67\150\164\42\x3e\164\151\154\x6c\40" . $markerId . "\72\40\x3c\57\164\150\x3e\74\x74\x64\76" . number_format($thisTime - $lastTime, 6) . "\163\74\x2f\164\x64\x3e\x3c\57\x74\x72\x3e"; } else { $startTime = $thisTime; } goto EeOgw; EeOgw: $p++; goto KP1ui; qujNq: } goto ajkuR; HAKZO: self::markTime("\x66\151\156\151\x73\150"); goto oB1cA; BQDIL: } } goto UnBZq; zRL5h: define("\121\122\137\x4c\x4f\x47\x5f\104\x49\122", false); goto wnvmY; Arp26: define("\x51\122\x5f\x4d\117\x44\x45\x5f\123\124\x52\x55\103\124\125\122\105", 4); goto nQo2P; Aa3oK: define("\121\122\x5f\115\x4f\104\105\x5f\101\116", 1); goto ULYHb; LzqtJ: define("\x4e\x34", 10); goto powDQ; iSx9n: define("\x51\x52\x5f\115\117\x44\105\137\116\x55\x4c", -1); goto cwy8b; mU2ZR: define("\121\122\137\106\111\116\104\x5f\x46\x52\117\115\137\122\101\116\x44\x4f\x4d", 2); goto TY8cm; ltYlI: class QRrawcode { public $version; public $datacode = array(); public $ecccode = array(); public $blocks; public $rsblocks = array(); public $count; public $dataLength; public $eccLength; public $b1; public function __construct(QRinput $input) { goto PTUd2; W_qxx: $this->dataLength = QRspec::rsDataLength($spec); goto erbrw; rNWkW: $this->ecccode = array_fill(0, $this->eccLength, 0); goto u9CUS; mvwQO: $this->version = $input->getVersion(); goto ameAF; VvCOR: $this->count = 0; goto sJiPE; erbrw: $this->eccLength = QRspec::rsEccLength($spec); goto rNWkW; KJP8W: if ($ret < 0) { throw new Exception("\142\154\x6f\143\153\40\x61\x6c\x6c\x6f\x63\x20\x65\x72\162\157\x72"); return null; } goto VvCOR; PTUd2: $spec = array(0, 0, 0, 0, 0); goto ZF8kY; zMnur: QRspec::getEccSpec($input->getVersion(), $input->getErrorCorrectionLevel(), $spec); goto mvwQO; u9CUS: $this->blocks = QRspec::rsBlockNum($spec); goto iw0xM; ameAF: $this->b1 = QRspec::rsBlockNum1($spec); goto W_qxx; QHV0a: if (is_null($this->datacode)) { throw new Exception("\156\165\154\154\x20\x69\x6d\160\165\x74\x20\x73\164\x72\151\x6e\147"); } goto zMnur; ZF8kY: $this->datacode = $input->getByteStream(); goto QHV0a; iw0xM: $ret = $this->init($spec); goto KJP8W; sJiPE: } public function init(array $spec) { goto xagEi; AhLFk: for ($i = 0; $i < QRspec::rsBlockNum2($spec); $i++) { $ecc = array_slice($this->ecccode, $eccPos); $this->rsblocks[$blockNo] = new QRrsblock($dl, array_slice($this->datacode, $dataPos), $el, $ecc, $rs); $this->ecccode = array_merge(array_slice($this->ecccode, 0, $eccPos), $ecc); $dataPos += $dl; $eccPos += $el; $blockNo++; } goto c3O6Z; ykOQu: if (QRspec::rsBlockNum2($spec) == 0) { return 0; } goto GrXQF; lZMHl: $el = QRspec::rsEccCodes1($spec); goto mQ7Oc; mQ7Oc: $rs = QRrs::init_rs(8, 0x11d, 0, 1, $el, 255 - $dl - $el); goto CW1DI; c3O6Z: return 0; goto H6nBd; CW1DI: $blockNo = 0; goto RSbY8; RSbY8: $dataPos = 0; goto QESZ5; CJ_Z6: if ($rs == NULL) { return -1; } goto AhLFk; QESZ5: $eccPos = 0; goto KQN2Z; QcdRX: $el = QRspec::rsEccCodes2($spec); goto l5cay; l5cay: $rs = QRrs::init_rs(8, 0x11d, 0, 1, $el, 255 - $dl - $el); goto CJ_Z6; GrXQF: $dl = QRspec::rsDataCodes2($spec); goto QcdRX; KQN2Z: for ($i = 0; $i < QRspec::rsBlockNum1($spec); $i++) { $ecc = array_slice($this->ecccode, $eccPos); $this->rsblocks[$blockNo] = new QRrsblock($dl, array_slice($this->datacode, $dataPos), $el, $ecc, $rs); $this->ecccode = array_merge(array_slice($this->ecccode, 0, $eccPos), $ecc); $dataPos += $dl; $eccPos += $el; $blockNo++; } goto ykOQu; xagEi: $dl = QRspec::rsDataCodes1($spec); goto lZMHl; H6nBd: } public function getCode() { goto yyl9x; JYvRb: if ($this->count < $this->dataLength) { goto dZgx9; dZgx9: $row = $this->count % $this->blocks; goto B8PgP; LrIVj: if ($col >= $this->rsblocks[0]->dataLength) { $row += $this->b1; } goto B8M7A; B8M7A: $ret = $this->rsblocks[$row]->data[$col]; goto BZYoB; B8PgP: $col = $this->count / $this->blocks; goto LrIVj; BZYoB: } else { if ($this->count < $this->dataLength + $this->eccLength) { goto zX1Y9; zX1Y9: $row = ($this->count - $this->dataLength) % $this->blocks; goto v_ed8; PKP61: $ret = $this->rsblocks[$row]->ecc[$col]; goto iR355; v_ed8: $col = ($this->count - $this->dataLength) / $this->blocks; goto PKP61; iR355: } else { return 0; } } goto NzuMf; e0wzl: return $ret; goto bTpqK; NzuMf: $this->count++; goto e0wzl; yyl9x: $ret; goto JYvRb; bTpqK: } } goto S0f2r; cwy8b: define("\x51\x52\137\x4d\117\104\x45\137\116\125\115", 0); goto Aa3oK; NBqXt: class QRencode { public $casesensitive = true; public $eightbit = false; public $version = 0; public $size = 3; public $margin = 4; public $structured = 0; public $level = QR_ECLEVEL_L; public $hint = QR_MODE_8; public static function factory($level = QR_ECLEVEL_L, $size = 3, $margin = 4) { goto A1gF9; jJy3F: switch ($level . '') { case "\60": case "\x31": case "\62": case "\x33": $enc->level = $level; break; case "\x6c": case "\x4c": $enc->level = QR_ECLEVEL_L; break; case "\155": case "\x4d": $enc->level = QR_ECLEVEL_M; break; case "\x71": case "\121": $enc->level = QR_ECLEVEL_Q; break; case "\150": case "\110": $enc->level = QR_ECLEVEL_H; break; } goto rCXjP; A1gF9: $enc = new QRencode(); goto tamrY; tamrY: $enc->size = $size; goto tEwSm; rCXjP: return $enc; goto kfgbx; tEwSm: $enc->margin = $margin; goto jJy3F; kfgbx: } public function encodeRAW($intext, $outfile = false) { goto d0fzp; d0fzp: $code = new QRcode(); goto qxmsW; qxmsW: if ($this->eightbit) { $code->encodeString8bit($intext, $this->version, $this->level); } else { $code->encodeString($intext, $this->version, $this->level, $this->hint, $this->casesensitive); } goto O2Uta; O2Uta: return $code->data; goto YQp5D; YQp5D: } public function encode($intext, $outfile = false) { goto pT6jl; uOwkx: if ($outfile !== false) { file_put_contents($outfile, join("\xa", QRtools::binarize($code->data))); } else { return QRtools::binarize($code->data); } goto BAyL7; pT6jl: $code = new QRcode(); goto piwzL; XOa4L: QRtools::markTime("\x61\146\x74\145\x72\137\145\x6e\143\157\144\145"); goto uOwkx; piwzL: if ($this->eightbit) { $code->encodeString8bit($intext, $this->version, $this->level); } else { $code->encodeString($intext, $this->version, $this->level, $this->hint, $this->casesensitive); } goto XOa4L; BAyL7: } public function encodePNG($intext, $outfile = false, $saveandprint = false) { try { goto yldMu; p9a35: $err = ob_get_contents(); goto pi2ZC; ghKSZ: if ($err != '') { QRtools::log($outfile, $err); } goto RInbb; yldMu: ob_start(); goto ivmIq; ivmIq: $tab = $this->encode($intext); goto p9a35; pi2ZC: ob_end_clean(); goto ghKSZ; RInbb: $maxSize = (int) (QR_PNG_MAXIMUM_SIZE / (count($tab) + 2 * $this->margin)); goto tlvBs; tlvBs: QRimage::png($tab, $outfile, min(max(1, $this->size), $maxSize), $this->margin, $saveandprint); goto Z7ZDx; Z7ZDx: } catch (Exception $e) { QRtools::log($outfile, $e->getMessage()); } } }
