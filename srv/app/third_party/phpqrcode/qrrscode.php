<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:08              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class QRrsItem { public $mm; public $nn; public $alpha_to = array(); public $index_of = array(); public $genpoly = array(); public $nroots; public $fcr; public $prim; public $iprim; public $pad; public $gfpoly; public function modnn($x) { while ($x >= $this->nn) { $x -= $this->nn; $x = ($x >> $this->mm) + ($x & $this->nn); } return $x; } public static function init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) { goto X7BZv; JQyht: $A0 =& $NN; goto zy2Xm; wS8WN: $rs->fcr = $fcr; goto HfVM8; Z563V: if ($prim <= 0 || $prim >= 1 << $symsize) { return $rs; } goto oo9Yo; mYuS_: $rs->nn = (1 << $symsize) - 1; goto iAX5f; VUGxf: for ($i = 0, $root = $fcr * $prim; $i < $nroots; $i++, $root += $prim) { $rs->genpoly[$i + 1] = 1; for ($j = $i; $j > 0; $j--) { if ($rs->genpoly[$j] != 0) { $rs->genpoly[$j] = $rs->genpoly[$j - 1] ^ $rs->alpha_to[$rs->modnn($rs->index_of[$rs->genpoly[$j]] + $root)]; } else { $rs->genpoly[$j] = $rs->genpoly[$j - 1]; } } $rs->genpoly[0] = $rs->alpha_to[$rs->modnn($rs->index_of[$rs->genpoly[0]] + $root)]; } goto HpKGN; Z9ogz: $rs = new QRrsItem(); goto cU0qf; oo9Yo: if ($nroots < 0 || $nroots >= 1 << $symsize) { return $rs; } goto XQ4Pg; KHifR: $rs->nroots = $nroots; goto NXI3A; r_6WR: $rs->genpoly[0] = 1; goto VUGxf; cU0qf: $rs->mm = $symsize; goto mYuS_; PT8C2: for ($i = 0; $i < $rs->nn; $i++) { $rs->index_of[$sr] = $i; $rs->alpha_to[$i] = $sr; $sr <<= 1; if ($sr & 1 << $symsize) { $sr ^= $gfpoly; } $sr &= $rs->nn; } goto LwB4Z; PDP1c: $rs->alpha_to = array_fill(0, $rs->nn + 1, 0); goto y5BKy; ru1Yk: $rs->iprim = (int) ($iprim / $prim); goto r_6WR; y5BKy: $rs->index_of = array_fill(0, $rs->nn + 1, 0); goto ftLy6; RUwDK: $rs->genpoly = array_fill(0, $nroots + 1, 0); goto wS8WN; alhoG: if ($fcr < 0 || $fcr >= 1 << $symsize) { return $rs; } goto Z563V; XB1en: if ($symsize < 0 || $symsize > 8) { return $rs; } goto alhoG; P02KT: $sr = 1; goto PT8C2; X7BZv: $rs = null; goto XB1en; zy2Xm: $rs->index_of[0] = $A0; goto uhbq5; NXI3A: $rs->gfpoly = $gfpoly; goto hxcdL; hxcdL: for ($iprim = 1; $iprim % $prim != 0; $iprim += $rs->nn) { } goto ru1Yk; HpKGN: for ($i = 0; $i <= $nroots; $i++) { $rs->genpoly[$i] = $rs->index_of[$rs->genpoly[$i]]; } goto WzUqe; LwB4Z: if ($sr != 1) { $rs = NULL; return $rs; } goto RUwDK; ftLy6: $NN =& $rs->nn; goto JQyht; HfVM8: $rs->prim = $prim; goto KHifR; XQ4Pg: if ($pad < 0 || $pad >= (1 << $symsize) - 1 - $nroots) { return $rs; } goto Z9ogz; WzUqe: return $rs; goto Pby0C; uhbq5: $rs->alpha_to[$A0] = 0; goto P02KT; iAX5f: $rs->pad = $pad; goto PDP1c; Pby0C: } public function encode_rs_char($data, &$parity) { goto chDWx; Xq2vQ: $PRIM =& $this->prim; goto o4y4k; v0mr6: $PAD =& $this->pad; goto GWhpg; FaGwe: $NN =& $this->nn; goto E8Ihn; tuuhy: $FCR =& $this->fcr; goto Xq2vQ; k8C8q: $NROOTS =& $this->nroots; goto tuuhy; chDWx: $MM =& $this->mm; goto FaGwe; E8Ihn: $ALPHA_TO =& $this->alpha_to; goto XR1JV; o4y4k: $IPRIM =& $this->iprim; goto v0mr6; KxW7J: $GENPOLY =& $this->genpoly; goto k8C8q; GWhpg: $A0 =& $NN; goto dOy3b; dOy3b: $parity = array_fill(0, $NROOTS, 0); goto N16Gk; N16Gk: for ($i = 0; $i < $NN - $NROOTS - $PAD; $i++) { $feedback = $INDEX_OF[$data[$i] ^ $parity[0]]; if ($feedback != $A0) { $feedback = $this->modnn($NN - $GENPOLY[$NROOTS] + $feedback); for ($j = 1; $j < $NROOTS; $j++) { $parity[$j] ^= $ALPHA_TO[$this->modnn($feedback + $GENPOLY[$NROOTS - $j])]; } } array_shift($parity); if ($feedback != $A0) { array_push($parity, $ALPHA_TO[$this->modnn($feedback + $GENPOLY[0])]); } else { array_push($parity, 0); } } goto o1EOM; XR1JV: $INDEX_OF =& $this->index_of; goto KxW7J; o1EOM: } } class QRrs { public static $items = array(); public static function init_rs($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) { goto Rpslo; Rpslo: foreach (self::$items as $rs) { goto TSw1u; y4obh: if ($rs->nroots != $nroots) { continue; } goto qnUNM; jArxT: return $rs; goto XmRZX; TSw1u: if ($rs->pad != $pad) { continue; } goto y4obh; U3OQF: if ($rs->fcr != $fcr) { continue; } goto tQj54; tQj54: if ($rs->prim != $prim) { continue; } goto jArxT; a2GsH: if ($rs->gfpoly != $gfpoly) { continue; } goto U3OQF; qnUNM: if ($rs->mm != $symsize) { continue; } goto a2GsH; XmRZX: } goto bf135; bf135: $rs = QRrsItem::init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad); goto kHKrB; EMyRX: return $rs; goto UlLKh; kHKrB: array_unshift(self::$items, $rs); goto EMyRX; UlLKh: } }
