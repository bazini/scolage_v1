<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:09              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto lnfgm; iYijG: class QRinputItem { public $mode; public $size; public $data; public $bstream; public function __construct($mode, $size, $data, $bstream = null) { goto rvt4W; wSRKz: $this->data = $setData; goto Gy9GC; Gy9GC: $this->bstream = $bstream; goto i0HEb; HY8Da: $this->size = $size; goto wSRKz; P4y2x: if (count($setData) < $size) { $setData = array_merge($setData, array_fill(0, $size - count($setData), 0)); } goto Pwc35; Pwc35: if (!QRinput::check($mode, $size, $setData)) { throw new Exception("\x45\x72\162\157\162\40\155\72" . $mode . "\x2c\x73\72" . $size . "\x2c\x64\72" . join("\54", $setData)); return null; } goto ilJ46; rvt4W: $setData = array_slice($data, 0, $size); goto P4y2x; ilJ46: $this->mode = $mode; goto HY8Da; i0HEb: } public function encodeModeNum($version) { try { goto lZxig; iqnwj: for ($i = 0; $i < $words; $i++) { $val = (ord($this->data[$i * 3]) - ord("\60")) * 100; $val += (ord($this->data[$i * 3 + 1]) - ord("\60")) * 10; $val += ord($this->data[$i * 3 + 2]) - ord("\60"); $bs->appendNum(10, $val); } goto v5Mxj; lZxig: $words = (int) ($this->size / 3); goto u1cG6; XSw6F: return 0; goto eHURd; JiW5v: $bs->appendNum(4, $val); goto pc8CE; u1cG6: $bs = new QRbitstream(); goto w78kc; v5Mxj: if ($this->size - $words * 3 == 1) { $val = ord($this->data[$words * 3]) - ord("\x30"); $bs->appendNum(4, $val); } else { if ($this->size - $words * 3 == 2) { goto T41QJ; T41QJ: $val = (ord($this->data[$words * 3]) - ord("\x30")) * 10; goto CKJku; GgcIN: $bs->appendNum(7, $val); goto ZB42T; CKJku: $val += ord($this->data[$words * 3 + 1]) - ord("\60"); goto GgcIN; ZB42T: } } goto cqSsZ; w78kc: $val = 0x1; goto JiW5v; cqSsZ: $this->bstream = $bs; goto XSw6F; pc8CE: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_NUM, $version), $this->size); goto iqnwj; eHURd: } catch (Exception $e) { return -1; } } public function encodeModeAn($version) { try { goto nAWHY; WqYMd: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_AN, $version), $this->size); goto k8NRh; ik0aw: $bs->appendNum(4, 0x2); goto WqYMd; ldK7j: $bs = new QRbitstream(); goto ik0aw; nAWHY: $words = (int) ($this->size / 2); goto ldK7j; fX2kt: $this->bstream = $bs; goto ScRsG; Gucgc: if ($this->size & 1) { $val = QRinput::lookAnTable(ord($this->data[$words * 2])); $bs->appendNum(6, $val); } goto fX2kt; k8NRh: for ($i = 0; $i < $words; $i++) { $val = (int) QRinput::lookAnTable(ord($this->data[$i * 2])) * 45; $val += (int) QRinput::lookAnTable(ord($this->data[$i * 2 + 1])); $bs->appendNum(11, $val); } goto Gucgc; ScRsG: return 0; goto cFpTR; cFpTR: } catch (Exception $e) { return -1; } } public function encodeMode8($version) { try { goto e_d1v; Sid8J: for ($i = 0; $i < $this->size; $i++) { $bs->appendNum(8, ord($this->data[$i])); } goto eKap9; upnYA: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_8, $version), $this->size); goto Sid8J; m6GwC: $bs->appendNum(4, 0x4); goto upnYA; eKap9: $this->bstream = $bs; goto QFuCv; e_d1v: $bs = new QRbitstream(); goto m6GwC; QFuCv: return 0; goto CQnn6; CQnn6: } catch (Exception $e) { return -1; } } public function encodeModeKanji($version) { try { goto prZRa; rGkMU: $bs->appendNum(4, 0x8); goto lLHLc; EWegf: for ($i = 0; $i < $this->size; $i += 2) { $val = ord($this->data[$i]) << 8 | ord($this->data[$i + 1]); if ($val <= 0x9ffc) { $val -= 0x8140; } else { $val -= 0xc140; } $h = ($val >> 8) * 0xc0; $val = ($val & 0xff) + $h; $bs->appendNum(13, $val); } goto M5G9Z; lLHLc: $bs->appendNum(QRspec::lengthIndicator(QR_MODE_KANJI, $version), (int) ($this->size / 2)); goto EWegf; prZRa: $bs = new QRbitrtream(); goto rGkMU; qk4EK: return 0; goto e74Lh; M5G9Z: $this->bstream = $bs; goto qk4EK; e74Lh: } catch (Exception $e) { return -1; } } public function encodeModeStructure() { try { goto SoNu4; eu0Af: $this->bstream = $bs; goto cwnTJ; KjUPY: $bs->appendNum(4, 0x3); goto XvUJD; SoNu4: $bs = new QRbitstream(); goto KjUPY; XvUJD: $bs->appendNum(4, ord($this->data[1]) - 1); goto CZYbi; cwnTJ: return 0; goto gKHiF; CZYbi: $bs->appendNum(4, ord($this->data[0]) - 1); goto zY0Bd; zY0Bd: $bs->appendNum(8, ord($this->data[2])); goto eu0Af; gKHiF: } catch (Exception $e) { return -1; } } public function estimateBitStreamSizeOfEntry($version) { goto jEXsJ; jEXsJ: $bits = 0; goto I4bX4; I4bX4: if ($version == 0) { $version = 1; } goto anmUx; sMt1E: $bits += $num * (4 + $l); goto bhKPI; gp_Bx: $num = (int) (($this->size + $m - 1) / $m); goto sMt1E; anmUx: switch ($this->mode) { case QR_MODE_NUM: $bits = QRinput::estimateBitsModeNum($this->size); break; case QR_MODE_AN: $bits = QRinput::estimateBitsModeAn($this->size); break; case QR_MODE_8: $bits = QRinput::estimateBitsMode8($this->size); break; case QR_MODE_KANJI: $bits = QRinput::estimateBitsModeKanji($this->size); break; case QR_MODE_STRUCTURE: return STRUCTURE_HEADER_BITS; default: return 0; } goto pGcPp; Qy9ZU: $m = 1 << $l; goto gp_Bx; bhKPI: return $bits; goto NEZ7_; pGcPp: $l = QRspec::lengthIndicator($this->mode, $version); goto Qy9ZU; NEZ7_: } public function encodeBitStream($version) { try { goto nmbzI; nfNi3: return $this->bstream->size(); goto CAKMX; dgV9j: if ($this->size > $words) { goto Ic2eH; U71Y8: unset($st2); goto U1jqx; hox2m: $st2 = new QRinputItem($this->mode, $this->size - $words, array_slice($this->data, $words)); goto R3jDk; bUC3h: $st2->encodeBitStream($version); goto I1Cxw; R3jDk: $st1->encodeBitStream($version); goto bUC3h; Zwq8M: unset($st1); goto U71Y8; suvXo: $this->bstream->append($st1->bstream); goto zGPte; zGPte: $this->bstream->append($st2->bstream); goto Zwq8M; I1Cxw: $this->bstream = new QRbitstream(); goto suvXo; Ic2eH: $st1 = new QRinputItem($this->mode, $words, $this->data); goto hox2m; U1jqx: } else { goto oGZRs; oGZRs: $ret = 0; goto YqzLy; YqzLy: switch ($this->mode) { case QR_MODE_NUM: $ret = $this->encodeModeNum($version); break; case QR_MODE_AN: $ret = $this->encodeModeAn($version); break; case QR_MODE_8: $ret = $this->encodeMode8($version); break; case QR_MODE_KANJI: $ret = $this->encodeModeKanji($version); break; case QR_MODE_STRUCTURE: $ret = $this->encodeModeStructure(); break; default: break; } goto mXhC1; mXhC1: if ($ret < 0) { return -1; } goto AcPbg; AcPbg: } goto nfNi3; nmbzI: unset($this->bstream); goto vpK8K; vpK8K: $words = QRspec::maximumWords($this->mode, $version); goto dgV9j; CAKMX: } catch (Exception $e) { return -1; } } } goto Qj7V1; lnfgm: define("\123\124\x52\x55\103\124\125\x52\105\x5f\x48\x45\101\104\x45\x52\137\102\x49\x54\123", 20); goto a32zT; a32zT: define("\115\101\x58\x5f\x53\x54\x52\x55\x43\x54\125\122\x45\x44\137\123\x59\115\x42\117\114\123", 16); goto iYijG; Qj7V1: class QRinput { public $items; private $version; private $level; public function __construct($version = 0, $level = QR_ECLEVEL_L) { goto i4j_I; fbOpV: $this->version = $version; goto NsJ1c; i4j_I: if ($version < 0 || $version > QRSPEC_VERSION_MAX || $level > QR_ECLEVEL_H) { throw new Exception("\111\156\166\x61\154\151\144\x20\166\145\162\163\151\157\156\x20\156\157"); return NULL; } goto fbOpV; NsJ1c: $this->level = $level; goto K7B_C; K7B_C: } public function getVersion() { return $this->version; } public function setVersion($version) { goto yyH52; VyPGT: $this->version = $version; goto Mtw41; yyH52: if ($version < 0 || $version > QRSPEC_VERSION_MAX) { throw new Exception("\x49\x6e\166\x61\154\151\144\40\x76\x65\162\163\151\x6f\156\40\x6e\157"); return -1; } goto VyPGT; Mtw41: return 0; goto IxYZo; IxYZo: } public function getErrorCorrectionLevel() { return $this->level; } public function setErrorCorrectionLevel($level) { goto Axs3i; Axs3i: if ($level > QR_ECLEVEL_H) { throw new Exception("\x49\156\166\141\x6c\x69\x64\x20\105\x43\x4c\x45\126\x45\114"); return -1; } goto Ifv2Z; Ifv2Z: $this->level = $level; goto glSIm; glSIm: return 0; goto ZQPz6; ZQPz6: } public function appendEntry(QRinputItem $entry) { $this->items[] = $entry; } public function append($mode, $size, $data) { try { goto M7096; BSTRZ: $this->items[] = $entry; goto efJcX; M7096: $entry = new QRinputItem($mode, $size, $data); goto BSTRZ; efJcX: return 0; goto uGTJn; uGTJn: } catch (Exception $e) { return -1; } } public function insertStructuredAppendHeader($size, $index, $parity) { goto FA0Ne; FA0Ne: if ($size > MAX_STRUCTURED_SYMBOLS) { throw new Exception("\151\156\x73\x65\162\164\123\x74\x72\165\143\164\x75\x72\x65\x64\x41\160\160\145\x6e\x64\x48\x65\x61\x64\145\162\x20\167\x72\x6f\x6e\x67\40\x73\x69\x7a\x65"); } goto OnJyn; OnJyn: if ($index <= 0 || $index > MAX_STRUCTURED_SYMBOLS) { throw new Exception("\x69\156\163\145\x72\x74\x53\164\x72\x75\143\164\165\x72\145\144\x41\160\160\x65\156\144\x48\x65\x61\x64\145\162\x20\167\162\157\156\x67\40\151\156\144\145\x78"); } goto AmANF; Uq7sD: try { goto iEy2f; Gqyxv: array_unshift($this->items, $entry); goto c3Oc9; c3Oc9: return 0; goto smwsZ; iEy2f: $entry = new QRinputItem(QR_MODE_STRUCTURE, 3, buf); goto Gqyxv; smwsZ: } catch (Exception $e) { return -1; } goto U9Orh; AmANF: $buf = array($size, $index, $parity); goto Uq7sD; U9Orh: } public function calcParity() { goto AOJiy; DPk5o: foreach ($this->items as $item) { if ($item->mode != QR_MODE_STRUCTURE) { for ($i = $item->size - 1; $i >= 0; $i--) { $parity ^= $item->data[$i]; } } } goto ol8z4; AOJiy: $parity = 0; goto DPk5o; ol8z4: return $parity; goto o2ZTz; o2ZTz: } public static function checkModeNum($size, $data) { for ($i = 0; $i < $size; $i++) { if (ord($data[$i]) < ord("\x30") || ord($data[$i]) > ord("\71")) { return false; } } return true; } public static function estimateBitsModeNum($size) { goto wX4BJ; VA2tP: switch ($size - $w * 3) { case 1: $bits += 4; break; case 2: $bits += 7; break; default: break; } goto Wo3T5; wX4BJ: $w = (int) $size / 3; goto wxtRn; Wo3T5: return $bits; goto rEuEv; wxtRn: $bits = $w * 10; goto VA2tP; rEuEv: } public static $anTable = array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1); public static function lookAnTable($c) { return $c > 127 ? -1 : self::$anTable[$c]; } public static function checkModeAn($size, $data) { for ($i = 0; $i < $size; $i++) { if (self::lookAnTable(ord($data[$i])) == -1) { return false; } } return true; } public static function estimateBitsModeAn($size) { goto X_Bxo; zWUO6: return $bits; goto nbvFa; D_zU1: if ($size & 1) { $bits += 6; } goto zWUO6; Ts6Tb: $bits = $w * 11; goto D_zU1; X_Bxo: $w = (int) ($size / 2); goto Ts6Tb; nbvFa: } public static function estimateBitsMode8($size) { return $size * 8; } public function estimateBitsModeKanji($size) { return (int) ($size / 2 * 13); } public static function checkModeKanji($size, $data) { goto oJDv1; oJDv1: if ($size & 1) { return false; } goto jGpaU; jGpaU: for ($i = 0; $i < $size; $i += 2) { $val = ord($data[$i]) << 8 | ord($data[$i + 1]); if ($val < 0x8140 || $val > 0x9ffc && $val < 0xe040 || $val > 0xebbf) { return false; } } goto Btkaw; Btkaw: return true; goto wMDVp; wMDVp: } public static function check($mode, $size, $data) { goto WO4rr; bDvFh: switch ($mode) { case QR_MODE_NUM: return self::checkModeNum($size, $data); break; case QR_MODE_AN: return self::checkModeAn($size, $data); break; case QR_MODE_KANJI: return self::checkModeKanji($size, $data); break; case QR_MODE_8: return true; break; case QR_MODE_STRUCTURE: return true; break; default: break; } goto VAWks; VAWks: return false; goto DaF1b; WO4rr: if ($size <= 0) { return false; } goto bDvFh; DaF1b: } public function estimateBitStreamSize($version) { goto Q6dA7; bVwfO: foreach ($this->items as $item) { $bits += $item->estimateBitStreamSizeOfEntry($version); } goto pOwNZ; pOwNZ: return $bits; goto qIuDD; Q6dA7: $bits = 0; goto bVwfO; qIuDD: } public function estimateVersion() { goto slldM; slldM: $version = 0; goto OWPt9; OWPt9: $prev = 0; goto cB1O5; cB1O5: do { $prev = $version; $bits = $this->estimateBitStreamSize($prev); $version = QRspec::getMinimumVersion((int) (($bits + 7) / 8), $this->level); if ($version < 0) { return -1; } } while ($version > $prev); goto ykG4O; ykG4O: return $version; goto n1lRh; n1lRh: } public static function lengthOfCode($mode, $version, $bits) { goto V88Ji; Pk5Gz: switch ($mode) { case QR_MODE_NUM: goto Vjr9S; UCta2: $size = $chunks * 3; goto duGkm; duGkm: if ($remain >= 7) { $size += 2; } else { if ($remain >= 4) { $size += 1; } } goto g20nS; dG6aP: $remain = $payload - $chunks * 10; goto UCta2; g20nS: break; goto iutS_; Vjr9S: $chunks = (int) ($payload / 10); goto dG6aP; iutS_: case QR_MODE_AN: goto mIBaq; pArLW: $remain = $payload - $chunks * 11; goto v8Foj; v8Foj: $size = $chunks * 2; goto dFddD; dFddD: if ($remain >= 6) { $size++; } goto pl8EN; mIBaq: $chunks = (int) ($payload / 11); goto pArLW; pl8EN: break; goto uBCl7; uBCl7: case QR_MODE_8: $size = (int) ($payload / 8); break; case QR_MODE_KANJI: $size = (int) ($payload / 13 * 2); break; case QR_MODE_STRUCTURE: $size = (int) ($payload / 8); break; default: $size = 0; break; } goto ti4Mw; dZesA: if ($size > $maxsize) { $size = $maxsize; } goto pb4nJ; pb4nJ: return $size; goto jt16_; V88Ji: $payload = $bits - 4 - QRspec::lengthIndicator($mode, $version); goto Pk5Gz; ti4Mw: $maxsize = QRspec::maximumWords($mode, $version); goto TsUwd; TsUwd: if ($size < 0) { $size = 0; } goto dZesA; jt16_: } public function createBitStream() { goto BnR8l; BnR8l: $total = 0; goto OpcSz; OpcSz: foreach ($this->items as $item) { goto emTIQ; kGvLZ: $total += $bits; goto qKxc9; emTIQ: $bits = $item->encodeBitStream($this->version); goto lZOsg; lZOsg: if ($bits < 0) { return -1; } goto kGvLZ; qKxc9: } goto nXFvp; nXFvp: return $total; goto YH0YO; YH0YO: } public function convertData() { goto E1nhb; E1nhb: $ver = $this->estimateVersion(); goto kRGlS; ZkysL: return 0; goto yX9fW; kRGlS: if ($ver > $this->getVersion()) { $this->setVersion($ver); } goto LpnLP; LpnLP: for (;;) { $bits = $this->createBitStream(); if ($bits < 0) { return -1; } $ver = QRspec::getMinimumVersion((int) (($bits + 7) / 8), $this->level); if ($ver < 0) { throw new Exception("\x57\x52\x4f\116\107\x20\x56\x45\x52\123\x49\117\116"); return -1; } else { if ($ver > $this->getVersion()) { $this->setVersion($ver); } else { break; } } } goto ZkysL; yX9fW: } public function appendPaddingBit(&$bstream) { goto yd_42; Pj1kv: if ($maxbits == $bits) { return 0; } goto OppK1; GihQN: if ($padlen > 0) { goto KhVaW; mX1KF: $ret = $padding->appendBytes($padlen, $padbuf); goto hX9io; MyGh4: for ($i = 0; $i < $padlen; $i++) { $padbuf[$i] = $i & 1 ? 0x11 : 0xec; } goto mX1KF; hX9io: if ($ret < 0) { return $ret; } goto qbAQZ; KhVaW: $padbuf = array(); goto MyGh4; qbAQZ: } goto hOGaf; OppK1: if ($maxbits - $bits < 5) { return $bstream->appendNum($maxbits - $bits, 0); } goto w8U3R; mgFoS: $maxbits = $maxwords * 8; goto Pj1kv; QXvn3: $padding = new QRbitstream(); goto WEJyG; hOGaf: $ret = $bstream->append($padding); goto LOwk5; w8U3R: $bits += 4; goto E_voy; yd_42: $bits = $bstream->size(); goto FhodY; FhodY: $maxwords = QRspec::getDataLength($this->version, $this->level); goto mgFoS; E_voy: $words = (int) (($bits + 7) / 8); goto QXvn3; fTn3A: if ($ret < 0) { return $ret; } goto q20G3; LOwk5: return $ret; goto pbPJn; q20G3: $padlen = $maxwords - $words; goto GihQN; WEJyG: $ret = $padding->appendNum($words * 8 - $bits + 4, 0); goto fTn3A; pbPJn: } public function mergeBitStream() { goto teRBw; teRBw: if ($this->convertData() < 0) { return null; } goto q_MRB; q_MRB: $bstream = new QRbitstream(); goto l9DXp; l9DXp: foreach ($this->items as $item) { $ret = $bstream->append($item->bstream); if ($ret < 0) { return null; } } goto khXLd; khXLd: return $bstream; goto Onw_p; Onw_p: } public function getBitStream() { goto VhaMI; VhaMI: $bstream = $this->mergeBitStream(); goto IFW2m; blSMs: $ret = $this->appendPaddingBit($bstream); goto Da1Cl; IFW2m: if ($bstream == null) { return null; } goto blSMs; Uhmiy: return $bstream; goto SK__8; Da1Cl: if ($ret < 0) { return null; } goto Uhmiy; SK__8: } public function getByteStream() { goto xrfQT; Ys55H: if ($bstream == null) { return null; } goto Ff08o; Ff08o: return $bstream->toByte(); goto R_TEH; xrfQT: $bstream = $this->getBitStream(); goto Ys55H; R_TEH: } }
