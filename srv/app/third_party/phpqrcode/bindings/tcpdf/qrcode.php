<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:09              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 if (!defined("\x51\x52\103\117\104\105\104\x45\106\123")) { goto YxAwY; BaCu3: define("\121\x52\x5f\115\117\104\105\137\x4e\x4d", 0); goto Sraxl; Rnq5S: define("\x51\122\x43\101\x50\x5f\127\111\x44\124\x48", 0); goto RoOlB; avter: define("\121\122\137\105\x43\x4c\105\126\105\114\x5f\115", 1); goto YC3pk; eBgKo: define("\x51\x52\x5f\105\103\x4c\105\126\x45\114\137\114", 0); goto avter; Hhq7A: define("\116\x32", 3); goto ejV5E; lvXjj: define("\121\122\137\115\117\x44\x45\137\70\102", 2); goto qw_iB; a7X4x: define("\x51\x52\x43\101\120\137\122\x45\x4d\x49\x4e\104\105\x52", 2); goto KkVgz; mlnyp: define("\121\x52\x5f\106\x49\x4e\x44\137\102\105\123\x54\x5f\x4d\101\x53\113", true); goto AbW5j; Sraxl: define("\121\x52\x5f\115\117\x44\105\137\101\x4e", 1); goto lvXjj; c54uJ: define("\116\x34", 10); goto mlnyp; WeZXy: define("\x51\122\137\x44\105\x46\101\x55\114\x54\x5f\115\x41\x53\113", 2); goto TZjHA; OZSV0: define("\121\122\x53\120\x45\103\137\126\x45\122\123\111\x4f\116\137\x4d\x41\x58", 40); goto Sk6dY; fnu83: define("\x51\122\137\x4d\x4f\104\x45\x5f\116\x4c", -1); goto BaCu3; zGfVS: define("\x53\x54\x52\125\x43\x54\x55\x52\x45\137\x48\105\x41\104\x45\x52\137\102\x49\x54\123", 20); goto DBatz; Sk6dY: define("\121\x52\123\120\105\103\x5f\127\111\104\124\x48\x5f\115\101\130", 177); goto Rnq5S; RoOlB: define("\x51\x52\x43\x41\120\x5f\x57\x4f\x52\104\123", 1); goto a7X4x; DBatz: define("\115\x41\130\137\123\x54\x52\125\103\124\x55\x52\105\x44\x5f\123\131\x4d\102\117\114\123", 16); goto P8mv2; P8mv2: define("\116\x31", 3); goto Hhq7A; oGys6: define("\x51\x52\x5f\115\117\x44\105\137\x53\124", 4); goto eBgKo; qw_iB: define("\x51\x52\137\115\117\104\105\137\113\112", 3); goto oGys6; AbW5j: define("\x51\122\x5f\106\111\116\104\x5f\x46\x52\117\x4d\137\x52\101\116\x44\117\115", 2); goto WeZXy; KkVgz: define("\x51\x52\x43\x41\x50\x5f\x45\x43", 3); goto zGfVS; YC3pk: define("\x51\x52\137\105\x43\114\105\x56\105\114\137\x51", 2); goto BnfAI; ejV5E: define("\x4e\63", 40); goto c54uJ; BnfAI: define("\x51\122\137\105\103\x4c\105\x56\105\x4c\x5f\110", 3); goto OZSV0; YxAwY: define("\121\x52\x43\x4f\104\x45\x44\x45\106\123", true); goto fnu83; TZjHA: } if (!class_exists("\121\122\143\157\x64\145", false)) { if (!function_exists("\x73\164\162\137\x73\160\x6c\x69\164")) { function str_split($string, $split_length = 1) { if (strlen($string) > $split_length or !$split_length) { do { $c = strlen($string); $parts[] = substr($string, 0, $split_length); $string = substr($string, $split_length); } while ($string !== false); } else { $parts = array($string); } return $parts; } } class QRcode { protected $barcode_array = array(); protected $version = 0; protected $level = QR_ECLEVEL_L; protected $hint = QR_MODE_8B; protected $casesensitive = true; protected $structured = 0; protected $data; protected $width; protected $frame; protected $x; protected $y; protected $dir; protected $bit; protected $datacode = array(); protected $ecccode = array(); protected $blocks; protected $rsblocks = array(); protected $count; protected $dataLength; protected $eccLength; protected $b1; protected $runLength = array(); protected $dataStr = ''; protected $items; protected $rsitems = array(); protected $frames = array(); protected $anTable = array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1); protected $capacity = array(array(0, 0, 0, array(0, 0, 0, 0)), array(21, 26, 0, array(7, 10, 13, 17)), array(25, 44, 7, array(10, 16, 22, 28)), array(29, 70, 7, array(15, 26, 36, 44)), array(33, 100, 7, array(20, 36, 52, 64)), array(37, 134, 7, array(26, 48, 72, 88)), array(41, 172, 7, array(36, 64, 96, 112)), array(45, 196, 0, array(40, 72, 108, 130)), array(49, 242, 0, array(48, 88, 132, 156)), array(53, 292, 0, array(60, 110, 160, 192)), array(57, 346, 0, array(72, 130, 192, 224)), array(61, 404, 0, array(80, 150, 224, 264)), array(65, 466, 0, array(96, 176, 260, 308)), array(69, 532, 0, array(104, 198, 288, 352)), array(73, 581, 3, array(120, 216, 320, 384)), array(77, 655, 3, array(132, 240, 360, 432)), array(81, 733, 3, array(144, 280, 408, 480)), array(85, 815, 3, array(168, 308, 448, 532)), array(89, 901, 3, array(180, 338, 504, 588)), array(93, 991, 3, array(196, 364, 546, 650)), array(97, 1085, 3, array(224, 416, 600, 700)), array(101, 1156, 4, array(224, 442, 644, 750)), array(105, 1258, 4, array(252, 476, 690, 816)), array(109, 1364, 4, array(270, 504, 750, 900)), array(113, 1474, 4, array(300, 560, 810, 960)), array(117, 1588, 4, array(312, 588, 870, 1050)), array(121, 1706, 4, array(336, 644, 952, 1110)), array(125, 1828, 4, array(360, 700, 1020, 1200)), array(129, 1921, 3, array(390, 728, 1050, 1260)), array(133, 2051, 3, array(420, 784, 1140, 1350)), array(137, 2185, 3, array(450, 812, 1200, 1440)), array(141, 2323, 3, array(480, 868, 1290, 1530)), array(145, 2465, 3, array(510, 924, 1350, 1620)), array(149, 2611, 3, array(540, 980, 1440, 1710)), array(153, 2761, 3, array(570, 1036, 1530, 1800)), array(157, 2876, 0, array(570, 1064, 1590, 1890)), array(161, 3034, 0, array(600, 1120, 1680, 1980)), array(165, 3196, 0, array(630, 1204, 1770, 2100)), array(169, 3362, 0, array(660, 1260, 1860, 2220)), array(173, 3532, 0, array(720, 1316, 1950, 2310)), array(177, 3706, 0, array(750, 1372, 2040, 2430))); protected $lengthTableBits = array(array(10, 12, 14), array(9, 11, 13), array(8, 16, 16), array(8, 10, 12)); protected $eccTable = array(array(array(0, 0), array(0, 0), array(0, 0), array(0, 0)), array(array(1, 0), array(1, 0), array(1, 0), array(1, 0)), array(array(1, 0), array(1, 0), array(1, 0), array(1, 0)), array(array(1, 0), array(1, 0), array(2, 0), array(2, 0)), array(array(1, 0), array(2, 0), array(2, 0), array(4, 0)), array(array(1, 0), array(2, 0), array(2, 2), array(2, 2)), array(array(2, 0), array(4, 0), array(4, 0), array(4, 0)), array(array(2, 0), array(4, 0), array(2, 4), array(4, 1)), array(array(2, 0), array(2, 2), array(4, 2), array(4, 2)), array(array(2, 0), array(3, 2), array(4, 4), array(4, 4)), array(array(2, 2), array(4, 1), array(6, 2), array(6, 2)), array(array(4, 0), array(1, 4), array(4, 4), array(3, 8)), array(array(2, 2), array(6, 2), array(4, 6), array(7, 4)), array(array(4, 0), array(8, 1), array(8, 4), array(12, 4)), array(array(3, 1), array(4, 5), array(11, 5), array(11, 5)), array(array(5, 1), array(5, 5), array(5, 7), array(11, 7)), array(array(5, 1), array(7, 3), array(15, 2), array(3, 13)), array(array(1, 5), array(10, 1), array(1, 15), array(2, 17)), array(array(5, 1), array(9, 4), array(17, 1), array(2, 19)), array(array(3, 4), array(3, 11), array(17, 4), array(9, 16)), array(array(3, 5), array(3, 13), array(15, 5), array(15, 10)), array(array(4, 4), array(17, 0), array(17, 6), array(19, 6)), array(array(2, 7), array(17, 0), array(7, 16), array(34, 0)), array(array(4, 5), array(4, 14), array(11, 14), array(16, 14)), array(array(6, 4), array(6, 14), array(11, 16), array(30, 2)), array(array(8, 4), array(8, 13), array(7, 22), array(22, 13)), array(array(10, 2), array(19, 4), array(28, 6), array(33, 4)), array(array(8, 4), array(22, 3), array(8, 26), array(12, 28)), array(array(3, 10), array(3, 23), array(4, 31), array(11, 31)), array(array(7, 7), array(21, 7), array(1, 37), array(19, 26)), array(array(5, 10), array(19, 10), array(15, 25), array(23, 25)), array(array(13, 3), array(2, 29), array(42, 1), array(23, 28)), array(array(17, 0), array(10, 23), array(10, 35), array(19, 35)), array(array(17, 1), array(14, 21), array(29, 19), array(11, 46)), array(array(13, 6), array(14, 23), array(44, 7), array(59, 1)), array(array(12, 7), array(12, 26), array(39, 14), array(22, 41)), array(array(6, 14), array(6, 34), array(46, 10), array(2, 64)), array(array(17, 4), array(29, 14), array(49, 10), array(24, 46)), array(array(4, 18), array(13, 32), array(48, 14), array(42, 32)), array(array(20, 4), array(40, 7), array(43, 22), array(10, 67)), array(array(19, 6), array(18, 31), array(34, 34), array(20, 61))); protected $alignmentPattern = array(array(0, 0), array(0, 0), array(18, 0), array(22, 0), array(26, 0), array(30, 0), array(34, 0), array(22, 38), array(24, 42), array(26, 46), array(28, 50), array(30, 54), array(32, 58), array(34, 62), array(26, 46), array(26, 48), array(26, 50), array(30, 54), array(30, 56), array(30, 58), array(34, 62), array(28, 50), array(26, 50), array(30, 54), array(28, 54), array(32, 58), array(30, 58), array(34, 62), array(26, 50), array(30, 54), array(26, 52), array(30, 56), array(34, 60), array(30, 58), array(34, 62), array(30, 54), array(24, 50), array(28, 54), array(32, 58), array(26, 54), array(30, 58)); protected $versionPattern = array(0x7c94, 0x85bc, 0x9a99, 0xa4d3, 0xbbf6, 0xc762, 0xd847, 0xe60d, 0xf928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6, 0x15683, 0x168c9, 0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75, 0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64, 0x27541, 0x28c69); protected $formatInfo = array(array(0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976), array(0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0), array(0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed), array(0x1689, 0x13be, 0x1ce7, 0x19d0, 0x762, 0x255, 0xd0c, 0x83b)); public function __construct($code, $eclevel = "\x4c") { goto VCd3T; LEMdb: $this->encodeString($code); goto kYRTW; VCd3T: $barcode_array = array(); goto xhEAH; xhEAH: if (is_null($code) or $code == "\134\x30" or $code == '') { return false; } goto iyLTd; iD6TC: $this->barcode_array = $barcode_array; goto PAUDk; kYRTW: $qrTab = $this->binarize($this->data); goto dk7jc; J33Dh: $this->items = array(); goto LEMdb; cxfOt: if ($this->version < 0 or $this->version > QRSPEC_VERSION_MAX) { return false; } goto J33Dh; dk7jc: $size = count($qrTab); goto SeE1z; SeE1z: $barcode_array["\x6e\x75\x6d\137\x72\x6f\167\x73"] = $size; goto YKRgr; YKRgr: $barcode_array["\156\165\x6d\137\x63\157\x6c\x73"] = $size; goto ZQOsO; ZQOsO: $barcode_array["\x62\143\157\144\145"] = array(); goto Nf2FU; Nf2FU: foreach ($qrTab as $line) { goto EoorD; ftk0e: foreach (str_split($line) as $char) { $arrAdd[] = $char == "\x31" ? 1 : 0; } goto h94nr; h94nr: $barcode_array["\x62\143\x6f\x64\x65"][] = $arrAdd; goto pGXay; EoorD: $arrAdd = array(); goto ftk0e; pGXay: } goto iD6TC; XqoxE: if ($this->hint != QR_MODE_8B and $this->hint != QR_MODE_KJ) { return false; } goto cxfOt; iyLTd: $this->level = array_search($eclevel, array("\114", "\115", "\121", "\110")); goto wz48e; wz48e: if ($this->level === false) { $this->level = QR_ECLEVEL_L; } goto XqoxE; PAUDk: } public function getBarcodeArray() { return $this->barcode_array; } protected function binarize($frame) { goto VjE1s; E41Pg: return $frame; goto AepQw; RWWS4: foreach ($frame as &$frameLine) { for ($i = 0; $i < $len; $i++) { $frameLine[$i] = ord($frameLine[$i]) & 1 ? "\61" : "\x30"; } } goto E41Pg; VjE1s: $len = count($frame); goto RWWS4; AepQw: } protected function encodeString($string) { goto bgC8T; XsvAo: $ret = $this->splitString(); goto gKueV; d7cMD: $this->encodeMask(-1); goto uDQGO; bgC8T: $this->dataStr = $string; goto PYBbT; PYBbT: if (!$this->casesensitive) { $this->toUpper(); } goto XsvAo; gKueV: if ($ret < 0) { return NULL; } goto d7cMD; uDQGO: } protected function encodeMask($mask) { goto xs9xi; GwTSU: $this->x = $this->width - 1; goto WOBUN; IdYT6: $ret = $this->init($spec); goto ErgOQ; ErgOQ: if ($ret < 0) { return NULL; } goto ls1lj; ehezF: $this->dir = -1; goto W3Cnq; PNtsG: for ($i = 0; $i < $j; $i++) { $addr = $this->getNextPosition(); $this->setFrameAt($addr, 0x2); } goto krGg3; ryaUJ: $this->frame = $this->newFrame($this->version); goto GwTSU; HrdUJ: $this->data = $masked; goto LIpBo; sjo2Y: $this->eccLength = $this->rsEccLength($spec); goto iKviP; so3Fx: $j = $this->getRemainder($this->version); goto PNtsG; n7e5H: $this->blocks = $this->rsBlockNum($spec); goto IdYT6; ls1lj: $this->count = 0; goto EUMiJ; xs9xi: $spec = array(0, 0, 0, 0, 0); goto hBIwJ; A8TZ9: for ($i = 0; $i < $this->dataLength + $this->eccLength; $i++) { $code = $this->getCode(); $bit = 0x80; for ($j = 0; $j < 8; $j++) { $addr = $this->getNextPosition(); $this->setFrameAt($addr, 0x2 | ($bit & $code) != 0); $bit = $bit >> 1; } } goto so3Fx; eeKpz: if ($masked == NULL) { return NULL; } goto HrdUJ; hBIwJ: $this->datacode = $this->getByteStream($this->items); goto q9mOc; EUMiJ: $this->width = $this->getWidth($this->version); goto ryaUJ; rUbxo: $this->dataLength = $this->rsDataLength($spec); goto sjo2Y; iKviP: $this->ecccode = array_fill(0, $this->eccLength, 0); goto n7e5H; W3Cnq: $this->bit = -1; goto A8TZ9; krGg3: $this->runLength = array_fill(0, QRSPEC_WIDTH_MAX + 1, 0); goto xg1CC; xg1CC: if ($mask < 0) { if (QR_FIND_BEST_MASK) { $masked = $this->mask($this->width, $this->frame, $this->level); } else { $masked = $this->makeMask($this->width, $this->frame, intval(QR_DEFAULT_MASK) % 8, $this->level); } } else { $masked = $this->makeMask($this->width, $this->frame, $mask, $this->level); } goto eeKpz; q9mOc: if (is_null($this->datacode)) { return NULL; } goto mTqPL; WOBUN: $this->y = $this->width - 1; goto ehezF; B73F2: $this->b1 = $this->rsBlockNum1($spec); goto rUbxo; mTqPL: $spec = $this->getEccSpec($this->version, $this->level, $spec); goto B73F2; LIpBo: } protected function setFrameAt($at, $val) { $this->frame[$at["\171"]][$at["\170"]] = chr($val); } protected function getFrameAt($at) { return ord($this->frame[$at["\x79"]][$at["\x78"]]); } protected function getNextPosition() { do { if ($this->bit == -1) { $this->bit = 0; return array("\x78" => $this->x, "\171" => $this->y); } $x = $this->x; $y = $this->y; $w = $this->width; if ($this->bit == 0) { $x--; $this->bit++; } else { goto tIwQv; QksJ5: $this->bit--; goto jlEf0; tIwQv: $x++; goto cyyJN; cyyJN: $y += $this->dir; goto QksJ5; jlEf0: } if ($this->dir < 0) { if ($y < 0) { goto GIcz4; qyIy0: $x -= 2; goto aGyC4; NFt00: if ($x == 6) { $x--; $y = 9; } goto JrVyj; GIcz4: $y = 0; goto qyIy0; aGyC4: $this->dir = 1; goto NFt00; JrVyj: } } else { if ($y == $w) { goto WCrqg; WCrqg: $y = $w - 1; goto YJTzS; CgFHd: if ($x == 6) { $x--; $y -= 8; } goto UMKTJ; FoHg0: $this->dir = -1; goto CgFHd; YJTzS: $x -= 2; goto FoHg0; UMKTJ: } } if ($x < 0 or $y < 0) { return NULL; } $this->x = $x; $this->y = $y; } while (ord($this->frame[$y][$x]) & 0x80); return array("\170" => $x, "\x79" => $y); } protected function init($spec) { goto ITbzh; ITbzh: $dl = $this->rsDataCodes1($spec); goto FYStd; qFUoE: $blockNo = 0; goto qMYm1; M_sJu: return 0; goto GyGUS; BnxR6: $endfor = $this->rsBlockNum2($spec); goto g7HCm; h0z6J: for ($i = 0; $i < $endfor; ++$i) { $ecc = array_slice($this->ecccode, $eccPos); $this->rsblocks[$blockNo] = array(); $this->rsblocks[$blockNo]["\x64\141\x74\141\114\145\x6e\x67\x74\150"] = $dl; $this->rsblocks[$blockNo]["\144\141\x74\141"] = array_slice($this->datacode, $dataPos); $this->rsblocks[$blockNo]["\x65\143\x63\114\x65\156\x67\164\x68"] = $el; $ecc = $this->encode_rs_char($rs, $this->rsblocks[$blockNo]["\144\x61\164\x61"], $ecc); $this->rsblocks[$blockNo]["\145\x63\143"] = $ecc; $this->ecccode = array_merge(array_slice($this->ecccode, 0, $eccPos), $ecc); $dataPos += $dl; $eccPos += $el; $blockNo++; } goto jKFoa; Cjp5h: $el = $this->rsEccCodes2($spec); goto lJiR1; duI_C: $endfor = $this->rsBlockNum1($spec); goto h0z6J; qMYm1: $dataPos = 0; goto PNUnr; ykal5: if ($rs == NULL) { return -1; } goto BnxR6; lJiR1: $rs = $this->init_rs(8, 0x11d, 0, 1, $el, 255 - $dl - $el); goto ykal5; ueBnK: $dl = $this->rsDataCodes2($spec); goto Cjp5h; g7HCm: for ($i = 0; $i < $endfor; ++$i) { $ecc = array_slice($this->ecccode, $eccPos); $this->rsblocks[$blockNo] = array(); $this->rsblocks[$blockNo]["\144\x61\x74\x61\x4c\x65\156\x67\164\x68"] = $dl; $this->rsblocks[$blockNo]["\144\141\164\x61"] = array_slice($this->datacode, $dataPos); $this->rsblocks[$blockNo]["\x65\x63\143\x4c\145\156\147\164\150"] = $el; $ecc = $this->encode_rs_char($rs, $this->rsblocks[$blockNo]["\x64\x61\164\141"], $ecc); $this->rsblocks[$blockNo]["\145\x63\x63"] = $ecc; $this->ecccode = array_merge(array_slice($this->ecccode, 0, $eccPos), $ecc); $dataPos += $dl; $eccPos += $el; $blockNo++; } goto M_sJu; zaxNE: $rs = $this->init_rs(8, 0x11d, 0, 1, $el, 255 - $dl - $el); goto qFUoE; jKFoa: if ($this->rsBlockNum2($spec) == 0) { return 0; } goto ueBnK; FYStd: $el = $this->rsEccCodes1($spec); goto zaxNE; PNUnr: $eccPos = 0; goto duI_C; GyGUS: } protected function getCode() { goto q089t; AEzxO: return $ret; goto Jouk_; VN73U: $this->count++; goto AEzxO; q089t: if ($this->count < $this->dataLength) { goto FxynH; FxynH: $row = $this->count % $this->blocks; goto EIP3y; SWB4M: if ($col >= $this->rsblocks[0]["\x64\x61\164\x61\114\145\x6e\147\x74\x68"]) { $row += $this->b1; } goto V_bvT; V_bvT: $ret = $this->rsblocks[$row]["\x64\141\164\141"][$col]; goto ay5Ol; EIP3y: $col = $this->count / $this->blocks; goto SWB4M; ay5Ol: } elseif ($this->count < $this->dataLength + $this->eccLength) { goto g7122; XYbuI: $col = ($this->count - $this->dataLength) / $this->blocks; goto nFbbt; g7122: $row = ($this->count - $this->dataLength) % $this->blocks; goto XYbuI; nFbbt: $ret = $this->rsblocks[$row]["\x65\143\x63"][$col]; goto iiUSh; iiUSh: } else { return 0; } goto VN73U; Jouk_: } protected function writeFormatInformation($width, &$frame, $mask, $level) { goto N8ye4; y5Q3T: for ($i = 0; $i < 7; ++$i) { if ($format & 1) { $blacks += 2; $v = 0x85; } else { $v = 0x84; } $frame[$width - 7 + $i][8] = chr($v); if ($i == 0) { $frame[8][7] = chr($v); } else { $frame[8][6 - $i] = chr($v); } $format = $format >> 1; } goto MCKdi; btfxM: for ($i = 0; $i < 8; ++$i) { if ($format & 1) { $blacks += 2; $v = 0x85; } else { $v = 0x84; } $frame[8][$width - 1 - $i] = chr($v); if ($i < 6) { $frame[$i][8] = chr($v); } else { $frame[$i + 1][8] = chr($v); } $format = $format >> 1; } goto y5Q3T; MCKdi: return $blacks; goto TmPkd; jSPxv: $format = $this->getFormatInfo($mask, $level); goto btfxM; N8ye4: $blacks = 0; goto jSPxv; TmPkd: } protected function mask0($x, $y) { return $x + $y & 1; } protected function mask1($x, $y) { return $y & 1; } protected function mask2($x, $y) { return $x % 3; } protected function mask3($x, $y) { return ($x + $y) % 3; } protected function mask4($x, $y) { return (int) ($y / 2) + (int) ($x / 3) & 1; } protected function mask5($x, $y) { return ($x * $y & 1) + $x * $y % 3; } protected function mask6($x, $y) { return ($x * $y & 1) + $x * $y % 3 & 1; } protected function mask7($x, $y) { return $x * $y % 3 + ($x + $y & 1) & 1; } protected function generateMaskNo($maskNo, $width, $frame) { goto S_Ubv; zT4Tl: for ($y = 0; $y < $width; ++$y) { for ($x = 0; $x < $width; ++$x) { if (ord($frame[$y][$x]) & 0x80) { $bitMask[$y][$x] = 0; } else { $maskFunc = call_user_func(array($this, "\155\141\x73\153" . $maskNo), $x, $y); $bitMask[$y][$x] = $maskFunc == 0 ? 1 : 0; } } } goto H9pOa; S_Ubv: $bitMask = array_fill(0, $width, array_fill(0, $width, 0)); goto zT4Tl; H9pOa: return $bitMask; goto DVkhR; DVkhR: } protected function makeMaskNo($maskNo, $width, $s, &$d, $maskGenOnly = false) { goto gCCd6; gCCd6: $b = 0; goto ZN4Vc; AT00M: return $b; goto dRjJn; syPkz: for ($y = 0; $y < $width; ++$y) { for ($x = 0; $x < $width; ++$x) { if ($bitMask[$y][$x] == 1) { $d[$y][$x] = chr(ord($s[$y][$x]) ^ (int) $bitMask[$y][$x]); } $b += (int) (ord($d[$y][$x]) & 1); } } goto AT00M; ZN4Vc: $bitMask = array(); goto i3e5R; fCKI1: $d = $s; goto syPkz; uHr3A: if ($maskGenOnly) { return; } goto fCKI1; i3e5R: $bitMask = $this->generateMaskNo($maskNo, $width, $s, $d); goto uHr3A; dRjJn: } protected function makeMask($width, $frame, $maskNo, $level) { goto pmdPJ; ROCN3: $this->writeFormatInformation($width, $masked, $maskNo, $level); goto JXWeZ; pmdPJ: $masked = array_fill(0, $width, str_repeat("\x0", $width)); goto GaROh; GaROh: $this->makeMaskNo($maskNo, $width, $frame, $masked); goto ROCN3; JXWeZ: return $masked; goto Ti2tS; Ti2tS: } protected function calcN1N3($length) { goto GOuQA; GOuQA: $demerit = 0; goto Y0YtY; T8EIn: return $demerit; goto TTWKU; Y0YtY: for ($i = 0; $i < $length; ++$i) { if ($this->runLength[$i] >= 5) { $demerit += N1 + ($this->runLength[$i] - 5); } if ($i & 1) { if ($i >= 3 and $i < $length - 2 and $this->runLength[$i] % 3 == 0) { $fact = (int) ($this->runLength[$i] / 3); if ($this->runLength[$i - 2] == $fact and $this->runLength[$i - 1] == $fact and $this->runLength[$i + 1] == $fact and $this->runLength[$i + 2] == $fact) { if ($this->runLength[$i - 3] < 0 or $this->runLength[$i - 3] >= 4 * $fact) { $demerit += N3; } elseif ($i + 3 >= $length or $this->runLength[$i + 3] >= 4 * $fact) { $demerit += N3; } } } } } goto T8EIn; TTWKU: } protected function evaluateSymbol($width, $frame) { goto L7aKQ; ObmLJ: return $demerit; goto Cx4ng; L7aKQ: $head = 0; goto fl9rl; XoveY: for ($x = 0; $x < $width; ++$x) { $head = 0; $this->runLength[0] = 1; for ($y = 0; $y < $width; ++$y) { if ($y == 0 and ord($frame[$y][$x]) & 1) { goto LfqD_; LfqD_: $this->runLength[0] = -1; goto QtkqT; rqwf7: $this->runLength[$head] = 1; goto xWPdg; QtkqT: $head = 1; goto rqwf7; xWPdg: } elseif ($y > 0) { if ((ord($frame[$y][$x]) ^ ord($frame[$y - 1][$x])) & 1) { $head++; $this->runLength[$head] = 1; } else { $this->runLength[$head]++; } } } $demerit += $this->calcN1N3($head + 1); } goto ObmLJ; lDhy2: for ($y = 0; $y < $width; ++$y) { $head = 0; $this->runLength[0] = 1; $frameY = $frame[$y]; if ($y > 0) { $frameYM = $frame[$y - 1]; } for ($x = 0; $x < $width; ++$x) { if ($x > 0 and $y > 0) { goto iYTn7; gZFEl: $w22 = ord($frameY[$x]) | ord($frameY[$x - 1]) | ord($frameYM[$x]) | ord($frameYM[$x - 1]); goto A0QWx; A0QWx: if (($b22 | $w22 ^ 1) & 1) { $demerit += N2; } goto hPF8L; iYTn7: $b22 = ord($frameY[$x]) & ord($frameY[$x - 1]) & ord($frameYM[$x]) & ord($frameYM[$x - 1]); goto gZFEl; hPF8L: } if ($x == 0 and ord($frameY[$x]) & 1) { goto W3yhS; JRQ63: $head = 1; goto Tkhrx; Tkhrx: $this->runLength[$head] = 1; goto YuOco; W3yhS: $this->runLength[0] = -1; goto JRQ63; YuOco: } elseif ($x > 0) { if ((ord($frameY[$x]) ^ ord($frameY[$x - 1])) & 1) { $head++; $this->runLength[$head] = 1; } else { $this->runLength[$head]++; } } } $demerit += $this->calcN1N3($head + 1); } goto XoveY; fl9rl: $demerit = 0; goto lDhy2; Cx4ng: } protected function mask($width, $frame, $level) { goto Ohzzt; dHnaQ: if (QR_FIND_FROM_RANDOM !== false) { $howManuOut = 8 - QR_FIND_FROM_RANDOM % 9; for ($i = 0; $i < $howManuOut; ++$i) { $remPos = rand(0, count($checked_masks) - 1); unset($checked_masks[$remPos]); $checked_masks = array_values($checked_masks); } } goto VGeem; MfPGa: $bestMask = array(); goto OS8qo; Ohzzt: $minDemerit = PHP_INT_MAX; goto wNqQy; OS8qo: $checked_masks = array(0, 1, 2, 3, 4, 5, 6, 7); goto dHnaQ; wNqQy: $bestMaskNum = 0; goto MfPGa; VGeem: $bestMask = $frame; goto riAgk; HioGc: return $bestMask; goto lfWMU; riAgk: foreach ($checked_masks as $i) { goto UJri4; ZAYfH: if ($demerit < $minDemerit) { goto yhJwr; yhJwr: $minDemerit = $demerit; goto WQfb8; nfc7a: $bestMaskNum = $i; goto kWA07; WQfb8: $bestMask = $mask; goto nfc7a; kWA07: } goto RXZIK; KVKA8: $blacks += $this->writeFormatInformation($width, $mask, $i, $level); goto WjnI6; IawKp: $demerit = 0; goto jAJ0P; jAJ0P: $blacks = 0; goto MkRJi; MkRJi: $blacks = $this->makeMaskNo($i, $width, $frame, $mask); goto KVKA8; UJri4: $mask = array_fill(0, $width, str_repeat("\0", $width)); goto IawKp; N4N09: $demerit = (int) ((int) (abs($blacks - 50) / 5) * N4); goto HLXqK; WjnI6: $blacks = (int) (100 * $blacks / ($width * $width)); goto N4N09; HLXqK: $demerit += $this->evaluateSymbol($width, $mask); goto ZAYfH; RXZIK: } goto HioGc; lfWMU: } protected function isdigitat($str, $pos) { if ($pos >= strlen($str)) { return false; } return ord($str[$pos]) >= ord("\x30") && ord($str[$pos]) <= ord("\71"); } protected function isalnumat($str, $pos) { if ($pos >= strlen($str)) { return false; } return $this->lookAnTable(ord($str[$pos])) >= 0; } protected function identifyMode($pos) { goto BxXsg; BxXsg: if ($pos >= strlen($this->dataStr)) { return QR_MODE_NL; } goto x_ESy; BhFO8: return QR_MODE_8B; goto IlBO7; x_ESy: $c = $this->dataStr[$pos]; goto Z_diZ; Z_diZ: if ($this->isdigitat($this->dataStr, $pos)) { return QR_MODE_NM; } elseif ($this->isalnumat($this->dataStr, $pos)) { return QR_MODE_AN; } elseif ($this->hint == QR_MODE_KJ) { if ($pos + 1 < strlen($this->dataStr)) { goto U7fFA; Ou7mN: if ($word >= 0x8140 && $word <= 0x9ffc or $word >= 0xe040 && $word <= 0xebbf) { return QR_MODE_KJ; } goto xq17Z; U7fFA: $d = $this->dataStr[$pos + 1]; goto ur6ic; ur6ic: $word = ord($c) << 8 | ord($d); goto Ou7mN; xq17Z: } } goto BhFO8; IlBO7: } protected function eatNum() { goto aAbKw; JP2Jq: $p = 0; goto yacT9; yacT9: while ($this->isdigitat($this->dataStr, $p)) { $p++; } goto btBFs; TFBs6: $mode = $this->identifyMode($p); goto hSTd9; aAbKw: $ln = $this->lengthIndicator(QR_MODE_NM, $this->version); goto JP2Jq; btBFs: $run = $p; goto TFBs6; BgaIi: return $run; goto KOjZl; RMl8s: if ($mode == QR_MODE_AN) { $dif = $this->estimateBitsModeNum($run) + 4 + $ln + $this->estimateBitsModeAn(1) - $this->estimateBitsModeAn($run + 1); if ($dif > 0) { return $this->eatAn(); } } goto Ij6Hr; Ij6Hr: $this->items = $this->appendNewInputItem($this->items, QR_MODE_NM, $run, str_split($this->dataStr)); goto BgaIi; hSTd9: if ($mode == QR_MODE_8B) { $dif = $this->estimateBitsModeNum($run) + 4 + $ln + $this->estimateBitsMode8(1) - $this->estimateBitsMode8($run + 1); if ($dif > 0) { return $this->eat8(); } } goto RMl8s; KOjZl: } protected function eatAn() { goto htUmp; okfvm: while ($this->isalnumat($this->dataStr, $p)) { if ($this->isdigitat($this->dataStr, $p)) { goto h64va; h64va: $q = $p; goto gW7qX; mWD83: if ($dif < 0) { break; } else { $p = $q; } goto jOvql; gW7qX: while ($this->isdigitat($this->dataStr, $q)) { $q++; } goto lXbK2; lXbK2: $dif = $this->estimateBitsModeAn($p) + $this->estimateBitsModeNum($q - $p) + 4 + $ln - $this->estimateBitsModeAn($q); goto mWD83; jOvql: } else { $p++; } } goto HU9f5; MV8M7: if (!$this->isalnumat($this->dataStr, $p)) { $dif = $this->estimateBitsModeAn($run) + 4 + $la + $this->estimateBitsMode8(1) - $this->estimateBitsMode8($run + 1); if ($dif > 0) { return $this->eat8(); } } goto e4QWD; vlgxi: $p = 0; goto okfvm; e4QWD: $this->items = $this->appendNewInputItem($this->items, QR_MODE_AN, $run, str_split($this->dataStr)); goto IMtg3; htUmp: $la = $this->lengthIndicator(QR_MODE_AN, $this->version); goto QEfBl; IMtg3: return $run; goto affCS; HU9f5: $run = $p; goto MV8M7; QEfBl: $ln = $this->lengthIndicator(QR_MODE_NM, $this->version); goto vlgxi; affCS: } protected function eatKanji() { goto zqtjq; DuUcA: return $run; goto YxjJg; zqtjq: $p = 0; goto k0VWl; k0VWl: while ($this->identifyMode($p) == QR_MODE_KJ) { $p += 2; } goto jIR23; jIR23: $this->items = $this->appendNewInputItem($this->items, QR_MODE_KJ, $p, str_split($this->dataStr)); goto DuUcA; YxjJg: } protected function eat8() { goto QzKaI; ouCjY: while ($p < $dataStrLen) { $mode = $this->identifyMode($p); if ($mode == QR_MODE_KJ) { break; } if ($mode == QR_MODE_NM) { goto BOb2k; O4s1A: $dif = $this->estimateBitsMode8($p) + $this->estimateBitsModeNum($q - $p) + 4 + $ln - $this->estimateBitsMode8($q); goto DPgJW; mks36: while ($this->isdigitat($this->dataStr, $q)) { $q++; } goto O4s1A; BOb2k: $q = $p; goto mks36; DPgJW: if ($dif < 0) { break; } else { $p = $q; } goto tvz2F; tvz2F: } elseif ($mode == QR_MODE_AN) { goto qCTKK; XkkW4: if ($dif < 0) { break; } else { $p = $q; } goto izoYJ; qCTKK: $q = $p; goto cAa0q; cAa0q: while ($this->isalnumat($this->dataStr, $q)) { $q++; } goto yD4Mu; yD4Mu: $dif = $this->estimateBitsMode8($p) + $this->estimateBitsModeAn($q - $p) + 4 + $la - $this->estimateBitsMode8($q); goto XkkW4; izoYJ: } else { $p++; } } goto MfmSz; Asfo7: $dataStrLen = strlen($this->dataStr); goto ouCjY; QzKaI: $la = $this->lengthIndicator(QR_MODE_AN, $this->version); goto Hhkp5; aaPcA: return $run; goto T2sRo; Hhkp5: $ln = $this->lengthIndicator(QR_MODE_NM, $this->version); goto f5RVV; f5RVV: $p = 1; goto Asfo7; MfmSz: $run = $p; goto bDpc0; bDpc0: $this->items = $this->appendNewInputItem($this->items, QR_MODE_8B, $run, str_split($this->dataStr)); goto aaPcA; T2sRo: } protected function splitString() { while (strlen($this->dataStr) > 0) { if ($this->dataStr == '') { return 0; } $mode = $this->identifyMode(0); switch ($mode) { case QR_MODE_NM: $length = $this->eatNum(); break; case QR_MODE_AN: $length = $this->eatAn(); break; case QR_MODE_KJ: if ($hint == QR_MODE_KJ) { $length = $this->eatKanji(); } else { $length = $this->eat8(); } break; default: $length = $this->eat8(); break; } if ($length == 0) { return 0; } if ($length < 0) { return -1; } $this->dataStr = substr($this->dataStr, $length); } } protected function toUpper() { goto sEkP_; yk4PK: while ($p < $stringLen) { $mode = $this->identifyMode(substr($this->dataStr, $p), $this->hint); if ($mode == QR_MODE_KJ) { $p += 2; } else { if (ord($this->dataStr[$p]) >= ord("\141") and ord($this->dataStr[$p]) <= ord("\172")) { $this->dataStr[$p] = chr(ord($this->dataStr[$p]) - 32); } $p++; } } goto aNqvA; aNqvA: return $this->dataStr; goto tpygp; sEkP_: $stringLen = strlen($this->dataStr); goto tUt4z; tUt4z: $p = 0; goto yk4PK; tpygp: } protected function newInputItem($mode, $size, $data, $bstream = null) { goto DEn3_; DEn3_: $setData = array_slice($data, 0, $size); goto O_5fy; dvB2i: $inputitem = array(); goto SHN7t; YDG8C: return $inputitem; goto fCtHr; zlbcZ: if (!$this->check($mode, $size, $setData)) { return NULL; } goto dvB2i; SHN7t: $inputitem["\x6d\157\144\145"] = $mode; goto Cw5zp; FfV7r: $inputitem["\x62\163\x74\162\145\141\x6d"] = $bstream; goto YDG8C; O_5fy: if (count($setData) < $size) { $setData = array_merge($setData, array_fill(0, $size - count($setData), 0)); } goto zlbcZ; mteDY: $inputitem["\144\141\164\x61"] = $setData; goto FfV7r; Cw5zp: $inputitem["\163\151\172\145"] = $size; goto mteDY; fCtHr: } protected function encodeModeNum($inputitem, $version) { goto w8MRE; NeVKX: return $inputitem; goto LmBx2; tpGtW: $val = 0x1; goto Icqeu; b10t2: for ($i = 0; $i < $words; ++$i) { $val = (ord($inputitem["\144\x61\x74\x61"][$i * 3]) - ord("\x30")) * 100; $val += (ord($inputitem["\144\141\x74\141"][$i * 3 + 1]) - ord("\60")) * 10; $val += ord($inputitem["\x64\x61\164\x61"][$i * 3 + 2]) - ord("\60"); $inputitem["\142\x73\x74\x72\x65\x61\155"] = $this->appendNum($inputitem["\142\x73\164\162\145\141\155"], 10, $val); } goto eAjEI; eAjEI: if ($inputitem["\163\x69\172\x65"] - $words * 3 == 1) { $val = ord($inputitem["\144\141\x74\x61"][$words * 3]) - ord("\x30"); $inputitem["\x62\163\x74\x72\x65\x61\155"] = $this->appendNum($inputitem["\142\163\x74\162\x65\141\155"], 4, $val); } elseif ($inputitem["\163\x69\x7a\145"] - $words * 3 == 2) { goto lX4wc; lX4wc: $val = (ord($inputitem["\x64\141\x74\141"][$words * 3]) - ord("\60")) * 10; goto GxWcf; GxWcf: $val += ord($inputitem["\x64\141\x74\141"][$words * 3 + 1]) - ord("\x30"); goto qOwxK; qOwxK: $inputitem["\x62\x73\x74\162\145\141\155"] = $this->appendNum($inputitem["\x62\163\x74\162\145\x61\x6d"], 7, $val); goto T15Np; T15Np: } goto NeVKX; qPNI1: $inputitem["\142\x73\164\x72\145\x61\x6d"] = array(); goto tpGtW; vpJ7O: $inputitem["\142\163\164\162\x65\141\x6d"] = $this->appendNum($inputitem["\x62\163\164\x72\145\x61\x6d"], $this->lengthIndicator(QR_MODE_NM, $version), $inputitem["\163\x69\x7a\145"]); goto b10t2; w8MRE: $words = (int) ($inputitem["\163\151\x7a\x65"] / 3); goto qPNI1; Icqeu: $inputitem["\142\x73\x74\x72\x65\x61\155"] = $this->appendNum($inputitem["\142\163\164\x72\145\141\155"], 4, $val); goto vpJ7O; LmBx2: } protected function encodeModeAn($inputitem, $version) { goto hQPiT; Ejn6A: $inputitem["\142\163\164\162\145\x61\155"] = $this->appendNum(v, $this->lengthIndicator(QR_MODE_AN, $version), $inputitem["\163\x69\172\x65"]); goto Qj4jY; GYW0b: $inputitem["\x62\163\x74\162\145\x61\x6d"] = array(); goto sjv3M; xs4QB: if ($inputitem["\x73\151\172\x65"] & 1) { $val = $this->lookAnTable(ord($inputitem["\x64\141\164\x61"][$words * 2])); $inputitem["\142\x73\x74\x72\x65\141\155"] = $this->appendNum($inputitem["\x62\163\x74\x72\145\x61\x6d"], 6, $val); } goto HH96q; sjv3M: $inputitem["\142\x73\164\x72\x65\141\x6d"] = $this->appendNum($inputitem["\x62\x73\x74\162\x65\141\x6d"], 4, 0x2); goto Ejn6A; Qj4jY: for ($i = 0; $i < $words; ++$i) { $val = (int) $this->lookAnTable(ord($inputitem["\144\x61\164\x61"][$i * 2])) * 45; $val += (int) $this->lookAnTable(ord($inputitem["\144\141\x74\x61"][$i * 2 + 1])); $inputitem["\x62\x73\x74\x72\x65\141\155"] = $this->appendNum($inputitem["\x62\x73\x74\162\x65\141\x6d"], 11, $val); } goto xs4QB; hQPiT: $words = (int) ($inputitem["\163\x69\172\145"] / 2); goto GYW0b; HH96q: return $inputitem; goto Q3IVw; Q3IVw: } protected function encodeMode8($inputitem, $version) { goto tOsza; a6wxG: return $inputitem; goto jMutQ; RWXpx: $inputitem["\142\x73\x74\x72\145\x61\155"] = $this->appendNum($inputitem["\x62\x73\x74\x72\145\x61\155"], 4, 0x4); goto bl3ur; MeRqB: for ($i = 0; $i < $inputitem["\x73\x69\172\x65"]; ++$i) { $inputitem["\142\163\164\x72\145\141\x6d"] = $this->appendNum($inputitem["\142\x73\x74\x72\x65\x61\155"], 8, ord($inputitem["\144\141\164\x61"][$i])); } goto a6wxG; tOsza: $inputitem["\142\x73\164\x72\145\x61\x6d"] = array(); goto RWXpx; bl3ur: $inputitem["\x62\x73\164\x72\145\x61\x6d"] = $this->appendNum($inputitem["\142\163\164\x72\145\x61\x6d"], $this->lengthIndicator(QR_MODE_8B, $version), $inputitem["\x73\151\172\145"]); goto MeRqB; jMutQ: } protected function encodeModeKanji($inputitem, $version) { goto cxGHH; GeQlY: return $inputitem; goto NdCad; UG0MI: $inputitem["\x62\x73\164\x72\x65\141\x6d"] = $this->appendNum($inputitem["\142\163\164\162\145\141\x6d"], $this->lengthIndicator(QR_MODE_KJ, $version), (int) ($inputitem["\x73\x69\x7a\x65"] / 2)); goto P5G33; cxGHH: $inputitem["\x62\163\x74\x72\145\x61\155"] = array(); goto rlzBd; P5G33: for ($i = 0; $i < $inputitem["\x73\151\x7a\145"]; $i += 2) { $val = ord($inputitem["\144\141\164\x61"][$i]) << 8 | ord($inputitem["\x64\x61\x74\x61"][$i + 1]); if ($val <= 0x9ffc) { $val -= 0x8140; } else { $val -= 0xc140; } $h = ($val >> 8) * 0xc0; $val = ($val & 0xff) + $h; $inputitem["\142\163\164\162\x65\x61\155"] = $this->appendNum($inputitem["\x62\163\x74\x72\145\141\155"], 13, $val); } goto GeQlY; rlzBd: $inputitem["\x62\x73\164\x72\145\x61\x6d"] = $this->appendNum($inputitem["\142\163\164\162\145\x61\x6d"], 4, 0x8); goto UG0MI; NdCad: } protected function encodeModeStructure($inputitem) { goto k3SQM; H5nXG: $inputitem["\142\x73\x74\x72\145\141\x6d"] = $this->appendNum($inputitem["\142\163\164\162\x65\141\x6d"], 4, ord($inputitem["\x64\141\164\x61"][0]) - 1); goto B0PaS; k3SQM: $inputitem["\x62\x73\x74\x72\145\x61\x6d"] = array(); goto qfQxw; k9XGL: $inputitem["\x62\163\164\x72\x65\x61\x6d"] = $this->appendNum($inputitem["\x62\x73\x74\162\x65\x61\x6d"], 4, ord($inputitem["\x64\141\164\141"][1]) - 1); goto H5nXG; B0PaS: $inputitem["\x62\x73\164\x72\145\x61\x6d"] = $this->appendNum($inputitem["\x62\163\164\162\x65\x61\155"], 8, ord($inputitem["\144\x61\x74\141"][2])); goto XLqjg; XLqjg: return $inputitem; goto ZtsG3; qfQxw: $inputitem["\x62\163\164\x72\145\x61\x6d"] = $this->appendNum($inputitem["\142\x73\164\162\145\x61\155"], 4, 0x3); goto k9XGL; ZtsG3: } protected function encodeBitStream($inputitem, $version) { goto MwrHs; RTaEl: if ($inputitem["\163\x69\172\145"] > $words) { goto uyII8; uyII8: $st1 = $this->newInputItem($inputitem["\155\157\x64\145"], $words, $inputitem["\144\141\x74\x61"]); goto MHyRT; yLNYw: $st1 = $this->encodeBitStream($st1, $version); goto BqEUN; oTMzU: $inputitem["\x62\163\164\x72\145\141\155"] = $this->appendBitstream($inputitem["\142\163\x74\x72\x65\141\155"], $st1["\142\x73\x74\162\145\x61\x6d"]); goto bjUW2; bjUW2: $inputitem["\x62\x73\x74\x72\x65\x61\155"] = $this->appendBitstream($inputitem["\142\163\164\x72\x65\141\155"], $st2["\142\163\x74\x72\x65\141\x6d"]); goto EXo3c; JUcWU: $inputitem["\142\x73\164\162\x65\141\x6d"] = array(); goto oTMzU; MHyRT: $st2 = $this->newInputItem($inputitem["\x6d\157\x64\x65"], $inputitem["\163\x69\172\x65"] - $words, array_slice($inputitem["\144\141\164\141"], $words)); goto yLNYw; BqEUN: $st2 = $this->encodeBitStream($st2, $version); goto JUcWU; EXo3c: } else { switch ($inputitem["\155\x6f\x64\x65"]) { case QR_MODE_NM: $inputitem = $this->encodeModeNum($inputitem, $version); break; case QR_MODE_AN: $inputitem = $this->encodeModeAn($inputitem, $version); break; case QR_MODE_8B: $inputitem = $this->encodeMode8($inputitem, $version); break; case QR_MODE_KJ: $inputitem = $this->encodeModeKanji($inputitem, $version); break; case QR_MODE_ST: $inputitem = $this->encodeModeStructure($inputitem); break; default: break; } } goto yNZWN; MwrHs: $inputitem["\x62\163\164\x72\145\141\x6d"] = array(); goto hJ2mv; yNZWN: return $inputitem; goto QDaBK; hJ2mv: $words = $this->maximumWords($inputitem["\155\x6f\x64\145"], $version); goto RTaEl; QDaBK: } protected function appendNewInputItem($items, $mode, $size, $data) { $items[] = $this->newInputItem($mode, $size, $data); return $items; } protected function insertStructuredAppendHeader($items, $size, $index, $parity) { goto Pw8vk; QabiV: $buf = array($size, $index, $parity); goto QZ_xS; a3k9l: if ($index <= 0 or $index > MAX_STRUCTURED_SYMBOLS) { return -1; } goto QabiV; f8wG1: array_unshift($items, $entry); goto bkN1D; bkN1D: return $items; goto OrWLH; QZ_xS: $entry = $this->newInputItem(QR_MODE_ST, 3, buf); goto f8wG1; Pw8vk: if ($size > MAX_STRUCTURED_SYMBOLS) { return -1; } goto a3k9l; OrWLH: } protected function calcParity($items) { goto aoAii; aoAii: $parity = 0; goto z0M0u; kIvza: return $parity; goto m8xaH; z0M0u: foreach ($items as $item) { if ($item["\155\157\x64\145"] != QR_MODE_ST) { for ($i = $item["\163\x69\x7a\145"] - 1; $i >= 0; --$i) { $parity ^= $item["\144\x61\164\141"][$i]; } } } goto kIvza; m8xaH: } protected function checkModeNum($size, $data) { for ($i = 0; $i < $size; ++$i) { if (ord($data[$i]) < ord("\60") or ord($data[$i]) > ord("\71")) { return false; } } return true; } protected function estimateBitsModeNum($size) { goto SqeFt; wspJ9: $bits = $w * 10; goto c1Twk; c1Twk: switch ($size - $w * 3) { case 1: $bits += 4; break; case 2: $bits += 7; break; default: break; } goto aHDQH; aHDQH: return $bits; goto Wlt2h; SqeFt: $w = (int) $size / 3; goto wspJ9; Wlt2h: } protected function lookAnTable($c) { return $c > 127 ? -1 : $this->anTable[$c]; } protected function checkModeAn($size, $data) { for ($i = 0; $i < $size; ++$i) { if ($this->lookAnTable(ord($data[$i])) == -1) { return false; } } return true; } protected function estimateBitsModeAn($size) { goto zglk2; a8wez: $bits = $w * 11; goto f8_28; EHACl: return $bits; goto u2XYL; f8_28: if ($size & 1) { $bits += 6; } goto EHACl; zglk2: $w = (int) ($size / 2); goto a8wez; u2XYL: } protected function estimateBitsMode8($size) { return $size * 8; } protected function estimateBitsModeKanji($size) { return (int) ($size / 2 * 13); } protected function checkModeKanji($size, $data) { goto dgNX9; xUaUt: return true; goto SHyeN; dgNX9: if ($size & 1) { return false; } goto ieBSl; ieBSl: for ($i = 0; $i < $size; $i += 2) { $val = ord($data[$i]) << 8 | ord($data[$i + 1]); if ($val < 0x8140 or $val > 0x9ffc and $val < 0xe040 or $val > 0xebbf) { return false; } } goto xUaUt; SHyeN: } protected function check($mode, $size, $data) { goto zY1ZV; zY1ZV: if ($size <= 0) { return false; } goto hB78r; hB78r: switch ($mode) { case QR_MODE_NM: return $this->checkModeNum($size, $data); case QR_MODE_AN: return $this->checkModeAn($size, $data); case QR_MODE_KJ: return $this->checkModeKanji($size, $data); case QR_MODE_8B: return true; case QR_MODE_ST: return true; default: break; } goto AC_cb; AC_cb: return false; goto CqTeK; CqTeK: } protected function estimateBitStreamSize($items, $version) { goto soERT; soERT: $bits = 0; goto ufL_3; EcGm6: foreach ($items as $item) { goto hxyb1; GHcC5: $l = $this->lengthIndicator($item["\x6d\x6f\x64\x65"], $version); goto pQMq4; JzArt: $bits += $num * (4 + $l); goto pM5pu; pURi0: $num = (int) (($item["\163\151\172\x65"] + $m - 1) / $m); goto JzArt; hxyb1: switch ($item["\155\157\x64\145"]) { case QR_MODE_NM: $bits = $this->estimateBitsModeNum($item["\163\x69\x7a\145"]); break; case QR_MODE_AN: $bits = $this->estimateBitsModeAn($item["\x73\x69\172\x65"]); break; case QR_MODE_8B: $bits = $this->estimateBitsMode8($item["\163\151\172\145"]); break; case QR_MODE_KJ: $bits = $this->estimateBitsModeKanji($item["\x73\x69\172\145"]); break; case QR_MODE_ST: return STRUCTURE_HEADER_BITS; default: return 0; } goto GHcC5; pQMq4: $m = 1 << $l; goto pURi0; pM5pu: } goto ptTCJ; ufL_3: if ($version == 0) { $version = 1; } goto EcGm6; ptTCJ: return $bits; goto gmUNF; gmUNF: } protected function estimateVersion($items) { goto Pv1jO; up9PW: return $version; goto pw4M4; wme3w: $prev = 0; goto GnwBW; GnwBW: do { $prev = $version; $bits = $this->estimateBitStreamSize($items, $prev); $version = $this->getMinimumVersion((int) (($bits + 7) / 8), $this->level); if ($version < 0) { return -1; } } while ($version > $prev); goto up9PW; Pv1jO: $version = 0; goto wme3w; pw4M4: } protected function lengthOfCode($mode, $version, $bits) { goto lIGXv; lIGXv: $payload = $bits - 4 - $this->lengthIndicator($mode, $version); goto JuG9S; KuDXT: $maxsize = $this->maximumWords($mode, $version); goto EZYtf; EZYtf: if ($size < 0) { $size = 0; } goto yc3Pv; JuG9S: switch ($mode) { case QR_MODE_NM: goto YlQK4; WjkLz: $remain = $payload - $chunks * 10; goto FcmzZ; YlQK4: $chunks = (int) ($payload / 10); goto WjkLz; FcmzZ: $size = $chunks * 3; goto FCtB8; FCtB8: if ($remain >= 7) { $size += 2; } elseif ($remain >= 4) { $size += 1; } goto GS7Vz; GS7Vz: break; goto WG50D; WG50D: case QR_MODE_AN: goto w4EqY; EXxG8: $remain = $payload - $chunks * 11; goto oV0Xy; DT82t: break; goto TH3IH; w4EqY: $chunks = (int) ($payload / 11); goto EXxG8; PXWX3: if ($remain >= 6) { ++$size; } goto DT82t; oV0Xy: $size = $chunks * 2; goto PXWX3; TH3IH: case QR_MODE_8B: $size = (int) ($payload / 8); break; case QR_MODE_KJ: $size = (int) ($payload / 13 * 2); break; case QR_MODE_ST: $size = (int) ($payload / 8); break; default: $size = 0; break; } goto KuDXT; E1ryc: return $size; goto YtIsm; yc3Pv: if ($size > $maxsize) { $size = $maxsize; } goto E1ryc; YtIsm: } protected function createBitStream($items) { goto N_bzq; APw5x: return array($items, $total); goto geYvA; N_bzq: $total = 0; goto dN8lj; dN8lj: foreach ($items as $key => $item) { goto DElij; YNfAy: $total += $bits; goto W2FcU; DElij: $items[$key] = $this->encodeBitStream($item, $this->version); goto lxOIJ; lxOIJ: $bits = count($items[$key]["\142\163\164\162\145\141\x6d"]); goto YNfAy; W2FcU: } goto APw5x; geYvA: } protected function convertData($items) { goto UpNJg; UpNJg: $ver = $this->estimateVersion($items); goto lGWCQ; lGWCQ: if ($ver > $this->version) { $this->version = $ver; } goto pl6YX; pl6YX: for (;;) { $cbs = $this->createBitStream($items); $items = $cbs[0]; $bits = $cbs[1]; if ($bits < 0) { return -1; } $ver = $this->getMinimumVersion((int) (($bits + 7) / 8), $this->level); if ($ver < 0) { return -1; } elseif ($ver > $this->version) { $this->version = $ver; } else { break; } } goto NfMLT; NfMLT: return $items; goto XqJL1; XqJL1: } protected function appendPaddingBit($bstream) { goto q6eBb; f7K97: $padding = $this->appendNum($padding, $words * 8 - $bits + 4, 0); goto RwcPK; Bpmil: $padding = array(); goto f7K97; tInep: $maxwords = $this->getDataLength($this->version, $this->level); goto B13_0; RwcPK: $padlen = $maxwords - $words; goto VIBqj; yLMq2: if ($maxbits - $bits < 5) { return $this->appendNum($bstream, $maxbits - $bits, 0); } goto nWmR5; TFfvh: return $this->appendBitstream($bstream, $padding); goto PtfQp; nWmR5: $bits += 4; goto m6dKx; VIBqj: if ($padlen > 0) { goto uuvJa; uuvJa: $padbuf = array(); goto gbIkV; TKiXh: $padding = $this->appendBytes($padding, $padlen, $padbuf); goto YsBAC; gbIkV: for ($i = 0; $i < $padlen; ++$i) { $padbuf[$i] = $i & 1 ? 0x11 : 0xec; } goto TKiXh; YsBAC: } goto TFfvh; JDg8h: if ($maxbits == $bits) { return 0; } goto yLMq2; m6dKx: $words = (int) (($bits + 7) / 8); goto Bpmil; B13_0: $maxbits = $maxwords * 8; goto JDg8h; q6eBb: $bits = count($bstream); goto tInep; PtfQp: } protected function mergeBitStream($items) { goto kOkOb; Wn44Z: $bstream = array(); goto JVqB5; bfxyK: return $bstream; goto Q3mL5; JVqB5: foreach ($items as $item) { $bstream = $this->appendBitstream($bstream, $item["\142\163\x74\x72\145\x61\x6d"]); } goto bfxyK; kOkOb: $items = $this->convertData($items); goto Wn44Z; Q3mL5: } protected function getBitStream($items) { $bstream = $this->mergeBitStream($items); return $this->appendPaddingBit($bstream); } protected function getByteStream($items) { $bstream = $this->getBitStream($items); return $this->bitstreamToByte($bstream); } protected function allocate($setLength) { return array_fill(0, $setLength, 0); } protected function newFromNum($bits, $num) { goto U6jG6; U6jG6: $bstream = $this->allocate($bits); goto V2gIQ; CAyyb: return $bstream; goto xV8p2; V2gIQ: $mask = 1 << $bits - 1; goto sSfmd; sSfmd: for ($i = 0; $i < $bits; ++$i) { if ($num & $mask) { $bstream[$i] = 1; } else { $bstream[$i] = 0; } $mask = $mask >> 1; } goto CAyyb; xV8p2: } protected function newFromBytes($size, $data) { goto ZkNjD; tEMiG: for ($i = 0; $i < $size; ++$i) { $mask = 0x80; for ($j = 0; $j < 8; ++$j) { if ($data[$i] & $mask) { $bstream[$p] = 1; } else { $bstream[$p] = 0; } $p++; $mask = $mask >> 1; } } goto XDEbf; XDEbf: return $bstream; goto P0drS; ZkNjD: $bstream = $this->allocate($size * 8); goto QQiR6; QQiR6: $p = 0; goto tEMiG; P0drS: } protected function appendBitstream($bitstream, $append) { goto rarbf; hf1pl: if (count($bitstream) == 0) { return $append; } goto fuU1Y; rarbf: if (!is_array($append) or count($append) == 0) { return $bitstream; } goto hf1pl; fuU1Y: return array_values(array_merge($bitstream, $append)); goto EM4_j; EM4_j: } protected function appendNum($bitstream, $bits, $num) { goto QH_Kn; AfrQX: return $this->appendBitstream($bitstream, $b); goto KPE04; QH_Kn: if ($bits == 0) { return 0; } goto LIWjt; LIWjt: $b = $this->newFromNum($bits, $num); goto AfrQX; KPE04: } protected function appendBytes($bitstream, $size, $data) { goto pkEHt; pOKfo: return $this->appendBitstream($bitstream, $b); goto oILXK; jjZ6Q: $b = $this->newFromBytes($size, $data); goto pOKfo; pkEHt: if ($size == 0) { return 0; } goto jjZ6Q; oILXK: } protected function bitstreamToByte($bstream) { goto js6Bg; e4t6e: if ($size & 7) { goto IQ__M; weO0g: $data[$bytes] = $v; goto vpvd7; IQ__M: $v = 0; goto H3bOk; H3bOk: for ($j = 0; $j < ($size & 7); $j++) { $v = $v << 1; $v |= $bstream[$p]; $p++; } goto weO0g; vpvd7: } goto Ufm2z; f9O3L: $p = 0; goto k_utJ; Ufm2z: return $data; goto C_oyN; js6Bg: $size = count($bstream); goto wFBGt; wFBGt: if ($size == 0) { return array(); } goto klPL0; k_utJ: for ($i = 0; $i < $bytes; $i++) { $v = 0; for ($j = 0; $j < 8; $j++) { $v = $v << 1; $v |= $bstream[$p]; $p++; } $data[$i] = $v; } goto e4t6e; g7cxS: $bytes = (int) ($size / 8); goto f9O3L; klPL0: $data = array_fill(0, (int) (($size + 7) / 8), 0); goto g7cxS; C_oyN: } protected function qrstrset($srctab, $x, $y, $repl, $replLen = false) { $srctab[$y] = substr_replace($srctab[$y], $replLen !== false ? substr($repl, 0, $replLen) : $repl, $x, $replLen !== false ? $replLen : strlen($repl)); return $srctab; } protected function getDataLength($version, $level) { return $this->capacity[$version][QRCAP_WORDS] - $this->capacity[$version][QRCAP_EC][$level]; } protected function getECCLength($version, $level) { return $this->capacity[$version][QRCAP_EC][$level]; } protected function getWidth($version) { return $this->capacity[$version][QRCAP_WIDTH]; } protected function getRemainder($version) { return $this->capacity[$version][QRCAP_REMINDER]; } protected function getMinimumVersion($size, $level) { for ($i = 1; $i <= QRSPEC_VERSION_MAX; ++$i) { $words = $this->capacity[$i][QRCAP_WORDS] - $this->capacity[$i][QRCAP_EC][$level]; if ($words >= $size) { return $i; } } return -1; } protected function lengthIndicator($mode, $version) { goto RR9S3; Anbcm: if ($version <= 9) { $l = 0; } elseif ($version <= 26) { $l = 1; } else { $l = 2; } goto pjLc6; pjLc6: return $this->lengthTableBits[$mode][$l]; goto wj32g; RR9S3: if ($mode == QR_MODE_ST) { return 0; } goto Anbcm; wj32g: } protected function maximumWords($mode, $version) { goto MH3S0; MH3S0: if ($mode == QR_MODE_ST) { return 3; } goto NcIFO; TSPsv: if ($mode == QR_MODE_KJ) { $words *= 2; } goto ZHiTX; ez1ZA: $bits = $this->lengthTableBits[$mode][$l]; goto kYVVw; kYVVw: $words = (1 << $bits) - 1; goto TSPsv; ZHiTX: return $words; goto bUeLf; NcIFO: if ($version <= 9) { $l = 0; } else { if ($version <= 26) { $l = 1; } else { $l = 2; } } goto ez1ZA; bUeLf: } protected function getEccSpec($version, $level, $spec) { goto VoZ89; loCSB: if ($b2 == 0) { goto d0Ksv; d0Ksv: $spec[0] = $b1; goto jIYNx; jIYNx: $spec[1] = (int) ($data / $b1); goto JjzVA; Cm1_l: $spec[4] = 0; goto i3kEW; Vbbqh: $spec[3] = 0; goto Cm1_l; JjzVA: $spec[2] = (int) ($ecc / $b1); goto Vbbqh; i3kEW: } else { goto HQs5r; IvwJS: $spec[1] = (int) ($data / ($b1 + $b2)); goto gV8Ac; mUMtl: $spec[3] = $b2; goto vM98P; gV8Ac: $spec[2] = (int) ($ecc / ($b1 + $b2)); goto mUMtl; HQs5r: $spec[0] = $b1; goto IvwJS; vM98P: $spec[4] = $spec[1] + 1; goto VjUBB; VjUBB: } goto I6Q7C; b2LXf: $b2 = $this->eccTable[$version][$level][1]; goto vEXAl; TCbFr: $b1 = $this->eccTable[$version][$level][0]; goto b2LXf; b0wIJ: $ecc = $this->getECCLength($version, $level); goto loCSB; vEXAl: $data = $this->getDataLength($version, $level); goto b0wIJ; I6Q7C: return $spec; goto Rgiov; VoZ89: if (count($spec) < 5) { $spec = array(0, 0, 0, 0, 0); } goto TCbFr; Rgiov: } protected function putAlignmentMarker($frame, $ox, $oy) { goto qPQl9; qPQl9: $finder = array("\xa1\xa1\xa1\241\xa1", "\241\240\240\240\241", "\xa1\240\241\240\xa1", "\241\240\240\240\241", "\241\241\xa1\241\241"); goto feY2m; feY2m: $yStart = $oy - 2; goto nNiuZ; Nk9j5: for ($y = 0; $y < 5; $y++) { $frame = $this->qrstrset($frame, $xStart, $yStart + $y, $finder[$y]); } goto EYiPv; EYiPv: return $frame; goto TxVAw; nNiuZ: $xStart = $ox - 2; goto Nk9j5; TxVAw: } protected function putAlignmentPattern($version, $frame, $width) { goto WexAY; rOwZu: for ($x = 1; $x < $wo; ++$x) { $frame = $this->putAlignmentMarker($frame, 6, $cx); $frame = $this->putAlignmentMarker($frame, $cx, 6); $cx += $d; } goto MjSUg; rTdiZ: $wo = $w - 1; goto rOwZu; w1rzn: return $frame; goto BIodJ; BDaCJ: $cx = $this->alignmentPattern[$version][0]; goto rTdiZ; MjSUg: $cy = $this->alignmentPattern[$version][0]; goto slSwJ; RAIIl: if ($w * $w - 3 == 1) { goto wvSRU; OCr9N: $y = $this->alignmentPattern[$version][0]; goto zh5zr; wvSRU: $x = $this->alignmentPattern[$version][0]; goto OCr9N; zh5zr: $frame = $this->putAlignmentMarker($frame, $x, $y); goto Plz7f; Plz7f: return $frame; goto WuA2f; WuA2f: } goto BDaCJ; v1rth: $d = $this->alignmentPattern[$version][1] - $this->alignmentPattern[$version][0]; goto SsoLH; slSwJ: for ($y = 0; $y < $wo; ++$y) { $cx = $this->alignmentPattern[$version][0]; for ($x = 0; $x < $wo; ++$x) { $frame = $this->putAlignmentMarker($frame, $cx, $cy); $cx += $d; } $cy += $d; } goto w1rzn; SsoLH: if ($d < 0) { $w = 2; } else { $w = (int) (($width - $this->alignmentPattern[$version][0]) / $d + 2); } goto RAIIl; WexAY: if ($version < 2) { return $frame; } goto v1rth; BIodJ: } protected function getVersionPattern($version) { if ($version < 7 or $version > QRSPEC_VERSION_MAX) { return 0; } return $this->versionPattern[$version - 7]; } protected function getFormatInfo($mask, $level) { goto il_37; il_37: if ($mask < 0 or $mask > 7) { return 0; } goto b5wRk; b5wRk: if ($level < 0 or $level > 3) { return 0; } goto in4lB; in4lB: return $this->formatInfo[$level][$mask]; goto TIKw_; TIKw_: } protected function putFinderPattern($frame, $ox, $oy) { goto rHFh2; Ljni5: return $frame; goto XVmLQ; rHFh2: $finder = array("\301\xc1\xc1\301\301\xc1\xc1", "\301\xc0\xc0\300\300\300\301", "\xc1\xc0\xc1\301\xc1\300\xc1", "\xc1\xc0\301\xc1\xc1\xc0\301", "\301\xc0\xc1\xc1\xc1\xc0\xc1", "\xc1\300\300\300\xc0\300\xc1", "\301\301\301\xc1\301\301\xc1"); goto B9a4k; B9a4k: for ($y = 0; $y < 7; $y++) { $frame = $this->qrstrset($frame, $ox, $oy + $y, $finder[$y]); } goto Ljni5; XVmLQ: } protected function createFrame($version) { goto jtQbh; tnfw5: $yOffset = $width - 7; goto H_J6g; XNAN1: $frame = $this->qrstrset($frame, 0, $width - 8, $setPattern); goto BewEY; kvPQJ: $frame = array_fill(0, $width, $frameLine); goto EKL4R; BewEY: $setPattern = str_repeat("\x84", 9); goto u4PqM; u4PqM: $frame = $this->qrstrset($frame, 0, 8, $setPattern); goto lEK2v; ohWuz: $frame = $this->putAlignmentPattern($version, $frame, $width); goto zrKlq; jtQbh: $width = $this->capacity[$version][QRCAP_WIDTH]; goto tIkk_; jqfZb: for ($i = 1; $i < $wo; ++$i) { $frame[6][7 + $i] = chr(0x90 | $i & 1); $frame[7 + $i][6] = chr(0x90 | $i & 1); } goto ohWuz; EKL4R: $frame = $this->putFinderPattern($frame, 0, 0); goto b_RRq; gfPEO: $frame = $this->qrstrset($frame, $width - 8, 7, $setPattern); goto XNAN1; Md4hl: for ($y = 0; $y < 8; ++$y, ++$yOffset) { $frame[$y][8] = "\204"; $frame[$yOffset][8] = "\204"; } goto euEDb; lEK2v: $frame = $this->qrstrset($frame, $width - 8, 8, $setPattern, 8); goto Y4kHm; adUHN: $frame = $this->putFinderPattern($frame, 0, $width - 7); goto tnfw5; opGL4: return $frame; goto O6wkS; t5cTa: $setPattern = str_repeat("\xc0", 8); goto UNxVu; euEDb: $wo = $width - 15; goto jqfZb; tIkk_: $frameLine = str_repeat("\0", $width); goto kvPQJ; bTwnG: $frame[$width - 8][8] = "\x81"; goto opGL4; Y4kHm: $yOffset = $width - 8; goto Md4hl; H_J6g: for ($y = 0; $y < 7; ++$y) { $frame[$y][7] = "\xc0"; $frame[$y][$width - 8] = "\300"; $frame[$yOffset][7] = "\300"; ++$yOffset; } goto t5cTa; UNxVu: $frame = $this->qrstrset($frame, 0, 7, $setPattern); goto gfPEO; zrKlq: if ($version >= 7) { goto V6Fgg; V6Fgg: $vinf = $this->getVersionPattern($version); goto Uy1dD; Uy1dD: $v = $vinf; goto JY0Ag; FDeVw: for ($y = 0; $y < 6; ++$y) { for ($x = 0; $x < 3; ++$x) { $frame[$y][$x + ($width - 11)] = chr(0x88 | $v & 1); $v = $v >> 1; } } goto D45oB; SNGJ7: $v = $vinf; goto FDeVw; JY0Ag: for ($x = 0; $x < 6; ++$x) { for ($y = 0; $y < 3; ++$y) { $frame[$width - 11 + $y][$x] = chr(0x88 | $v & 1); $v = $v >> 1; } } goto SNGJ7; D45oB: } goto bTwnG; b_RRq: $frame = $this->putFinderPattern($frame, $width - 7, 0); goto adUHN; O6wkS: } protected function newFrame($version) { goto aQ8i2; RiOA3: return $this->frames[$version]; goto Kbvza; x02UO: if (is_null($this->frames[$version])) { return NULL; } goto RiOA3; aQ8i2: if ($version < 1 or $version > QRSPEC_VERSION_MAX) { return NULL; } goto ny6E3; ny6E3: if (!isset($this->frames[$version])) { $this->frames[$version] = $this->createFrame($version); } goto x02UO; Kbvza: } protected function rsBlockNum($spec) { return $spec[0] + $spec[3]; } protected function rsBlockNum1($spec) { return $spec[0]; } protected function rsDataCodes1($spec) { return $spec[1]; } protected function rsEccCodes1($spec) { return $spec[2]; } protected function rsBlockNum2($spec) { return $spec[3]; } protected function rsDataCodes2($spec) { return $spec[4]; } protected function rsEccCodes2($spec) { return $spec[2]; } protected function rsDataLength($spec) { return $spec[0] * $spec[1] + $spec[3] * $spec[4]; } protected function rsEccLength($spec) { return ($spec[0] + $spec[3]) * $spec[2]; } protected function init_rs($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) { goto LvNae; G_kJp: return $rs; goto rcLHF; Yd5Vl: $rs = $this->init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad); goto i9XdZ; LvNae: foreach ($this->rsitems as $rs) { if ($rs["\160\x61\144"] != $pad or $rs["\156\x72\x6f\x6f\164\163"] != $nroots or $rs["\x6d\x6d"] != $symsize or $rs["\x67\146\160\x6f\154\x79"] != $gfpoly or $rs["\x66\x63\x72"] != $fcr or $rs["\160\162\151\x6d"] != $prim) { continue; } return $rs; } goto Yd5Vl; i9XdZ: array_unshift($this->rsitems, $rs); goto G_kJp; rcLHF: } protected function modnn($rs, $x) { while ($x >= $rs["\x6e\x6e"]) { $x -= $rs["\156\x6e"]; $x = ($x >> $rs["\155\x6d"]) + ($x & $rs["\x6e\156"]); } return $x; } protected function init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) { goto t_8vz; GIP_x: $rs["\156\x6e"] = (1 << $symsize) - 1; goto N1dG8; M27aZ: $rs["\x69\160\162\x69\155"] = (int) ($iprim / $prim); goto hFuSt; YpGOz: $rs["\141\x6c\x70\150\141\x5f\164\x6f"][$A0] = 0; goto NuwKC; B7iUJ: $rs["\147\145\x6e\x70\x6f\x6c\x79"] = array_fill(0, $nroots + 1, 0); goto LU6aD; u3GQg: for ($i = 0; $i <= $nroots; ++$i) { $rs["\147\145\156\160\x6f\x6c\x79"][$i] = $rs["\x69\156\x64\145\x78\x5f\157\146"][$rs["\x67\145\x6e\x70\x6f\x6c\171"][$i]]; } goto wA292; Ml2fo: for ($i = 0, $root = $fcr * $prim; $i < $nroots; $i++, $root += $prim) { $rs["\147\x65\x6e\160\x6f\x6c\171"][$i + 1] = 1; for ($j = $i; $j > 0; --$j) { if ($rs["\147\145\156\x70\157\154\x79"][$j] != 0) { $rs["\147\x65\x6e\160\x6f\x6c\x79"][$j] = $rs["\147\145\156\x70\x6f\x6c\171"][$j - 1] ^ $rs["\x61\x6c\x70\150\141\137\164\x6f"][$this->modnn($rs, $rs["\151\156\x64\145\x78\137\157\x66"][$rs["\147\x65\156\160\157\154\171"][$j]] + $root)]; } else { $rs["\147\x65\156\x70\x6f\x6c\x79"][$j] = $rs["\x67\145\156\160\157\x6c\171"][$j - 1]; } } $rs["\147\x65\x6e\x70\157\154\171"][0] = $rs["\141\x6c\x70\150\141\x5f\x74\x6f"][$this->modnn($rs, $rs["\151\156\x64\145\170\x5f\157\146"][$rs["\x67\x65\x6e\x70\x6f\154\x79"][0]] + $root)]; } goto u3GQg; A2vx3: for ($iprim = 1; $iprim % $prim != 0; $iprim += $rs["\156\156"]) { } goto M27aZ; LU6aD: $rs["\146\x63\162"] = $fcr; goto hwHPo; lL7mQ: $rs["\141\x6c\x70\x68\141\137\x74\157"] = array_fill(0, $rs["\x6e\x6e"] + 1, 0); goto s8w0E; t_8vz: $rs = null; goto n8PAL; s8w0E: $rs["\151\x6e\x64\145\x78\137\x6f\x66"] = array_fill(0, $rs["\x6e\x6e"] + 1, 0); goto fzhGQ; STfay: for ($i = 0; $i < $rs["\x6e\156"]; ++$i) { $rs["\151\x6e\144\145\170\137\157\x66"][$sr] = $i; $rs["\141\154\x70\x68\x61\x5f\164\x6f"][$i] = $sr; $sr <<= 1; if ($sr & 1 << $symsize) { $sr ^= $gfpoly; } $sr &= $rs["\156\x6e"]; } goto OlU8u; rWa0W: if ($prim <= 0 or $prim >= 1 << $symsize) { return $rs; } goto I298X; hFuSt: $rs["\x67\145\156\160\x6f\x6c\x79"][0] = 1; goto Ml2fo; NlYPz: $rs["\156\162\x6f\x6f\x74\x73"] = $nroots; goto AKuRa; uixbD: if ($fcr < 0 or $fcr >= 1 << $symsize) { return $rs; } goto rWa0W; wA292: return $rs; goto tBI7L; hwHPo: $rs["\x70\162\151\x6d"] = $prim; goto NlYPz; I298X: if ($nroots < 0 or $nroots >= 1 << $symsize) { return $rs; } goto bdRaf; LnKUa: $rs["\x6d\155"] = $symsize; goto GIP_x; N1dG8: $rs["\160\141\x64"] = $pad; goto lL7mQ; vErc0: $A0 =& $NN; goto xlI7T; fzhGQ: $NN =& $rs["\156\x6e"]; goto vErc0; AKuRa: $rs["\x67\x66\160\x6f\x6c\x79"] = $gfpoly; goto A2vx3; NuwKC: $sr = 1; goto STfay; bdRaf: if ($pad < 0 or $pad >= (1 << $symsize) - 1 - $nroots) { return $rs; } goto XpPCn; xlI7T: $rs["\151\156\144\145\x78\137\157\146"][0] = $A0; goto YpGOz; XpPCn: $rs = array(); goto LnKUa; n8PAL: if ($symsize < 0 or $symsize > 8) { return $rs; } goto uixbD; OlU8u: if ($sr != 1) { return NULL; } goto B7iUJ; tBI7L: } protected function encode_rs_char($rs, $data, $parity) { goto Dowre; IWs4c: $NROOTS =& $rs["\x6e\x72\157\157\164\x73"]; goto AavrI; kgygr: $A0 =& $NN; goto AV8d3; dbXgs: $GENPOLY =& $rs["\147\145\x6e\160\x6f\154\x79"]; goto IWs4c; bILd0: $PRIM =& $rs["\x70\162\x69\155"]; goto K7kP2; oMhJY: $ALPHA_TO =& $rs["\x61\x6c\160\150\x61\137\164\x6f"]; goto dVUfu; K7kP2: $IPRIM =& $rs["\151\x70\162\151\x6d"]; goto D5GUV; d8erQ: for ($i = 0; $i < $NN - $NROOTS - $PAD; $i++) { $feedback = $INDEX_OF[$data[$i] ^ $parity[0]]; if ($feedback != $A0) { $feedback = $this->modnn($rs, $NN - $GENPOLY[$NROOTS] + $feedback); for ($j = 1; $j < $NROOTS; ++$j) { $parity[$j] ^= $ALPHA_TO[$this->modnn($rs, $feedback + $GENPOLY[$NROOTS - $j])]; } } array_shift($parity); if ($feedback != $A0) { array_push($parity, $ALPHA_TO[$this->modnn($rs, $feedback + $GENPOLY[0])]); } else { array_push($parity, 0); } } goto IJIrZ; AavrI: $FCR =& $rs["\x66\143\162"]; goto bILd0; qqapW: $NN =& $rs["\x6e\156"]; goto oMhJY; IJIrZ: return $parity; goto Ivhne; Dowre: $MM =& $rs["\155\x6d"]; goto qqapW; D5GUV: $PAD =& $rs["\x70\x61\144"]; goto kgygr; AV8d3: $parity = array_fill(0, $NROOTS, 0); goto d8erQ; dVUfu: $INDEX_OF =& $rs["\x69\x6e\x64\x65\x78\x5f\157\x66"]; goto dbXgs; Ivhne: } } }
