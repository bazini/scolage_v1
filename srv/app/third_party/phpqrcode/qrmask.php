<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:08              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto i1vUf; i1vUf: define("\x4e\x31", 3); goto tTIB1; n3Nj_: define("\x4e\x34", 10); goto B_gYq; HxtUq: define("\x4e\63", 40); goto n3Nj_; tTIB1: define("\x4e\x32", 3); goto HxtUq; B_gYq: class QRmask { public $runLength = array(); public function __construct() { $this->runLength = array_fill(0, QRSPEC_WIDTH_MAX + 1, 0); } public function writeFormatInformation($width, &$frame, $mask, $level) { goto ImKYx; AF0nz: for ($i = 0; $i < 7; $i++) { if ($format & 1) { $blacks += 2; $v = 0x85; } else { $v = 0x84; } $frame[$width - 7 + $i][8] = chr($v); if ($i == 0) { $frame[8][7] = chr($v); } else { $frame[8][6 - $i] = chr($v); } $format = $format >> 1; } goto ifi2o; YXvnD: for ($i = 0; $i < 8; $i++) { if ($format & 1) { $blacks += 2; $v = 0x85; } else { $v = 0x84; } $frame[8][$width - 1 - $i] = chr($v); if ($i < 6) { $frame[$i][8] = chr($v); } else { $frame[$i + 1][8] = chr($v); } $format = $format >> 1; } goto AF0nz; ifi2o: return $blacks; goto HmsYy; LFQxZ: $format = QRspec::getFormatInfo($mask, $level); goto YXvnD; ImKYx: $blacks = 0; goto LFQxZ; HmsYy: } public function mask0($x, $y) { return $x + $y & 1; } public function mask1($x, $y) { return $y & 1; } public function mask2($x, $y) { return $x % 3; } public function mask3($x, $y) { return ($x + $y) % 3; } public function mask4($x, $y) { return (int) ($y / 2) + (int) ($x / 3) & 1; } public function mask5($x, $y) { return ($x * $y & 1) + $x * $y % 3; } public function mask6($x, $y) { return ($x * $y & 1) + $x * $y % 3 & 1; } public function mask7($x, $y) { return $x * $y % 3 + ($x + $y & 1) & 1; } private function generateMaskNo($maskNo, $width, $frame) { goto NdTI5; au1MO: return $bitMask; goto Us5Ad; NdTI5: $bitMask = array_fill(0, $width, array_fill(0, $width, 0)); goto RsxqK; RsxqK: for ($y = 0; $y < $width; $y++) { for ($x = 0; $x < $width; $x++) { if (ord($frame[$y][$x]) & 0x80) { $bitMask[$y][$x] = 0; } else { $maskFunc = call_user_func(array($this, "\x6d\x61\x73\153" . $maskNo), $x, $y); $bitMask[$y][$x] = $maskFunc == 0 ? 1 : 0; } } } goto au1MO; Us5Ad: } public static function serial($bitFrame) { goto bhKJ1; bhKJ1: $codeArr = array(); goto XHsnA; XHsnA: foreach ($bitFrame as $line) { $codeArr[] = join('', $line); } goto vfo7N; vfo7N: return gzcompress(join("\xa", $codeArr), 9); goto Bwts1; Bwts1: } public static function unserial($code) { goto asmLm; zilTY: $codeLines = explode("\12", gzuncompress($code)); goto qSHli; asmLm: $codeArr = array(); goto zilTY; qSHli: foreach ($codeLines as $line) { $codeArr[] = str_split($line); } goto OvuMH; OvuMH: return $codeArr; goto XA4Sq; XA4Sq: } public function makeMaskNo($maskNo, $width, $s, &$d, $maskGenOnly = false) { goto lvQpx; WTX3F: return $b; goto y8fr6; Igja1: $bitMask = array(); goto U3Zhv; lvQpx: $b = 0; goto Igja1; xq1mv: if ($maskGenOnly) { return; } goto g1MpB; g1MpB: $d = $s; goto bE1Wd; bE1Wd: for ($y = 0; $y < $width; $y++) { for ($x = 0; $x < $width; $x++) { if ($bitMask[$y][$x] == 1) { $d[$y][$x] = chr(ord($s[$y][$x]) ^ (int) $bitMask[$y][$x]); } $b += (int) (ord($d[$y][$x]) & 1); } } goto WTX3F; U3Zhv: $fileName = QR_CACHE_DIR . "\x6d\141\x73\x6b\137" . $maskNo . DIRECTORY_SEPARATOR . "\155\141\163\153\137" . $width . "\137" . $maskNo . "\56\144\141\x74"; goto OOzmX; OOzmX: if (QR_CACHEABLE) { if (file_exists($fileName)) { $bitMask = self::unserial(file_get_contents($fileName)); } else { goto dVBFm; dVBFm: $bitMask = $this->generateMaskNo($maskNo, $width, $s, $d); goto lCIN1; zHQJO: file_put_contents($fileName, self::serial($bitMask)); goto iI_No; lCIN1: if (!file_exists(QR_CACHE_DIR . "\x6d\141\163\x6b\137" . $maskNo)) { mkdir(QR_CACHE_DIR . "\x6d\141\x73\153\x5f" . $maskNo); } goto zHQJO; iI_No: } } else { $bitMask = $this->generateMaskNo($maskNo, $width, $s, $d); } goto xq1mv; y8fr6: } public function makeMask($width, $frame, $maskNo, $level) { goto BvNkw; fF5nn: return $masked; goto vJa8J; BvNkw: $masked = array_fill(0, $width, str_repeat("\x0", $width)); goto CMX0d; m1gRA: $this->writeFormatInformation($width, $masked, $maskNo, $level); goto fF5nn; CMX0d: $this->makeMaskNo($maskNo, $width, $frame, $masked); goto m1gRA; vJa8J: } public function calcN1N3($length) { goto V2Y2T; V2Y2T: $demerit = 0; goto MtwAJ; Y7QAL: return $demerit; goto SjbRT; MtwAJ: for ($i = 0; $i < $length; $i++) { if ($this->runLength[$i] >= 5) { $demerit += N1 + ($this->runLength[$i] - 5); } if ($i & 1) { if ($i >= 3 && $i < $length - 2 && $this->runLength[$i] % 3 == 0) { $fact = (int) ($this->runLength[$i] / 3); if ($this->runLength[$i - 2] == $fact && $this->runLength[$i - 1] == $fact && $this->runLength[$i + 1] == $fact && $this->runLength[$i + 2] == $fact) { if ($this->runLength[$i - 3] < 0 || $this->runLength[$i - 3] >= 4 * $fact) { $demerit += N3; } else { if ($i + 3 >= $length || $this->runLength[$i + 3] >= 4 * $fact) { $demerit += N3; } } } } } } goto Y7QAL; SjbRT: } public function evaluateSymbol($width, $frame) { goto KuYKc; KuYKc: $head = 0; goto H5IGE; X94Sf: for ($y = 0; $y < $width; $y++) { $head = 0; $this->runLength[0] = 1; $frameY = $frame[$y]; if ($y > 0) { $frameYM = $frame[$y - 1]; } for ($x = 0; $x < $width; $x++) { if ($x > 0 && $y > 0) { goto ITR6f; s0wv9: if (($b22 | $w22 ^ 1) & 1) { $demerit += N2; } goto yw91o; ITR6f: $b22 = ord($frameY[$x]) & ord($frameY[$x - 1]) & ord($frameYM[$x]) & ord($frameYM[$x - 1]); goto phEtF; phEtF: $w22 = ord($frameY[$x]) | ord($frameY[$x - 1]) | ord($frameYM[$x]) | ord($frameYM[$x - 1]); goto s0wv9; yw91o: } if ($x == 0 && ord($frameY[$x]) & 1) { goto fsnni; fsnni: $this->runLength[0] = -1; goto lVmsL; lVmsL: $head = 1; goto gnm8Y; gnm8Y: $this->runLength[$head] = 1; goto FGfUk; FGfUk: } else { if ($x > 0) { if ((ord($frameY[$x]) ^ ord($frameY[$x - 1])) & 1) { $head++; $this->runLength[$head] = 1; } else { $this->runLength[$head]++; } } } } $demerit += $this->calcN1N3($head + 1); } goto fslII; Z_Gom: return $demerit; goto UBBhE; fslII: for ($x = 0; $x < $width; $x++) { $head = 0; $this->runLength[0] = 1; for ($y = 0; $y < $width; $y++) { if ($y == 0 && ord($frame[$y][$x]) & 1) { goto YH5bI; YH5bI: $this->runLength[0] = -1; goto uEizc; uEizc: $head = 1; goto DrZGm; DrZGm: $this->runLength[$head] = 1; goto hfjoi; hfjoi: } else { if ($y > 0) { if ((ord($frame[$y][$x]) ^ ord($frame[$y - 1][$x])) & 1) { $head++; $this->runLength[$head] = 1; } else { $this->runLength[$head]++; } } } } $demerit += $this->calcN1N3($head + 1); } goto Z_Gom; H5IGE: $demerit = 0; goto X94Sf; UBBhE: } public function mask($width, $frame, $level) { goto Yi69q; MLrIX: $bestMask = $frame; goto jUoVK; VM0iD: $checked_masks = array(0, 1, 2, 3, 4, 5, 6, 7); goto czwwE; jUoVK: foreach ($checked_masks as $i) { goto AVOL9; vqbki: $blacks = $this->makeMaskNo($i, $width, $frame, $mask); goto bu6rj; joY1d: $blacks = 0; goto vqbki; lLFus: $blacks = (int) (100 * $blacks / ($width * $width)); goto tMUT5; gxuQ_: $demerit += $this->evaluateSymbol($width, $mask); goto tPriS; AVOL9: $mask = array_fill(0, $width, str_repeat("\x0", $width)); goto F4vgE; tPriS: if ($demerit < $minDemerit) { goto WVbXO; WVbXO: $minDemerit = $demerit; goto AU3sA; AU3sA: $bestMask = $mask; goto TZYlm; TZYlm: $bestMaskNum = $i; goto Z4rTX; Z4rTX: } goto A6pjk; bu6rj: $blacks += $this->writeFormatInformation($width, $mask, $i, $level); goto lLFus; tMUT5: $demerit = (int) ((int) (abs($blacks - 50) / 5) * N4); goto gxuQ_; F4vgE: $demerit = 0; goto joY1d; A6pjk: } goto nyQdL; Yi69q: $minDemerit = PHP_INT_MAX; goto EMvot; nyQdL: return $bestMask; goto kJKa1; czwwE: if (QR_FIND_FROM_RANDOM !== false) { $howManuOut = 8 - QR_FIND_FROM_RANDOM % 9; for ($i = 0; $i < $howManuOut; $i++) { $remPos = rand(0, count($checked_masks) - 1); unset($checked_masks[$remPos]); $checked_masks = array_values($checked_masks); } } goto MLrIX; KBllQ: $bestMask = array(); goto VM0iD; EMvot: $bestMaskNum = 0; goto KBllQ; kJKa1: } }
