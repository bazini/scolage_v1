<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Best_Fit { protected $error = false; protected $bestFitType = "\165\x6e\144\x65\x74\x65\x72\155\x69\x6e\x65\x64"; protected $valueCount = 0; protected $xValues = array(); protected $yValues = array(); protected $adjustToZero = false; protected $yBestFitValues = array(); protected $goodnessOfFit = 1; protected $stdevOfResiduals = 0; protected $covariance = 0; protected $correlation = 0; protected $SSRegression = 0; protected $SSResiduals = 0; protected $DFResiduals = 0; protected $f = 0; protected $slope = 0; protected $slopeSE = 0; protected $intersect = 0; protected $intersectSE = 0; protected $xOffset = 0; protected $yOffset = 0; public function getError() { return $this->error; } public function getBestFitType() { return $this->bestFitType; } public function getValueOfYForX($xValue) { return false; } public function getValueOfXForY($yValue) { return false; } public function getXValues() { return $this->xValues; } public function getEquation($dp = 0) { return false; } public function getSlope($dp = 0) { if ($dp != 0) { return round($this->slope, $dp); } return $this->slope; } public function getSlopeSE($dp = 0) { if ($dp != 0) { return round($this->slopeSE, $dp); } return $this->slopeSE; } public function getIntersect($dp = 0) { if ($dp != 0) { return round($this->intersect, $dp); } return $this->intersect; } public function getIntersectSE($dp = 0) { if ($dp != 0) { return round($this->intersectSE, $dp); } return $this->intersectSE; } public function getGoodnessOfFit($dp = 0) { if ($dp != 0) { return round($this->goodnessOfFit, $dp); } return $this->goodnessOfFit; } public function getGoodnessOfFitPercent($dp = 0) { if ($dp != 0) { return round($this->goodnessOfFit * 100, $dp); } return $this->goodnessOfFit * 100; } public function getStdevOfResiduals($dp = 0) { if ($dp != 0) { return round($this->stdevOfResiduals, $dp); } return $this->stdevOfResiduals; } public function getSSRegression($dp = 0) { if ($dp != 0) { return round($this->SSRegression, $dp); } return $this->SSRegression; } public function getSSResiduals($dp = 0) { if ($dp != 0) { return round($this->SSResiduals, $dp); } return $this->SSResiduals; } public function getDFResiduals($dp = 0) { if ($dp != 0) { return round($this->DFResiduals, $dp); } return $this->DFResiduals; } public function getF($dp = 0) { if ($dp != 0) { return round($this->f, $dp); } return $this->f; } public function getCovariance($dp = 0) { if ($dp != 0) { return round($this->covariance, $dp); } return $this->covariance; } public function getCorrelation($dp = 0) { if ($dp != 0) { return round($this->correlation, $dp); } return $this->correlation; } public function getYBestFitValues() { return $this->yBestFitValues; } protected function calculateGoodnessOfFit($sumX, $sumY, $sumX2, $sumY2, $sumXY, $meanX, $meanY, $const) { goto gdvLX; XAuXI: if ($SStot == 0.0 || $SSres == $SStot) { $this->goodnessOfFit = 1; } else { $this->goodnessOfFit = 1 - $SSres / $SStot; } goto l96fe; LTyRA: $this->correlation = ($this->valueCount * $sumXY - $sumX * $sumY) / sqrt(($this->valueCount * $sumX2 - pow($sumX, 2)) * ($this->valueCount * $sumY2 - pow($sumY, 2))); goto c10Hm; l96fe: $this->SSRegression = $this->goodnessOfFit * $SStot; goto pQc0v; XtnZI: $this->SSResiduals = $SSres; goto xXaWz; xXaWz: $this->DFResiduals = $this->valueCount - 1 - $const; goto N44hi; r34P6: foreach ($this->xValues as $xKey => $xValue) { goto lvrZD; Vd4x9: if ($const) { $SStot += ($this->yValues[$xKey] - $meanY) * ($this->yValues[$xKey] - $meanY); } else { $SStot += $this->yValues[$xKey] * $this->yValues[$xKey]; } goto IbJYK; auwtL: if ($const) { $SSsex += ($this->xValues[$xKey] - $meanX) * ($this->xValues[$xKey] - $meanX); } else { $SSsex += $this->xValues[$xKey] * $this->xValues[$xKey]; } goto kkjQ1; lvrZD: $bestFitY = $this->yBestFitValues[$xKey] = $this->getValueOfYForX($xValue); goto yNFcL; yNFcL: $SSres += ($this->yValues[$xKey] - $bestFitY) * ($this->yValues[$xKey] - $bestFitY); goto Vd4x9; IbJYK: $SScov += ($this->xValues[$xKey] - $meanX) * ($this->yValues[$xKey] - $meanY); goto auwtL; kkjQ1: } goto XtnZI; vBbp1: $this->intersectSE = $this->stdevOfResiduals * sqrt(1 / ($this->valueCount - $sumX * $sumX / $sumX2)); goto BJhRP; pQc0v: $this->covariance = $SScov / $this->valueCount; goto LTyRA; c10Hm: $this->slopeSE = $this->stdevOfResiduals / sqrt($SSsex); goto vBbp1; N44hi: if ($this->DFResiduals == 0.0) { $this->stdevOfResiduals = 0.0; } else { $this->stdevOfResiduals = sqrt($SSres / $this->DFResiduals); } goto XAuXI; BJhRP: if ($this->SSResiduals != 0.0) { if ($this->DFResiduals == 0.0) { $this->f = 0.0; } else { $this->f = $this->SSRegression / ($this->SSResiduals / $this->DFResiduals); } } else { if ($this->DFResiduals == 0.0) { $this->f = 0.0; } else { $this->f = $this->SSRegression / $this->DFResiduals; } } goto XYxWt; gdvLX: $SSres = $SScov = $SScor = $SStot = $SSsex = 0.0; goto r34P6; XYxWt: } protected function leastSquareFit($yValues, $xValues, $const) { goto ZkcaY; bz8Pt: $meanX = $x_sum / $this->valueCount; goto dZjgt; ElFQz: $mBase = $mDivisor = $xx_sum = $xy_sum = $yy_sum = 0.0; goto QQ0T7; QQ0T7: for ($i = 0; $i < $this->valueCount; ++$i) { $xy_sum += $xValues[$i] * $yValues[$i]; $xx_sum += $xValues[$i] * $xValues[$i]; $yy_sum += $yValues[$i] * $yValues[$i]; if ($const) { $mBase += ($xValues[$i] - $meanX) * ($yValues[$i] - $meanY); $mDivisor += ($xValues[$i] - $meanX) * ($xValues[$i] - $meanX); } else { $mBase += $xValues[$i] * $yValues[$i]; $mDivisor += $xValues[$i] * $xValues[$i]; } } goto NI8n0; NI8n0: $this->slope = $mBase / $mDivisor; goto QHel3; ZkcaY: $x_sum = array_sum($xValues); goto ydq6a; qe6Oi: $this->calculateGoodnessOfFit($x_sum, $y_sum, $xx_sum, $yy_sum, $xy_sum, $meanX, $meanY, $const); goto CuxtE; QHel3: if ($const) { $this->intersect = $meanY - $this->slope * $meanX; } else { $this->intersect = 0; } goto qe6Oi; ydq6a: $y_sum = array_sum($yValues); goto bz8Pt; dZjgt: $meanY = $y_sum / $this->valueCount; goto ElFQz; CuxtE: } public function __construct($yValues, $xValues = array(), $const = true) { goto oZRUi; oZRUi: $nY = count($yValues); goto CiUxh; v1Ic2: $this->yValues = $yValues; goto iOigQ; a0Ybl: if ($nX == 0) { $xValues = range(1, $nY); $nX = $nY; } elseif ($nY != $nX) { $this->error = true; return false; } goto VfC_1; VfC_1: $this->valueCount = $nY; goto LyBat; CiUxh: $nX = count($xValues); goto a0Ybl; LyBat: $this->xValues = $xValues; goto v1Ic2; iOigQ: } }
