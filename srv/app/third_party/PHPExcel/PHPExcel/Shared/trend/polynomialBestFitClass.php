<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto F98O7; jOcH9: require_once PHPEXCEL_ROOT . "\120\110\x50\105\170\x63\145\x6c\x2f\x53\150\141\x72\x65\x64\57\112\101\x4d\101\57\115\141\164\162\x69\x78\56\160\x68\160"; goto PmbVl; F98O7: require_once PHPEXCEL_ROOT . "\x50\x48\x50\105\x78\143\145\x6c\57\x53\150\x61\x72\x65\144\57\164\162\145\156\x64\57\142\x65\163\x74\x46\151\x74\x43\x6c\x61\163\163\x2e\160\150\160"; goto jOcH9; PmbVl: class PHPExcel_Polynomial_Best_Fit extends PHPExcel_Best_Fit { protected $bestFitType = "\x70\x6f\154\171\156\x6f\155\x69\141\x6c"; protected $order = 0; public function getOrder() { return $this->order; } public function getValueOfYForX($xValue) { goto zPv2N; PYAip: foreach ($slope as $key => $value) { if ($value != 0.0) { $retVal += $value * pow($xValue, $key + 1); } } goto ZVUe1; zPv2N: $retVal = $this->getIntersect(); goto JZJ8z; ZVUe1: return $retVal; goto kXL8W; JZJ8z: $slope = $this->getSlope(); goto PYAip; kXL8W: } public function getValueOfXForY($yValue) { return ($yValue - $this->getIntersect()) / $this->getSlope(); } public function getEquation($dp = 0) { goto ipK8F; MhNZw: return $equation; goto Q9AK9; ipK8F: $slope = $this->getSlope($dp); goto Otqzu; PFEm4: foreach ($slope as $key => $value) { if ($value != 0.0) { $equation .= "\40\53\40" . $value . "\40\x2a\x20\130"; if ($key > 0) { $equation .= "\136" . ($key + 1); } } } goto MhNZw; Otqzu: $intersect = $this->getIntersect($dp); goto sEYqV; sEYqV: $equation = "\131\x20\75\x20" . $intersect; goto PFEm4; Q9AK9: } public function getSlope($dp = 0) { if ($dp != 0) { goto VzOyJ; VzOyJ: $coefficients = array(); goto UklCM; ylc40: return $coefficients; goto Hu1UK; UklCM: foreach ($this->_slope as $coefficient) { $coefficients[] = round($coefficient, $dp); } goto ylc40; Hu1UK: } return $this->_slope; } public function getCoefficients($dp = 0) { return array_merge(array($this->getIntersect($dp)), $this->getSlope($dp)); } private function polynomialRegression($order, $yValues, $xValues, $const) { goto P6ZK6; KNcjk: $this->intersect = array_shift($coefficients); goto BCEpc; LGhqL: $matrixA = new Matrix($A); goto ujmn5; PvsFi: $this->calculateGoodnessOfFit($x_sum, $y_sum, $xx_sum, $yy_sum, $xy_sum); goto Koixr; kNrUA: for ($i = 0; $i < $this->valueCount; ++$i) { for ($j = 0; $j <= $order; ++$j) { $A[$i][$j] = pow($xValues[$i], $j); } } goto U5wfn; Lrmg1: $y_sum = array_sum($yValues); goto kwFG9; ujmn5: $matrixB = new Matrix($B); goto SH11K; BCEpc: $this->_slope = $coefficients; goto PvsFi; SH11K: $C = $matrixA->solve($matrixB); goto zfW3K; lfc6l: for ($i = 0; $i < $this->valueCount; ++$i) { $xy_sum += $xValues[$i] * $yValues[$i]; $xx_sum += $xValues[$i] * $xValues[$i]; $yy_sum += $yValues[$i] * $yValues[$i]; } goto kNrUA; rEXb6: for ($i = 0; $i < $C->m; ++$i) { $r = $C->get($i, 0); if (abs($r) <= pow(10, -9)) { $r = 0; } $coefficients[] = $r; } goto KNcjk; zfW3K: $coefficients = array(); goto rEXb6; P6ZK6: $x_sum = array_sum($xValues); goto Lrmg1; U5wfn: for ($i = 0; $i < $this->valueCount; ++$i) { $B[$i] = array($yValues[$i]); } goto LGhqL; kwFG9: $xx_sum = $xy_sum = 0; goto lfc6l; Koixr: foreach ($this->xValues as $xKey => $xValue) { $this->yBestFitValues[$xKey] = $this->getValueOfYForX($xValue); } goto YczJF; YczJF: } public function __construct($order, $yValues, $xValues = array(), $const = true) { if (parent::__construct($yValues, $xValues) !== false) { if ($order < $this->valueCount) { goto cZyOZ; cZyOZ: $this->bestFitType .= "\137" . $order; goto vU1SX; W2uc5: if ($this->getGoodnessOfFit() < 0.0 || $this->getGoodnessOfFit() > 1.0) { $this->_error = true; } goto TWITD; PN9mx: $this->polynomialRegression($order, $yValues, $xValues, $const); goto W2uc5; vU1SX: $this->order = $order; goto PN9mx; TWITD: } else { $this->_error = true; } } } }
