<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:03              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Shared_OLE_ChainedBlockStream { public $ole; public $params; public $data; public $pos; public function stream_open($path, $mode, $options, &$openedPath) { goto TwMCr; Kz9G6: if (isset($this->params["\163\151\x7a\145"])) { $this->data = substr($this->data, 0, $this->params["\163\x69\x7a\145"]); } goto N0Cci; TwMCr: if ($mode != "\x72") { if ($options & STREAM_REPORT_ERRORS) { trigger_error("\117\156\154\x79\x20\x72\145\141\144\x69\156\147\40\151\163\x20\163\165\160\160\157\x72\x74\x65\144", E_USER_WARNING); } return false; } goto dNH92; dNH92: parse_str(substr($path, 25), $this->params); goto JVbB3; JVbB3: if (!isset($this->params["\157\154\x65\111\x6e\163\164\x61\x6e\x63\x65\111\x64"], $this->params["\x62\x6c\157\143\153\111\144"], $GLOBALS["\x5f\x4f\x4c\x45\137\111\x4e\123\x54\x41\x4e\103\x45\x53"][$this->params["\157\x6c\x65\111\x6e\163\164\141\156\x63\145\111\x64"]])) { if ($options & STREAM_REPORT_ERRORS) { trigger_error("\x4f\114\105\x20\163\x74\162\145\x61\155\40\156\x6f\x74\40\146\157\165\x6e\144", E_USER_WARNING); } return false; } goto sSSyW; YsDVw: return true; goto rJa6m; sSSyW: $this->ole = $GLOBALS["\x5f\x4f\x4c\105\137\x49\116\123\x54\101\116\103\x45\x53"][$this->params["\157\154\145\x49\x6e\163\164\141\156\143\145\111\144"]]; goto IDTCQ; IDTCQ: $blockId = $this->params["\142\x6c\x6f\143\153\x49\x64"]; goto A1wEg; A1wEg: $this->data = ''; goto hq4DC; N0Cci: if ($options & STREAM_USE_PATH) { $openedPath = $path; } goto YsDVw; hq4DC: if (isset($this->params["\x73\151\x7a\x65"]) && $this->params["\163\x69\x7a\x65"] < $this->ole->bigBlockThreshold && $blockId != $this->ole->root->_StartBlock) { $rootPos = $this->ole->_getBlockOffset($this->ole->root->_StartBlock); while ($blockId != -2) { $pos = $rootPos + $blockId * $this->ole->bigBlockSize; $blockId = $this->ole->sbat[$blockId]; fseek($this->ole->_file_handle, $pos); $this->data .= fread($this->ole->_file_handle, $this->ole->bigBlockSize); } } else { while ($blockId != -2) { $pos = $this->ole->_getBlockOffset($blockId); fseek($this->ole->_file_handle, $pos); $this->data .= fread($this->ole->_file_handle, $this->ole->bigBlockSize); $blockId = $this->ole->bbat[$blockId]; } } goto Kz9G6; rJa6m: } public function stream_close() { $this->ole = null; unset($GLOBALS["\x5f\x4f\x4c\105\137\x49\x4e\x53\x54\x41\x4e\103\105\123"]); } public function stream_read($count) { goto vWvPF; ZD3Vq: $this->pos += $count; goto rqKRL; l2mZ6: $s = substr($this->data, $this->pos, $count); goto ZD3Vq; rqKRL: return $s; goto vr_cg; vWvPF: if ($this->stream_eof()) { return false; } goto l2mZ6; vr_cg: } public function stream_eof() { return $this->pos >= strlen($this->data); } public function stream_tell() { return $this->pos; } public function stream_seek($offset, $whence) { if ($whence == SEEK_SET && $offset >= 0) { $this->pos = $offset; } elseif ($whence == SEEK_CUR && -$offset <= $this->pos) { $this->pos += $offset; } elseif ($whence == SEEK_END && -$offset <= sizeof($this->data)) { $this->pos = strlen($this->data) + $offset; } else { return false; } return true; } public function stream_stat() { return array("\163\151\x7a\x65" => strlen($this->data)); } }
