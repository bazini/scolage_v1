<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:03              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Shared_String { const STRING_REGEXP_FRACTION = "\50\x2d\77\51\50\x5c\x64\53\51\x5c\x73\53\x28\134\x64\53\x5c\57\x5c\144\x2b\x29"; private static $controlCharacters = array(); private static $SYLKCharacters = array(); private static $decimalSeparator; private static $thousandsSeparator; private static $currencyCode; private static $isMbstringEnabled; private static $isIconvEnabled; private static function buildControlCharacters() { for ($i = 0; $i <= 31; ++$i) { if ($i != 9 && $i != 10 && $i != 13) { goto cRyEy; eQ30l: $replace = chr($i); goto NJmUq; NJmUq: self::$controlCharacters[$find] = $replace; goto aEIrQ; cRyEy: $find = "\137\170" . sprintf("\x25\x30\64\x73", strtoupper(dechex($i))) . "\x5f"; goto eQ30l; aEIrQ: } } } private static function buildSYLKCharacters() { self::$SYLKCharacters = array("\x1b\40\x30" => chr(0), "\x1b\x20\61" => chr(1), "\33\40\62" => chr(2), "\33\x20\x33" => chr(3), "\x1b\40\64" => chr(4), "\33\x20\x35" => chr(5), "\x1b\40\x36" => chr(6), "\x1b\x20\x37" => chr(7), "\33\40\x38" => chr(8), "\33\x20\x39" => chr(9), "\33\x20\x3a" => chr(10), "\x1b\x20\73" => chr(11), "\33\x20\74" => chr(12), "\33\x20\x3a" => chr(13), "\33\40\76" => chr(14), "\33\40\77" => chr(15), "\33\41\60" => chr(16), "\x1b\41\61" => chr(17), "\33\x21\x32" => chr(18), "\33\41\x33" => chr(19), "\33\41\x34" => chr(20), "\33\41\65" => chr(21), "\x1b\x21\66" => chr(22), "\x1b\x21\67" => chr(23), "\x1b\41\70" => chr(24), "\33\x21\71" => chr(25), "\33\41\x3a" => chr(26), "\33\41\x3b" => chr(27), "\33\41\74" => chr(28), "\33\x21\75" => chr(29), "\x1b\x21\x3e" => chr(30), "\x1b\41\x3f" => chr(31), "\x1b\47\77" => chr(127), "\33\50\x30" => "\xe2\x82\xac", "\33\50\x32" => "\xe2\200\x9a", "\33\50\63" => "\306\x92", "\x1b\x28\64" => "\xe2\200\x9e", "\x1b\50\65" => "\342\x80\246", "\33\x28\66" => "\342\x80\xa0", "\33\x28\x37" => "\xe2\200\xa1", "\x1b\x28\70" => "\xcb\206", "\x1b\50\x39" => "\342\200\xb0", "\x1b\50\72" => "\305\240", "\x1b\50\x3b" => "\342\x80\271", "\x1b\116\152" => "\305\222", "\33\x28\x3e" => "\xc5\xbd", "\33\x29\x31" => "\342\x80\x98", "\x1b\x29\x32" => "\342\200\231", "\x1b\51\63" => "\xe2\200\x9c", "\x1b\51\64" => "\xe2\x80\x9d", "\33\x29\x35" => "\342\200\242", "\33\51\x36" => "\342\200\223", "\33\x29\67" => "\342\200\x94", "\x1b\51\70" => "\xcb\234", "\33\51\71" => "\xe2\x84\242", "\x1b\x29\72" => "\xc5\241", "\x1b\51\x3b" => "\342\x80\xba", "\33\116\172" => "\xc5\x93", "\33\x29\x3e" => "\xc5\276", "\33\x29\x3f" => "\xc5\270", "\33\52\60" => "\xc2\xa0", "\33\116\x21" => "\xc2\241", "\x1b\116\42" => "\xc2\242", "\x1b\116\43" => "\xc2\xa3", "\x1b\116\x28" => "\302\244", "\33\116\45" => "\302\xa5", "\x1b\52\66" => "\302\xa6", "\33\116\x27" => "\xc2\247", "\x1b\116\110\40" => "\xc2\250", "\x1b\116\123" => "\xc2\251", "\x1b\x4e\x63" => "\302\xaa", "\33\x4e\x2b" => "\302\xab", "\x1b\52\x3c" => "\302\254", "\x1b\52\75" => "\xc2\255", "\33\116\x52" => "\302\xae", "\33\52\77" => "\xc2\xaf", "\x1b\x4e\x30" => "\xc2\260", "\x1b\116\x31" => "\xc2\261", "\33\x4e\62" => "\302\xb2", "\x1b\x4e\63" => "\302\xb3", "\33\116\102\40" => "\xc2\xb4", "\x1b\x4e\65" => "\302\xb5", "\33\116\66" => "\302\266", "\33\116\67" => "\302\xb7", "\x1b\x2b\x38" => "\302\270", "\33\x4e\121" => "\302\xb9", "\33\x4e\x6b" => "\xc2\xba", "\x1b\116\x3b" => "\302\xbb", "\33\x4e\x3c" => "\302\274", "\x1b\x4e\75" => "\302\275", "\33\x4e\76" => "\302\276", "\x1b\x4e\x3f" => "\302\277", "\x1b\116\x41\101" => "\xc3\x80", "\33\116\102\101" => "\xc3\201", "\33\x4e\103\101" => "\303\x82", "\33\x4e\104\x41" => "\303\203", "\x1b\x4e\110\x41" => "\303\x84", "\x1b\x4e\x4a\x41" => "\xc3\x85", "\x1b\x4e\x61" => "\303\x86", "\x1b\x4e\x4b\x43" => "\303\207", "\33\x4e\101\105" => "\303\x88", "\33\116\102\x45" => "\303\x89", "\x1b\116\x43\x45" => "\303\212", "\33\x4e\110\x45" => "\303\x8b", "\x1b\116\101\x49" => "\303\214", "\33\116\x42\111" => "\xc3\x8d", "\33\x4e\103\x49" => "\xc3\216", "\x1b\x4e\x48\x49" => "\303\217", "\x1b\116\142" => "\303\220", "\33\x4e\104\116" => "\303\x91", "\x1b\116\x41\117" => "\xc3\x92", "\x1b\x4e\x42\117" => "\303\223", "\33\116\103\x4f" => "\303\x94", "\33\x4e\x44\117" => "\xc3\225", "\x1b\116\x48\x4f" => "\303\x96", "\x1b\x2d\67" => "\303\x97", "\33\x4e\x69" => "\xc3\230", "\33\116\x41\125" => "\303\231", "\33\x4e\x42\x55" => "\xc3\x9a", "\33\x4e\103\x55" => "\303\x9b", "\33\x4e\x48\125" => "\303\234", "\33\x2d\x3d" => "\303\235", "\x1b\116\154" => "\303\x9e", "\x1b\x4e\173" => "\xc3\237", "\x1b\116\x41\x61" => "\xc3\240", "\33\116\102\141" => "\xc3\xa1", "\33\116\103\141" => "\303\xa2", "\33\x4e\104\x61" => "\xc3\243", "\x1b\116\x48\x61" => "\xc3\xa4", "\33\116\112\141" => "\xc3\245", "\33\x4e\161" => "\303\xa6", "\33\x4e\x4b\x63" => "\xc3\247", "\x1b\x4e\101\145" => "\303\xa8", "\33\116\102\145" => "\303\251", "\33\116\103\x65" => "\303\xaa", "\33\116\110\145" => "\303\253", "\x1b\x4e\101\x69" => "\303\xac", "\x1b\x4e\x42\x69" => "\303\255", "\33\116\103\x69" => "\xc3\256", "\x1b\116\x48\x69" => "\303\257", "\33\116\x73" => "\303\260", "\33\x4e\x44\156" => "\xc3\261", "\33\x4e\x41\157" => "\xc3\xb2", "\x1b\116\x42\157" => "\303\xb3", "\33\116\x43\x6f" => "\xc3\xb4", "\33\x4e\104\157" => "\xc3\265", "\x1b\116\110\x6f" => "\xc3\266", "\33\x2f\67" => "\303\xb7", "\x1b\x4e\x79" => "\303\270", "\x1b\116\101\x75" => "\xc3\xb9", "\x1b\x4e\x42\165" => "\xc3\xba", "\x1b\116\x43\x75" => "\303\273", "\x1b\116\x48\x75" => "\303\xbc", "\33\x2f\75" => "\xc3\275", "\x1b\x4e\x7c" => "\303\xbe", "\33\x4e\110\x79" => "\xc3\277"); } public static function getIsMbstringEnabled() { goto wOII2; x608o: self::$isMbstringEnabled = function_exists("\x6d\142\x5f\143\x6f\x6e\166\x65\162\x74\x5f\x65\x6e\143\157\x64\x69\x6e\x67") ? true : false; goto xaSIr; xaSIr: return self::$isMbstringEnabled; goto vyudV; wOII2: if (isset(self::$isMbstringEnabled)) { return self::$isMbstringEnabled; } goto x608o; vyudV: } public static function getIsIconvEnabled() { goto kvIFu; a2xsb: self::$isIconvEnabled = true; goto kyJAB; hYAXx: if (!function_exists("\x69\143\x6f\x6e\166")) { self::$isIconvEnabled = false; return false; } goto Z1207; IDlEF: if (defined("\x50\x48\120\x5f\117\123") && @stristr(PHP_OS, "\x41\x49\130") && defined("\x49\103\117\x4e\x56\x5f\111\x4d\120\x4c") && @strcasecmp(ICONV_IMPL, "\x75\156\x6b\x6e\157\x77\156") == 0 && defined("\111\x43\x4f\x4e\x56\x5f\x56\105\122\x53\x49\x4f\116") && @strcasecmp(ICONV_VERSION, "\165\x6e\x6b\156\x6f\x77\x6e") == 0) { self::$isIconvEnabled = false; return false; } goto a2xsb; kvIFu: if (isset(self::$isIconvEnabled)) { return self::$isIconvEnabled; } goto hYAXx; Z1207: if (!@iconv("\x55\x54\106\x2d\70", "\x55\124\106\x2d\61\x36\x4c\105", "\x78")) { self::$isIconvEnabled = false; return false; } goto mljE5; kyJAB: return true; goto boZ3b; mljE5: if (!@iconv_substr("\101", 0, 1, "\125\x54\106\55\70")) { self::$isIconvEnabled = false; return false; } goto IDlEF; boZ3b: } public static function buildCharacterSets() { if (empty(self::$controlCharacters)) { self::buildControlCharacters(); } if (empty(self::$SYLKCharacters)) { self::buildSYLKCharacters(); } } public static function ControlCharacterOOXML2PHP($value = '') { return str_replace(array_keys(self::$controlCharacters), array_values(self::$controlCharacters), $value); } public static function ControlCharacterPHP2OOXML($value = '') { return str_replace(array_values(self::$controlCharacters), array_keys(self::$controlCharacters), $value); } public static function SanitizeUTF8($value) { goto LkdLY; veo7g: if (self::getIsMbstringEnabled()) { $value = mb_convert_encoding($value, "\x55\x54\106\x2d\70", "\x55\124\x46\x2d\x38"); return $value; } goto N0W9i; N0W9i: return $value; goto sHDBq; LkdLY: if (self::getIsIconvEnabled()) { $value = @iconv("\x55\x54\106\x2d\x38", "\x55\x54\106\x2d\x38", $value); return $value; } goto veo7g; sHDBq: } public static function IsUTF8($value = '') { return $value === '' || preg_match("\57\136\56\x2f\x73\x75", $value) === 1; } public static function FormatNumber($value) { if (is_float($value)) { return str_replace("\x2c", "\56", $value); } return (string) $value; } public static function UTF8toBIFF8UnicodeShort($value, $arrcRuns = array()) { goto qAnTY; H_KLV: if (empty($arrcRuns)) { goto DbUNQ; mxevQ: $data = pack("\103\x43", $ln, $opt); goto lv4RP; lv4RP: $data .= self::ConvertEncoding($value, "\125\x54\106\55\x31\66\x4c\x45", "\125\x54\x46\55\x38"); goto pZk6n; DbUNQ: $opt = self::getIsIconvEnabled() || self::getIsMbstringEnabled() ? 0x1 : 0x0; goto mxevQ; pZk6n: } else { goto gPlrb; sejUp: foreach ($arrcRuns as $cRun) { $data .= pack("\166", $cRun["\x73\x74\162\x6c\145\156"]); $data .= pack("\166", $cRun["\x66\157\156\164\x69\x64\170"]); } goto Crv7C; b5C0j: $data .= pack("\x76", count($arrcRuns)); goto EtPcc; gPlrb: $data = pack("\166\x43", $ln, 0x9); goto b5C0j; EtPcc: $data .= self::ConvertEncoding($value, "\x55\x54\106\x2d\x31\66\114\x45", "\x55\124\x46\55\x38"); goto sejUp; Crv7C: } goto at5Sf; qAnTY: $ln = self::CountCharacters($value, "\x55\124\106\55\70"); goto H_KLV; at5Sf: return $data; goto FI12n; FI12n: } public static function UTF8toBIFF8UnicodeLong($value) { goto Rg0xq; utWRZ: return $data; goto jKEU5; TI2Lu: $chars = self::ConvertEncoding($value, "\125\x54\x46\x2d\61\x36\x4c\105", "\125\x54\x46\55\70"); goto awBLS; Hxgp6: $opt = self::getIsIconvEnabled() || self::getIsMbstringEnabled() ? 0x1 : 0x0; goto TI2Lu; Rg0xq: $ln = self::CountCharacters($value, "\x55\x54\106\x2d\70"); goto Hxgp6; awBLS: $data = pack("\x76\103", $ln, $opt) . $chars; goto utWRZ; jKEU5: } public static function ConvertEncoding($value, $to, $from) { goto Yw1PU; Yw1PU: if (self::getIsIconvEnabled()) { return iconv($from, $to, $value); } goto quqgq; quqgq: if (self::getIsMbstringEnabled()) { return mb_convert_encoding($value, $to, $from); } goto m_31t; m_31t: if ($from == "\x55\124\x46\x2d\61\66\114\105") { return self::utf16_decode($value, false); } elseif ($from == "\125\124\106\55\61\66\102\105") { return self::utf16_decode($value); } goto I2MYD; I2MYD: return $value; goto vANis; vANis: } public static function utf16_decode($str, $bom_be = true) { goto ssqCR; jrU1i: if ($c0 == 0xfe && $c1 == 0xff) { $str = substr($str, 2); } elseif ($c0 == 0xff && $c1 == 0xfe) { $str = substr($str, 2); $bom_be = false; } goto dQERk; kwqyG: $c0 = ord($str[0]); goto la4nX; ssqCR: if (strlen($str) < 2) { return $str; } goto kwqyG; jLRxF: for ($i = 0; $i < $len; $i += 2) { if ($bom_be) { $val = ord($str[$i]) << 4; $val += ord($str[$i + 1]); } else { $val = ord($str[$i + 1]) << 4; $val += ord($str[$i]); } $newstr .= $val == 0x228 ? "\12" : chr($val); } goto wjLKj; la4nX: $c1 = ord($str[1]); goto jrU1i; dQERk: $len = strlen($str); goto UhWa3; wjLKj: return $newstr; goto eIc_y; UhWa3: $newstr = ''; goto jLRxF; eIc_y: } public static function CountCharacters($value, $enc = "\125\x54\x46\55\x38") { goto HWgHY; xdDtE: if (self::getIsIconvEnabled()) { return iconv_strlen($value, $enc); } goto gglS6; HWgHY: if (self::getIsMbstringEnabled()) { return mb_strlen($value, $enc); } goto xdDtE; gglS6: return strlen($value); goto b4W24; b4W24: } public static function Substring($pValue = '', $pStart = 0, $pLength = 0) { goto jHX23; jHX23: if (self::getIsMbstringEnabled()) { return mb_substr($pValue, $pStart, $pLength, "\125\124\106\x2d\70"); } goto PiZhO; PiZhO: if (self::getIsIconvEnabled()) { return iconv_substr($pValue, $pStart, $pLength, "\x55\x54\106\x2d\x38"); } goto dH_Ww; dH_Ww: return substr($pValue, $pStart, $pLength); goto DTK0T; DTK0T: } public static function StrToUpper($pValue = '') { if (function_exists("\x6d\142\x5f\x63\x6f\156\x76\x65\162\164\137\x63\x61\163\x65")) { return mb_convert_case($pValue, MB_CASE_UPPER, "\x55\x54\x46\55\x38"); } return strtoupper($pValue); } public static function StrToLower($pValue = '') { if (function_exists("\155\x62\x5f\143\157\156\x76\x65\162\x74\137\143\x61\163\x65")) { return mb_convert_case($pValue, MB_CASE_LOWER, "\125\124\x46\55\70"); } return strtolower($pValue); } public static function StrToTitle($pValue = '') { if (function_exists("\155\x62\x5f\143\157\156\166\145\x72\164\137\143\x61\x73\x65")) { return mb_convert_case($pValue, MB_CASE_TITLE, "\125\x54\106\55\x38"); } return ucwords($pValue); } public static function mb_is_upper($char) { return mb_strtolower($char, "\x55\124\x46\x2d\70") != $char; } public static function mb_str_split($string) { return preg_split("\x2f\x28\x3f\x3c\41\x5e\x29\50\x3f\x21\x24\x29\x2f\165", $string); } public static function StrCaseReverse($pValue = '') { if (self::getIsMbstringEnabled()) { goto jycUl; jycUl: $characters = self::mb_str_split($pValue); goto Paxae; Paxae: foreach ($characters as &$character) { if (self::mb_is_upper($character)) { $character = mb_strtolower($character, "\125\x54\106\55\x38"); } else { $character = mb_strtoupper($character, "\x55\x54\106\55\x38"); } } goto lSXIC; lSXIC: return implode('', $characters); goto o_dVo; o_dVo: } return strtolower($pValue) ^ strtoupper($pValue) ^ $pValue; } public static function convertToNumberIfFraction(&$operand) { if (preg_match("\57\x5e" . self::STRING_REGEXP_FRACTION . "\x24\x2f\x69", $operand, $match)) { goto LTudl; FzXIh: return true; goto lK1n2; ryMfQ: $fractionFormula = "\x3d" . $sign . $match[2] . $sign . $match[3]; goto zu3Wu; LTudl: $sign = $match[1] == "\x2d" ? "\x2d" : "\53"; goto ryMfQ; zu3Wu: $operand = PHPExcel_Calculation::getInstance()->_calculateFormulaValue($fractionFormula); goto FzXIh; lK1n2: } return false; } public static function getDecimalSeparator() { if (!isset(self::$decimalSeparator)) { goto QIGV9; XRGwJ: if (self::$decimalSeparator == '') { self::$decimalSeparator = "\56"; } goto iAXee; QIGV9: $localeconv = localeconv(); goto Odufv; Odufv: self::$decimalSeparator = $localeconv["\x64\x65\143\x69\155\141\x6c\137\160\157\x69\156\164"] != '' ? $localeconv["\144\145\x63\x69\155\x61\154\137\160\x6f\x69\156\x74"] : $localeconv["\x6d\x6f\156\x5f\x64\145\x63\151\x6d\x61\154\x5f\160\157\x69\x6e\x74"]; goto XRGwJ; iAXee: } return self::$decimalSeparator; } public static function setDecimalSeparator($pValue = "\x2e") { self::$decimalSeparator = $pValue; } public static function getThousandsSeparator() { if (!isset(self::$thousandsSeparator)) { goto y51E4; fg6ES: self::$thousandsSeparator = $localeconv["\164\150\157\165\163\x61\156\x64\163\x5f\x73\x65\x70"] != '' ? $localeconv["\164\x68\x6f\x75\x73\141\156\144\x73\137\163\x65\x70"] : $localeconv["\155\157\x6e\137\x74\150\157\165\x73\x61\x6e\x64\163\137\163\145\160"]; goto aNhw7; aNhw7: if (self::$thousandsSeparator == '') { self::$thousandsSeparator = "\x2c"; } goto J92FK; y51E4: $localeconv = localeconv(); goto fg6ES; J92FK: } return self::$thousandsSeparator; } public static function setThousandsSeparator($pValue = "\54") { self::$thousandsSeparator = $pValue; } public static function getCurrencyCode() { if (!isset(self::$currencyCode)) { goto qSZOE; j3xlT: if (self::$currencyCode == '') { self::$currencyCode = "\44"; } goto Ljva1; qSZOE: $localeconv = localeconv(); goto Gff78; Gff78: self::$currencyCode = $localeconv["\x63\x75\162\x72\145\x6e\x63\x79\137\x73\171\x6d\142\x6f\x6c"] != '' ? $localeconv["\143\165\x72\162\x65\x6e\x63\x79\x5f\163\171\x6d\x62\x6f\154"] : $localeconv["\151\156\x74\x5f\x63\165\x72\162\137\x73\171\155\x62\157\154"]; goto j3xlT; Ljva1: } return self::$currencyCode; } public static function setCurrencyCode($pValue = "\44") { self::$currencyCode = $pValue; } public static function SYLKtoUTF8($pValue = '') { goto J7VwT; Sjfud: return $pValue; goto rblp_; J7VwT: if (strpos($pValue, "\x1b") === false) { return $pValue; } goto Xvk9Q; Xvk9Q: foreach (self::$SYLKCharacters as $k => $v) { $pValue = str_replace($k, $v, $pValue); } goto Sjfud; rblp_: } public static function testStringAsNumeric($value) { goto k3Ro6; nRZfj: $v = floatval($value); goto sjS82; sjS82: return is_numeric(substr($value, 0, strlen($v))) ? $v : $value; goto lntv2; k3Ro6: if (is_numeric($value)) { return $value; } goto nRZfj; lntv2: } }
