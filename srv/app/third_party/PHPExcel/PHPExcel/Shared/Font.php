<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:03              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Shared_Font { const AUTOSIZE_METHOD_APPROX = "\x61\160\x70\x72\x6f\x78"; const AUTOSIZE_METHOD_EXACT = "\145\x78\141\143\164"; private static $autoSizeMethods = array(self::AUTOSIZE_METHOD_APPROX, self::AUTOSIZE_METHOD_EXACT); const CHARSET_ANSI_LATIN = 0x0; const CHARSET_SYSTEM_DEFAULT = 0x1; const CHARSET_SYMBOL = 0x2; const CHARSET_APPLE_ROMAN = 0x4d; const CHARSET_ANSI_JAPANESE_SHIFTJIS = 0x80; const CHARSET_ANSI_KOREAN_HANGUL = 0x81; const CHARSET_ANSI_KOREAN_JOHAB = 0x82; const CHARSET_ANSI_CHINESE_SIMIPLIFIED = 0x86; const CHARSET_ANSI_CHINESE_TRADITIONAL = 0x88; const CHARSET_ANSI_GREEK = 0xa1; const CHARSET_ANSI_TURKISH = 0xa2; const CHARSET_ANSI_VIETNAMESE = 0xa3; const CHARSET_ANSI_HEBREW = 0xb1; const CHARSET_ANSI_ARABIC = 0xb2; const CHARSET_ANSI_BALTIC = 0xba; const CHARSET_ANSI_CYRILLIC = 0xcc; const CHARSET_ANSI_THAI = 0xdd; const CHARSET_ANSI_LATIN_II = 0xee; const CHARSET_OEM_LATIN_I = 0xff; const ARIAL = "\141\x72\151\x61\154\x2e\x74\x74\x66"; const ARIAL_BOLD = "\x61\162\x69\141\154\x62\144\56\x74\164\x66"; const ARIAL_ITALIC = "\x61\x72\x69\x61\x6c\151\x2e\164\164\x66"; const ARIAL_BOLD_ITALIC = "\141\162\x69\141\x6c\142\x69\56\x74\x74\x66"; const CALIBRI = "\x43\x41\114\111\x42\122\x49\x2e\x54\x54\106"; const CALIBRI_BOLD = "\103\x41\x4c\111\x42\x52\111\x42\x2e\x54\124\x46"; const CALIBRI_ITALIC = "\x43\101\114\x49\x42\x52\111\111\x2e\x54\124\x46"; const CALIBRI_BOLD_ITALIC = "\103\101\x4c\x49\x42\x52\x49\x5a\56\x54\124\106"; const COMIC_SANS_MS = "\x63\x6f\x6d\151\x63\56\x74\164\x66"; const COMIC_SANS_MS_BOLD = "\x63\x6f\x6d\x69\143\142\144\56\x74\x74\146"; const COURIER_NEW = "\x63\157\x75\162\56\164\164\146"; const COURIER_NEW_BOLD = "\143\157\165\x72\142\144\56\x74\164\146"; const COURIER_NEW_ITALIC = "\143\x6f\x75\162\151\56\x74\164\146"; const COURIER_NEW_BOLD_ITALIC = "\143\x6f\x75\x72\x62\x69\56\164\x74\146"; const GEORGIA = "\x67\x65\157\162\x67\x69\141\56\x74\x74\x66"; const GEORGIA_BOLD = "\147\145\157\x72\147\151\x61\142\56\164\x74\146"; const GEORGIA_ITALIC = "\147\x65\157\x72\x67\151\141\151\56\164\164\146"; const GEORGIA_BOLD_ITALIC = "\x67\x65\157\x72\147\x69\141\x7a\x2e\164\x74\x66"; const IMPACT = "\x69\x6d\160\141\x63\164\x2e\164\x74\x66"; const LIBERATION_SANS = "\x4c\151\x62\145\162\141\164\151\x6f\156\123\141\156\163\x2d\x52\x65\x67\165\x6c\141\x72\x2e\164\164\146"; const LIBERATION_SANS_BOLD = "\x4c\151\x62\x65\x72\x61\164\151\x6f\156\x53\x61\x6e\163\x2d\x42\157\x6c\144\x2e\x74\164\x66"; const LIBERATION_SANS_ITALIC = "\114\151\x62\x65\162\141\x74\151\x6f\x6e\123\x61\156\x73\x2d\111\x74\141\154\151\x63\56\x74\x74\146"; const LIBERATION_SANS_BOLD_ITALIC = "\x4c\151\142\145\162\141\x74\x69\157\x6e\x53\141\x6e\163\x2d\x42\157\x6c\x64\111\x74\141\154\x69\x63\x2e\164\x74\x66"; const LUCIDA_CONSOLE = "\x6c\x75\x63\x6f\x6e\56\164\x74\146"; const LUCIDA_SANS_UNICODE = "\x6c\x5f\x31\60\x36\x34\66\x2e\164\x74\146"; const MICROSOFT_SANS_SERIF = "\x6d\x69\143\162\157\163\163\x2e\164\x74\146"; const PALATINO_LINOTYPE = "\160\x61\154\141\56\x74\164\x66"; const PALATINO_LINOTYPE_BOLD = "\160\x61\154\141\x62\x2e\164\x74\146"; const PALATINO_LINOTYPE_ITALIC = "\x70\x61\x6c\141\x69\56\164\x74\146"; const PALATINO_LINOTYPE_BOLD_ITALIC = "\160\x61\x6c\x61\x62\151\x2e\x74\x74\146"; const SYMBOL = "\x73\x79\155\x62\157\x6c\56\x74\x74\x66"; const TAHOMA = "\x74\x61\x68\157\x6d\141\56\164\164\x66"; const TAHOMA_BOLD = "\x74\141\150\157\155\141\x62\x64\x2e\164\164\146"; const TIMES_NEW_ROMAN = "\x74\151\x6d\145\x73\56\x74\164\x66"; const TIMES_NEW_ROMAN_BOLD = "\164\x69\x6d\x65\163\142\x64\x2e\x74\x74\x66"; const TIMES_NEW_ROMAN_ITALIC = "\x74\x69\155\x65\163\151\56\x74\164\146"; const TIMES_NEW_ROMAN_BOLD_ITALIC = "\164\x69\155\x65\163\142\151\56\x74\x74\146"; const TREBUCHET_MS = "\164\162\145\x62\x75\x63\56\x74\164\146"; const TREBUCHET_MS_BOLD = "\164\162\x65\142\x75\x63\x62\x64\56\x74\x74\146"; const TREBUCHET_MS_ITALIC = "\164\162\x65\142\x75\x63\151\x74\x2e\x74\164\x66"; const TREBUCHET_MS_BOLD_ITALIC = "\164\x72\x65\x62\x75\x63\142\x69\x2e\x74\164\x66"; const VERDANA = "\166\145\x72\x64\x61\156\141\56\x74\164\146"; const VERDANA_BOLD = "\166\x65\x72\x64\141\x6e\141\142\x2e\x74\x74\146"; const VERDANA_ITALIC = "\x76\145\x72\x64\141\156\x61\151\56\x74\x74\146"; const VERDANA_BOLD_ITALIC = "\x76\x65\x72\144\141\x6e\141\x7a\x2e\164\164\x66"; private static $autoSizeMethod = self::AUTOSIZE_METHOD_APPROX; private static $trueTypeFontPath = null; public static $defaultColumnWidths = array("\101\162\x69\x61\x6c" => array(1 => array("\160\x78" => 24, "\x77\x69\144\164\x68" => 12.0), 2 => array("\160\x78" => 24, "\x77\151\x64\x74\x68" => 12.0), 3 => array("\x70\170" => 32, "\x77\151\144\x74\150" => 10.6640625), 4 => array("\160\x78" => 32, "\x77\x69\144\164\150" => 10.6640625), 5 => array("\x70\x78" => 40, "\167\151\144\164\150" => 10.0), 6 => array("\x70\170" => 48, "\x77\151\144\x74\150" => 9.59765625), 7 => array("\x70\170" => 48, "\167\x69\x64\x74\x68" => 9.59765625), 8 => array("\x70\170" => 56, "\x77\151\x64\164\x68" => 9.33203125), 9 => array("\x70\170" => 64, "\167\151\x64\164\x68" => 9.140625), 10 => array("\160\x78" => 64, "\x77\x69\x64\x74\x68" => 9.140625)), "\x43\x61\154\x69\142\x72\151" => array(1 => array("\x70\170" => 24, "\x77\x69\144\x74\x68" => 12.0), 2 => array("\x70\170" => 24, "\167\x69\144\164\150" => 12.0), 3 => array("\160\x78" => 32, "\167\151\144\x74\150" => 10.6640625), 4 => array("\x70\x78" => 32, "\167\x69\x64\x74\150" => 10.6640625), 5 => array("\x70\170" => 40, "\167\151\144\x74\x68" => 10.0), 6 => array("\x70\x78" => 48, "\167\x69\x64\164\150" => 9.59765625), 7 => array("\160\x78" => 48, "\x77\x69\144\164\x68" => 9.59765625), 8 => array("\x70\x78" => 56, "\x77\x69\x64\164\x68" => 9.33203125), 9 => array("\x70\x78" => 56, "\167\x69\x64\164\150" => 9.33203125), 10 => array("\160\x78" => 64, "\x77\151\144\x74\x68" => 9.140625), 11 => array("\x70\x78" => 64, "\167\x69\x64\x74\x68" => 9.140625)), "\x56\145\x72\x64\x61\x6e\x61" => array(1 => array("\160\170" => 24, "\167\x69\144\164\150" => 12.0), 2 => array("\160\170" => 24, "\167\151\x64\164\150" => 12.0), 3 => array("\160\x78" => 32, "\x77\x69\144\x74\x68" => 10.6640625), 4 => array("\160\x78" => 32, "\x77\151\x64\164\x68" => 10.6640625), 5 => array("\160\170" => 40, "\167\151\x64\x74\x68" => 10.0), 6 => array("\160\170" => 48, "\167\x69\x64\x74\150" => 9.59765625), 7 => array("\x70\x78" => 48, "\x77\151\144\164\x68" => 9.59765625), 8 => array("\160\x78" => 64, "\167\x69\144\164\150" => 9.140625), 9 => array("\x70\x78" => 72, "\167\151\144\164\150" => 9.0), 10 => array("\x70\170" => 72, "\x77\151\144\164\150" => 9.0))); public static function setAutoSizeMethod($pValue = self::AUTOSIZE_METHOD_APPROX) { goto yUQeG; SVD08: return true; goto CAJ5z; yUQeG: if (!in_array($pValue, self::$autoSizeMethods)) { return false; } goto WsIGX; WsIGX: self::$autoSizeMethod = $pValue; goto SVD08; CAJ5z: } public static function getAutoSizeMethod() { return self::$autoSizeMethod; } public static function setTrueTypeFontPath($pValue = '') { self::$trueTypeFontPath = $pValue; } public static function getTrueTypeFontPath() { return self::$trueTypeFontPath; } public static function calculateColumnWidth(PHPExcel_Style_Font $font, $cellText = '', $rotation = 0, PHPExcel_Style_Font $defaultFont = null) { goto jBtX5; KVkzl: if ($approximate) { $columnWidthAdjust = self::getTextWidthPixelsApprox("\156", $font, 0); $columnWidth = self::getTextWidthPixelsApprox($cellText, $font, $rotation) + $columnWidthAdjust; } goto bNNru; q2MMP: if (strpos($cellText, "\xa") !== false) { goto yGRkB; yGRkB: $lineTexts = explode("\xa", $cellText); goto kJ_WY; kJ_WY: $lineWidths = array(); goto SyLBW; SyLBW: foreach ($lineTexts as $lineText) { $lineWidths[] = self::calculateColumnWidth($font, $lineText, $rotation = 0, $defaultFont); } goto furVw; furVw: return max($lineWidths); goto NL8VO; NL8VO: } goto LQF_w; bNNru: $columnWidth = PHPExcel_Shared_Drawing::pixelsToCellDimension($columnWidth, $defaultFont); goto iV3Jf; iV3Jf: return round($columnWidth, 6); goto mMTai; LQF_w: $approximate = self::$autoSizeMethod == self::AUTOSIZE_METHOD_APPROX; goto yrSje; yrSje: if (!$approximate) { $columnWidthAdjust = ceil(self::getTextWidthPixelsExact("\156", $font, 0) * 1.07); try { $columnWidth = self::getTextWidthPixelsExact($cellText, $font, $rotation) + $columnWidthAdjust; } catch (PHPExcel_Exception $e) { $approximate = true; } } goto KVkzl; jBtX5: if ($cellText instanceof PHPExcel_RichText) { $cellText = $cellText->getPlainText(); } goto q2MMP; mMTai: } public static function getTextWidthPixelsExact($text, PHPExcel_Style_Font $font, $rotation = 0) { goto IKDMs; vJ_AM: $textBox = imagettfbbox($font->getSize(), $rotation, $fontFile, $text); goto I9ELM; tbcsM: $upperLeftCornerX = $textBox[6]; goto T0WnG; T0WnG: $textWidth = max($lowerRightCornerX - $upperLeftCornerX, $upperRightCornerX - $lowerLeftCornerX); goto elzoh; elzoh: return $textWidth; goto NWcuK; k8Bce: $lowerRightCornerX = $textBox[2]; goto REGIW; IKDMs: if (!function_exists("\x69\155\141\x67\x65\x74\x74\146\142\142\x6f\x78")) { throw new PHPExcel_Exception("\x47\x44\40\154\x69\x62\x72\141\x72\171\x20\x6e\x65\x65\144\x73\x20\x74\x6f\x20\142\x65\40\x65\156\x61\x62\x6c\x65\x64"); } goto ZpyGP; ZpyGP: $fontFile = self::getTrueTypeFontFileFromFont($font); goto vJ_AM; I9ELM: $lowerLeftCornerX = $textBox[0]; goto k8Bce; REGIW: $upperRightCornerX = $textBox[4]; goto tbcsM; NWcuK: } public static function getTextWidthPixelsApprox($columnText, PHPExcel_Style_Font $font = null, $rotation = 0) { goto PJydu; QKGRU: if ($rotation !== 0) { if ($rotation == -165) { $columnWidth = 4; } else { $columnWidth = $columnWidth * cos(deg2rad($rotation)) + $fontSize * abs(sin(deg2rad($rotation))) / 5; } } goto FvLbp; qMp_D: switch ($fontName) { case "\x43\x61\x6c\151\142\162\x69": goto D2RQu; NIJ1S: break; goto oRqzt; D2RQu: $columnWidth = (int) (8.26 * PHPExcel_Shared_String::CountCharacters($columnText)); goto FdGYt; FdGYt: $columnWidth = $columnWidth * $fontSize / 11; goto NIJ1S; oRqzt: case "\101\x72\151\x61\154": goto heRg4; ObcKd: $columnWidth = $columnWidth * $fontSize / 10; goto vPrHR; heRg4: $columnWidth = (int) (8 * PHPExcel_Shared_String::CountCharacters($columnText)); goto ObcKd; vPrHR: break; goto JTnkD; JTnkD: case "\126\x65\162\144\141\x6e\141": goto sseuv; S_z6c: $columnWidth = $columnWidth * $fontSize / 10; goto UVnPD; UVnPD: break; goto q_W9M; sseuv: $columnWidth = (int) (8 * PHPExcel_Shared_String::CountCharacters($columnText)); goto S_z6c; q_W9M: default: goto IGrM2; IGrM2: $columnWidth = (int) (8.26 * PHPExcel_Shared_String::CountCharacters($columnText)); goto a1oHZ; ewBtH: break; goto AdSJ9; a1oHZ: $columnWidth = $columnWidth * $fontSize / 11; goto ewBtH; AdSJ9: } goto QKGRU; FvLbp: return (int) $columnWidth; goto IAgoQ; f8tpP: $fontSize = $font->getSize(); goto qMp_D; PJydu: $fontName = $font->getName(); goto f8tpP; IAgoQ: } public static function fontSizeToPixels($fontSizeInPoints = 11) { return (int) (4 / 3 * $fontSizeInPoints); } public static function inchSizeToPixels($sizeInInch = 1) { return $sizeInInch * 96; } public static function centimeterSizeToPixels($sizeInCm = 1) { return $sizeInCm * 37.795275591; } public static function getTrueTypeFontFileFromFont($font) { goto fTmS9; tIua7: $italic = $font->getItalic(); goto Gppwp; fTmS9: if (!file_exists(self::$trueTypeFontPath) || !is_dir(self::$trueTypeFontPath)) { throw new PHPExcel_Exception("\126\141\x6c\151\144\x20\x64\x69\162\x65\x63\x74\x6f\162\171\x20\164\157\40\x54\162\x75\x65\124\x79\160\145\40\x46\157\156\164\40\x66\151\x6c\145\163\x20\x6e\157\164\40\163\160\145\143\151\x66\151\145\x64"); } goto IXCTF; Gppwp: switch ($name) { case "\101\162\151\141\x6c": $fontFile = $bold ? $italic ? self::ARIAL_BOLD_ITALIC : self::ARIAL_BOLD : ($italic ? self::ARIAL_ITALIC : self::ARIAL); break; case "\x43\x61\x6c\x69\142\x72\x69": $fontFile = $bold ? $italic ? self::CALIBRI_BOLD_ITALIC : self::CALIBRI_BOLD : ($italic ? self::CALIBRI_ITALIC : self::CALIBRI); break; case "\x43\x6f\165\162\x69\145\162\40\116\x65\x77": $fontFile = $bold ? $italic ? self::COURIER_NEW_BOLD_ITALIC : self::COURIER_NEW_BOLD : ($italic ? self::COURIER_NEW_ITALIC : self::COURIER_NEW); break; case "\x43\157\x6d\151\x63\x20\x53\x61\x6e\163\40\115\x53": $fontFile = $bold ? self::COMIC_SANS_MS_BOLD : self::COMIC_SANS_MS; break; case "\x47\x65\157\x72\147\151\141": $fontFile = $bold ? $italic ? self::GEORGIA_BOLD_ITALIC : self::GEORGIA_BOLD : ($italic ? self::GEORGIA_ITALIC : self::GEORGIA); break; case "\111\155\x70\x61\143\x74": $fontFile = self::IMPACT; break; case "\x4c\x69\142\x65\x72\141\x74\x69\157\x6e\x20\x53\x61\x6e\163": $fontFile = $bold ? $italic ? self::LIBERATION_SANS_BOLD_ITALIC : self::LIBERATION_SANS_BOLD : ($italic ? self::LIBERATION_SANS_ITALIC : self::LIBERATION_SANS); break; case "\114\165\x63\x69\x64\x61\40\x43\157\x6e\163\157\154\x65": $fontFile = self::LUCIDA_CONSOLE; break; case "\x4c\165\143\151\x64\x61\40\x53\x61\156\x73\x20\x55\156\x69\143\157\x64\145": $fontFile = self::LUCIDA_SANS_UNICODE; break; case "\x4d\x69\143\162\157\x73\x6f\146\164\40\123\141\x6e\x73\x20\123\145\162\x69\146": $fontFile = self::MICROSOFT_SANS_SERIF; break; case "\120\141\154\x61\164\151\x6e\x6f\x20\114\x69\x6e\x6f\x74\171\160\145": $fontFile = $bold ? $italic ? self::PALATINO_LINOTYPE_BOLD_ITALIC : self::PALATINO_LINOTYPE_BOLD : ($italic ? self::PALATINO_LINOTYPE_ITALIC : self::PALATINO_LINOTYPE); break; case "\x53\171\155\x62\157\x6c": $fontFile = self::SYMBOL; break; case "\124\x61\x68\x6f\x6d\141": $fontFile = $bold ? self::TAHOMA_BOLD : self::TAHOMA; break; case "\x54\151\155\145\163\40\x4e\145\x77\x20\x52\x6f\x6d\141\x6e": $fontFile = $bold ? $italic ? self::TIMES_NEW_ROMAN_BOLD_ITALIC : self::TIMES_NEW_ROMAN_BOLD : ($italic ? self::TIMES_NEW_ROMAN_ITALIC : self::TIMES_NEW_ROMAN); break; case "\x54\162\x65\142\x75\x63\x68\x65\x74\x20\x4d\123": $fontFile = $bold ? $italic ? self::TREBUCHET_MS_BOLD_ITALIC : self::TREBUCHET_MS_BOLD : ($italic ? self::TREBUCHET_MS_ITALIC : self::TREBUCHET_MS); break; case "\126\145\x72\x64\x61\x6e\x61": $fontFile = $bold ? $italic ? self::VERDANA_BOLD_ITALIC : self::VERDANA_BOLD : ($italic ? self::VERDANA_ITALIC : self::VERDANA); break; default: throw new PHPExcel_Exception("\125\x6e\x6b\x6e\157\x77\x6e\x20\146\x6f\x6e\x74\x20\x6e\141\155\x65\x20\42" . $name . "\42\x2e\x20\x43\x61\x6e\x6e\157\164\40\x6d\141\160\40\164\157\x20\124\162\x75\x65\124\x79\x70\145\40\146\x6f\156\164\40\146\151\x6c\145"); break; } goto OEyEm; rWqU2: if (!file_exists($fontFile)) { throw new PHPExcel_Exception("\x54\162\165\145\124\171\160\145\40\106\157\156\x74\x20\146\x69\154\x65\40\x6e\157\164\x20\146\157\165\x6e\x64"); } goto xWAmv; rZOdn: $bold = $font->getBold(); goto tIua7; IXCTF: $name = $font->getName(); goto rZOdn; xWAmv: return $fontFile; goto lF0hc; OEyEm: $fontFile = self::$trueTypeFontPath . $fontFile; goto rWqU2; lF0hc: } public static function getCharsetFromFontName($name) { switch ($name) { case "\x45\x75\x63\x72\x6f\x73\151\x61\x55\x50\103": return self::CHARSET_ANSI_THAI; case "\x57\x69\x6e\x67\144\x69\156\147\x73": return self::CHARSET_SYMBOL; case "\127\x69\156\x67\144\151\156\147\163\40\62": return self::CHARSET_SYMBOL; case "\127\x69\156\x67\x64\151\156\x67\163\x20\63": return self::CHARSET_SYMBOL; default: return self::CHARSET_ANSI_LATIN; } } public static function getDefaultColumnWidthByFont(PHPExcel_Style_Font $font, $pPixels = false) { if (isset(self::$defaultColumnWidths[$font->getName()][$font->getSize()])) { $columnWidth = $pPixels ? self::$defaultColumnWidths[$font->getName()][$font->getSize()]["\160\170"] : self::$defaultColumnWidths[$font->getName()][$font->getSize()]["\x77\151\144\164\x68"]; } else { goto qrTsv; qrTsv: $columnWidth = $pPixels ? self::$defaultColumnWidths["\x43\x61\154\x69\142\x72\151"][11]["\160\170"] : self::$defaultColumnWidths["\x43\x61\x6c\151\x62\162\151"][11]["\x77\x69\x64\164\150"]; goto Kge1c; HylHE: if ($pPixels) { $columnWidth = (int) round($columnWidth); } goto dCoAM; Kge1c: $columnWidth = $columnWidth * $font->getSize() / 11; goto HylHE; dCoAM: } return $columnWidth; } public static function getDefaultRowHeightByFont(PHPExcel_Style_Font $font) { switch ($font->getName()) { case "\101\162\x69\x61\154": switch ($font->getSize()) { case 10: $rowHeight = 12.75; break; case 9: $rowHeight = 12; break; case 8: $rowHeight = 11.25; break; case 7: $rowHeight = 9; break; case 6: case 5: $rowHeight = 8.25; break; case 4: $rowHeight = 6.75; break; case 3: $rowHeight = 6; break; case 2: case 1: $rowHeight = 5.25; break; default: $rowHeight = 12.75 * $font->getSize() / 10; break; } break; case "\103\141\x6c\x69\142\x72\x69": switch ($font->getSize()) { case 11: $rowHeight = 15; break; case 10: $rowHeight = 12.75; break; case 9: $rowHeight = 12; break; case 8: $rowHeight = 11.25; break; case 7: $rowHeight = 9; break; case 6: case 5: $rowHeight = 8.25; break; case 4: $rowHeight = 6.75; break; case 3: $rowHeight = 6.0; break; case 2: case 1: $rowHeight = 5.25; break; default: $rowHeight = 15 * $font->getSize() / 11; break; } break; case "\126\x65\x72\144\x61\156\x61": switch ($font->getSize()) { case 10: $rowHeight = 12.75; break; case 9: $rowHeight = 11.25; break; case 8: $rowHeight = 10.5; break; case 7: $rowHeight = 9.0; break; case 6: case 5: $rowHeight = 8.25; break; case 4: $rowHeight = 6.75; break; case 3: $rowHeight = 6; break; case 2: case 1: $rowHeight = 5.25; break; default: $rowHeight = 12.75 * $font->getSize() / 10; break; } break; default: $rowHeight = 15 * $font->getSize() / 11; break; } return $rowHeight; } }
