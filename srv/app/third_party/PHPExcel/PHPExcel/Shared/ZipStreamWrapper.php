<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Shared_ZipStreamWrapper { private $archive; private $fileNameInArchive = ''; private $position = 0; private $data = ''; public static function register() { @stream_wrapper_unregister("\x7a\151\160"); @stream_wrapper_register("\172\x69\x70", __CLASS__); } public function stream_open($path, $mode, $options, &$opened_path) { goto iVzm3; tw5d8: $this->position = 0; goto WpNAj; iVzm3: if ($mode[0] != "\x72") { throw new PHPExcel_Reader_Exception("\115\x6f\144\145\x20" . $mode . "\40\151\x73\40\156\x6f\164\40\x73\165\160\x70\x6f\x72\x74\x65\x64\56\40\x4f\156\154\171\40\162\x65\141\144\40\155\157\144\x65\x20\151\x73\40\163\x75\x70\160\x6f\162\164\145\144\x2e"); } goto ETvZm; tDFkc: return true; goto WZlss; GvidS: $url["\x68\157\x73\x74"] = substr($path, 6, $pos - 6); goto Dvcy1; KssnX: $this->archive->open($url["\x68\157\x73\x74"]); goto sQEGZ; WpNAj: $this->data = $this->archive->getFromName($this->fileNameInArchive); goto tDFkc; Dvcy1: $url["\146\x72\x61\x67\155\x65\156\x74"] = substr($path, $pos + 1); goto GSmCP; ETvZm: $pos = strrpos($path, "\x23"); goto GvidS; GSmCP: $this->archive = new ZipArchive(); goto KssnX; sQEGZ: $this->fileNameInArchive = $url["\146\162\x61\147\155\x65\156\x74"]; goto tw5d8; WZlss: } public function statName() { return $this->fileNameInArchive; } public function url_stat() { return $this->statName($this->fileNameInArchive); } public function stream_stat() { return $this->archive->statName($this->fileNameInArchive); } public function stream_read($count) { goto cW0ke; cW0ke: $ret = substr($this->data, $this->position, $count); goto y1faz; y1faz: $this->position += strlen($ret); goto kyIrC; kyIrC: return $ret; goto YylPi; YylPi: } public function stream_tell() { return $this->position; } public function stream_eof() { return $this->position >= strlen($this->data); } public function stream_seek($offset, $whence) { switch ($whence) { case SEEK_SET: if ($offset < strlen($this->data) && $offset >= 0) { $this->position = $offset; return true; } else { return false; } break; case SEEK_CUR: if ($offset >= 0) { $this->position += $offset; return true; } else { return false; } break; case SEEK_END: if (strlen($this->data) + $offset >= 0) { $this->position = strlen($this->data) + $offset; return true; } else { return false; } break; default: return false; } } }
