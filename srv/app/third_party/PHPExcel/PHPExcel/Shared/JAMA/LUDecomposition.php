<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:03              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Shared_JAMA_LUDecomposition { const MATRIX_SINGULAR_EXCEPTION = "\103\x61\156\x20\x6f\156\154\171\x20\160\145\x72\x66\157\x72\155\x20\x6f\160\x65\x72\x61\164\x69\x6f\x6e\40\x6f\x6e\40\x73\151\x6e\147\x75\x6c\x61\x72\40\155\x61\x74\162\151\170\56"; const MATRIX_SQUARE_EXCEPTION = "\x4d\x69\163\155\x61\164\x63\150\x65\x64\40\122\x6f\167\x20\144\x69\x6d\145\x6e\163\151\x6f\156"; private $LU = array(); private $m; private $n; private $pivsign; private $piv = array(); public function __construct($A) { if ($A instanceof PHPExcel_Shared_JAMA_Matrix) { goto ATFCz; ald2Q: $this->n = $A->getColumnDimension(); goto NPRzW; FTEe_: $this->pivsign = 1; goto KmfEx; zfQXa: $this->m = $A->getRowDimension(); goto ald2Q; KmfEx: $LUrowi = $LUcolj = array(); goto zAwqU; NPRzW: for ($i = 0; $i < $this->m; ++$i) { $this->piv[$i] = $i; } goto FTEe_; ATFCz: $this->LU = $A->getArray(); goto zfQXa; zAwqU: for ($j = 0; $j < $this->n; ++$j) { for ($i = 0; $i < $this->m; ++$i) { $LUcolj[$i] =& $this->LU[$i][$j]; } for ($i = 0; $i < $this->m; ++$i) { $LUrowi = $this->LU[$i]; $kmax = min($i, $j); $s = 0.0; for ($k = 0; $k < $kmax; ++$k) { $s += $LUrowi[$k] * $LUcolj[$k]; } $LUrowi[$j] = $LUcolj[$i] -= $s; } $p = $j; for ($i = $j + 1; $i < $this->m; ++$i) { if (abs($LUcolj[$i]) > abs($LUcolj[$p])) { $p = $i; } } if ($p != $j) { goto H6li1; Skj_R: $this->piv[$j] = $k; goto p9wrb; H6li1: for ($k = 0; $k < $this->n; ++$k) { $t = $this->LU[$p][$k]; $this->LU[$p][$k] = $this->LU[$j][$k]; $this->LU[$j][$k] = $t; } goto UFO0d; p9wrb: $this->pivsign = $this->pivsign * -1; goto bMFYc; UFO0d: $k = $this->piv[$p]; goto oZw5k; oZw5k: $this->piv[$p] = $this->piv[$j]; goto Skj_R; bMFYc: } if ($j < $this->m && $this->LU[$j][$j] != 0.0) { for ($i = $j + 1; $i < $this->m; ++$i) { $this->LU[$i][$j] /= $this->LU[$j][$j]; } } } goto V1Ud3; V1Ud3: } else { throw new PHPExcel_Calculation_Exception(PHPExcel_Shared_JAMA_Matrix::ARGUMENT_TYPE_EXCEPTION); } } public function getL() { for ($i = 0; $i < $this->m; ++$i) { for ($j = 0; $j < $this->n; ++$j) { if ($i > $j) { $L[$i][$j] = $this->LU[$i][$j]; } elseif ($i == $j) { $L[$i][$j] = 1.0; } else { $L[$i][$j] = 0.0; } } } return new PHPExcel_Shared_JAMA_Matrix($L); } public function getU() { for ($i = 0; $i < $this->n; ++$i) { for ($j = 0; $j < $this->n; ++$j) { if ($i <= $j) { $U[$i][$j] = $this->LU[$i][$j]; } else { $U[$i][$j] = 0.0; } } } return new PHPExcel_Shared_JAMA_Matrix($U); } public function getPivot() { return $this->piv; } public function getDoublePivot() { return $this->getPivot(); } public function isNonsingular() { for ($j = 0; $j < $this->n; ++$j) { if ($this->LU[$j][$j] == 0) { return false; } } return true; } public function det() { if ($this->m == $this->n) { goto yjG50; AkjHe: return $d; goto Pf4BF; yjG50: $d = $this->pivsign; goto kSqR3; kSqR3: for ($j = 0; $j < $this->n; ++$j) { $d *= $this->LU[$j][$j]; } goto AkjHe; Pf4BF: } else { throw new PHPExcel_Calculation_Exception(PHPExcel_Shared_JAMA_Matrix::MATRIX_DIMENSION_EXCEPTION); } } public function solve($B) { if ($B->getRowDimension() == $this->m) { if ($this->isNonsingular()) { goto Uf8VA; TNqbs: $X = $B->getMatrix($this->piv, 0, $nx - 1); goto SvCFs; z4FHV: return $X; goto nTMxB; Uf8VA: $nx = $B->getColumnDimension(); goto TNqbs; oG2do: for ($k = $this->n - 1; $k >= 0; --$k) { for ($j = 0; $j < $nx; ++$j) { $X->A[$k][$j] /= $this->LU[$k][$k]; } for ($i = 0; $i < $k; ++$i) { for ($j = 0; $j < $nx; ++$j) { $X->A[$i][$j] -= $X->A[$k][$j] * $this->LU[$i][$k]; } } } goto z4FHV; SvCFs: for ($k = 0; $k < $this->n; ++$k) { for ($i = $k + 1; $i < $this->n; ++$i) { for ($j = 0; $j < $nx; ++$j) { $X->A[$i][$j] -= $X->A[$k][$j] * $this->LU[$i][$k]; } } } goto oG2do; nTMxB: } else { throw new PHPExcel_Calculation_Exception(self::MATRIX_SINGULAR_EXCEPTION); } } else { throw new PHPExcel_Calculation_Exception(self::MATRIX_SQUARE_EXCEPTION); } } }
