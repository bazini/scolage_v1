<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Shared_Date { const CALENDAR_WINDOWS_1900 = 1900; const CALENDAR_MAC_1904 = 1904; public static $monthNames = array("\x4a\141\x6e" => "\x4a\x61\x6e\165\141\x72\171", "\x46\x65\142" => "\x46\x65\142\x72\x75\141\162\171", "\x4d\x61\162" => "\115\141\x72\143\x68", "\x41\x70\162" => "\101\160\162\151\154", "\115\x61\x79" => "\115\141\171", "\112\x75\x6e" => "\x4a\165\x6e\145", "\112\x75\154" => "\112\x75\x6c\171", "\101\165\147" => "\101\x75\147\x75\163\x74", "\123\x65\160" => "\123\145\160\164\145\x6d\142\145\x72", "\117\x63\164" => "\117\143\164\x6f\142\145\162", "\116\157\166" => "\x4e\x6f\x76\x65\x6d\x62\x65\x72", "\104\x65\143" => "\104\x65\x63\145\x6d\142\145\162"); public static $numberSuffixes = array("\x73\x74", "\156\144", "\162\144", "\x74\x68"); protected static $excelBaseDate = self::CALENDAR_WINDOWS_1900; public static function setExcelCalendar($baseDate) { if ($baseDate == self::CALENDAR_WINDOWS_1900 || $baseDate == self::CALENDAR_MAC_1904) { self::$excelBaseDate = $baseDate; return true; } return false; } public static function getExcelCalendar() { return self::$excelBaseDate; } public static function ExcelToPHP($dateValue = 0, $adjustToTimezone = false, $timezone = null) { goto PoqBz; PoqBz: if (self::$excelBaseDate == self::CALENDAR_WINDOWS_1900) { $myexcelBaseDate = 25569; if ($dateValue < 60) { --$myexcelBaseDate; } } else { $myexcelBaseDate = 24107; } goto IyRZ2; tuFo2: return $returnValue + $timezoneAdjustment; goto WgTpq; IyRZ2: if ($dateValue >= 1) { goto ztQXa; ztQXa: $utcDays = $dateValue - $myexcelBaseDate; goto Yt3wO; yHw4i: if ($returnValue <= PHP_INT_MAX && $returnValue >= -PHP_INT_MAX) { $returnValue = (int) $returnValue; } goto PbNU6; Yt3wO: $returnValue = round($utcDays * 86400); goto yHw4i; PbNU6: } else { goto h_bnI; h_bnI: $hours = round($dateValue * 24); goto spfe0; ul_oG: $returnValue = (int) gmmktime($hours, $mins, $secs); goto URbLa; wQVO8: $secs = round($dateValue * 86400) - round($hours * 3600) - round($mins * 60); goto ul_oG; spfe0: $mins = round($dateValue * 1440) - round($hours * 60); goto wQVO8; URbLa: } goto xJDwL; xJDwL: $timezoneAdjustment = $adjustToTimezone ? PHPExcel_Shared_TimeZone::getTimezoneAdjustment($timezone, $returnValue) : 0; goto tuFo2; WgTpq: } public static function ExcelToPHPObject($dateValue = 0) { goto NMsDk; NMsDk: $dateTime = self::ExcelToPHP($dateValue); goto IdGY3; YmIgW: $time = round(($dateTime / 86400 - $days) * 86400); goto v3tyy; Msq9Z: $minutes = round($time / 60) - $hours * 60; goto W0k7B; W3dMK: $dateObj = date_create("\x31\x2d\112\141\156\x2d\x31\x39\x37\60\53" . $days . "\x20\144\141\x79\x73"); goto MyPHy; MyPHy: $dateObj->setTime($hours, $minutes, $seconds); goto Ls5OC; v3tyy: $hours = round($time / 3600); goto Msq9Z; Ls5OC: return $dateObj; goto qGzqX; IdGY3: $days = floor($dateTime / 86400); goto YmIgW; W0k7B: $seconds = round($time) - $hours * 3600 - $minutes * 60; goto W3dMK; qGzqX: } public static function PHPToExcel($dateValue = 0, $adjustToTimezone = false, $timezone = null) { goto IgUfR; IgUfR: $saveTimeZone = date_default_timezone_get(); goto i9O05; OzeTY: date_default_timezone_set($saveTimeZone); goto e2SYW; i9O05: date_default_timezone_set("\x55\124\103"); goto yTNoz; e2SYW: return $retValue; goto tUE1q; bBBAN: $retValue = false; goto H7jlq; yTNoz: $timezoneAdjustment = $adjustToTimezone ? PHPExcel_Shared_TimeZone::getTimezoneAdjustment($timezone ? $timezone : $saveTimeZone, $dateValue) : 0; goto bBBAN; H7jlq: if (is_object($dateValue) && $dateValue instanceof DateTime) { $dateValue->add(new DateInterval("\x50\x54" . $timezoneAdjustment . "\123")); $retValue = self::FormattedPHPToExcel($dateValue->format("\x59"), $dateValue->format("\155"), $dateValue->format("\144"), $dateValue->format("\x48"), $dateValue->format("\151"), $dateValue->format("\163")); } elseif (is_numeric($dateValue)) { $dateValue += $timezoneAdjustment; $retValue = self::FormattedPHPToExcel(date("\x59", $dateValue), date("\x6d", $dateValue), date("\x64", $dateValue), date("\110", $dateValue), date("\x69", $dateValue), date("\163", $dateValue)); } elseif (is_string($dateValue)) { $retValue = self::stringToExcel($dateValue); } goto OzeTY; tUE1q: } public static function FormattedPHPToExcel($year, $month, $day, $hours = 0, $minutes = 0, $seconds = 0) { goto O6zTL; ZhN0_: $excelTime = ($hours * 3600 + $minutes * 60 + $seconds) / 86400; goto EWJy6; O6zTL: if (self::$excelBaseDate == self::CALENDAR_WINDOWS_1900) { goto pKlSy; pKlSy: $excel1900isLeapYear = true; goto Ks3al; gND9F: $myexcelBaseDate = 2415020; goto Vtt7q; Ks3al: if ($year == 1900 && $month <= 2) { $excel1900isLeapYear = false; } goto gND9F; Vtt7q: } else { $myexcelBaseDate = 2416481; $excel1900isLeapYear = false; } goto KIJ1S; KIJ1S: if ($month > 2) { $month -= 3; } else { $month += 9; --$year; } goto YN3qm; YN3qm: $century = substr($year, 0, 2); goto NK_yO; NK_yO: $decade = substr($year, 2, 2); goto pBUAE; EWJy6: return (float) $excelDate + $excelTime; goto GVCom; pBUAE: $excelDate = floor(146097 * $century / 4) + floor(1461 * $decade / 4) + floor((153 * $month + 2) / 5) + $day + 1721119 - $myexcelBaseDate + $excel1900isLeapYear; goto ZhN0_; GVCom: } public static function isDateTime(PHPExcel_Cell $pCell) { return self::isDateTimeFormat($pCell->getWorksheet()->getStyle($pCell->getCoordinate())->getNumberFormat()); } public static function isDateTimeFormat(PHPExcel_Style_NumberFormat $pFormat) { return self::isDateTimeFormatCode($pFormat->getFormatCode()); } private static $possibleDateFormatCharacters = "\x65\x79\155\x64\110\x73"; public static function isDateTimeFormatCode($pFormatCode = '') { goto ngV9U; JV2Vq: if (substr($pFormatCode, 0, 1) == "\x5f" || substr($pFormatCode, 0, 2) == "\60\x20") { return false; } goto W6znK; W6znK: if (preg_match("\57\50\136\174\134\x5d\51\133\x5e\134\x5b\135\52\x5b" . self::$possibleDateFormatCharacters . "\135\57\151", $pFormatCode)) { if (strpos($pFormatCode, "\42") !== false) { goto vqc7T; i1S05: return false; goto z8lsg; MPo0u: foreach (explode("\x22", $pFormatCode) as $subVal) { if (($segMatcher = !$segMatcher) && preg_match("\57\50\x5e\x7c\134\135\51\x5b\x5e\x5c\133\135\52\x5b" . self::$possibleDateFormatCharacters . "\135\x2f\x69", $subVal)) { return true; } } goto i1S05; vqc7T: $segMatcher = false; goto MPo0u; z8lsg: } return true; } goto CNjDk; ngV9U: if (strtolower($pFormatCode) === strtolower(PHPExcel_Style_NumberFormat::FORMAT_GENERAL)) { return false; } goto kQZGn; pW2Or: switch ($pFormatCode) { case PHPExcel_Style_NumberFormat::FORMAT_DATE_YYYYMMDD: case PHPExcel_Style_NumberFormat::FORMAT_DATE_YYYYMMDD2: case PHPExcel_Style_NumberFormat::FORMAT_DATE_DDMMYYYY: case PHPExcel_Style_NumberFormat::FORMAT_DATE_DMYSLASH: case PHPExcel_Style_NumberFormat::FORMAT_DATE_DMYMINUS: case PHPExcel_Style_NumberFormat::FORMAT_DATE_DMMINUS: case PHPExcel_Style_NumberFormat::FORMAT_DATE_MYMINUS: case PHPExcel_Style_NumberFormat::FORMAT_DATE_DATETIME: case PHPExcel_Style_NumberFormat::FORMAT_DATE_TIME1: case PHPExcel_Style_NumberFormat::FORMAT_DATE_TIME2: case PHPExcel_Style_NumberFormat::FORMAT_DATE_TIME3: case PHPExcel_Style_NumberFormat::FORMAT_DATE_TIME4: case PHPExcel_Style_NumberFormat::FORMAT_DATE_TIME5: case PHPExcel_Style_NumberFormat::FORMAT_DATE_TIME6: case PHPExcel_Style_NumberFormat::FORMAT_DATE_TIME7: case PHPExcel_Style_NumberFormat::FORMAT_DATE_TIME8: case PHPExcel_Style_NumberFormat::FORMAT_DATE_YYYYMMDDSLASH: case PHPExcel_Style_NumberFormat::FORMAT_DATE_XLSX14: case PHPExcel_Style_NumberFormat::FORMAT_DATE_XLSX15: case PHPExcel_Style_NumberFormat::FORMAT_DATE_XLSX16: case PHPExcel_Style_NumberFormat::FORMAT_DATE_XLSX17: case PHPExcel_Style_NumberFormat::FORMAT_DATE_XLSX22: return true; } goto JV2Vq; CNjDk: return false; goto PQUMU; kQZGn: if (preg_match("\x2f\133\x30\x23\135\105\133\53\55\x5d\x30\x2f\151", $pFormatCode)) { return false; } goto pW2Or; PQUMU: } public static function stringToExcel($dateValue = '') { goto I2wfq; ewaJ3: return $dateValueNew; goto djCEJ; igRpf: if ($dateValueNew === PHPExcel_Calculation_Functions::VALUE()) { return false; } goto hf9cE; I2wfq: if (strlen($dateValue) < 2) { return false; } goto fXFnP; gf5ZB: $dateValueNew = PHPExcel_Calculation_DateTime::DATEVALUE($dateValue); goto igRpf; hf9cE: if (strpos($dateValue, "\72") !== false) { goto C4SaU; Nw9jV: $dateValueNew += $timeValue; goto SF1pz; iZnpU: if ($timeValue === PHPExcel_Calculation_Functions::VALUE()) { return false; } goto Nw9jV; C4SaU: $timeValue = PHPExcel_Calculation_DateTime::TIMEVALUE($dateValue); goto iZnpU; SF1pz: } goto ewaJ3; fXFnP: if (!preg_match("\57\x5e\x28\134\144\x7b\61\x2c\64\175\133\x20\134\x2e\x5c\x2f\134\x2d\135\x5b\x41\55\x5a\x5d\x7b\x33\x2c\71\x7d\x28\x5b\40\x5c\56\x5c\x2f\134\x2d\x5d\x5c\144\173\61\54\64\175\x29\x3f\x7c\133\101\x2d\x5a\x5d\x7b\x33\x2c\71\175\133\40\134\x2e\x5c\x2f\134\x2d\x5d\x5c\x64\173\61\54\64\175\x28\133\40\134\x2e\134\x2f\x5c\x2d\x5d\x5c\x64\x7b\x31\x2c\x34\175\51\77\174\x5c\x64\x7b\61\x2c\x34\x7d\133\x20\134\x2e\x5c\x2f\x5c\x2d\135\134\x64\x7b\61\x2c\64\175\50\133\x20\x5c\56\x5c\x2f\134\x2d\x5d\x5c\x64\x7b\x31\54\x34\x7d\x29\x3f\x29\x28\x20\x5c\144\x7b\x31\x2c\62\x7d\x3a\x5c\144\173\61\54\x32\175\x28\x3a\134\x64\173\x31\54\x32\x7d\51\x3f\x29\77\44\x2f\x69\x75", $dateValue)) { return false; } goto gf5ZB; djCEJ: } public static function monthStringToNumber($month) { goto ZPSTu; TbkEK: foreach (self::$monthNames as $shortMonthName => $longMonthName) { if ($month === $longMonthName || $month === $shortMonthName) { return $monthIndex; } ++$monthIndex; } goto zVMTf; ZPSTu: $monthIndex = 1; goto TbkEK; zVMTf: return $month; goto TTvJy; TTvJy: } public static function dayStringToNumber($day) { goto VlUYi; v4AvZ: return $day; goto may2V; VlUYi: $strippedDayValue = str_replace(self::$numberSuffixes, '', $day); goto TReZd; TReZd: if (is_numeric($strippedDayValue)) { return (int) $strippedDayValue; } goto v4AvZ; may2V: } }
