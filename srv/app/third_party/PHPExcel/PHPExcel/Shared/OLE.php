<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 $GLOBALS["\137\x4f\x4c\x45\x5f\x49\x4e\x53\124\101\x4e\103\105\x53"] = array(); class PHPExcel_Shared_OLE { const OLE_PPS_TYPE_ROOT = 5; const OLE_PPS_TYPE_DIR = 1; const OLE_PPS_TYPE_FILE = 2; const OLE_DATA_SIZE_SMALL = 0x1000; const OLE_LONG_INT_SIZE = 4; const OLE_PPS_SIZE = 0x80; public $_file_handle; public $_list = array(); public $root; public $bbat; public $sbat; public $bigBlockSize; public $smallBlockSize; public function read($file) { goto fKAJj; Ttzn_: $signature = fread($fh, 8); goto vs1d1; wwPO1: $mbbatBlockCount = self::_readInt4($fh); goto wqlR7; yT0zy: $this->smallBlockSize = pow(2, self::_readInt2($fh)); goto qJrAW; dLXL0: $pos = $this->_getBlockOffset($mbatFirstBlockId); goto nFsf2; Rlb6j: for ($blockId = 0; $blockId < $shortBlockCount; ++$blockId) { $this->sbat[$blockId] = self::_readInt4($sbatFh); } goto m6v0f; nFsf2: for ($i = 0; $i < $mbbatBlockCount; ++$i) { fseek($fh, $pos); for ($j = 0; $j < $this->bigBlockSize / 4 - 1; ++$j) { $mbatBlocks[] = self::_readInt4($fh); } $pos = $this->_getBlockOffset(self::_readInt4($fh)); } goto gbYDj; vOMsM: fseek($fh, 28); goto PsCf8; qJrAW: fseek($fh, 44); goto aqSEX; m6v0f: fclose($sbatFh); goto VdGBY; wqlR7: $this->bbat = array(); goto rLYow; VdGBY: $this->_readPpsWks($directoryFirstBlockId); goto XDj4i; hxJsu: if (!$fh) { throw new PHPExcel_Reader_Exception("\x43\141\x6e\47\164\x20\157\160\x65\156\x20\146\151\x6c\145\x20{$file}"); } goto Wfuu_; dhAW0: $mbatFirstBlockId = self::_readInt4($fh); goto wwPO1; PsCf8: if (fread($fh, 2) != "\xfe\377") { throw new PHPExcel_Reader_Exception("\x4f\156\154\x79\x20\114\x69\x74\x74\x6c\145\x2d\105\x6e\x64\151\x61\156\x20\x65\x6e\x63\x6f\144\x69\156\147\40\151\163\40\163\165\x70\160\157\x72\164\145\144\x2e"); } goto K2OR4; K2OR4: $this->bigBlockSize = pow(2, self::_readInt2($fh)); goto yT0zy; gvS0i: for ($i = 0; $i < 109; ++$i) { $mbatBlocks[] = self::_readInt4($fh); } goto dLXL0; rLYow: $mbatBlocks = array(); goto gvS0i; fKAJj: $fh = fopen($file, "\x72"); goto hxJsu; ZvzoK: $directoryFirstBlockId = self::_readInt4($fh); goto q154D; aqSEX: $bbatBlockCount = self::_readInt4($fh); goto ZvzoK; q154D: fseek($fh, 56); goto WgQaZ; kde_q: $sbatFirstBlockId = self::_readInt4($fh); goto IfDc3; Xc1qF: $this->sbat = array(); goto gEIAE; dx1y6: $sbatFh = $this->getStream($sbatFirstBlockId); goto Rlb6j; WgQaZ: $this->bigBlockThreshold = self::_readInt4($fh); goto kde_q; vs1d1: if ("\320\xcf\x11\xe0\xa1\261\x1a\341" != $signature) { throw new PHPExcel_Reader_Exception("\x46\151\x6c\145\x20\x64\157\x65\163\x6e\x27\164\x20\x73\145\145\155\40\x74\157\40\x62\x65\x20\141\156\x20\x4f\x4c\x45\x20\x63\x6f\156\x74\141\x69\x6e\145\162\56"); } goto vOMsM; XDj4i: return true; goto XPJJp; gEIAE: $shortBlockCount = $sbbatBlockCount * $this->bigBlockSize / 4; goto dx1y6; Wfuu_: $this->_file_handle = $fh; goto Ttzn_; IfDc3: $sbbatBlockCount = self::_readInt4($fh); goto dhAW0; gbYDj: for ($i = 0; $i < $bbatBlockCount; ++$i) { $pos = $this->_getBlockOffset($mbatBlocks[$i]); fseek($fh, $pos); for ($j = 0; $j < $this->bigBlockSize / 4; ++$j) { $this->bbat[] = self::_readInt4($fh); } } goto Xc1qF; XPJJp: } public function _getBlockOffset($blockId) { return 512 + $blockId * $this->bigBlockSize; } public function getStream($blockIdOrPps) { goto grOLg; NFJep: $instanceId = end(array_keys($GLOBALS["\137\117\114\105\x5f\111\x4e\x53\x54\101\116\103\x45\123"])); goto uXg8e; m6E9l: if ($blockIdOrPps instanceof PHPExcel_Shared_OLE_PPS) { $path .= "\46\142\x6c\157\143\x6b\111\x64\75" . $blockIdOrPps->_StartBlock; $path .= "\x26\163\x69\172\x65\75" . $blockIdOrPps->Size; } else { $path .= "\46\x62\x6c\157\143\153\x49\144\x3d" . $blockIdOrPps; } goto W0HiA; W0HiA: return fopen($path, "\162"); goto Z_DR_; uXg8e: $path = "\157\x6c\x65\55\x63\150\x61\151\x6e\x65\144\x62\x6c\x6f\x63\153\x73\164\x72\145\x61\155\x3a\x2f\x2f\157\154\x65\111\156\x73\164\x61\156\143\x65\111\x64\75" . $instanceId; goto m6E9l; m2yUt: if (!$isRegistered) { stream_wrapper_register("\157\154\145\x2d\143\x68\x61\x69\x6e\x65\x64\x62\x6c\157\143\153\x73\x74\162\145\141\x6d", "\120\110\x50\x45\170\143\145\154\137\x53\150\x61\x72\145\x64\137\x4f\114\105\x5f\103\150\x61\x69\x6e\x65\x64\x42\154\157\143\x6b\x53\x74\x72\145\x61\155"); $isRegistered = true; } goto I9YM1; I9YM1: $GLOBALS["\137\117\114\105\137\111\116\123\x54\x41\116\103\x45\x53"][] = $this; goto NFJep; grOLg: static $isRegistered = false; goto m2yUt; Z_DR_: } private static function _readInt1($fh) { list(, $tmp) = unpack("\x63", fread($fh, 1)); return $tmp; } private static function _readInt2($fh) { list(, $tmp) = unpack("\166", fread($fh, 2)); return $tmp; } private static function _readInt4($fh) { list(, $tmp) = unpack("\x56", fread($fh, 4)); return $tmp; } public function _readPpsWks($blockId) { goto MwHs0; TbdHW: fclose($fh); goto XWQBY; OQNaj: for ($pos = 0;; $pos += 128) { fseek($fh, $pos, SEEK_SET); $nameUtf16 = fread($fh, 64); $nameLength = self::_readInt2($fh); $nameUtf16 = substr($nameUtf16, 0, $nameLength - 2); $name = str_replace("\0", '', $nameUtf16); $type = self::_readInt1($fh); switch ($type) { case self::OLE_PPS_TYPE_ROOT: goto mpBHM; mpBHM: $pps = new PHPExcel_Shared_OLE_PPS_Root(null, null, array()); goto l_Z63; G4MIk: break; goto t9CvA; l_Z63: $this->root = $pps; goto G4MIk; t9CvA: case self::OLE_PPS_TYPE_DIR: $pps = new PHPExcel_Shared_OLE_PPS(null, null, null, null, null, null, null, null, null, array()); break; case self::OLE_PPS_TYPE_FILE: $pps = new PHPExcel_Shared_OLE_PPS_File($name); break; default: continue; } fseek($fh, 1, SEEK_CUR); $pps->Type = $type; $pps->Name = $name; $pps->PrevPps = self::_readInt4($fh); $pps->NextPps = self::_readInt4($fh); $pps->DirPps = self::_readInt4($fh); fseek($fh, 20, SEEK_CUR); $pps->Time1st = self::OLE2LocalDate(fread($fh, 8)); $pps->Time2nd = self::OLE2LocalDate(fread($fh, 8)); $pps->_StartBlock = self::_readInt4($fh); $pps->Size = self::_readInt4($fh); $pps->No = count($this->_list); $this->_list[] = $pps; if (isset($this->root) && $this->_ppsTreeComplete($this->root->No)) { break; } } goto TbdHW; HSGB3: return true; goto gKfjQ; XWQBY: foreach ($this->_list as $pps) { if ($pps->Type == self::OLE_PPS_TYPE_DIR || $pps->Type == self::OLE_PPS_TYPE_ROOT) { goto gxUfL; yCYzg: $pps->children = array(); goto CfAtQ; gxUfL: $nos = array($pps->DirPps); goto yCYzg; CfAtQ: while ($nos) { $no = array_pop($nos); if ($no != -1) { goto Ra64b; PTnzd: $pps->children[] = $childPps; goto YcjCI; Ra64b: $childPps = $this->_list[$no]; goto z91tS; z91tS: $nos[] = $childPps->PrevPps; goto PaQ_k; PaQ_k: $nos[] = $childPps->NextPps; goto PTnzd; YcjCI: } } goto Au9xk; Au9xk: } } goto HSGB3; MwHs0: $fh = $this->getStream($blockId); goto OQNaj; gKfjQ: } public function _ppsTreeComplete($index) { return isset($this->_list[$index]) && ($pps = $this->_list[$index]) && ($pps->PrevPps == -1 || $this->_ppsTreeComplete($pps->PrevPps)) && ($pps->NextPps == -1 || $this->_ppsTreeComplete($pps->NextPps)) && ($pps->DirPps == -1 || $this->_ppsTreeComplete($pps->DirPps)); } public function isFile($index) { if (isset($this->_list[$index])) { return $this->_list[$index]->Type == self::OLE_PPS_TYPE_FILE; } return false; } public function isRoot($index) { if (isset($this->_list[$index])) { return $this->_list[$index]->Type == self::OLE_PPS_TYPE_ROOT; } return false; } public function ppsTotal() { return count($this->_list); } public function getData($index, $position, $length) { goto LQu8e; VLiXC: return $data; goto a7zHd; JluKC: fclose($fh); goto VLiXC; LQu8e: if (!isset($this->_list[$index]) || $position >= $this->_list[$index]->Size || $position < 0) { return ''; } goto blnfH; blnfH: $fh = $this->getStream($this->_list[$index]); goto jAtRw; jAtRw: $data = stream_get_contents($fh, $length, $position); goto JluKC; a7zHd: } public function getDataLength($index) { if (isset($this->_list[$index])) { return $this->_list[$index]->Size; } return 0; } public static function Asc2Ucs($ascii) { goto TOJU9; TOJU9: $rawname = ''; goto EhvBm; EhvBm: for ($i = 0; $i < strlen($ascii); ++$i) { $rawname .= $ascii[$i] . "\x0"; } goto oY3gj; oY3gj: return $rawname; goto be6lm; be6lm: } public static function LocalDate2OLE($date = null) { goto rAWYY; tvyP9: for ($i = 0; $i < 4; ++$i) { $hex = $low_part % 0x100; $res .= pack("\143", $hex); $low_part /= 0x100; } goto gNqtM; PQkkY: $days = 134774; goto rDDO9; vOEYV: $low_part = floor(($big_date / $factor - $high_part) * $factor); goto l0i0r; rDDO9: $big_date = $days * 24 * 3600 + gmmktime(date("\x48", $date), date("\x69", $date), date("\163", $date), date("\155", $date), date("\x64", $date), date("\131", $date)); goto TYz54; TYz54: $big_date *= 10000000; goto jY8ea; uHHC1: $factor = pow(2, 32); goto PQkkY; gNqtM: for ($i = 0; $i < 4; ++$i) { $hex = $high_part % 0x100; $res .= pack("\x63", $hex); $high_part /= 0x100; } goto tlC2Y; l0i0r: $res = ''; goto tvyP9; tlC2Y: return $res; goto C8vZw; jY8ea: $high_part = floor($big_date / $factor); goto vOEYV; rAWYY: if (!isset($date)) { return "\0\0\0\x0\x0\x0\0\x0"; } goto uHHC1; C8vZw: } public static function OLE2LocalDate($string) { goto hVfB1; a5HOi: $days = 134774; goto gj2hk; uVLWG: $big_date /= 10000000; goto a5HOi; hVfB1: if (strlen($string) != 8) { return new PEAR_Error("\105\170\160\145\x63\x74\151\x6e\x67\x20\x38\40\x62\171\x74\145\40\163\x74\162\x69\156\x67"); } goto PinoK; PinoK: $factor = pow(2, 32); goto ZFvX4; gj2hk: $big_date -= $days * 24 * 3600; goto ZpNc5; ZpNc5: return floor($big_date); goto KBWs4; lP17L: list(, $low_part) = unpack("\x56", substr($string, 0, 4)); goto bvt85; ZFvX4: list(, $high_part) = unpack("\126", substr($string, 4, 4)); goto lP17L; bvt85: $big_date = $high_part * $factor + $low_part; goto uVLWG; KBWs4: } }
