<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:07              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Worksheet implements PHPExcel_IComparable { const BREAK_NONE = 0; const BREAK_ROW = 1; const BREAK_COLUMN = 2; const SHEETSTATE_VISIBLE = "\166\x69\163\x69\142\x6c\x65"; const SHEETSTATE_HIDDEN = "\150\151\144\144\x65\x6e"; const SHEETSTATE_VERYHIDDEN = "\166\x65\162\x79\110\151\144\144\x65\x6e"; private static $invalidCharacters = array("\52", "\72", "\x2f", "\x5c", "\77", "\x5b", "\x5d"); private $parent; private $cellCollection; private $rowDimensions = array(); private $defaultRowDimension; private $columnDimensions = array(); private $defaultColumnDimension = null; private $drawingCollection = null; private $chartCollection = array(); private $title; private $sheetState; private $pageSetup; private $pageMargins; private $headerFooter; private $sheetView; private $protection; private $styles = array(); private $conditionalStylesCollection = array(); private $cellCollectionIsSorted = false; private $breaks = array(); private $mergeCells = array(); private $protectedCells = array(); private $autoFilter; private $freezePane = ''; private $showGridlines = true; private $printGridlines = false; private $showRowColHeaders = true; private $showSummaryBelow = true; private $showSummaryRight = true; private $comments = array(); private $activeCell = "\101\61"; private $selectedCells = "\x41\61"; private $cachedHighestColumn = "\x41"; private $cachedHighestRow = 1; private $rightToLeft = false; private $hyperlinkCollection = array(); private $dataValidationCollection = array(); private $tabColor; private $dirty = true; private $hash; private $codeName = null; public function __construct(PHPExcel $pParent = null, $pTitle = "\x57\157\162\x6b\x73\x68\x65\145\x74") { goto Ij8Wg; nG1k9: $this->sheetView = new PHPExcel_Worksheet_SheetView(); goto XRP41; BG0wG: $this->autoFilter = new PHPExcel_Worksheet_AutoFilter(null, $this); goto P0Axn; HjE0B: $this->defaultRowDimension = new PHPExcel_Worksheet_RowDimension(null); goto mCbEt; EgGMK: $this->setSheetState(PHPExcel_Worksheet::SHEETSTATE_VISIBLE); goto pgLC3; YvLSL: $this->chartCollection = new ArrayObject(); goto EGxFc; XRP41: $this->drawingCollection = new ArrayObject(); goto YvLSL; btTnF: $this->setTitle($pTitle, false); goto qq8YL; pgLC3: $this->cellCollection = PHPExcel_CachedObjectStorageFactory::getInstance($this); goto DOM9A; MrzvV: $this->headerFooter = new PHPExcel_Worksheet_HeaderFooter(); goto nG1k9; Ij8Wg: $this->parent = $pParent; goto btTnF; qq8YL: $this->setCodeName($this->getTitle()); goto EgGMK; DOM9A: $this->pageSetup = new PHPExcel_Worksheet_PageSetup(); goto VIgNs; VIgNs: $this->pageMargins = new PHPExcel_Worksheet_PageMargins(); goto MrzvV; mCbEt: $this->defaultColumnDimension = new PHPExcel_Worksheet_ColumnDimension(null); goto BG0wG; EGxFc: $this->protection = new PHPExcel_Worksheet_Protection(); goto HjE0B; P0Axn: } public function disconnectCells() { if ($this->cellCollection !== null) { $this->cellCollection->unsetWorksheetCells(); $this->cellCollection = null; } $this->parent = null; } public function __destruct() { PHPExcel_Calculation::getInstance($this->parent)->clearCalculationCacheForWorksheet($this->title); $this->disconnectCells(); } public function getCellCacheController() { return $this->cellCollection; } public static function getInvalidCharacters() { return self::$invalidCharacters; } private static function checkSheetCodeName($pValue) { goto KHfIU; EMKGR: if ($CharCount > 31) { throw new PHPExcel_Exception("\115\141\170\x69\155\165\155\x20\63\x31\x20\143\150\x61\x72\x61\x63\x74\145\162\x73\40\141\154\x6c\x6f\x77\145\x64\40\x69\x6e\40\163\150\x65\x65\x74\x20\x63\x6f\x64\x65\40\156\x61\x6d\x65\x2e"); } goto g9xQe; TxWmV: if (str_replace(self::$invalidCharacters, '', $pValue) !== $pValue || PHPExcel_Shared_String::Substring($pValue, -1, 1) == "\x27" || PHPExcel_Shared_String::Substring($pValue, 0, 1) == "\47") { throw new PHPExcel_Exception("\111\156\x76\141\x6c\x69\x64\40\143\150\x61\x72\141\143\164\145\x72\x20\x66\x6f\x75\x6e\144\40\x69\x6e\x20\163\150\145\145\164\40\143\157\144\x65\x20\156\x61\x6d\145"); } goto EMKGR; g9xQe: return $pValue; goto BtC3S; lp67I: if ($CharCount == 0) { throw new PHPExcel_Exception("\x53\x68\x65\x65\x74\40\x63\x6f\x64\145\40\156\141\x6d\x65\40\143\x61\156\x6e\157\x74\x20\x62\145\x20\145\155\160\x74\171\x2e"); } goto TxWmV; KHfIU: $CharCount = PHPExcel_Shared_String::CountCharacters($pValue); goto lp67I; BtC3S: } private static function checkSheetTitle($pValue) { goto mu5P0; wdQSP: if (PHPExcel_Shared_String::CountCharacters($pValue) > 31) { throw new PHPExcel_Exception("\115\141\x78\151\155\x75\155\40\x33\x31\x20\143\150\x61\x72\x61\143\x74\x65\x72\x73\x20\x61\154\154\x6f\x77\145\x64\40\151\x6e\40\163\150\x65\145\x74\40\164\x69\x74\x6c\x65\x2e"); } goto OD7E_; mu5P0: if (str_replace(self::$invalidCharacters, '', $pValue) !== $pValue) { throw new PHPExcel_Exception("\111\x6e\166\x61\x6c\151\144\x20\x63\x68\x61\x72\x61\143\x74\x65\162\x20\146\157\165\156\x64\x20\x69\x6e\x20\163\x68\x65\x65\164\40\x74\x69\164\x6c\145"); } goto wdQSP; OD7E_: return $pValue; goto Or0Mo; Or0Mo: } public function getCellCollection($pSorted = true) { goto GuA56; GuA56: if ($pSorted) { return $this->sortCellCollection(); } goto RlyWo; ff2W7: return array(); goto qrZ5T; RlyWo: if ($this->cellCollection !== null) { return $this->cellCollection->getCellList(); } goto ff2W7; qrZ5T: } public function sortCellCollection() { if ($this->cellCollection !== null) { return $this->cellCollection->getSortedCellList(); } return array(); } public function getRowDimensions() { return $this->rowDimensions; } public function getDefaultRowDimension() { return $this->defaultRowDimension; } public function getColumnDimensions() { return $this->columnDimensions; } public function getDefaultColumnDimension() { return $this->defaultColumnDimension; } public function getDrawingCollection() { return $this->drawingCollection; } public function getChartCollection() { return $this->chartCollection; } public function addChart(PHPExcel_Chart $pChart = null, $iChartIndex = null) { goto a7D0N; GnYnZ: return $pChart; goto g60K3; d1Rl9: if (is_null($iChartIndex)) { $this->chartCollection[] = $pChart; } else { array_splice($this->chartCollection, $iChartIndex, 0, array($pChart)); } goto GnYnZ; a7D0N: $pChart->setWorksheet($this); goto d1Rl9; g60K3: } public function getChartCount() { return count($this->chartCollection); } public function getChartByIndex($index = null) { goto DwNvb; gVujl: return $this->chartCollection[$index]; goto BMFA0; DwNvb: $chartCount = count($this->chartCollection); goto k0Ncy; LdwIt: if (is_null($index)) { $index = --$chartCount; } goto PFOkO; PFOkO: if (!isset($this->chartCollection[$index])) { return false; } goto gVujl; k0Ncy: if ($chartCount == 0) { return false; } goto LdwIt; BMFA0: } public function getChartNames() { goto gDM5B; Tp2KZ: foreach ($this->chartCollection as $chart) { $chartNames[] = $chart->getName(); } goto H_o95; H_o95: return $chartNames; goto YsOfk; gDM5B: $chartNames = array(); goto Tp2KZ; YsOfk: } public function getChartByName($chartName = '') { goto D_1FO; V3D5F: return false; goto uiQS7; gPz0C: if ($chartCount == 0) { return false; } goto SCHDz; SCHDz: foreach ($this->chartCollection as $index => $chart) { if ($chart->getName() == $chartName) { return $this->chartCollection[$index]; } } goto V3D5F; D_1FO: $chartCount = count($this->chartCollection); goto gPz0C; uiQS7: } public function refreshColumnDimensions() { goto QJPuk; U4dBH: $this->columnDimensions = $newColumnDimensions; goto riN3K; QJPuk: $currentColumnDimensions = $this->getColumnDimensions(); goto VDZk8; riN3K: return $this; goto DQQdW; VDZk8: $newColumnDimensions = array(); goto yOd9n; yOd9n: foreach ($currentColumnDimensions as $objColumnDimension) { $newColumnDimensions[$objColumnDimension->getColumnIndex()] = $objColumnDimension; } goto U4dBH; DQQdW: } public function refreshRowDimensions() { goto dBX3U; bpoLe: return $this; goto sEVV2; ASQOM: $newRowDimensions = array(); goto p25Oc; dBX3U: $currentRowDimensions = $this->getRowDimensions(); goto ASQOM; OrOZT: $this->rowDimensions = $newRowDimensions; goto bpoLe; p25Oc: foreach ($currentRowDimensions as $objRowDimension) { $newRowDimensions[$objRowDimension->getRowIndex()] = $objRowDimension; } goto OrOZT; sEVV2: } public function calculateWorksheetDimension() { return "\101\61" . "\72" . $this->getHighestColumn() . $this->getHighestRow(); } public function calculateWorksheetDataDimension() { return "\x41\61" . "\72" . $this->getHighestDataColumn() . $this->getHighestDataRow(); } public function calculateColumnWidths($calculateMergeCells = false) { goto VwMia; BhLTw: return $this; goto EwLxa; AnFTE: foreach ($this->getColumnDimensions() as $colDimension) { if ($colDimension->getAutoSize()) { $autoSizes[$colDimension->getColumnIndex()] = -1; } } goto h9NaV; VwMia: $autoSizes = array(); goto AnFTE; h9NaV: if (!empty($autoSizes)) { goto ZihOu; AvyLA: foreach ($autoSizes as $columnIndex => $width) { if ($width == -1) { $width = $this->getDefaultColumnDimension()->getWidth(); } $this->getColumnDimension($columnIndex)->setWidth($width); } goto mKvAG; TpuDY: foreach ($this->getCellCollection(false) as $cellID) { $cell = $this->getCell($cellID, false); if ($cell !== null && isset($autoSizes[$this->cellCollection->getCurrentColumn()])) { if (!isset($isMergeCell[$this->cellCollection->getCurrentAddress()])) { $cellValue = PHPExcel_Style_NumberFormat::toFormattedString($cell->getCalculatedValue(), $this->getParent()->getCellXfByIndex($cell->getXfIndex())->getNumberFormat()->getFormatCode()); $autoSizes[$this->cellCollection->getCurrentColumn()] = max((float) $autoSizes[$this->cellCollection->getCurrentColumn()], (float) PHPExcel_Shared_Font::calculateColumnWidth($this->getParent()->getCellXfByIndex($cell->getXfIndex())->getFont(), $cellValue, $this->getParent()->getCellXfByIndex($cell->getXfIndex())->getAlignment()->getTextRotation(), $this->getDefaultStyle()->getFont())); } } } goto AvyLA; If8d0: foreach ($this->getMergeCells() as $cells) { foreach (PHPExcel_Cell::extractAllCellReferencesInRange($cells) as $cellReference) { $isMergeCell[$cellReference] = true; } } goto TpuDY; ZihOu: $isMergeCell = array(); goto If8d0; mKvAG: } goto BhLTw; EwLxa: } public function getParent() { return $this->parent; } public function rebindParent(PHPExcel $parent) { goto Zk6WT; Zk6WT: if ($this->parent !== null) { goto OE08_; vumZN: $this->parent->removeSheetByIndex($this->parent->getIndex($this)); goto WJrO5; Rpsmq: foreach ($namedRanges as $namedRange) { $parent->addNamedRange($namedRange); } goto vumZN; OE08_: $namedRanges = $this->parent->getNamedRanges(); goto Rpsmq; WJrO5: } goto dxRp9; lVjSP: return $this; goto U8Qq0; dxRp9: $this->parent = $parent; goto lVjSP; U8Qq0: } public function getTitle() { return $this->title; } public function setTitle($pValue = "\x57\x6f\162\153\x73\x68\145\x65\164", $updateFormulaCellReferences = true) { goto oLXB9; fRShZ: $this->title = $pValue; goto KPn8O; OJF5S: self::checkSheetTitle($pValue); goto AcpPG; KPn8O: $this->dirty = true; goto O1uZi; oLXB9: if ($this->getTitle() == $pValue) { return $this; } goto OJF5S; AcpPG: $oldTitle = $this->getTitle(); goto AtMQp; O1uZi: if ($this->parent && $this->parent->getCalculationEngine()) { goto ZiCrm; mmW3j: $this->parent->getCalculationEngine()->renameCalculationCacheForWorksheet($oldTitle, $newTitle); goto DDDal; ZiCrm: $newTitle = $this->getTitle(); goto mmW3j; DDDal: if ($updateFormulaCellReferences) { PHPExcel_ReferenceHelper::getInstance()->updateNamedFormulas($this->parent, $oldTitle, $newTitle); } goto bhEfV; bhEfV: } goto PEEGn; PEEGn: return $this; goto lt1sl; AtMQp: if ($this->parent) { if ($this->parent->sheetNameExists($pValue)) { goto hiNue; hiNue: if (PHPExcel_Shared_String::CountCharacters($pValue) > 29) { $pValue = PHPExcel_Shared_String::Substring($pValue, 0, 29); } goto UxRln; m6HL6: while ($this->parent->sheetNameExists($pValue . "\x20" . $i)) { ++$i; if ($i == 10) { if (PHPExcel_Shared_String::CountCharacters($pValue) > 28) { $pValue = PHPExcel_Shared_String::Substring($pValue, 0, 28); } } elseif ($i == 100) { if (PHPExcel_Shared_String::CountCharacters($pValue) > 27) { $pValue = PHPExcel_Shared_String::Substring($pValue, 0, 27); } } } goto ddUec; h6uoT: return $this->setTitle($altTitle, $updateFormulaCellReferences); goto oBZEW; UxRln: $i = 1; goto m6HL6; ddUec: $altTitle = $pValue . "\x20" . $i; goto h6uoT; oBZEW: } } goto fRShZ; lt1sl: } public function getSheetState() { return $this->sheetState; } public function setSheetState($value = PHPExcel_Worksheet::SHEETSTATE_VISIBLE) { $this->sheetState = $value; return $this; } public function getPageSetup() { return $this->pageSetup; } public function setPageSetup(PHPExcel_Worksheet_PageSetup $pValue) { $this->pageSetup = $pValue; return $this; } public function getPageMargins() { return $this->pageMargins; } public function setPageMargins(PHPExcel_Worksheet_PageMargins $pValue) { $this->pageMargins = $pValue; return $this; } public function getHeaderFooter() { return $this->headerFooter; } public function setHeaderFooter(PHPExcel_Worksheet_HeaderFooter $pValue) { $this->headerFooter = $pValue; return $this; } public function getSheetView() { return $this->sheetView; } public function setSheetView(PHPExcel_Worksheet_SheetView $pValue) { $this->sheetView = $pValue; return $this; } public function getProtection() { return $this->protection; } public function setProtection(PHPExcel_Worksheet_Protection $pValue) { goto mLlug; cuQg7: return $this; goto w83Om; TJ5Kz: $this->dirty = true; goto cuQg7; mLlug: $this->protection = $pValue; goto TJ5Kz; w83Om: } public function getHighestColumn($row = null) { if ($row == null) { return $this->cachedHighestColumn; } return $this->getHighestDataColumn($row); } public function getHighestDataColumn($row = null) { return $this->cellCollection->getHighestColumn($row); } public function getHighestRow($column = null) { if ($column == null) { return $this->cachedHighestRow; } return $this->getHighestDataRow($column); } public function getHighestDataRow($column = null) { return $this->cellCollection->getHighestRow($column); } public function getHighestRowAndColumn() { return $this->cellCollection->getHighestRowAndColumn(); } public function setCellValue($pCoordinate = "\x41\61", $pValue = null, $returnCell = false) { $cell = $this->getCell(strtoupper($pCoordinate))->setValue($pValue); return $returnCell ? $cell : $this; } public function setCellValueByColumnAndRow($pColumn = 0, $pRow = 1, $pValue = null, $returnCell = false) { $cell = $this->getCellByColumnAndRow($pColumn, $pRow)->setValue($pValue); return $returnCell ? $cell : $this; } public function setCellValueExplicit($pCoordinate = "\101\61", $pValue = null, $pDataType = PHPExcel_Cell_DataType::TYPE_STRING, $returnCell = false) { $cell = $this->getCell(strtoupper($pCoordinate))->setValueExplicit($pValue, $pDataType); return $returnCell ? $cell : $this; } public function setCellValueExplicitByColumnAndRow($pColumn = 0, $pRow = 1, $pValue = null, $pDataType = PHPExcel_Cell_DataType::TYPE_STRING, $returnCell = false) { $cell = $this->getCellByColumnAndRow($pColumn, $pRow)->setValueExplicit($pValue, $pDataType); return $returnCell ? $cell : $this; } public function getCell($pCoordinate = "\101\61", $createIfNotExists = true) { goto pxONd; xWTpi: $pCoordinate = strtoupper($pCoordinate); goto m7CWl; zkSsq: if (!preg_match("\x2f\x5e" . PHPExcel_Calculation::CALCULATION_REGEXP_CELLREF . "\44\57\x69", $pCoordinate, $matches) && preg_match("\57\x5e" . PHPExcel_Calculation::CALCULATION_REGEXP_NAMEDRANGE . "\44\57\x69", $pCoordinate, $matches)) { $namedRange = PHPExcel_NamedRange::resolveRange($pCoordinate, $this); if ($namedRange !== null) { $pCoordinate = $namedRange->getRange(); return $namedRange->getWorksheet()->getCell($pCoordinate, $createIfNotExists); } } goto xWTpi; BMH_O: if (strpos($pCoordinate, "\41") !== false) { $worksheetReference = PHPExcel_Worksheet::extractSheetTitle($pCoordinate, true); return $this->parent->getSheetByName($worksheetReference[0])->getCell(strtoupper($worksheetReference[1]), $createIfNotExists); } goto zkSsq; m7CWl: if (strpos($pCoordinate, "\72") !== false || strpos($pCoordinate, "\x2c") !== false) { throw new PHPExcel_Exception("\103\145\x6c\154\x20\x63\x6f\x6f\x72\x64\151\156\x61\164\x65\40\x63\141\x6e\40\x6e\x6f\x74\x20\142\x65\x20\141\x20\162\x61\156\x67\145\40\x6f\146\x20\x63\145\154\154\x73\x2e"); } elseif (strpos($pCoordinate, "\x24") !== false) { throw new PHPExcel_Exception("\103\x65\x6c\154\x20\x63\157\x6f\162\x64\x69\x6e\x61\164\x65\40\x6d\165\x73\x74\x20\156\157\164\x20\x62\x65\x20\141\142\x73\157\154\165\x74\145\56"); } goto xFHWr; xFHWr: return $createIfNotExists ? $this->createNewCell($pCoordinate) : null; goto CFm48; pxONd: if ($this->cellCollection->isDataSet(strtoupper($pCoordinate))) { return $this->cellCollection->getCacheData($pCoordinate); } goto BMH_O; CFm48: } public function getCellByColumnAndRow($pColumn = 0, $pRow = 1, $createIfNotExists = true) { goto FAT65; WQbnm: if ($this->cellCollection->isDataSet($coordinate)) { return $this->cellCollection->getCacheData($coordinate); } goto z3g7n; FAT65: $columnLetter = PHPExcel_Cell::stringFromColumnIndex($pColumn); goto p0Oxi; p0Oxi: $coordinate = $columnLetter . $pRow; goto WQbnm; z3g7n: return $createIfNotExists ? $this->createNewCell($coordinate) : null; goto vUnPk; vUnPk: } private function createNewCell($pCoordinate) { goto zklZY; aFC7h: if ($rowDimension !== null && $rowDimension->getXfIndex() > 0) { $cell->setXfIndex($rowDimension->getXfIndex()); } elseif ($columnDimension !== null && $columnDimension->getXfIndex() > 0) { $cell->setXfIndex($columnDimension->getXfIndex()); } goto ufvVk; fahzw: $this->cellCollectionIsSorted = false; goto ZOwPO; Xdx7o: if (PHPExcel_Cell::columnIndexFromString($this->cachedHighestColumn) < PHPExcel_Cell::columnIndexFromString($aCoordinates[0])) { $this->cachedHighestColumn = $aCoordinates[0]; } goto xYidA; ufvVk: return $cell; goto aH45M; zklZY: $cell = $this->cellCollection->addCacheData($pCoordinate, new PHPExcel_Cell(null, PHPExcel_Cell_DataType::TYPE_NULL, $this)); goto fahzw; xYidA: $this->cachedHighestRow = max($this->cachedHighestRow, $aCoordinates[1]); goto CYhad; AQzE8: $columnDimension = $this->getColumnDimension($aCoordinates[0], false); goto aFC7h; ZOwPO: $aCoordinates = PHPExcel_Cell::coordinateFromString($pCoordinate); goto Xdx7o; CYhad: $rowDimension = $this->getRowDimension($aCoordinates[1], false); goto AQzE8; aH45M: } public function cellExists($pCoordinate = "\101\x31") { goto mRuJ7; RJxwE: if (!preg_match("\57\x5e" . PHPExcel_Calculation::CALCULATION_REGEXP_CELLREF . "\x24\57\151", $pCoordinate, $matches) && preg_match("\57\136" . PHPExcel_Calculation::CALCULATION_REGEXP_NAMEDRANGE . "\x24\57\x69", $pCoordinate, $matches)) { $namedRange = PHPExcel_NamedRange::resolveRange($pCoordinate, $this); if ($namedRange !== null) { $pCoordinate = $namedRange->getRange(); if ($this->getHashCode() != $namedRange->getWorksheet()->getHashCode()) { if (!$namedRange->getLocalOnly()) { return $namedRange->getWorksheet()->cellExists($pCoordinate); } else { throw new PHPExcel_Exception("\x4e\x61\155\145\144\x20\x72\x61\156\147\x65\40" . $namedRange->getName() . "\x20\151\x73\x20\x6e\x6f\164\40\x61\143\143\145\163\163\x69\142\x6c\x65\x20\146\x72\x6f\155\40\167\151\164\x68\151\x6e\40\163\150\x65\145\164\x20" . $this->getTitle()); } } } else { return false; } } goto mSaVP; mSaVP: $pCoordinate = strtoupper($pCoordinate); goto vkA84; vkA84: if (strpos($pCoordinate, "\72") !== false || strpos($pCoordinate, "\54") !== false) { throw new PHPExcel_Exception("\103\x65\x6c\x6c\40\x63\x6f\x6f\162\x64\x69\x6e\141\x74\145\x20\143\x61\156\40\x6e\157\164\x20\x62\145\x20\141\40\162\141\156\x67\145\40\157\146\40\x63\x65\154\x6c\x73\56"); } elseif (strpos($pCoordinate, "\x24") !== false) { throw new PHPExcel_Exception("\103\x65\154\x6c\x20\x63\157\157\162\x64\x69\x6e\141\x74\x65\40\155\x75\x73\x74\x20\x6e\x6f\x74\x20\142\145\40\x61\x62\163\x6f\154\x75\164\x65\56"); } else { $aCoordinates = PHPExcel_Cell::coordinateFromString($pCoordinate); return $this->cellCollection->isDataSet($pCoordinate); } goto vL3Gr; mRuJ7: if (strpos($pCoordinate, "\x21") !== false) { $worksheetReference = PHPExcel_Worksheet::extractSheetTitle($pCoordinate, true); return $this->parent->getSheetByName($worksheetReference[0])->cellExists(strtoupper($worksheetReference[1])); } goto RJxwE; vL3Gr: } public function cellExistsByColumnAndRow($pColumn = 0, $pRow = 1) { return $this->cellExists(PHPExcel_Cell::stringFromColumnIndex($pColumn) . $pRow); } public function getRowDimension($pRow = 1, $create = true) { goto DGBl4; pM10d: if (!isset($this->rowDimensions[$pRow])) { goto aChkd; dUfjC: $this->rowDimensions[$pRow] = new PHPExcel_Worksheet_RowDimension($pRow); goto pl2t1; aChkd: if (!$create) { return null; } goto dUfjC; pl2t1: $this->cachedHighestRow = max($this->cachedHighestRow, $pRow); goto tJs2y; tJs2y: } goto Vwa5u; Vwa5u: return $this->rowDimensions[$pRow]; goto rdejt; DGBl4: $found = null; goto pM10d; rdejt: } public function getColumnDimension($pColumn = "\101", $create = true) { goto VNU5z; pILEe: return $this->columnDimensions[$pColumn]; goto bUR5J; VNU5z: $pColumn = strtoupper($pColumn); goto M7b09; M7b09: if (!isset($this->columnDimensions[$pColumn])) { goto wKRXS; wKRXS: if (!$create) { return null; } goto Lt3KY; Lt3KY: $this->columnDimensions[$pColumn] = new PHPExcel_Worksheet_ColumnDimension($pColumn); goto b2cAQ; b2cAQ: if (PHPExcel_Cell::columnIndexFromString($this->cachedHighestColumn) < PHPExcel_Cell::columnIndexFromString($pColumn)) { $this->cachedHighestColumn = $pColumn; } goto kpLB3; kpLB3: } goto pILEe; bUR5J: } public function getColumnDimensionByColumn($pColumn = 0) { return $this->getColumnDimension(PHPExcel_Cell::stringFromColumnIndex($pColumn)); } public function getStyles() { return $this->styles; } public function getDefaultStyle() { return $this->parent->getDefaultStyle(); } public function setDefaultStyle(PHPExcel_Style $pValue) { $this->parent->getDefaultStyle()->applyFromArray(array("\146\x6f\x6e\164" => array("\x6e\x61\155\145" => $pValue->getFont()->getName(), "\x73\x69\x7a\x65" => $pValue->getFont()->getSize()))); return $this; } public function getStyle($pCellCoordinate = "\x41\61") { goto Xg5Bq; Xg5Bq: $this->parent->setActiveSheetIndex($this->parent->getIndex($this)); goto gSjVM; zkZ9u: return $this->parent->getCellXfSupervisor(); goto wQY3N; gSjVM: $this->setSelectedCells(strtoupper($pCellCoordinate)); goto zkZ9u; wQY3N: } public function getConditionalStyles($pCoordinate = "\x41\x31") { goto XhA9y; tkoPj: return $this->conditionalStylesCollection[$pCoordinate]; goto nn6sB; XhA9y: $pCoordinate = strtoupper($pCoordinate); goto ylnHt; ylnHt: if (!isset($this->conditionalStylesCollection[$pCoordinate])) { $this->conditionalStylesCollection[$pCoordinate] = array(); } goto tkoPj; nn6sB: } public function conditionalStylesExists($pCoordinate = "\x41\x31") { if (isset($this->conditionalStylesCollection[strtoupper($pCoordinate)])) { return true; } return false; } public function removeConditionalStyles($pCoordinate = "\x41\x31") { unset($this->conditionalStylesCollection[strtoupper($pCoordinate)]); return $this; } public function getConditionalStylesCollection() { return $this->conditionalStylesCollection; } public function setConditionalStyles($pCoordinate = "\x41\x31", $pValue) { $this->conditionalStylesCollection[strtoupper($pCoordinate)] = $pValue; return $this; } public function getStyleByColumnAndRow($pColumn = 0, $pRow = 1, $pColumn2 = null, $pRow2 = null) { if (!is_null($pColumn2) && !is_null($pRow2)) { $cellRange = PHPExcel_Cell::stringFromColumnIndex($pColumn) . $pRow . "\72" . PHPExcel_Cell::stringFromColumnIndex($pColumn2) . $pRow2; return $this->getStyle($cellRange); } return $this->getStyle(PHPExcel_Cell::stringFromColumnIndex($pColumn) . $pRow); } public function setSharedStyle(PHPExcel_Style $pSharedCellStyle = null, $pRange = '') { $this->duplicateStyle($pSharedCellStyle, $pRange); return $this; } public function duplicateStyle(PHPExcel_Style $pCellStyle = null, $pRange = '') { goto CsmWY; JI9pd: if ($rangeStart[0] > $rangeEnd[0] && $rangeStart[1] > $rangeEnd[1]) { goto Bj_Aq; Bj_Aq: $tmp = $rangeStart; goto qa6f8; hJEC2: $rangeEnd = $tmp; goto yII4N; qa6f8: $rangeStart = $rangeEnd; goto hJEC2; yII4N: } goto f0ueG; CsmWY: $style = $pCellStyle->getIsSupervisor() ? $pCellStyle->getSharedComponent() : $pCellStyle; goto u2ZvY; oY3nu: return $this; goto GOkko; iL81D: if ($existingStyle = $this->parent->getCellXfByHashCode($pCellStyle->getHashCode())) { $xfIndex = $existingStyle->getIndex(); } else { $workbook->addCellXf($pCellStyle); $xfIndex = $pCellStyle->getIndex(); } goto CXxFX; u2ZvY: $workbook = $this->parent; goto iL81D; f0ueG: for ($col = $rangeStart[0]; $col <= $rangeEnd[0]; ++$col) { for ($row = $rangeStart[1]; $row <= $rangeEnd[1]; ++$row) { $this->getCell(PHPExcel_Cell::stringFromColumnIndex($col - 1) . $row)->setXfIndex($xfIndex); } } goto oY3nu; CXxFX: list($rangeStart, $rangeEnd) = PHPExcel_Cell::rangeBoundaries($pRange . "\72" . $pRange); goto JI9pd; GOkko: } public function duplicateConditionalStyle(array $pCellStyle = null, $pRange = '') { goto uYJmB; sGYSj: for ($col = $rangeStart[0]; $col <= $rangeEnd[0]; ++$col) { for ($row = $rangeStart[1]; $row <= $rangeEnd[1]; ++$row) { $this->setConditionalStyles(PHPExcel_Cell::stringFromColumnIndex($col - 1) . $row, $pCellStyle); } } goto pq2lg; rGU00: if ($rangeStart[0] > $rangeEnd[0] && $rangeStart[1] > $rangeEnd[1]) { goto t7Jnr; oR01i: $rangeStart = $rangeEnd; goto SIoFE; t7Jnr: $tmp = $rangeStart; goto oR01i; SIoFE: $rangeEnd = $tmp; goto HXqDf; HXqDf: } goto sGYSj; Rs81W: list($rangeStart, $rangeEnd) = PHPExcel_Cell::rangeBoundaries($pRange . "\x3a" . $pRange); goto rGU00; uYJmB: foreach ($pCellStyle as $cellStyle) { if (!$cellStyle instanceof PHPExcel_Style_Conditional) { throw new PHPExcel_Exception("\123\x74\x79\x6c\x65\x20\x69\x73\40\156\x6f\164\x20\141\40\x63\157\x6e\x64\x69\x74\x69\157\156\141\x6c\40\163\164\171\154\145"); } } goto Rs81W; pq2lg: return $this; goto KUX2S; KUX2S: } public function duplicateStyleArray($pStyles = null, $pRange = '', $pAdvanced = true) { $this->getStyle($pRange)->applyFromArray($pStyles, $pAdvanced); return $this; } public function setBreak($pCell = "\x41\x31", $pBreak = PHPExcel_Worksheet::BREAK_NONE) { goto vIavI; vIavI: $pCell = strtoupper($pCell); goto bQJh6; bQJh6: if ($pCell != '') { if ($pBreak == PHPExcel_Worksheet::BREAK_NONE) { if (isset($this->breaks[$pCell])) { unset($this->breaks[$pCell]); } } else { $this->breaks[$pCell] = $pBreak; } } else { throw new PHPExcel_Exception("\x4e\157\40\x63\145\154\x6c\x20\143\157\157\x72\x64\x69\x6e\x61\x74\145\40\163\x70\x65\143\x69\146\x69\x65\x64\x2e"); } goto vJQWa; vJQWa: return $this; goto UQZbY; UQZbY: } public function setBreakByColumnAndRow($pColumn = 0, $pRow = 1, $pBreak = PHPExcel_Worksheet::BREAK_NONE) { return $this->setBreak(PHPExcel_Cell::stringFromColumnIndex($pColumn) . $pRow, $pBreak); } public function getBreaks() { return $this->breaks; } public function mergeCells($pRange = "\x41\x31\x3a\x41\x31") { goto N3uxi; aAZFN: if (strpos($pRange, "\x3a") !== false) { goto G8qRp; eFQMj: if (!$this->cellExists($upperLeft)) { $this->getCell($upperLeft)->setValueExplicit(null, PHPExcel_Cell_DataType::TYPE_NULL); } goto t7qT3; lFC25: for ($i = 1; $i < $count; $i++) { if ($this->cellExists($aReferences[$i])) { $this->getCell($aReferences[$i])->setValueExplicit(null, PHPExcel_Cell_DataType::TYPE_NULL); } } goto w0gpw; jr0Bh: $upperLeft = $aReferences[0]; goto eFQMj; t7qT3: $count = count($aReferences); goto lFC25; oI3sP: $aReferences = PHPExcel_Cell::extractAllCellReferencesInRange($pRange); goto jr0Bh; G8qRp: $this->mergeCells[$pRange] = $pRange; goto oI3sP; w0gpw: } else { throw new PHPExcel_Exception("\115\x65\x72\147\145\x20\x6d\165\x73\x74\40\x62\x65\40\163\145\x74\x20\157\156\40\141\40\162\141\156\147\x65\x20\x6f\146\x20\x63\145\154\x6c\163\x2e"); } goto m2QoX; m2QoX: return $this; goto TWSDm; N3uxi: $pRange = strtoupper($pRange); goto aAZFN; TWSDm: } public function mergeCellsByColumnAndRow($pColumn1 = 0, $pRow1 = 1, $pColumn2 = 0, $pRow2 = 1) { $cellRange = PHPExcel_Cell::stringFromColumnIndex($pColumn1) . $pRow1 . "\72" . PHPExcel_Cell::stringFromColumnIndex($pColumn2) . $pRow2; return $this->mergeCells($cellRange); } public function unmergeCells($pRange = "\x41\61\72\x41\61") { goto r2sTC; tf8l6: return $this; goto TpHDy; PzAZr: if (strpos($pRange, "\72") !== false) { if (isset($this->mergeCells[$pRange])) { unset($this->mergeCells[$pRange]); } else { throw new PHPExcel_Exception("\103\x65\x6c\154\x20\x72\141\156\x67\x65\40" . $pRange . "\x20\x6e\x6f\164\x20\153\156\157\x77\x6e\x20\141\163\x20\155\145\162\x67\145\144\x2e"); } } else { throw new PHPExcel_Exception("\115\145\x72\147\x65\x20\x63\x61\x6e\x20\x6f\156\154\171\x20\x62\145\x20\162\x65\155\x6f\166\145\x64\x20\146\162\x6f\x6d\x20\141\x20\162\141\156\x67\x65\x20\x6f\146\40\143\x65\x6c\x6c\x73\56"); } goto tf8l6; r2sTC: $pRange = strtoupper($pRange); goto PzAZr; TpHDy: } public function unmergeCellsByColumnAndRow($pColumn1 = 0, $pRow1 = 1, $pColumn2 = 0, $pRow2 = 1) { $cellRange = PHPExcel_Cell::stringFromColumnIndex($pColumn1) . $pRow1 . "\x3a" . PHPExcel_Cell::stringFromColumnIndex($pColumn2) . $pRow2; return $this->unmergeCells($cellRange); } public function getMergeCells() { return $this->mergeCells; } public function setMergeCells($pValue = array()) { $this->mergeCells = $pValue; return $this; } public function protectCells($pRange = "\x41\x31", $pPassword = '', $pAlreadyHashed = false) { goto XjVyg; XjVyg: $pRange = strtoupper($pRange); goto T8W69; T8W69: if (!$pAlreadyHashed) { $pPassword = PHPExcel_Shared_PasswordHasher::hashPassword($pPassword); } goto vwYzw; vwYzw: $this->protectedCells[$pRange] = $pPassword; goto kWi8f; kWi8f: return $this; goto F7QTQ; F7QTQ: } public function protectCellsByColumnAndRow($pColumn1 = 0, $pRow1 = 1, $pColumn2 = 0, $pRow2 = 1, $pPassword = '', $pAlreadyHashed = false) { $cellRange = PHPExcel_Cell::stringFromColumnIndex($pColumn1) . $pRow1 . "\72" . PHPExcel_Cell::stringFromColumnIndex($pColumn2) . $pRow2; return $this->protectCells($cellRange, $pPassword, $pAlreadyHashed); } public function unprotectCells($pRange = "\101\61") { goto WxII4; WEWRv: return $this; goto JNz1P; WxII4: $pRange = strtoupper($pRange); goto ahEWC; ahEWC: if (isset($this->protectedCells[$pRange])) { unset($this->protectedCells[$pRange]); } else { throw new PHPExcel_Exception("\103\x65\x6c\x6c\40\162\x61\156\x67\x65\40" . $pRange . "\40\x6e\x6f\x74\x20\x6b\x6e\x6f\167\x6e\40\x61\x73\40\160\x72\x6f\x74\x65\x63\164\x65\144\56"); } goto WEWRv; JNz1P: } public function unprotectCellsByColumnAndRow($pColumn1 = 0, $pRow1 = 1, $pColumn2 = 0, $pRow2 = 1, $pPassword = '', $pAlreadyHashed = false) { $cellRange = PHPExcel_Cell::stringFromColumnIndex($pColumn1) . $pRow1 . "\x3a" . PHPExcel_Cell::stringFromColumnIndex($pColumn2) . $pRow2; return $this->unprotectCells($cellRange, $pPassword, $pAlreadyHashed); } public function getProtectedCells() { return $this->protectedCells; } public function getAutoFilter() { return $this->autoFilter; } public function setAutoFilter($pValue) { goto T9moc; U7kT5: return $this; goto NcGYk; T9moc: $pRange = strtoupper($pValue); goto ukm1W; ukm1W: if (is_string($pValue)) { $this->autoFilter->setRange($pValue); } elseif (is_object($pValue) && $pValue instanceof PHPExcel_Worksheet_AutoFilter) { $this->autoFilter = $pValue; } goto U7kT5; NcGYk: } public function setAutoFilterByColumnAndRow($pColumn1 = 0, $pRow1 = 1, $pColumn2 = 0, $pRow2 = 1) { return $this->setAutoFilter(PHPExcel_Cell::stringFromColumnIndex($pColumn1) . $pRow1 . "\72" . PHPExcel_Cell::stringFromColumnIndex($pColumn2) . $pRow2); } public function removeAutoFilter() { $this->autoFilter->setRange(null); return $this; } public function getFreezePane() { return $this->freezePane; } public function freezePane($pCell = '') { goto qmX82; qmX82: $pCell = strtoupper($pCell); goto EdMhk; EdMhk: if (strpos($pCell, "\x3a") === false && strpos($pCell, "\x2c") === false) { $this->freezePane = $pCell; } else { throw new PHPExcel_Exception("\x46\162\145\x65\172\145\x20\160\x61\x6e\x65\x20\x63\x61\x6e\40\156\157\x74\x20\142\145\40\x73\145\164\x20\x6f\x6e\40\x61\x20\162\x61\156\147\x65\40\157\x66\40\143\x65\x6c\154\163\x2e"); } goto GnhAe; GnhAe: return $this; goto WIjCN; WIjCN: } public function freezePaneByColumnAndRow($pColumn = 0, $pRow = 1) { return $this->freezePane(PHPExcel_Cell::stringFromColumnIndex($pColumn) . $pRow); } public function unfreezePane() { return $this->freezePane(''); } public function insertNewRowBefore($pBefore = 1, $pNumRows = 1) { if ($pBefore >= 1) { $objReferenceHelper = PHPExcel_ReferenceHelper::getInstance(); $objReferenceHelper->insertNewBefore("\x41" . $pBefore, 0, $pNumRows, $this); } else { throw new PHPExcel_Exception("\x52\x6f\167\163\x20\x63\x61\156\40\x6f\156\x6c\x79\x20\142\x65\40\151\x6e\163\145\162\x74\145\144\x20\142\x65\x66\157\162\145\x20\x61\164\x20\154\x65\x61\163\164\40\x72\x6f\x77\40\x31\x2e"); } return $this; } public function insertNewColumnBefore($pBefore = "\101", $pNumCols = 1) { if (!is_numeric($pBefore)) { $objReferenceHelper = PHPExcel_ReferenceHelper::getInstance(); $objReferenceHelper->insertNewBefore($pBefore . "\61", $pNumCols, 0, $this); } else { throw new PHPExcel_Exception("\103\157\154\x75\x6d\156\40\x72\x65\146\x65\x72\145\156\143\145\x73\40\x73\150\x6f\165\154\x64\40\156\157\164\40\x62\145\40\x6e\165\155\x65\162\151\x63\x2e"); } return $this; } public function insertNewColumnBeforeByIndex($pBefore = 0, $pNumCols = 1) { if ($pBefore >= 0) { return $this->insertNewColumnBefore(PHPExcel_Cell::stringFromColumnIndex($pBefore), $pNumCols); } else { throw new PHPExcel_Exception("\103\157\x6c\x75\155\156\x73\40\x63\x61\156\40\x6f\x6e\154\171\x20\142\145\x20\x69\x6e\163\x65\162\164\x65\x64\x20\x62\x65\x66\x6f\162\145\40\141\x74\x20\x6c\145\x61\163\164\40\143\x6f\154\x75\x6d\x6e\x20\x41\x20\50\x30\x29\56"); } } public function removeRow($pRow = 1, $pNumRows = 1) { if ($pRow >= 1) { goto nSOn8; nSOn8: $highestRow = $this->getHighestDataRow(); goto LN0LQ; c2htl: $objReferenceHelper->insertNewBefore("\101" . ($pRow + $pNumRows), 0, -$pNumRows, $this); goto WW6w_; WW6w_: for ($r = 0; $r < $pNumRows; ++$r) { $this->getCellCacheController()->removeRow($highestRow); --$highestRow; } goto ornAB; LN0LQ: $objReferenceHelper = PHPExcel_ReferenceHelper::getInstance(); goto c2htl; ornAB: } else { throw new PHPExcel_Exception("\x52\x6f\167\x73\x20\x74\157\40\x62\145\40\144\x65\x6c\x65\x74\x65\144\40\163\x68\157\165\x6c\144\x20\x61\164\40\x6c\x65\141\x73\164\x20\163\164\141\162\x74\40\146\162\x6f\155\x20\x72\x6f\167\x20\x31\x2e"); } return $this; } public function removeColumn($pColumn = "\101", $pNumCols = 1) { if (!is_numeric($pColumn)) { goto VbJtH; BTmyd: $pColumn = PHPExcel_Cell::stringFromColumnIndex(PHPExcel_Cell::columnIndexFromString($pColumn) - 1 + $pNumCols); goto d4G6a; bZaB4: $objReferenceHelper->insertNewBefore($pColumn . "\x31", -$pNumCols, 0, $this); goto Ml0Jr; VbJtH: $highestColumn = $this->getHighestDataColumn(); goto BTmyd; d4G6a: $objReferenceHelper = PHPExcel_ReferenceHelper::getInstance(); goto bZaB4; Ml0Jr: for ($c = 0; $c < $pNumCols; ++$c) { $this->getCellCacheController()->removeColumn($highestColumn); $highestColumn = PHPExcel_Cell::stringFromColumnIndex(PHPExcel_Cell::columnIndexFromString($highestColumn) - 2); } goto XpqFq; XpqFq: } else { throw new PHPExcel_Exception("\103\157\x6c\x75\x6d\156\x20\162\x65\x66\x65\162\145\x6e\x63\x65\163\x20\163\150\x6f\165\x6c\x64\40\x6e\157\164\40\x62\x65\x20\x6e\165\155\145\x72\151\x63\56"); } return $this; } public function removeColumnByIndex($pColumn = 0, $pNumCols = 1) { if ($pColumn >= 0) { return $this->removeColumn(PHPExcel_Cell::stringFromColumnIndex($pColumn), $pNumCols); } else { throw new PHPExcel_Exception("\x43\x6f\x6c\x75\155\156\163\x20\x74\157\40\142\145\x20\144\x65\154\145\164\x65\x64\x20\163\150\157\165\154\x64\40\x61\164\40\x6c\x65\x61\163\x74\40\x73\164\x61\162\164\x20\146\162\x6f\155\x20\x63\157\154\x75\x6d\156\x20\x30"); } } public function getShowGridlines() { return $this->showGridlines; } public function setShowGridlines($pValue = false) { $this->showGridlines = $pValue; return $this; } public function getPrintGridlines() { return $this->printGridlines; } public function setPrintGridlines($pValue = false) { $this->printGridlines = $pValue; return $this; } public function getShowRowColHeaders() { return $this->showRowColHeaders; } public function setShowRowColHeaders($pValue = false) { $this->showRowColHeaders = $pValue; return $this; } public function getShowSummaryBelow() { return $this->showSummaryBelow; } public function setShowSummaryBelow($pValue = true) { $this->showSummaryBelow = $pValue; return $this; } public function getShowSummaryRight() { return $this->showSummaryRight; } public function setShowSummaryRight($pValue = true) { $this->showSummaryRight = $pValue; return $this; } public function getComments() { return $this->comments; } public function setComments($pValue = array()) { $this->comments = $pValue; return $this; } public function getComment($pCellCoordinate = "\x41\61") { $pCellCoordinate = strtoupper($pCellCoordinate); if (strpos($pCellCoordinate, "\x3a") !== false || strpos($pCellCoordinate, "\54") !== false) { throw new PHPExcel_Exception("\103\145\x6c\x6c\x20\x63\x6f\x6f\162\x64\x69\156\141\164\x65\40\x73\164\162\x69\156\x67\40\143\x61\x6e\40\156\x6f\x74\x20\x62\145\40\x61\40\x72\x61\x6e\x67\x65\x20\x6f\x66\40\143\x65\154\x6c\163\x2e"); } elseif (strpos($pCellCoordinate, "\x24") !== false) { throw new PHPExcel_Exception("\103\145\x6c\x6c\40\x63\x6f\x6f\162\144\151\156\141\164\145\40\x73\164\x72\x69\156\x67\40\155\x75\163\x74\x20\x6e\x6f\x74\x20\142\145\x20\141\x62\163\157\x6c\165\x74\x65\56"); } elseif ($pCellCoordinate == '') { throw new PHPExcel_Exception("\x43\145\154\154\40\143\x6f\x6f\162\144\x69\x6e\141\x74\x65\40\x63\141\x6e\x20\156\157\164\40\x62\145\x20\x7a\x65\162\157\55\154\x65\156\147\x74\x68\x20\x73\164\x72\151\156\147\56"); } else { if (isset($this->comments[$pCellCoordinate])) { return $this->comments[$pCellCoordinate]; } else { goto ZpjRZ; ZpjRZ: $newComment = new PHPExcel_Comment(); goto WzrE2; Loh7p: return $newComment; goto kzcLT; WzrE2: $this->comments[$pCellCoordinate] = $newComment; goto Loh7p; kzcLT: } } } public function getCommentByColumnAndRow($pColumn = 0, $pRow = 1) { return $this->getComment(PHPExcel_Cell::stringFromColumnIndex($pColumn) . $pRow); } public function getSelectedCell() { return $this->getSelectedCells(); } public function getActiveCell() { return $this->activeCell; } public function getSelectedCells() { return $this->selectedCells; } public function setSelectedCell($pCoordinate = "\101\x31") { return $this->setSelectedCells($pCoordinate); } public function setSelectedCells($pCoordinate = "\x41\61") { goto sMsUm; jw3xT: $pCoordinate = preg_replace("\57\x5e\x28\133\x30\55\71\x5d\x2b\x29\44\x2f", "\44\173\x31\175\72\44\173\x31\x7d", $pCoordinate); goto simfW; YITwJ: $pCoordinate = preg_replace("\x2f\136\50\133\x41\55\x5a\135\53\51\44\57", "\44\x7b\61\175\x3a\44\173\61\175", $pCoordinate); goto jw3xT; XxgAq: $pCoordinate = preg_replace("\57\136\50\x5b\x30\x2d\71\x5d\53\51\x3a\x28\x5b\60\x2d\x39\135\53\x29\44\x2f", "\x41\44\173\x31\175\x3a\x58\x46\104\x24\x7b\x32\x7d", $pCoordinate); goto YsSnS; iBbDw: $this->selectedCells = $pCoordinate; goto iT2Qh; YsSnS: if (strpos($pCoordinate, "\72") !== false || strpos($pCoordinate, "\x2c") !== false) { list($first, ) = PHPExcel_Cell::splitRange($pCoordinate); $this->activeCell = $first[0]; } else { $this->activeCell = $pCoordinate; } goto iBbDw; sMsUm: $pCoordinate = strtoupper($pCoordinate); goto YITwJ; simfW: $pCoordinate = preg_replace("\57\136\x28\133\101\55\132\x5d\x2b\x29\x3a\50\133\x41\55\132\135\x2b\x29\44\57", "\44\x7b\x31\x7d\x31\x3a\44\173\62\175\x31\x30\64\x38\x35\x37\x36", $pCoordinate); goto XxgAq; iT2Qh: return $this; goto G58OO; G58OO: } public function setSelectedCellByColumnAndRow($pColumn = 0, $pRow = 1) { return $this->setSelectedCells(PHPExcel_Cell::stringFromColumnIndex($pColumn) . $pRow); } public function getRightToLeft() { return $this->rightToLeft; } public function setRightToLeft($value = false) { $this->rightToLeft = $value; return $this; } public function fromArray($source = null, $nullValue = null, $startCell = "\x41\x31", $strictNullComparison = false) { if (is_array($source)) { goto AgQX9; AgQX9: if (!is_array(end($source))) { $source = array($source); } goto pW6zS; pW6zS: list($startColumn, $startRow) = PHPExcel_Cell::coordinateFromString($startCell); goto ufU3Y; ufU3Y: foreach ($source as $rowData) { goto pE_7j; pE_7j: $currentColumn = $startColumn; goto fswi6; fswi6: foreach ($rowData as $cellValue) { if ($strictNullComparison) { if ($cellValue !== $nullValue) { $this->getCell($currentColumn . $startRow)->setValue($cellValue); } } else { if ($cellValue != $nullValue) { $this->getCell($currentColumn . $startRow)->setValue($cellValue); } } ++$currentColumn; } goto b78jj; b78jj: ++$startRow; goto xEhJn; xEhJn: } goto UYlKL; UYlKL: } else { throw new PHPExcel_Exception("\x50\x61\162\141\x6d\x65\x74\145\162\40\x24\x73\x6f\x75\x72\143\x65\x20\163\x68\x6f\165\x6c\144\x20\x62\x65\40\x61\x6e\40\141\x72\x72\141\x79\x2e"); } return $this; } public function rangeToArray($pRange = "\x41\61", $nullValue = null, $calculateFormulas = true, $formatData = true, $returnCellRef = false) { goto aCg8N; zNHxH: $minCol = PHPExcel_Cell::stringFromColumnIndex($rangeStart[0] - 1); goto V4Fdp; V4Fdp: $minRow = $rangeStart[1]; goto gQ344; mfINx: list($rangeStart, $rangeEnd) = PHPExcel_Cell::rangeBoundaries($pRange); goto zNHxH; gQ344: $maxCol = PHPExcel_Cell::stringFromColumnIndex($rangeEnd[0] - 1); goto EhngG; S6ULf: $r = -1; goto RZDlv; l1BXg: return $returnValue; goto aRW1Z; EhngG: $maxRow = $rangeEnd[1]; goto ipxFY; aCg8N: $returnValue = array(); goto mfINx; ipxFY: $maxCol++; goto S6ULf; RZDlv: for ($row = $minRow; $row <= $maxRow; ++$row) { $rRef = $returnCellRef ? $row : ++$r; $c = -1; for ($col = $minCol; $col != $maxCol; ++$col) { $cRef = $returnCellRef ? $col : ++$c; if ($this->cellCollection->isDataSet($col . $row)) { $cell = $this->cellCollection->getCacheData($col . $row); if ($cell->getValue() !== null) { if ($cell->getValue() instanceof PHPExcel_RichText) { $returnValue[$rRef][$cRef] = $cell->getValue()->getPlainText(); } else { if ($calculateFormulas) { $returnValue[$rRef][$cRef] = $cell->getCalculatedValue(); } else { $returnValue[$rRef][$cRef] = $cell->getValue(); } } if ($formatData) { $style = $this->parent->getCellXfByIndex($cell->getXfIndex()); $returnValue[$rRef][$cRef] = PHPExcel_Style_NumberFormat::toFormattedString($returnValue[$rRef][$cRef], $style && $style->getNumberFormat() ? $style->getNumberFormat()->getFormatCode() : PHPExcel_Style_NumberFormat::FORMAT_GENERAL); } } else { $returnValue[$rRef][$cRef] = $nullValue; } } else { $returnValue[$rRef][$cRef] = $nullValue; } } } goto l1BXg; aRW1Z: } public function namedRangeToArray($pNamedRange = '', $nullValue = null, $calculateFormulas = true, $formatData = true, $returnCellRef = false) { goto quuGq; quuGq: $namedRange = PHPExcel_NamedRange::resolveRange($pNamedRange, $this); goto h3591; h3591: if ($namedRange !== null) { goto OuEjL; OK93M: $pCellRange = $namedRange->getRange(); goto s6Zba; OuEjL: $pWorkSheet = $namedRange->getWorksheet(); goto OK93M; s6Zba: return $pWorkSheet->rangeToArray($pCellRange, $nullValue, $calculateFormulas, $formatData, $returnCellRef); goto ZDjlf; ZDjlf: } goto DH4Az; DH4Az: throw new PHPExcel_Exception("\116\141\155\145\144\x20\122\x61\156\x67\145\40" . $pNamedRange . "\x20\x64\x6f\145\x73\40\156\x6f\164\x20\145\170\x69\x73\x74\56"); goto FdLin; FdLin: } public function toArray($nullValue = null, $calculateFormulas = true, $formatData = true, $returnCellRef = false) { goto rI3Zf; VmXHY: $maxRow = $this->getHighestRow(); goto a8cdG; a8cdG: return $this->rangeToArray("\x41\61\x3a" . $maxCol . $maxRow, $nullValue, $calculateFormulas, $formatData, $returnCellRef); goto H42Jo; rI3Zf: $this->garbageCollect(); goto p0rSo; p0rSo: $maxCol = $this->getHighestColumn(); goto VmXHY; H42Jo: } public function getRowIterator($startRow = 1, $endRow = null) { return new PHPExcel_Worksheet_RowIterator($this, $startRow, $endRow); } public function getColumnIterator($startColumn = "\x41", $endColumn = null) { return new PHPExcel_Worksheet_ColumnIterator($this, $startColumn, $endColumn); } public function garbageCollect() { goto vb4At; kgNzR: $highestColumn = PHPExcel_Cell::columnIndexFromString($colRow["\143\x6f\154\165\x6d\x6e"]); goto lXK7T; oWqau: $colRow = $this->cellCollection->getHighestRowAndColumn(); goto GM1cl; fA5vs: $this->cachedHighestRow = $highestRow; goto WTAGh; vb4At: $this->cellCollection->getCacheData("\x41\61"); goto oWqau; as3zu: foreach ($this->rowDimensions as $dimension) { $highestRow = max($highestRow, $dimension->getRowIndex()); } goto fVWzN; fVWzN: if ($highestColumn < 0) { $this->cachedHighestColumn = "\x41"; } else { $this->cachedHighestColumn = PHPExcel_Cell::stringFromColumnIndex(--$highestColumn); } goto fA5vs; GM1cl: $highestRow = $colRow["\162\x6f\x77"]; goto kgNzR; WTAGh: return $this; goto E84tg; lXK7T: foreach ($this->columnDimensions as $dimension) { $highestColumn = max($highestColumn, PHPExcel_Cell::columnIndexFromString($dimension->getColumnIndex())); } goto as3zu; E84tg: } public function getHashCode() { if ($this->dirty) { $this->hash = md5($this->title . $this->autoFilter . ($this->protection->isProtectionEnabled() ? "\164" : "\146") . __CLASS__); $this->dirty = false; } return $this->hash; } public static function extractSheetTitle($pRange, $returnRange = false) { goto CaqeL; CaqeL: if (($sep = strpos($pRange, "\41")) === false) { return ''; } goto SxsjF; SxsjF: if ($returnRange) { return array(trim(substr($pRange, 0, $sep), "\47"), substr($pRange, $sep + 1)); } goto o1bCA; o1bCA: return substr($pRange, $sep + 1); goto D9wZb; D9wZb: } public function getHyperlink($pCellCoordinate = "\x41\61") { goto cLdyl; cLdyl: if (isset($this->hyperlinkCollection[$pCellCoordinate])) { return $this->hyperlinkCollection[$pCellCoordinate]; } goto vC_v3; vC_v3: $this->hyperlinkCollection[$pCellCoordinate] = new PHPExcel_Cell_Hyperlink(); goto i5wFj; i5wFj: return $this->hyperlinkCollection[$pCellCoordinate]; goto wbxqu; wbxqu: } public function setHyperlink($pCellCoordinate = "\x41\x31", PHPExcel_Cell_Hyperlink $pHyperlink = null) { if ($pHyperlink === null) { unset($this->hyperlinkCollection[$pCellCoordinate]); } else { $this->hyperlinkCollection[$pCellCoordinate] = $pHyperlink; } return $this; } public function hyperlinkExists($pCoordinate = "\x41\x31") { return isset($this->hyperlinkCollection[$pCoordinate]); } public function getHyperlinkCollection() { return $this->hyperlinkCollection; } public function getDataValidation($pCellCoordinate = "\x41\61") { goto Ofa4O; ir8Jz: $this->dataValidationCollection[$pCellCoordinate] = new PHPExcel_Cell_DataValidation(); goto aQnVZ; Ofa4O: if (isset($this->dataValidationCollection[$pCellCoordinate])) { return $this->dataValidationCollection[$pCellCoordinate]; } goto ir8Jz; aQnVZ: return $this->dataValidationCollection[$pCellCoordinate]; goto uknaj; uknaj: } public function setDataValidation($pCellCoordinate = "\101\61", PHPExcel_Cell_DataValidation $pDataValidation = null) { if ($pDataValidation === null) { unset($this->dataValidationCollection[$pCellCoordinate]); } else { $this->dataValidationCollection[$pCellCoordinate] = $pDataValidation; } return $this; } public function dataValidationExists($pCoordinate = "\x41\61") { return isset($this->dataValidationCollection[$pCoordinate]); } public function getDataValidationCollection() { return $this->dataValidationCollection; } public function shrinkRangeToFit($range) { goto iBElK; I57Dh: foreach ($rangeBlocks as &$rangeSet) { goto yLM6n; enhdW: if ($rangeBoundaries[1][1] > $maxRow) { $rangeBoundaries[1][1] = $maxRow; } goto ye95R; RIgFp: if (PHPExcel_Cell::columnIndexFromString($rangeBoundaries[1][0]) > $maxCol) { $rangeBoundaries[1][0] = PHPExcel_Cell::stringFromColumnIndex($maxCol); } goto enhdW; ye95R: $rangeSet = $rangeBoundaries[0][0] . $rangeBoundaries[0][1] . "\72" . $rangeBoundaries[1][0] . $rangeBoundaries[1][1]; goto LlaSj; yLM6n: $rangeBoundaries = PHPExcel_Cell::getRangeBoundaries($rangeSet); goto cv9P7; aN47P: if ($rangeBoundaries[0][1] > $maxRow) { $rangeBoundaries[0][1] = $maxRow; } goto RIgFp; cv9P7: if (PHPExcel_Cell::columnIndexFromString($rangeBoundaries[0][0]) > $maxCol) { $rangeBoundaries[0][0] = PHPExcel_Cell::stringFromColumnIndex($maxCol); } goto aN47P; LlaSj: } goto vj8Ju; g6R3R: $rangeBlocks = explode("\x20", $range); goto I57Dh; n7Lce: return $stRange; goto BIpIF; vj8Ju: unset($rangeSet); goto Fcw_R; EGsD9: $maxRow = $this->getHighestRow(); goto B0pnQ; iBElK: $maxCol = $this->getHighestColumn(); goto EGsD9; B0pnQ: $maxCol = PHPExcel_Cell::columnIndexFromString($maxCol); goto g6R3R; Fcw_R: $stRange = implode("\40", $rangeBlocks); goto n7Lce; BIpIF: } public function getTabColor() { if ($this->tabColor === null) { $this->tabColor = new PHPExcel_Style_Color(); } return $this->tabColor; } public function resetTabColor() { goto fqI3S; Gxz_D: unset($this->tabColor); goto M02Zn; M02Zn: return $this; goto Z24Lf; fqI3S: $this->tabColor = null; goto Gxz_D; Z24Lf: } public function isTabColorSet() { return $this->tabColor !== null; } public function copy() { $copied = clone $this; return $copied; } public function __clone() { foreach ($this as $key => $val) { if ($key == "\x70\141\162\x65\156\x74") { continue; } if (is_object($val) || is_array($val)) { if ($key == "\x63\145\x6c\154\103\157\x6c\x6c\x65\143\x74\x69\x6f\x6e") { goto JbO19; i5xsP: $this->cellCollection = $newCollection; goto aDcMg; vw13u: $newCollection->copyCellCollection($this); goto i5xsP; JbO19: $newCollection = clone $this->cellCollection; goto vw13u; aDcMg: } elseif ($key == "\144\162\x61\x77\x69\x6e\147\x43\x6f\154\x6c\145\x63\x74\151\157\156") { $newCollection = clone $this->drawingCollection; $this->drawingCollection = $newCollection; } elseif ($key == "\141\x75\164\157\x46\151\x6c\x74\x65\x72" && $this->autoFilter instanceof PHPExcel_Worksheet_AutoFilter) { goto sfvYx; CjHKQ: $this->autoFilter = $newAutoFilter; goto tmzQX; tmzQX: $this->autoFilter->setParent($this); goto TJxXi; sfvYx: $newAutoFilter = clone $this->autoFilter; goto CjHKQ; TJxXi: } else { $this->{$key} = unserialize(serialize($val)); } } } } public function setCodeName($pValue = null) { goto dt3W2; dt3W2: if ($this->getCodeName() == $pValue) { return $this; } goto ykr7p; ykr7p: $pValue = str_replace("\40", "\x5f", $pValue); goto eTzUA; HY18q: if ($this->getParent()) { if ($this->getParent()->sheetCodeNameExists($pValue)) { goto IzWVK; KYFK2: $pValue = $pValue . "\x5f" . $i; goto BK8NX; GDvdW: $i = 1; goto bGCBu; bGCBu: while ($this->getParent()->sheetCodeNameExists($pValue . "\x5f" . $i)) { ++$i; if ($i == 10) { if (PHPExcel_Shared_String::CountCharacters($pValue) > 28) { $pValue = PHPExcel_Shared_String::Substring($pValue, 0, 28); } } elseif ($i == 100) { if (PHPExcel_Shared_String::CountCharacters($pValue) > 27) { $pValue = PHPExcel_Shared_String::Substring($pValue, 0, 27); } } } goto KYFK2; IzWVK: if (PHPExcel_Shared_String::CountCharacters($pValue) > 29) { $pValue = PHPExcel_Shared_String::Substring($pValue, 0, 29); } goto GDvdW; BK8NX: } } goto g8kmN; g8kmN: $this->codeName = $pValue; goto AdB8k; eTzUA: self::checkSheetCodeName($pValue); goto HY18q; AdB8k: return $this; goto jiENd; jiENd: } public function getCodeName() { return $this->codeName; } public function hasCodeName() { return !is_null($this->codeName); } }
