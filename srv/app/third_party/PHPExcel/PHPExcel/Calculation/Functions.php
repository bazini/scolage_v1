<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto ibxN3; JWKtz: define("\x4d\101\130\x5f\x56\x41\114\x55\105", 1.2E+308); goto D5bol; D5bol: define("\x4d\x5f\x32\x44\111\126\120\x49", 0.6366197723675814); goto Q5Ooc; Q5Ooc: define("\115\x41\x58\x5f\111\x54\105\x52\101\124\111\117\116\123", 256); goto tdUUW; vaz3Q: if (!function_exists("\141\x74\141\x6e\x68")) { function atanh($x) { return (log(1 + $x) - log(1 - $x)) / 2; } } goto rTQ0g; tdUUW: define("\120\122\x45\103\x49\x53\x49\x4f\x4e", 8.88E-16); goto BPBNX; ibxN3: if (!defined("\x50\110\x50\x45\130\103\x45\x4c\137\x52\117\117\x54")) { define("\120\x48\120\105\x58\103\105\x4c\137\x52\117\117\x54", dirname(__FILE__) . "\x2f\x2e\56\x2f\x2e\56\57"); require PHPEXCEL_ROOT . "\x50\110\120\x45\170\143\x65\x6c\57\x41\x75\164\x6f\154\x6f\x61\144\145\162\x2e\160\x68\160"; } goto JWKtz; hFBpI: if (!function_exists("\141\x73\x69\x6e\x68")) { function asinh($x) { return log($x + sqrt(1 + $x * $x)); } } goto vaz3Q; BPBNX: class PHPExcel_Calculation_Functions { const COMPATIBILITY_EXCEL = "\x45\170\143\x65\x6c"; const COMPATIBILITY_GNUMERIC = "\x47\156\x75\155\145\162\x69\143"; const COMPATIBILITY_OPENOFFICE = "\x4f\x70\x65\x6e\x4f\x66\x66\x69\x63\x65\x43\141\x6c\x63"; const RETURNDATE_PHP_NUMERIC = "\x50"; const RETURNDATE_PHP_OBJECT = "\x4f"; const RETURNDATE_EXCEL = "\x45"; protected static $compatibilityMode = self::COMPATIBILITY_EXCEL; protected static $returnDateType = self::RETURNDATE_EXCEL; protected static $errorCodes = array("\156\x75\154\154" => "\x23\x4e\x55\x4c\x4c\x21", "\x64\x69\x76\151\163\x69\x6f\x6e\x62\171\x7a\145\162\x6f" => "\43\104\x49\126\57\60\x21", "\166\x61\x6c\165\x65" => "\43\126\101\114\x55\x45\x21", "\162\145\146\x65\x72\x65\156\143\x65" => "\43\122\105\x46\x21", "\156\x61\x6d\145" => "\43\116\101\x4d\105\77", "\x6e\x75\x6d" => "\43\x4e\x55\115\41", "\156\141" => "\43\116\x2f\x41", "\147\x65\164\164\x69\x6e\x67\144\x61\x74\x61" => "\x23\107\105\x54\124\x49\116\x47\137\x44\101\x54\101"); public static function setCompatibilityMode($compatibilityMode) { if ($compatibilityMode == self::COMPATIBILITY_EXCEL || $compatibilityMode == self::COMPATIBILITY_GNUMERIC || $compatibilityMode == self::COMPATIBILITY_OPENOFFICE) { self::$compatibilityMode = $compatibilityMode; return true; } return false; } public static function getCompatibilityMode() { return self::$compatibilityMode; } public static function setReturnDateType($returnDateType) { if ($returnDateType == self::RETURNDATE_PHP_NUMERIC || $returnDateType == self::RETURNDATE_PHP_OBJECT || $returnDateType == self::RETURNDATE_EXCEL) { self::$returnDateType = $returnDateType; return true; } return false; } public static function getReturnDateType() { return self::$returnDateType; } public static function DUMMY() { return "\43\116\x6f\164\x20\131\x65\164\x20\111\x6d\x70\154\145\x6d\145\x6e\164\145\144"; } public static function DIV0() { return self::$errorCodes["\x64\x69\x76\x69\x73\x69\157\156\142\171\172\x65\x72\x6f"]; } public static function NA() { return self::$errorCodes["\x6e\141"]; } public static function NaN() { return self::$errorCodes["\x6e\x75\155"]; } public static function NAME() { return self::$errorCodes["\156\141\x6d\x65"]; } public static function REF() { return self::$errorCodes["\162\145\x66\145\162\145\x6e\143\x65"]; } public static function NULL() { return self::$errorCodes["\x6e\165\x6c\x6c"]; } public static function VALUE() { return self::$errorCodes["\x76\x61\154\165\x65"]; } public static function isMatrixValue($idx) { return substr_count($idx, "\x2e") <= 1 || preg_match("\57\134\56\x5b\x41\55\132\x5d\x2f", $idx) > 0; } public static function isValue($idx) { return substr_count($idx, "\x2e") == 0; } public static function isCellValue($idx) { return substr_count($idx, "\56") > 1; } public static function ifCondition($condition) { goto gPp6L; mt9sy: if (!in_array($condition[0], array("\76", "\x3c", "\x3d"))) { if (!is_numeric($condition)) { $condition = PHPExcel_Calculation::wrapResult(strtoupper($condition)); } return "\x3d" . $condition; } else { goto dVI6A; eOSkc: list(, $operator, $operand) = $matches; goto Q47je; dVI6A: preg_match("\x2f\50\x5b\74\x3e\75\135\53\x29\50\56\x2a\51\57", $condition, $matches); goto eOSkc; MCV0k: return $operator . $operand; goto Ai5AI; Q47je: if (!is_numeric($operand)) { $operand = str_replace("\x22", "\42\42", $operand); $operand = PHPExcel_Calculation::wrapResult(strtoupper($operand)); } goto MCV0k; Ai5AI: } goto z2ehw; Lstw1: if (!isset($condition[0])) { $condition = "\x3d\x22\x22"; } goto mt9sy; gPp6L: $condition = PHPExcel_Calculation_Functions::flattenSingleValue($condition); goto Lstw1; z2ehw: } public static function ERROR_TYPE($value = '') { goto ebMnq; QkD_3: foreach (self::$errorCodes as $errorCode) { if ($value === $errorCode) { return $i; } ++$i; } goto ymx3t; ebMnq: $value = self::flattenSingleValue($value); goto CmbFg; CmbFg: $i = 1; goto QkD_3; ymx3t: return self::NA(); goto VfkFu; VfkFu: } public static function IS_BLANK($value = null) { if (!is_null($value)) { $value = self::flattenSingleValue($value); } return is_null($value); } public static function IS_ERR($value = '') { $value = self::flattenSingleValue($value); return self::IS_ERROR($value) && !self::IS_NA($value); } public static function IS_ERROR($value = '') { goto fkUAQ; WNKWL: if (!is_string($value)) { return false; } goto y4ue_; y4ue_: return in_array($value, array_values(self::$errorCodes)); goto vh3_h; fkUAQ: $value = self::flattenSingleValue($value); goto WNKWL; vh3_h: } public static function IS_NA($value = '') { $value = self::flattenSingleValue($value); return $value === self::NA(); } public static function IS_EVEN($value = null) { goto o7mP6; o7mP6: $value = self::flattenSingleValue($value); goto MBfGr; MBfGr: if ($value === null) { return self::NAME(); } elseif (is_bool($value) || is_string($value) && !is_numeric($value)) { return self::VALUE(); } goto iE8XD; iE8XD: return $value % 2 == 0; goto a9VnC; a9VnC: } public static function IS_ODD($value = null) { goto H3wzI; H3wzI: $value = self::flattenSingleValue($value); goto NXOhp; i4eeB: return abs($value) % 2 == 1; goto ihlpj; NXOhp: if ($value === null) { return self::NAME(); } elseif (is_bool($value) || is_string($value) && !is_numeric($value)) { return self::VALUE(); } goto i4eeB; ihlpj: } public static function IS_NUMBER($value = null) { goto X6eZG; X6eZG: $value = self::flattenSingleValue($value); goto ryOKK; ryOKK: if (is_string($value)) { return false; } goto Cn0Rt; Cn0Rt: return is_numeric($value); goto ipkXJ; ipkXJ: } public static function IS_LOGICAL($value = null) { $value = self::flattenSingleValue($value); return is_bool($value); } public static function IS_TEXT($value = null) { $value = self::flattenSingleValue($value); return is_string($value) && !self::IS_ERROR($value); } public static function IS_NONTEXT($value = null) { return !self::IS_TEXT($value); } public static function VERSION() { return "\120\x48\120\x45\170\x63\x65\154\40\x23\43\126\105\x52\x53\111\117\116\43\x23\54\x20\43\43\104\x41\x54\x45\43\43"; } public static function N($value = null) { goto Ths0Q; QVkZ_: switch (gettype($value)) { case "\144\157\x75\142\154\145": case "\x66\x6c\x6f\x61\164": case "\151\x6e\x74\145\147\145\162": return $value; case "\142\157\157\x6c\x65\x61\x6e": return (int) $value; case "\x73\x74\x72\x69\156\x67": if (strlen($value) > 0 && $value[0] == "\43") { return $value; } break; } goto wWsuk; wWsuk: return 0; goto gGkjm; Ths0Q: while (is_array($value)) { $value = array_shift($value); } goto QVkZ_; gGkjm: } public static function TYPE($value = null) { goto DkU4W; J3CjL: return 0; goto bJcYR; MRuDp: $value = self::flattenSingleValue($value); goto Lh7ra; zR8da: if (is_array($value) && count($value) > 1) { goto aFlhk; vgep4: $a = key($value); goto HJZpR; aFlhk: end($value); goto vgep4; HJZpR: if (self::isCellValue($a)) { return 16; } elseif (self::isMatrixValue($a)) { return 64; } goto jGJz9; jGJz9: } elseif (empty($value)) { return 1; } goto MRuDp; Lh7ra: if ($value === null || is_float($value) || is_int($value)) { return 1; } elseif (is_bool($value)) { return 4; } elseif (is_array($value)) { return 64; } elseif (is_string($value)) { if (strlen($value) > 0 && $value[0] == "\x23") { return 16; } return 2; } goto J3CjL; DkU4W: $value = self::flattenArrayIndexed($value); goto zR8da; bJcYR: } public static function flattenArray($array) { goto fyLEN; JbqeB: $arrayValues = array(); goto Q1ceP; lQHQs: return $arrayValues; goto yhiPK; fyLEN: if (!is_array($array)) { return (array) $array; } goto JbqeB; Q1ceP: foreach ($array as $value) { if (is_array($value)) { foreach ($value as $val) { if (is_array($val)) { foreach ($val as $v) { $arrayValues[] = $v; } } else { $arrayValues[] = $val; } } } else { $arrayValues[] = $value; } } goto lQHQs; yhiPK: } public static function flattenArrayIndexed($array) { goto UAJM4; YPV1K: foreach ($array as $k1 => $value) { if (is_array($value)) { foreach ($value as $k2 => $val) { if (is_array($val)) { foreach ($val as $k3 => $v) { $arrayValues[$k1 . "\56" . $k2 . "\56" . $k3] = $v; } } else { $arrayValues[$k1 . "\56" . $k2] = $val; } } } else { $arrayValues[$k1] = $value; } } goto JF0Is; Cu6am: $arrayValues = array(); goto YPV1K; JF0Is: return $arrayValues; goto Mk2m1; UAJM4: if (!is_array($array)) { return (array) $array; } goto Cu6am; Mk2m1: } public static function flattenSingleValue($value = '') { while (is_array($value)) { $value = array_pop($value); } return $value; } } goto Q9r2y; Q9r2y: if (!function_exists("\x61\143\157\x73\x68")) { function acosh($x) { return 2 * log(sqrt(($x + 1) / 2) + sqrt(($x - 1) / 2)); } } goto hFBpI; rTQ0g: if (!function_exists("\x6d\x62\x5f\163\164\162\x5f\162\145\x70\x6c\x61\143\x65") && function_exists("\x6d\142\x5f\163\x75\142\x73\x74\162") && function_exists("\155\142\137\163\x74\x72\x6c\x65\156") && function_exists("\155\142\x5f\163\x74\x72\160\157\x73")) { function mb_str_replace($search, $replace, $subject) { goto VQKCV; XoCmV: foreach ((array) $search as $key => $s) { goto Vb7kx; Vb7kx: if ($s == '' && $s !== 0) { continue; } goto jn4kM; jn4kM: $r = !is_array($replace) ? $replace : (array_key_exists($key, $replace) ? $replace[$key] : ''); goto AE19r; X04WS: while ($pos !== false) { $subject = mb_substr($subject, 0, $pos, "\125\124\106\55\x38") . $r . mb_substr($subject, $pos + mb_strlen($s, "\125\124\x46\55\70"), 65535, "\125\124\106\x2d\70"); $pos = mb_strpos($subject, $s, $pos + mb_strlen($r, "\x55\124\x46\55\x38"), "\125\124\x46\x2d\70"); } goto XkuQt; AE19r: $pos = mb_strpos($subject, $s, 0, "\125\124\x46\55\70"); goto X04WS; XkuQt: } goto uuij3; uuij3: return $subject; goto FL3dc; VQKCV: if (is_array($subject)) { goto ohAbq; ohAbq: $ret = array(); goto tvtV3; bC9kh: return $ret; goto h1rzF; tvtV3: foreach ($subject as $key => $val) { $ret[$key] = mb_str_replace($search, $replace, $val); } goto bC9kh; h1rzF: } goto XoCmV; FL3dc: } }
