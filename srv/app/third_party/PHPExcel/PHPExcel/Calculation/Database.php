<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 if (!defined("\x50\110\120\x45\x58\x43\x45\x4c\137\122\x4f\x4f\124")) { define("\120\x48\120\x45\x58\103\x45\x4c\137\x52\117\x4f\124", dirname(__FILE__) . "\x2f\56\x2e\x2f\x2e\56\x2f"); require PHPEXCEL_ROOT . "\x50\x48\120\105\170\x63\x65\154\57\101\165\164\x6f\154\157\141\144\145\162\56\x70\150\x70"; } class PHPExcel_Calculation_Database { private static function fieldExtract($database, $field) { goto XaYIg; MkuFT: return $key ? $key : null; goto sglrJ; hvU9h: $key = array_search($field, $fieldNames); goto MkuFT; s8QR_: $fieldNames = array_map("\163\x74\x72\164\x6f\x75\x70\160\x65\x72", array_shift($database)); goto HgF3G; HgF3G: if (is_numeric($field)) { $keys = array_keys($fieldNames); return $keys[$field - 1]; } goto hvU9h; XaYIg: $field = strtoupper(PHPExcel_Calculation_Functions::flattenSingleValue($field)); goto s8QR_; sglrJ: } private static function filter($database, $criteria) { goto yJW62; tqeed: $testConditions = $testValues = array(); goto WT5UE; FcfI4: if ($testConditionsCount > 1) { $testConditionSet = "\x41\116\x44\x28" . implode("\x2c", $testConditions) . "\x29"; } elseif ($testConditionsCount == 1) { $testConditionSet = $testConditions[0]; } goto EVo3X; EVo3X: foreach ($database as $dataRow => $dataValues) { goto GWTDF; CsRsG: if (!$result) { unset($database[$dataRow]); } goto Iw7Kn; HZV1p: foreach ($criteriaNames as $key => $criteriaName) { $k = array_search($criteriaName, $fieldNames); if (isset($dataValues[$k])) { goto YAi1K; UkVuK: $testConditionList = str_replace("\x5b\72" . $criteriaName . "\135", $dataValue, $testConditionList); goto Iqyhe; YAi1K: $dataValue = $dataValues[$k]; goto z41hw; z41hw: $dataValue = is_string($dataValue) ? PHPExcel_Calculation::wrapResult(strtoupper($dataValue)) : $dataValue; goto UkVuK; Iqyhe: } } goto bB6D2; GWTDF: $testConditionList = $testConditionSet; goto HZV1p; bB6D2: $result = PHPExcel_Calculation::getInstance()->_calculateFormulaValue("\x3d" . $testConditionList); goto CsRsG; Iw7Kn: } goto sLwog; WT5UE: $testConditionsCount = 0; goto eNjVf; sLwog: return $database; goto c3zf9; eNjVf: foreach ($criteriaNames as $key => $criteriaName) { goto O8re3; Ud2s0: $testConditionCount = 0; goto NSOHF; O8re3: $testCondition = array(); goto Ud2s0; yzcv_: if ($testConditionCount > 1) { $testConditions[] = "\117\x52\50" . implode("\54", $testCondition) . "\x29"; $testConditionsCount++; } elseif ($testConditionCount == 1) { $testConditions[] = $testCondition[0]; $testConditionsCount++; } goto Wbadp; NSOHF: foreach ($criteria as $row => $criterion) { if ($criterion[$key] > '') { $testCondition[] = "\133\72" . $criteriaName . "\x5d" . PHPExcel_Calculation_Functions::ifCondition($criterion[$key]); $testConditionCount++; } } goto yzcv_; Wbadp: } goto FcfI4; zEzmy: $criteriaNames = array_shift($criteria); goto tqeed; yJW62: $fieldNames = array_shift($database); goto zEzmy; c3zf9: } private static function getFilteredColumn($database, $field, $criteria) { goto rhHh9; rhHh9: $database = self::filter($database, $criteria); goto JYKfC; bpIGM: return $colData; goto GdJMY; JYKfC: $colData = array(); goto bOkEZ; bOkEZ: foreach ($database as $row) { $colData[] = $row[$field]; } goto bpIGM; GdJMY: } public static function DAVERAGE($database, $field, $criteria) { goto hm9Bp; hm9Bp: $field = self::fieldExtract($database, $field); goto XcN0k; B1crO: return PHPExcel_Calculation_Statistical::AVERAGE(self::getFilteredColumn($database, $field, $criteria)); goto d_kBy; XcN0k: if (is_null($field)) { return null; } goto B1crO; d_kBy: } public static function DCOUNT($database, $field, $criteria) { goto TIiYw; TIiYw: $field = self::fieldExtract($database, $field); goto cQ3yr; ULvEN: return PHPExcel_Calculation_Statistical::COUNT(self::getFilteredColumn($database, $field, $criteria)); goto mFILC; cQ3yr: if (is_null($field)) { return null; } goto ULvEN; mFILC: } public static function DCOUNTA($database, $field, $criteria) { goto FE2Kb; M3Rxs: $database = self::filter($database, $criteria); goto PS_CW; sJpOG: foreach ($database as $row) { $colData[] = $row[$field]; } goto ZtG1b; baqnA: if (is_null($field)) { return null; } goto M3Rxs; PS_CW: $colData = array(); goto sJpOG; ZtG1b: return PHPExcel_Calculation_Statistical::COUNTA(self::getFilteredColumn($database, $field, $criteria)); goto nQP8P; FE2Kb: $field = self::fieldExtract($database, $field); goto baqnA; nQP8P: } public static function DGET($database, $field, $criteria) { goto rrFL6; QI75R: if (is_null($field)) { return null; } goto P_oTG; P_oTG: $colData = self::getFilteredColumn($database, $field, $criteria); goto vwGHF; rrFL6: $field = self::fieldExtract($database, $field); goto QI75R; vwGHF: if (count($colData) > 1) { return PHPExcel_Calculation_Functions::NaN(); } goto ythmr; ythmr: return $colData[0]; goto bM8b8; bM8b8: } public static function DMAX($database, $field, $criteria) { goto DUgk0; WHV_a: if (is_null($field)) { return null; } goto vxEIX; DUgk0: $field = self::fieldExtract($database, $field); goto WHV_a; vxEIX: return PHPExcel_Calculation_Statistical::MAX(self::getFilteredColumn($database, $field, $criteria)); goto FNLli; FNLli: } public static function DMIN($database, $field, $criteria) { goto N3FdE; N3FdE: $field = self::fieldExtract($database, $field); goto CbQh2; CbQh2: if (is_null($field)) { return null; } goto s4mRi; s4mRi: return PHPExcel_Calculation_Statistical::MIN(self::getFilteredColumn($database, $field, $criteria)); goto KUFr7; KUFr7: } public static function DPRODUCT($database, $field, $criteria) { goto kuDfS; kuDfS: $field = self::fieldExtract($database, $field); goto PD9TY; PD9TY: if (is_null($field)) { return null; } goto g1KNP; g1KNP: return PHPExcel_Calculation_MathTrig::PRODUCT(self::getFilteredColumn($database, $field, $criteria)); goto iAsZi; iAsZi: } public static function DSTDEV($database, $field, $criteria) { goto h3bvp; moZKL: return PHPExcel_Calculation_Statistical::STDEV(self::getFilteredColumn($database, $field, $criteria)); goto HkAvX; ya7E5: if (is_null($field)) { return null; } goto moZKL; h3bvp: $field = self::fieldExtract($database, $field); goto ya7E5; HkAvX: } public static function DSTDEVP($database, $field, $criteria) { goto IEUTo; ZFZMw: return PHPExcel_Calculation_Statistical::STDEVP(self::getFilteredColumn($database, $field, $criteria)); goto jCBXK; LIlrW: if (is_null($field)) { return null; } goto ZFZMw; IEUTo: $field = self::fieldExtract($database, $field); goto LIlrW; jCBXK: } public static function DSUM($database, $field, $criteria) { goto QpeVa; QpeVa: $field = self::fieldExtract($database, $field); goto PKXa5; PKXa5: if (is_null($field)) { return null; } goto zYc5p; zYc5p: return PHPExcel_Calculation_MathTrig::SUM(self::getFilteredColumn($database, $field, $criteria)); goto T3nZL; T3nZL: } public static function DVAR($database, $field, $criteria) { goto dw7O1; GHt2G: if (is_null($field)) { return null; } goto o1wS7; o1wS7: return PHPExcel_Calculation_Statistical::VARFunc(self::getFilteredColumn($database, $field, $criteria)); goto ffJ21; dw7O1: $field = self::fieldExtract($database, $field); goto GHt2G; ffJ21: } public static function DVARP($database, $field, $criteria) { goto ZeT2y; ZeT2y: $field = self::fieldExtract($database, $field); goto ixUdf; ixUdf: if (is_null($field)) { return null; } goto Cq8nj; Cq8nj: return PHPExcel_Calculation_Statistical::VARP(self::getFilteredColumn($database, $field, $criteria)); goto Vse9L; Vse9L: } }
