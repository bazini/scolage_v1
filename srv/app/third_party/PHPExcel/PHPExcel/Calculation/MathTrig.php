<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:05              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 if (!defined("\120\x48\120\x45\x58\103\x45\x4c\x5f\122\x4f\117\124")) { define("\x50\110\x50\x45\x58\x43\105\x4c\137\122\117\x4f\x54", dirname(__FILE__) . "\x2f\x2e\x2e\57\56\x2e\x2f"); require PHPEXCEL_ROOT . "\x50\110\x50\105\x78\143\145\x6c\57\101\165\164\x6f\154\157\141\144\145\x72\56\160\150\x70"; } class PHPExcel_Calculation_MathTrig { private static function factors($value) { goto xdeAt; xC0jy: $factorArray = array(); goto uf5R8; xdeAt: $startVal = floor(sqrt($value)); goto xC0jy; rj7tJ: if (!empty($factorArray)) { rsort($factorArray); return $factorArray; } else { return array((int) $value); } goto Ymanh; uf5R8: for ($i = $startVal; $i > 1; --$i) { if ($value % $i == 0) { goto mJKdi; GWrbS: if ($i <= sqrt($value)) { break; } goto oEfzD; mJKdi: $factorArray = array_merge($factorArray, self::factors($value / $i)); goto VEtpb; VEtpb: $factorArray = array_merge($factorArray, self::factors($i)); goto GWrbS; oEfzD: } } goto rj7tJ; Ymanh: } private static function romanCut($num, $n) { return ($num - $num % $n) / $n; } public static function ATAN2($xCoordinate = null, $yCoordinate = null) { goto zXZeH; HnykZ: $yCoordinate = $yCoordinate !== null ? $yCoordinate : 0.0; goto U3Vrz; zXZeH: $xCoordinate = PHPExcel_Calculation_Functions::flattenSingleValue($xCoordinate); goto SJpGh; U3Vrz: if ((is_numeric($xCoordinate) || is_bool($xCoordinate)) && is_numeric($yCoordinate) || is_bool($yCoordinate)) { goto F8ZIF; uNP2z: return atan2($yCoordinate, $xCoordinate); goto lDOxm; DLuZr: $yCoordinate = (float) $yCoordinate; goto plBHV; plBHV: if ($xCoordinate == 0 && $yCoordinate == 0) { return PHPExcel_Calculation_Functions::DIV0(); } goto uNP2z; F8ZIF: $xCoordinate = (float) $xCoordinate; goto DLuZr; lDOxm: } goto X4WY0; Wlist: $xCoordinate = $xCoordinate !== null ? $xCoordinate : 0.0; goto HnykZ; X4WY0: return PHPExcel_Calculation_Functions::VALUE(); goto SSE8t; SJpGh: $yCoordinate = PHPExcel_Calculation_Functions::flattenSingleValue($yCoordinate); goto Wlist; SSE8t: } public static function CEILING($number, $significance = null) { goto ERG6k; CaUvH: return PHPExcel_Calculation_Functions::VALUE(); goto M_bq9; IQog0: if (is_numeric($number) && is_numeric($significance)) { if ($number == 0.0 || $significance == 0.0) { return 0.0; } elseif (self::SIGN($number) == self::SIGN($significance)) { return ceil($number / $significance) * $significance; } else { return PHPExcel_Calculation_Functions::NaN(); } } goto CaUvH; zPA5D: $significance = PHPExcel_Calculation_Functions::flattenSingleValue($significance); goto KLuhM; ERG6k: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto zPA5D; KLuhM: if (is_null($significance) && PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_GNUMERIC) { $significance = $number / abs($number); } goto IQog0; M_bq9: } public static function COMBIN($numObjs, $numInSet) { goto ar0jL; Nr7_U: if (is_numeric($numObjs) && is_numeric($numInSet)) { if ($numObjs < $numInSet) { return PHPExcel_Calculation_Functions::NaN(); } elseif ($numInSet < 0) { return PHPExcel_Calculation_Functions::NaN(); } return round(self::FACT($numObjs) / self::FACT($numObjs - $numInSet)) / self::FACT($numInSet); } goto YrcLD; ar0jL: $numObjs = PHPExcel_Calculation_Functions::flattenSingleValue($numObjs); goto EKwUI; YrcLD: return PHPExcel_Calculation_Functions::VALUE(); goto dk7qx; EKwUI: $numInSet = PHPExcel_Calculation_Functions::flattenSingleValue($numInSet); goto Nr7_U; dk7qx: } public static function EVEN($number) { goto yVMKB; DS7Cz: return PHPExcel_Calculation_Functions::VALUE(); goto qx7f5; zIroe: if (is_numeric($number)) { $significance = 2 * self::SIGN($number); return (int) self::CEILING($number, $significance); } goto DS7Cz; yVMKB: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto xf1gu; xf1gu: if (is_null($number)) { return 0; } elseif (is_bool($number)) { $number = (int) $number; } goto zIroe; qx7f5: } public static function FACT($factVal) { goto Twy8K; PwjTY: if (is_numeric($factVal)) { goto hTPNS; fJKCI: if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_GNUMERIC) { if ($factVal > $factLoop) { return PHPExcel_Calculation_Functions::NaN(); } } goto U9ZSE; U9ZSE: $factorial = 1; goto N0cAv; N0cAv: while ($factLoop > 1) { $factorial *= $factLoop--; } goto XG5Eb; XG5Eb: return $factorial; goto PWHN_; hTPNS: if ($factVal < 0) { return PHPExcel_Calculation_Functions::NaN(); } goto xdvKG; xdvKG: $factLoop = floor($factVal); goto fJKCI; PWHN_: } goto paWrg; Twy8K: $factVal = PHPExcel_Calculation_Functions::flattenSingleValue($factVal); goto PwjTY; paWrg: return PHPExcel_Calculation_Functions::VALUE(); goto nYGR2; nYGR2: } public static function FACTDOUBLE($factVal) { goto AG61N; kOOtr: if (is_numeric($factLoop)) { goto iPDDh; P6nvb: if ($factVal < 0) { return PHPExcel_Calculation_Functions::NaN(); } goto xTU6_; xTU6_: $factorial = 1; goto xn8Pr; Ph3WR: return $factorial; goto Z00vJ; xn8Pr: while ($factLoop > 1) { $factorial *= $factLoop--; --$factLoop; } goto Ph3WR; iPDDh: $factLoop = floor($factLoop); goto P6nvb; Z00vJ: } goto K9hfK; AG61N: $factLoop = PHPExcel_Calculation_Functions::flattenSingleValue($factVal); goto kOOtr; K9hfK: return PHPExcel_Calculation_Functions::VALUE(); goto JaKT0; JaKT0: } public static function FLOOR($number, $significance = null) { goto IDSMj; MzyFZ: return PHPExcel_Calculation_Functions::VALUE(); goto VMXJq; IDSMj: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto YRSv3; BiTPX: if (is_null($significance) && PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_GNUMERIC) { $significance = $number / abs($number); } goto JeQp7; YRSv3: $significance = PHPExcel_Calculation_Functions::flattenSingleValue($significance); goto BiTPX; JeQp7: if (is_numeric($number) && is_numeric($significance)) { if ($significance == 0.0) { return PHPExcel_Calculation_Functions::DIV0(); } elseif ($number == 0.0) { return 0.0; } elseif (self::SIGN($number) == self::SIGN($significance)) { return floor($number / $significance) * $significance; } else { return PHPExcel_Calculation_Functions::NaN(); } } goto MzyFZ; VMXJq: } public static function GCD() { goto LWXnH; UyT7a: $allValuesFactors = array(); goto MvnDv; LWXnH: $returnValue = 1; goto UyT7a; oUmp1: for ($i = 1; $i < $allValuesCount; ++$i) { $mergedArray = array_intersect_key($mergedArray, $allValuesFactors[$i]); } goto lFzth; lFzth: $mergedArrayValues = count($mergedArray); goto qlIP0; GpYhP: $mergedArray = $allValuesFactors[0]; goto oUmp1; qlIP0: if ($mergedArrayValues == 0) { return $returnValue; } elseif ($mergedArrayValues > 1) { goto JWKmO; pesTH: return $returnValue; goto FgvjJ; JWKmO: foreach ($mergedArray as $mergedKey => $mergedValue) { foreach ($allValuesFactors as $highestPowerTest) { foreach ($highestPowerTest as $testKey => $testValue) { if ($testKey == $mergedKey && $testValue < $mergedValue) { $mergedArray[$mergedKey] = $testValue; $mergedValue = $testValue; } } } } goto RiTc9; eJ650: foreach ($mergedArray as $key => $value) { $returnValue *= pow($key, $value); } goto pesTH; RiTc9: $returnValue = 1; goto eJ650; FgvjJ: } else { goto Ff5tH; Zy1CV: foreach ($allValuesFactors as $testValue) { foreach ($testValue as $mergedKey => $mergedValue) { if ($mergedKey == $key && $mergedValue < $value) { $value = $mergedValue; } } } goto beE8P; Ff5tH: $keys = array_keys($mergedArray); goto D2_0o; beE8P: return pow($key, $value); goto OxLen; D2_0o: $key = $keys[0]; goto NaFhh; NaFhh: $value = $mergedArray[$key]; goto Zy1CV; OxLen: } goto CG7ka; MvnDv: foreach (PHPExcel_Calculation_Functions::flattenArray(func_get_args()) as $value) { goto dtlHB; IqKuK: $myFactors = self::factors($value); goto BDkV0; x8mOE: $allValuesFactors[] = $myCountedFactors; goto XlDGI; BDkV0: $myCountedFactors = array_count_values($myFactors); goto x8mOE; dtlHB: if (!is_numeric($value)) { return PHPExcel_Calculation_Functions::VALUE(); } elseif ($value == 0) { continue; } elseif ($value < 0) { return PHPExcel_Calculation_Functions::NaN(); } goto IqKuK; XlDGI: } goto pKpXM; El5ly: if ($allValuesCount == 0) { return 0; } goto GpYhP; pKpXM: $allValuesCount = count($allValuesFactors); goto El5ly; CG7ka: } public static function INT($number) { goto JqOze; DxLpr: if (is_null($number)) { return 0; } elseif (is_bool($number)) { return (int) $number; } goto mcIQt; mcIQt: if (is_numeric($number)) { return (int) floor($number); } goto KI0WQ; KI0WQ: return PHPExcel_Calculation_Functions::VALUE(); goto RDeZW; JqOze: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto DxLpr; RDeZW: } public static function LCM() { goto egnST; g0Thu: $allPoweredFactors = array(); goto pF8fY; phryV: return $returnValue; goto XLYXD; egnST: $returnValue = 1; goto g0Thu; pF8fY: foreach (PHPExcel_Calculation_Functions::flattenArray(func_get_args()) as $value) { goto nav0A; qF7or: foreach ($myCountedFactors as $myCountedFactor => $myCountedPower) { $myPoweredFactors[$myCountedFactor] = pow($myCountedFactor, $myCountedPower); } goto MRB9H; Lwok2: $myPoweredFactors = array(); goto qF7or; nav0A: if (!is_numeric($value)) { return PHPExcel_Calculation_Functions::VALUE(); } goto cSqme; PZkjF: $myFactors = self::factors(floor($value)); goto NpFCu; NpFCu: $myCountedFactors = array_count_values($myFactors); goto Lwok2; cSqme: if ($value == 0) { return 0; } elseif ($value < 0) { return PHPExcel_Calculation_Functions::NaN(); } goto PZkjF; MRB9H: foreach ($myPoweredFactors as $myPoweredValue => $myPoweredFactor) { if (array_key_exists($myPoweredValue, $allPoweredFactors)) { if ($allPoweredFactors[$myPoweredValue] < $myPoweredFactor) { $allPoweredFactors[$myPoweredValue] = $myPoweredFactor; } } else { $allPoweredFactors[$myPoweredValue] = $myPoweredFactor; } } goto bKHPT; bKHPT: } goto j3xCX; j3xCX: foreach ($allPoweredFactors as $allPoweredFactor) { $returnValue *= (int) $allPoweredFactor; } goto phryV; XLYXD: } public static function LOG_BASE($number = null, $base = 10) { goto I1uGy; I1uGy: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto rXAB3; ZvjKc: if (!is_numeric($base) || !is_numeric($number)) { return PHPExcel_Calculation_Functions::VALUE(); } goto gIZzx; rXAB3: $base = is_null($base) ? 10 : (float) PHPExcel_Calculation_Functions::flattenSingleValue($base); goto ZvjKc; yclA9: return log($number, $base); goto wBD42; gIZzx: if ($base <= 0 || $number <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto yclA9; wBD42: } public static function MDETERM($matrixValues) { goto UroE1; htsFJ: if (!is_array($matrixValues)) { $matrixValues = array(array($matrixValues)); } goto dnrl5; gAuqZ: if ($row != $maxColumn) { return PHPExcel_Calculation_Functions::VALUE(); } goto V5avW; VLpfN: foreach ($matrixValues as $matrixRow) { goto VKd52; IRxIU: if ($column > $maxColumn) { $maxColumn = $column; } goto tH08g; PFK_G: foreach ($matrixRow as $matrixCell) { goto fzMAt; gkrDT: $matrixData[$column][$row] = $matrixCell; goto A_HqJ; A_HqJ: ++$column; goto UaP4O; fzMAt: if (is_string($matrixCell) || $matrixCell === null) { return PHPExcel_Calculation_Functions::VALUE(); } goto gkrDT; UaP4O: } goto IRxIU; tH08g: ++$row; goto vQQAq; VKd52: if (!is_array($matrixRow)) { $matrixRow = array($matrixRow); } goto ieJDB; ieJDB: $column = 0; goto PFK_G; vQQAq: } goto gAuqZ; UroE1: $matrixData = array(); goto htsFJ; dnrl5: $row = $maxColumn = 0; goto VLpfN; V5avW: try { $matrix = new PHPExcel_Shared_JAMA_Matrix($matrixData); return $matrix->det(); } catch (PHPExcel_Exception $ex) { return PHPExcel_Calculation_Functions::VALUE(); } goto YrKMJ; YrKMJ: } public static function MINVERSE($matrixValues) { goto HqaMk; HqaMk: $matrixData = array(); goto y7cwE; oRHQ3: if ($row != $maxColumn) { return PHPExcel_Calculation_Functions::VALUE(); } goto QNv83; y7cwE: if (!is_array($matrixValues)) { $matrixValues = array(array($matrixValues)); } goto wAk78; QNv83: try { $matrix = new PHPExcel_Shared_JAMA_Matrix($matrixData); return $matrix->inverse()->getArray(); } catch (PHPExcel_Exception $ex) { return PHPExcel_Calculation_Functions::VALUE(); } goto dcyLa; pHaFH: foreach ($matrixValues as $matrixRow) { goto iWBP8; SCO4E: ++$row; goto Mw19o; iWBP8: if (!is_array($matrixRow)) { $matrixRow = array($matrixRow); } goto BpKFA; BpKFA: $column = 0; goto qm8fb; qm8fb: foreach ($matrixRow as $matrixCell) { goto MjAuh; ouBn2: ++$column; goto w7oP2; BUUEF: $matrixData[$column][$row] = $matrixCell; goto ouBn2; MjAuh: if (is_string($matrixCell) || $matrixCell === null) { return PHPExcel_Calculation_Functions::VALUE(); } goto BUUEF; w7oP2: } goto q5RuK; q5RuK: if ($column > $maxColumn) { $maxColumn = $column; } goto SCO4E; Mw19o: } goto oRHQ3; wAk78: $row = $maxColumn = 0; goto pHaFH; dcyLa: } public static function MMULT($matrixData1, $matrixData2) { goto GruqH; bu7dX: try { goto pS8Qf; o_yEy: $rowB = 0; goto mgs_V; yfelv: $matrixB = new PHPExcel_Shared_JAMA_Matrix($matrixBData); goto Hfoc_; Hfoc_: if ($columnA != $rowB) { return PHPExcel_Calculation_Functions::VALUE(); } goto zUM3n; zUM3n: return $matrixA->times($matrixB)->getArray(); goto Na3T9; MRdZB: foreach ($matrixData1 as $matrixRow) { goto yUjPi; ecblw: $columnA = 0; goto FenVJ; bKqJO: ++$rowA; goto kh4Ra; yUjPi: if (!is_array($matrixRow)) { $matrixRow = array($matrixRow); } goto ecblw; FenVJ: foreach ($matrixRow as $matrixCell) { goto IGLfp; pLiPx: $matrixAData[$rowA][$columnA] = $matrixCell; goto Yd4bW; Yd4bW: ++$columnA; goto Dfd_1; IGLfp: if (!is_numeric($matrixCell) || $matrixCell === null) { return PHPExcel_Calculation_Functions::VALUE(); } goto pLiPx; Dfd_1: } goto bKqJO; kh4Ra: } goto dTC3J; mgs_V: foreach ($matrixData2 as $matrixRow) { goto VsrT9; yA5zO: ++$rowB; goto QT2nB; VsrT9: if (!is_array($matrixRow)) { $matrixRow = array($matrixRow); } goto atjty; GgFnt: foreach ($matrixRow as $matrixCell) { goto eWj5O; V80fm: ++$columnB; goto Sahvm; exTUi: $matrixBData[$rowB][$columnB] = $matrixCell; goto V80fm; eWj5O: if (!is_numeric($matrixCell) || $matrixCell === null) { return PHPExcel_Calculation_Functions::VALUE(); } goto exTUi; Sahvm: } goto yA5zO; atjty: $columnB = 0; goto GgFnt; QT2nB: } goto yfelv; pS8Qf: $rowA = 0; goto MRdZB; dTC3J: $matrixA = new PHPExcel_Shared_JAMA_Matrix($matrixAData); goto o_yEy; Na3T9: } catch (PHPExcel_Exception $ex) { var_dump($ex->getMessage()); return PHPExcel_Calculation_Functions::VALUE(); } goto iuPWT; ALIWf: if (!is_array($matrixData2)) { $matrixData2 = array(array($matrixData2)); } goto bu7dX; ch6kZ: if (!is_array($matrixData1)) { $matrixData1 = array(array($matrixData1)); } goto ALIWf; GruqH: $matrixAData = $matrixBData = array(); goto ch6kZ; iuPWT: } public static function MOD($a = 1, $b = 1) { goto ii2On; ii2On: $a = PHPExcel_Calculation_Functions::flattenSingleValue($a); goto aPBAm; GtgTa: return fmod($a, $b); goto ORrLY; twhhV: if ($b == 0.0) { return PHPExcel_Calculation_Functions::DIV0(); } elseif ($a < 0.0 && $b > 0.0) { return $b - fmod(abs($a), $b); } elseif ($a > 0.0 && $b < 0.0) { return $b + fmod($a, abs($b)); } goto GtgTa; aPBAm: $b = PHPExcel_Calculation_Functions::flattenSingleValue($b); goto twhhV; ORrLY: } public static function MROUND($number, $multiple) { goto x74FK; x74FK: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto QIGLK; QIGLK: $multiple = PHPExcel_Calculation_Functions::flattenSingleValue($multiple); goto YWxOe; a2Hl5: return PHPExcel_Calculation_Functions::VALUE(); goto dHEjx; YWxOe: if (is_numeric($number) && is_numeric($multiple)) { goto q5K3P; q5K3P: if ($multiple == 0) { return 0; } goto RCDrg; RCDrg: if (self::SIGN($number) == self::SIGN($multiple)) { $multiplier = 1 / $multiple; return round($number * $multiplier) / $multiplier; } goto edKZV; edKZV: return PHPExcel_Calculation_Functions::NaN(); goto YXfMK; YXfMK: } goto a2Hl5; dHEjx: } public static function MULTINOMIAL() { goto vPEaf; pZAMz: foreach (PHPExcel_Calculation_Functions::flattenArray(func_get_args()) as $arg) { if (is_numeric($arg)) { goto IX5Fc; aeATn: $summer += floor($arg); goto iuc9U; IX5Fc: if ($arg < 1) { return PHPExcel_Calculation_Functions::NaN(); } goto aeATn; iuc9U: $divisor *= self::FACT($arg); goto Hp0Az; Hp0Az: } else { return PHPExcel_Calculation_Functions::VALUE(); } } goto Ba61i; QX7xm: $divisor = 1; goto pZAMz; Ba61i: if ($summer > 0) { $summer = self::FACT($summer); return $summer / $divisor; } goto on4fb; on4fb: return 0; goto RP0K0; vPEaf: $summer = 0; goto QX7xm; RP0K0: } public static function ODD($number) { goto ObHZN; XdAIW: return PHPExcel_Calculation_Functions::VALUE(); goto WAwV1; at5HV: if (is_null($number)) { return 1; } elseif (is_bool($number)) { return 1; } elseif (is_numeric($number)) { goto n8Wg7; rCYgm: return (int) $result; goto aLeF_; S7u24: if ($significance == 0) { return 1; } goto t8HhT; t8HhT: $result = self::CEILING($number, $significance); goto W2DrL; W2DrL: if ($result == self::EVEN($result)) { $result += $significance; } goto rCYgm; n8Wg7: $significance = self::SIGN($number); goto S7u24; aLeF_: } goto XdAIW; ObHZN: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto at5HV; WAwV1: } public static function POWER($x = 0, $y = 2) { goto n80L2; QDOUe: if ($x == 0.0 && $y == 0.0) { return PHPExcel_Calculation_Functions::NaN(); } elseif ($x == 0.0 && $y < 0.0) { return PHPExcel_Calculation_Functions::DIV0(); } goto hz2hf; hz2hf: $result = pow($x, $y); goto Ps345; n80L2: $x = PHPExcel_Calculation_Functions::flattenSingleValue($x); goto kw4dI; Ps345: return !is_nan($result) && !is_infinite($result) ? $result : PHPExcel_Calculation_Functions::NaN(); goto VuCh3; kw4dI: $y = PHPExcel_Calculation_Functions::flattenSingleValue($y); goto QDOUe; VuCh3: } public static function PRODUCT() { goto IM9C5; rMCvI: foreach (PHPExcel_Calculation_Functions::flattenArray(func_get_args()) as $arg) { if (is_numeric($arg) && !is_string($arg)) { if (is_null($returnValue)) { $returnValue = $arg; } else { $returnValue *= $arg; } } } goto Gexl0; rhLBK: return $returnValue; goto ebEWp; Gexl0: if (is_null($returnValue)) { return 0; } goto rhLBK; IM9C5: $returnValue = null; goto rMCvI; ebEWp: } public static function QUOTIENT() { goto fidu_; fidu_: $returnValue = null; goto CswhJ; E3jv1: return intval($returnValue); goto x3Gyv; CswhJ: foreach (PHPExcel_Calculation_Functions::flattenArray(func_get_args()) as $arg) { if (is_numeric($arg) && !is_string($arg)) { if (is_null($returnValue)) { $returnValue = $arg == 0 ? 0 : $arg; } else { if ($returnValue == 0 || $arg == 0) { $returnValue = 0; } else { $returnValue /= $arg; } } } } goto E3jv1; x3Gyv: } public static function RAND($min = 0, $max = 0) { goto JWbJ3; y3aFj: if ($min == 0 && $max == 0) { return mt_rand(0, 10000000) / 10000000; } else { return mt_rand($min, $max); } goto f6_IF; oZPyq: $max = PHPExcel_Calculation_Functions::flattenSingleValue($max); goto y3aFj; JWbJ3: $min = PHPExcel_Calculation_Functions::flattenSingleValue($min); goto oZPyq; f6_IF: } public static function ROMAN($aValue, $style = 0) { goto Zv3QC; snlGw: $cent = array('', "\x43", "\103\103", "\103\x43\x43", "\x43\104", "\104", "\x44\x43", "\104\x43\x43", "\x44\x43\x43\x43", "\103\115"); goto jxX0K; SRP0F: $mill = array('', "\115", "\x4d\x4d", "\115\115\115", "\115\x4d\x4d\115", "\x4d\x4d\115\x4d\x4d"); goto snlGw; SI68b: $c = self::romanCut($aValue, 100); goto AXhlI; Zv3QC: $aValue = PHPExcel_Calculation_Functions::flattenSingleValue($aValue); goto xHkkO; JIYJm: $aValue = (int) $aValue; goto TQiJ0; AxoqS: $aValue %= 10; goto ceY4_; ceY4_: return $roman . $mill[$m] . $cent[$c] . $tens[$t] . $ones[$aValue]; goto g__a3; wv2QB: if (!is_numeric($aValue) || $aValue < 0 || $aValue >= 4000) { return PHPExcel_Calculation_Functions::VALUE(); } goto JIYJm; TRkoa: while ($aValue > 5999) { $roman .= "\115"; $aValue -= 1000; } goto lgYlR; vsBle: $aValue %= 1000; goto SI68b; TQiJ0: if ($aValue == 0) { return ''; } goto SRP0F; lgYlR: $m = self::romanCut($aValue, 1000); goto vsBle; BnxBS: $roman = ''; goto TRkoa; GaVzV: $t = self::romanCut($aValue, 10); goto AxoqS; AXhlI: $aValue %= 100; goto GaVzV; jxX0K: $tens = array('', "\130", "\130\130", "\130\130\130", "\130\x4c", "\114", "\x4c\x58", "\114\x58\130", "\x4c\x58\x58\x58", "\x58\x43"); goto NL7ZZ; NL7ZZ: $ones = array('', "\111", "\x49\x49", "\x49\x49\x49", "\x49\x56", "\x56", "\126\111", "\126\111\x49", "\126\x49\111\111", "\x49\x58"); goto BnxBS; xHkkO: $style = is_null($style) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($style); goto wv2QB; g__a3: } public static function ROUNDUP($number, $digits) { goto QMS2u; nDKuO: if (is_numeric($number) && is_numeric($digits)) { $significance = pow(10, (int) $digits); if ($number < 0.0) { return floor($number * $significance) / $significance; } else { return ceil($number * $significance) / $significance; } } goto M1R2C; M1R2C: return PHPExcel_Calculation_Functions::VALUE(); goto zXcyi; QMS2u: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto frO9U; frO9U: $digits = PHPExcel_Calculation_Functions::flattenSingleValue($digits); goto nDKuO; zXcyi: } public static function ROUNDDOWN($number, $digits) { goto vNrJI; cBHZR: return PHPExcel_Calculation_Functions::VALUE(); goto IMCfk; wEgvt: $digits = PHPExcel_Calculation_Functions::flattenSingleValue($digits); goto bDZ0H; bDZ0H: if (is_numeric($number) && is_numeric($digits)) { $significance = pow(10, (int) $digits); if ($number < 0.0) { return ceil($number * $significance) / $significance; } else { return floor($number * $significance) / $significance; } } goto cBHZR; vNrJI: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto wEgvt; IMCfk: } public static function SERIESSUM() { goto dZzdw; D4ZVR: $n = array_shift($aArgs); goto g8ysP; dZzdw: $returnValue = 0; goto rsf0Z; rsf0Z: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto ufd6y; OoPV3: return PHPExcel_Calculation_Functions::VALUE(); goto oMtcF; g8ysP: $m = array_shift($aArgs); goto YsylD; ufd6y: $x = array_shift($aArgs); goto D4ZVR; YsylD: if (is_numeric($x) && is_numeric($n) && is_numeric($m)) { goto QM7uO; StcFj: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { $returnValue += $arg * pow($x, $n + $m * $i++); } else { return PHPExcel_Calculation_Functions::VALUE(); } } goto ycHxy; ycHxy: return $returnValue; goto HcjT4; QM7uO: $i = 0; goto StcFj; HcjT4: } goto OoPV3; oMtcF: } public static function SIGN($number) { goto VwXAm; tlY0S: return PHPExcel_Calculation_Functions::VALUE(); goto ADwUf; VwXAm: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto DIKny; DIKny: if (is_bool($number)) { return (int) $number; } goto GYdDf; GYdDf: if (is_numeric($number)) { if ($number == 0.0) { return 0; } return $number / abs($number); } goto tlY0S; ADwUf: } public static function SQRTPI($number) { goto ECUdS; SBS5i: return PHPExcel_Calculation_Functions::VALUE(); goto zt208; ECUdS: $number = PHPExcel_Calculation_Functions::flattenSingleValue($number); goto gGXJD; gGXJD: if (is_numeric($number)) { if ($number < 0) { return PHPExcel_Calculation_Functions::NaN(); } return sqrt($number * M_PI); } goto SBS5i; zt208: } public static function SUBTOTAL() { goto IQGDu; kQfe1: $subtotal = array_shift($aArgs); goto bUEPp; IQGDu: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto kQfe1; bUEPp: if (is_numeric($subtotal) && !is_string($subtotal)) { switch ($subtotal) { case 1: return PHPExcel_Calculation_Statistical::AVERAGE($aArgs); case 2: return PHPExcel_Calculation_Statistical::COUNT($aArgs); case 3: return PHPExcel_Calculation_Statistical::COUNTA($aArgs); case 4: return PHPExcel_Calculation_Statistical::MAX($aArgs); case 5: return PHPExcel_Calculation_Statistical::MIN($aArgs); case 6: return self::PRODUCT($aArgs); case 7: return PHPExcel_Calculation_Statistical::STDEV($aArgs); case 8: return PHPExcel_Calculation_Statistical::STDEVP($aArgs); case 9: return self::SUM($aArgs); case 10: return PHPExcel_Calculation_Statistical::VARFunc($aArgs); case 11: return PHPExcel_Calculation_Statistical::VARP($aArgs); } } goto YNu3M; YNu3M: return PHPExcel_Calculation_Functions::VALUE(); goto sD6lO; sD6lO: } public static function SUM() { goto t_YEi; k084k: return $returnValue; goto H8QXz; XOAw6: foreach (PHPExcel_Calculation_Functions::flattenArray(func_get_args()) as $arg) { if (is_numeric($arg) && !is_string($arg)) { $returnValue += $arg; } } goto k084k; t_YEi: $returnValue = 0; goto XOAw6; H8QXz: } public static function SUMIF($aArgs, $condition, $sumArgs = array()) { goto RKcei; RKcei: $returnValue = 0; goto FZQNu; QyE4J: $sumArgs = PHPExcel_Calculation_Functions::flattenArray($sumArgs); goto hn4Rb; icEe0: return $returnValue; goto jwTIZ; FZQNu: $aArgs = PHPExcel_Calculation_Functions::flattenArray($aArgs); goto QyE4J; Alt7C: foreach ($aArgs as $key => $arg) { goto yzDeX; yzDeX: if (!is_numeric($arg)) { $arg = str_replace("\42", "\42\x22", $arg); $arg = PHPExcel_Calculation::wrapResult(strtoupper($arg)); } goto xABrc; xABrc: $testCondition = "\75" . $arg . $condition; goto w0VsD; w0VsD: if (PHPExcel_Calculation::getInstance()->_calculateFormulaValue($testCondition)) { $returnValue += $sumArgs[$key]; } goto P82d9; P82d9: } goto icEe0; hn4Rb: if (empty($sumArgs)) { $sumArgs = $aArgs; } goto Vo9Iz; Vo9Iz: $condition = PHPExcel_Calculation_Functions::ifCondition($condition); goto Alt7C; jwTIZ: } public static function SUMIFS() { goto iq4ai; iq4ai: $arrayList = func_get_args(); goto vVyq1; vVyq1: $sumArgs = PHPExcel_Calculation_Functions::flattenArray(array_shift($arrayList)); goto NwxQJ; NwxQJ: while (count($arrayList) > 0) { $aArgsArray[] = PHPExcel_Calculation_Functions::flattenArray(array_shift($arrayList)); $conditions[] = PHPExcel_Calculation_Functions::ifCondition(array_shift($arrayList)); } goto HjXao; HjXao: foreach ($conditions as $index => $condition) { goto d8enp; UiUzi: foreach ($aArgs as $key => $arg) { if ($wildcard) { if (!fnmatch($condition, $arg, FNM_CASEFOLD)) { $sumArgs[$key] = 0.0; } } else { goto r1fBI; Zt_k7: $testCondition = "\75" . $arg . $condition; goto Cisve; Cisve: if (!PHPExcel_Calculation::getInstance()->_calculateFormulaValue($testCondition)) { $sumArgs[$key] = 0.0; } goto AWcpz; r1fBI: if (!is_numeric($arg)) { $arg = PHPExcel_Calculation::wrapResult(strtoupper($arg)); } goto Zt_k7; AWcpz: } } goto uNH17; d8enp: $aArgs = $aArgsArray[$index]; goto FVkON; tDYjN: if (strpos($condition, "\x2a") !== false || strpos($condition, "\77") !== false) { $condition = trim(ltrim($condition, "\x3d\x3c\76"), "\42"); $wildcard = true; } goto UiUzi; FVkON: $wildcard = false; goto tDYjN; uNH17: } goto Ic0KN; Ic0KN: return array_sum($sumArgs); goto KafGZ; KafGZ: } public static function SUMPRODUCT() { goto LW9RV; RJcIV: return array_sum($wrkArray); goto z20zU; yjbpf: $wrkCellCount = count($wrkArray); goto tiwPW; tiwPW: for ($i = 0; $i < $wrkCellCount; ++$i) { if (!is_numeric($wrkArray[$i]) || is_string($wrkArray[$i])) { $wrkArray[$i] = 0; } } goto nI1au; u25BN: $wrkArray = PHPExcel_Calculation_Functions::flattenArray(array_shift($arrayList)); goto yjbpf; nI1au: foreach ($arrayList as $matrixData) { goto wZCDj; wZCDj: $array2 = PHPExcel_Calculation_Functions::flattenArray($matrixData); goto keKlh; uLt8b: if ($wrkCellCount != $count) { return PHPExcel_Calculation_Functions::VALUE(); } goto koMuR; koMuR: foreach ($array2 as $i => $val) { if (!is_numeric($val) || is_string($val)) { $val = 0; } $wrkArray[$i] *= $val; } goto WXnl3; keKlh: $count = count($array2); goto uLt8b; WXnl3: } goto RJcIV; LW9RV: $arrayList = func_get_args(); goto u25BN; z20zU: } public static function SUMSQ() { goto LQn0E; Mj36n: return $returnValue; goto ywg7A; dFuii: foreach (PHPExcel_Calculation_Functions::flattenArray(func_get_args()) as $arg) { if (is_numeric($arg) && !is_string($arg)) { $returnValue += $arg * $arg; } } goto Mj36n; LQn0E: $returnValue = 0; goto dFuii; ywg7A: } public static function SUMX2MY2($matrixData1, $matrixData2) { goto uV_K7; Jy_m3: return $result; goto jghNw; K3wS2: $result = 0; goto LWGXc; LWGXc: for ($i = 0; $i < $count; ++$i) { if (is_numeric($array1[$i]) && !is_string($array1[$i]) && (is_numeric($array2[$i]) && !is_string($array2[$i]))) { $result += $array1[$i] * $array1[$i] - $array2[$i] * $array2[$i]; } } goto Jy_m3; uV_K7: $array1 = PHPExcel_Calculation_Functions::flattenArray($matrixData1); goto pfwBO; U2ARA: $count = min(count($array1), count($array2)); goto K3wS2; pfwBO: $array2 = PHPExcel_Calculation_Functions::flattenArray($matrixData2); goto U2ARA; jghNw: } public static function SUMX2PY2($matrixData1, $matrixData2) { goto EKYkQ; SfxEE: $count = min(count($array1), count($array2)); goto FFJAj; EKYkQ: $array1 = PHPExcel_Calculation_Functions::flattenArray($matrixData1); goto EF2Ww; FFJAj: $result = 0; goto PagQk; PagQk: for ($i = 0; $i < $count; ++$i) { if (is_numeric($array1[$i]) && !is_string($array1[$i]) && (is_numeric($array2[$i]) && !is_string($array2[$i]))) { $result += $array1[$i] * $array1[$i] + $array2[$i] * $array2[$i]; } } goto d_3FT; EF2Ww: $array2 = PHPExcel_Calculation_Functions::flattenArray($matrixData2); goto SfxEE; d_3FT: return $result; goto PgZF3; PgZF3: } public static function SUMXMY2($matrixData1, $matrixData2) { goto j0pnK; L6FIE: for ($i = 0; $i < $count; ++$i) { if (is_numeric($array1[$i]) && !is_string($array1[$i]) && (is_numeric($array2[$i]) && !is_string($array2[$i]))) { $result += ($array1[$i] - $array2[$i]) * ($array1[$i] - $array2[$i]); } } goto IqTrY; ozZlA: $count = min(count($array1), count($array2)); goto jzRLH; IqTrY: return $result; goto affv_; JB3cH: $array2 = PHPExcel_Calculation_Functions::flattenArray($matrixData2); goto ozZlA; j0pnK: $array1 = PHPExcel_Calculation_Functions::flattenArray($matrixData1); goto JB3cH; jzRLH: $result = 0; goto L6FIE; affv_: } public static function TRUNC($value = 0, $digits = 0) { goto MY9NQ; G_33d: $digits = PHPExcel_Calculation_Functions::flattenSingleValue($digits); goto NzNtm; XstgA: $digits = floor($digits); goto HeMQW; nUTi_: return intval($value * $adjust) / $adjust; goto A4ch4; MY9NQ: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto G_33d; HeMQW: $adjust = pow(10, $digits); goto PDN_R; PDN_R: if ($digits > 0 && rtrim(intval((abs($value) - abs(intval($value))) * $adjust), "\60") < $adjust / 10) { return $value; } goto nUTi_; NzNtm: if (!is_numeric($value) || !is_numeric($digits)) { return PHPExcel_Calculation_Functions::VALUE(); } goto XstgA; A4ch4: } }
