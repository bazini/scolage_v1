<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto XIvzO; SPUif: define("\105\120\x53", 2.22E-16); goto PmY0d; XIvzO: if (!defined("\x50\x48\x50\x45\x58\103\x45\114\137\122\x4f\117\124")) { define("\x50\110\120\105\x58\103\x45\114\137\x52\117\x4f\x54", dirname(__FILE__) . "\x2f\x2e\56\x2f\x2e\x2e\57"); require PHPEXCEL_ROOT . "\120\110\120\105\x78\x63\x65\x6c\x2f\101\165\164\x6f\154\x6f\141\x64\x65\x72\x2e\x70\150\x70"; } goto JB8nb; OR0WM: define("\x58\x4d\111\116\111\x4e", 2.23E-308); goto SPUif; dvWLw: define("\114\x4f\x47\x5f\x47\x41\115\115\101\137\130\137\115\101\x58\137\126\x41\x4c\x55\105", 2.55E+305); goto OR0WM; JB8nb: require_once PHPEXCEL_ROOT . "\120\110\x50\x45\170\x63\145\x6c\57\x53\x68\141\162\145\144\x2f\x74\162\x65\x6e\x64\57\x74\162\145\156\x64\103\x6c\141\x73\x73\56\x70\x68\160"; goto dvWLw; PmY0d: define("\x53\x51\x52\x54\x32\x50\111", 2.5066282746310007); goto oXsSI; oXsSI: class PHPExcel_Calculation_Statistical { private static function checkTrendArrays(&$array1, &$array2) { goto kbMG2; D3WwX: foreach ($array1 as $key => $value) { if (is_bool($value) || is_string($value) || is_null($value)) { unset($array1[$key]); unset($array2[$key]); } } goto VvWdL; kcQCS: $array2 = array_merge($array2); goto H1bjK; VvWdL: foreach ($array2 as $key => $value) { if (is_bool($value) || is_string($value) || is_null($value)) { unset($array1[$key]); unset($array2[$key]); } } goto Pe5qV; Pe5qV: $array1 = array_merge($array1); goto kcQCS; kbMG2: if (!is_array($array1)) { $array1 = array($array1); } goto m7QgS; l9HoB: $array1 = PHPExcel_Calculation_Functions::flattenArray($array1); goto g8FxK; g8FxK: $array2 = PHPExcel_Calculation_Functions::flattenArray($array2); goto D3WwX; H1bjK: return true; goto u0MHC; m7QgS: if (!is_array($array2)) { $array2 = array($array2); } goto l9HoB; u0MHC: } private static function beta($p, $q) { if ($p <= 0.0 || $q <= 0.0 || $p + $q > LOG_GAMMA_X_MAX_VALUE) { return 0.0; } else { return exp(self::logBeta($p, $q)); } } private static function incompleteBeta($x, $p, $q) { goto QyYjP; QyYjP: if ($x <= 0.0) { return 0.0; } elseif ($x >= 1.0) { return 1.0; } elseif ($p <= 0.0 || $q <= 0.0 || $p + $q > LOG_GAMMA_X_MAX_VALUE) { return 0.0; } goto xhRxS; xhRxS: $beta_gam = exp(0 - self::logBeta($p, $q) + $p * log($x) + $q * log(1.0 - $x)); goto DH9LE; DH9LE: if ($x < ($p + 1.0) / ($p + $q + 2.0)) { return $beta_gam * self::betaFraction($x, $p, $q) / $p; } else { return 1.0 - $beta_gam * self::betaFraction(1 - $x, $q, $p) / $q; } goto Rl_jY; Rl_jY: } private static $logBetaCacheP = 0.0; private static $logBetaCacheQ = 0.0; private static $logBetaCacheResult = 0.0; private static function logBeta($p, $q) { if ($p != self::$logBetaCacheP || $q != self::$logBetaCacheQ) { goto khSR8; lCqBi: if ($p <= 0.0 || $q <= 0.0 || $p + $q > LOG_GAMMA_X_MAX_VALUE) { self::$logBetaCacheResult = 0.0; } else { self::$logBetaCacheResult = self::logGamma($p) + self::logGamma($q) - self::logGamma($p + $q); } goto Oe_jb; coIKx: self::$logBetaCacheQ = $q; goto lCqBi; khSR8: self::$logBetaCacheP = $p; goto coIKx; Oe_jb: } return self::$logBetaCacheResult; } private static function betaFraction($x, $p, $q) { goto KSalv; BNxQA: $h = 1.0 / $h; goto Ok60T; C_A8A: return $frac; goto tFk39; s_MOl: $p_minus = $p - 1.0; goto sl9fm; KSalv: $c = 1.0; goto nytI6; sl9fm: $h = 1.0 - $sum_pq * $x / $p_plus; goto NEAm6; Gt7W6: while ($m <= MAX_ITERATIONS && abs($delta - 1.0) > PRECISION) { $m2 = 2 * $m; $d = $m * ($q - $m) * $x / (($p_minus + $m2) * ($p + $m2)); $h = 1.0 + $d * $h; if (abs($h) < XMININ) { $h = XMININ; } $h = 1.0 / $h; $c = 1.0 + $d / $c; if (abs($c) < XMININ) { $c = XMININ; } $frac *= $h * $c; $d = -($p + $m) * ($sum_pq + $m) * $x / (($p + $m2) * ($p_plus + $m2)); $h = 1.0 + $d * $h; if (abs($h) < XMININ) { $h = XMININ; } $h = 1.0 / $h; $c = 1.0 + $d / $c; if (abs($c) < XMININ) { $c = XMININ; } $delta = $h * $c; $frac *= $delta; ++$m; } goto C_A8A; c7eLW: $delta = 0.0; goto Gt7W6; khASW: $m = 1; goto c7eLW; nytI6: $sum_pq = $p + $q; goto ovFND; ovFND: $p_plus = $p + 1.0; goto s_MOl; NEAm6: if (abs($h) < XMININ) { $h = XMININ; } goto BNxQA; Ok60T: $frac = $h; goto khASW; tFk39: } private static $logGammaCacheResult = 0.0; private static $logGammaCacheX = 0.0; private static function logGamma($x) { goto VOLwm; iIPmW: static $lg_p2 = array(4.974607845568932, 542.4138599891071, 15506.93864978365, 184793.29044456323, 1088204.7694688288, 3338152.96798703, 5106661.678927353, 3074109.0548505397); goto g0Pq1; zrHWz: static $lg_q2 = array(183.03283993705926, 7765.049321445006, 133190.38279660742, 1136705.8213219696, 5267964.117437947, 13467014.543111017, 17827365.303532742, 9533095.591844354); goto jaMJ1; r4mGz: $y = $x; goto mFgdc; AFxh9: static $pnt68 = 0.6796875; goto IdTgx; EI2F3: self::$logGammaCacheX = $x; goto KTrCc; PkkR9: return $res; goto l31yw; g0Pq1: static $lg_p4 = array(14745.0216605994, 2426813.3694867045, 121475557.40450932, 2663432449.630977, 29403789566.34554, 170266573776.5399, 492612579337.7431, 560625185622.3951); goto LO1yZ; KTrCc: self::$logGammaCacheResult = $res; goto PkkR9; eHcON: static $lg_c = array(-0.001910444077728, 0.0008417138778129501, -0.0005952379913043012, 0.0007936507935003503, -0.0027777777777776816, 0.08333333333333333, 0.0057083835261); goto kKrN5; jaMJ1: static $lg_q4 = array(2690.5301758708993, 639388.5654300093, 41355999.30241388, 1120872109.616148, 14886137286.788137, 101680358627.24382, 341747634550.73773, 446315818741.9713); goto eHcON; jBKdg: static $lg_d2 = 0.42278433509846713; goto aeSrw; LO1yZ: static $lg_q1 = array(67.48212550303778, 1113.3323938571993, 7738.757056935398, 27639.870744033407, 54993.102062261576, 61611.22180066002, 36351.2759150194, 8785.536302431014); goto zrHWz; aeSrw: static $lg_d4 = 1.791759469228055; goto O33mR; mFgdc: if ($y > 0.0 && $y <= LOG_GAMMA_X_MAX_VALUE) { if ($y <= EPS) { $res = -log(y); } elseif ($y <= 1.5) { if ($y < $pnt68) { $corr = -log($y); $xm1 = $y; } else { $corr = 0.0; $xm1 = $y - 1.0; } if ($y <= 0.5 || $y >= $pnt68) { goto pna2Q; SpVOD: for ($i = 0; $i < 8; ++$i) { $xnum = $xnum * $xm1 + $lg_p1[$i]; $xden = $xden * $xm1 + $lg_q1[$i]; } goto QgO5I; QgO5I: $res = $corr + $xm1 * ($lg_d1 + $xm1 * ($xnum / $xden)); goto MvJmo; C01CL: $xnum = 0.0; goto SpVOD; pna2Q: $xden = 1.0; goto C01CL; MvJmo: } else { goto XTOq0; B3Rx1: for ($i = 0; $i < 8; ++$i) { $xnum = $xnum * $xm2 + $lg_p2[$i]; $xden = $xden * $xm2 + $lg_q2[$i]; } goto WwOQg; q6CgJ: $xnum = 0.0; goto B3Rx1; WwOQg: $res = $corr + $xm2 * ($lg_d2 + $xm2 * ($xnum / $xden)); goto TW1Fk; XTOq0: $xm2 = $y - 1.0; goto smz3V; smz3V: $xden = 1.0; goto q6CgJ; TW1Fk: } } elseif ($y <= 4.0) { goto XRL1d; XRL1d: $xm2 = $y - 2.0; goto zsgnR; zsgnR: $xden = 1.0; goto S98jd; Q4D0F: $res = $xm2 * ($lg_d2 + $xm2 * ($xnum / $xden)); goto RMV3q; S98jd: $xnum = 0.0; goto aaHID; aaHID: for ($i = 0; $i < 8; ++$i) { $xnum = $xnum * $xm2 + $lg_p2[$i]; $xden = $xden * $xm2 + $lg_q2[$i]; } goto Q4D0F; RMV3q: } elseif ($y <= 12.0) { goto vh2jZ; vh2jZ: $xm4 = $y - 4.0; goto W4ZIu; DL_Mm: $xnum = 0.0; goto n04xE; vmvz4: $res = $lg_d4 + $xm4 * ($xnum / $xden); goto igYF9; W4ZIu: $xden = -1.0; goto DL_Mm; n04xE: for ($i = 0; $i < 8; ++$i) { $xnum = $xnum * $xm4 + $lg_p4[$i]; $xden = $xden * $xm4 + $lg_q4[$i]; } goto vmvz4; igYF9: } else { $res = 0.0; if ($y <= $lg_frtbig) { goto czPFm; LZFXG: $res = $res + log(SQRT2PI) - 0.5 * $corr; goto DXTky; QpNp2: $ysq = $y * $y; goto Uq2fQ; ixFAg: $corr = log($y); goto LZFXG; HLwuH: $res /= $y; goto ixFAg; DXTky: $res += $y * ($corr - 1.0); goto zCNnB; Uq2fQ: for ($i = 0; $i < 6; ++$i) { $res = $res / $ysq + $lg_c[$i]; } goto HLwuH; czPFm: $res = $lg_c[6]; goto QpNp2; zCNnB: } } } else { $res = MAX_VALUE; } goto EI2F3; VOLwm: static $lg_d1 = -0.5772156649015329; goto jBKdg; IdTgx: if ($x == self::$logGammaCacheX) { return self::$logGammaCacheResult; } goto r4mGz; O33mR: static $lg_p1 = array(4.945235359296727, 201.8112620856775, 2290.8383738313464, 11319.672059033808, 28557.246356716354, 38484.962284437934, 26377.487876241954, 7225.813979700288); goto iIPmW; kKrN5: static $lg_frtbig = 2.25E+76; goto AFxh9; l31yw: } private static function incompleteGamma($a, $x) { goto MomoL; MomoL: static $max = 32; goto Ux8ne; ePkRs: for ($n = 0; $n <= $max; ++$n) { $divisor = $a; for ($i = 1; $i <= $n; ++$i) { $divisor *= $a + $i; } $summer += pow($x, $n) / $divisor; } goto mHlVe; mHlVe: return pow($x, $a) * exp(0 - $x) * $summer; goto A8Oha; Ux8ne: $summer = 0; goto ePkRs; A8Oha: } private static function gamma($data) { goto l_M1l; yh6gP: return exp(0 - $tmp + log(SQRT2PI * $summer / $x)); goto yN2Tj; S5euZ: for ($j = 1; $j <= 6; ++$j) { $summer += $p[$j] / ++$y; } goto yh6gP; Fmwd4: $summer = $p0; goto S5euZ; nXFIJ: static $p0 = 1.000000000190015; goto zji78; zji78: static $p = array(1 => 76.18009172947146, 2 => -86.50532032941678, 3 => 24.01409824083091, 4 => -1.231739572450155, 5 => 0.001208650973866179, 6 => -5.395239384953E-6); goto UQZtF; nYyfk: $tmp = $x + 5.5; goto NXnOc; UQZtF: $y = $x = $data; goto nYyfk; NXnOc: $tmp -= ($x + 0.5) * log($tmp); goto Fmwd4; l_M1l: if ($data == 0.0) { return 0; } goto nXFIJ; yN2Tj: } private static function inverseNcdf($p) { goto zL5zE; iJpNL: return PHPExcel_Calculation_Functions::NULL(); goto ZRov1; zse4j: if (0 < $p && $p < $p_low) { $q = sqrt(-2 * log($p)); return ((((($c[1] * $q + $c[2]) * $q + $c[3]) * $q + $c[4]) * $q + $c[5]) * $q + $c[6]) / (((($d[1] * $q + $d[2]) * $q + $d[3]) * $q + $d[4]) * $q + 1); } elseif ($p_low <= $p && $p <= $p_high) { goto yH4o6; XAyZv: return ((((($a[1] * $r + $a[2]) * $r + $a[3]) * $r + $a[4]) * $r + $a[5]) * $r + $a[6]) * $q / ((((($b[1] * $r + $b[2]) * $r + $b[3]) * $r + $b[4]) * $r + $b[5]) * $r + 1); goto b_ccK; iuiRY: $r = $q * $q; goto XAyZv; yH4o6: $q = $p - 0.5; goto iuiRY; b_ccK: } elseif ($p_high < $p && $p < 1) { $q = sqrt(-2 * log(1 - $p)); return -((((($c[1] * $q + $c[2]) * $q + $c[3]) * $q + $c[4]) * $q + $c[5]) * $q + $c[6]) / (((($d[1] * $q + $d[2]) * $q + $d[3]) * $q + $d[4]) * $q + 1); } goto iJpNL; zL5zE: static $a = array(1 => -39.69683028665376, 2 => 220.9460984245205, 3 => -275.9285104469687, 4 => 138.357751867269, 5 => -30.66479806614716, 6 => 2.506628277459239); goto dMkmQ; w6eum: $p_low = 0.02425; goto IBy6o; dMkmQ: static $b = array(1 => -54.47609879822406, 2 => 161.5858368580409, 3 => -155.6989798598866, 4 => 66.80131188771972, 5 => -13.28068155288572); goto yb5jV; yb5jV: static $c = array(1 => -0.007784894002430293, 2 => -0.3223964580411365, 3 => -2.400758277161838, 4 => -2.549732539343734, 5 => 4.374664141464968, 6 => 2.938163982698783); goto M_xir; IBy6o: $p_high = 1 - $p_low; goto zse4j; M_xir: static $d = array(1 => 0.007784695709041462, 2 => 0.3224671290700398, 3 => 2.445134137142996, 4 => 3.754408661907416); goto w6eum; ZRov1: } private static function inverseNcdf2($prob) { goto HCjNp; oKUQT: $c8 = 2.888167364E-7; goto zV6hH; KATCh: $b3 = -21.06224101826; goto tLH12; n9d1y: $c5 = 0.0038405729373609; goto JqvLZ; mINa1: $c4 = 0.0276438810333863; goto n9d1y; wM2BS: $b2 = 23.08336743743; goto KATCh; yZPvG: $c2 = 0.976169019091719; goto gR0iZ; GzfJi: $b1 = -8.4735109309; goto wM2BS; yJEQB: return $z; goto qRTfA; XG1rF: $a4 = -25.44106049637; goto GzfJi; XqhZ2: $y = $prob - 0.5; goto K6yZb; zV6hH: $c9 = 3.960315187E-7; goto XqhZ2; t90N9: $a2 = -18.61500062529; goto u0bOg; K6yZb: if (abs($y) < 0.42) { $z = $y * $y; $z = $y * ((($a4 * $z + $a3) * $z + $a2) * $z + $a1) / (((($b4 * $z + $b3) * $z + $b2) * $z + $b1) * $z + 1); } else { goto o9AWz; QSe0Y: $z = $c1 + $z * ($c2 + $z * ($c3 + $z * ($c4 + $z * ($c5 + $z * ($c6 + $z * ($c7 + $z * ($c8 + $z * $c9))))))); goto ejHR0; ejHR0: if ($y < 0) { $z = -$z; } goto RL3AE; o9AWz: if ($y > 0) { $z = log(-log(1 - $prob)); } else { $z = log(-log($prob)); } goto QSe0Y; RL3AE: } goto yJEQB; tLH12: $b4 = 3.13082909833; goto LwICR; HCjNp: $a1 = 2.50662823884; goto t90N9; gR0iZ: $c3 = 0.160797971491821; goto mINa1; pwnrg: $c7 = 3.21767881768E-5; goto oKUQT; u0bOg: $a3 = 41.39119773534; goto XG1rF; LwICR: $c1 = 0.337475482272615; goto yZPvG; JqvLZ: $c6 = 0.0003951896511919; goto pwnrg; qRTfA: } private static function inverseNcdf3($p) { goto nOktF; C3KfY: $c3 = 3.6478483247632045; goto E6Ik3; dRnJX: $b4 = 21213.794301586597; goto KwIug; NlkcB: $a5 = 67265.77092700871; goto dbuhl; IP1re: $f4 = 0.0007868691311456133; goto uR_rg; DwnOL: $f7 = 2.0442631033899397E-15; goto t6FeR; FEiTf: $b2 = 687.1870074920579; goto XZr5R; vxKob: if (abs($q) <= split1) { $R = $const1 - $q * $q; $z = $q * ((((((($a7 * $R + $a6) * $R + $a5) * $R + $a4) * $R + $a3) * $R + $a2) * $R + $a1) * $R + $a0) / ((((((($b7 * $R + $b6) * $R + $b5) * $R + $b4) * $R + $b3) * $R + $b2) * $R + $b1) * $R + 1); } else { goto vFepQ; p1gLo: if ($R <= $split2) { $R = $R - $const2; $z = ((((((($c7 * $R + $c6) * $R + $c5) * $R + $c4) * $R + $c3) * $R + $c2) * $R + $c1) * $R + $c0) / ((((((($d7 * $R + $d6) * $R + $d5) * $R + $d4) * $R + $d3) * $R + $d2) * $R + $d1) * $R + 1); } else { $R = $R - $split2; $z = ((((((($e7 * $R + $e6) * $R + $e5) * $R + $e4) * $R + $e3) * $R + $e2) * $R + $e1) * $R + $e0) / ((((((($f7 * $R + $f6) * $R + $f5) * $R + $f4) * $R + $f3) * $R + $f2) * $R + $f1) * $R + 1); } goto wZ6ON; vFepQ: if ($q < 0) { $R = $p; } else { $R = 1 - $p; } goto vAkMd; vAkMd: $R = pow(-log($R), 2); goto p1gLo; wZ6ON: if ($q < 0) { $z = -$z; } goto W5bGO; W5bGO: } goto a0fMd; E6Ik3: $c4 = 1.2704582524523684; goto Og6j9; HHM9F: $a4 = 45921.95393154987; goto NlkcB; d6Le1: $a0 = 3.3871328727963665; goto HoLK7; ab1aA: $f3 = 0.014875361290850615; goto IP1re; Ss3tn: $const1 = 0.180625; goto esXIK; ykyX5: $e1 = 5.463784911164114; goto cEnMC; qal8G: $c7 = 0.0007745450142783414; goto VlYHR; naG6I: $d5 = 0.015198666563616457; goto DbdAm; x9go5: $e7 = 2.0103343992922881E-7; goto lQyaW; ZHugu: $c2 = 5.769497221460691; goto C3KfY; nOktF: $split1 = 0.425; goto K_Jy0; F4Lb8: $c0 = 1.4234371107496835; goto c3mHI; pA30v: $f2 = 0.1369298809227358; goto ab1aA; OBxeB: $e6 = 2.7115555687434876E-5; goto x9go5; AHp1g: $a7 = 2509.0809287301227; goto Kiqgq; XZr5R: $b3 = 5394.196021424751; goto dRnJX; KC4l4: $c6 = 0.022723844989269184; goto qal8G; dbuhl: $a6 = 33430.57558358813; goto AHp1g; soa_p: $e4 = 0.026532189526576124; goto ishrN; uR_rg: $f5 = 1.8463183175100548E-5; goto ies0w; KwIug: $b5 = 39307.89580009271; goto RvAy1; esXIK: $const2 = 1.6; goto d6Le1; hZJkp: $d3 = 0.6897673349851; goto V3kFw; ishrN: $e5 = 0.0012426609473880784; goto OBxeB; c3mHI: $c1 = 4.630337846156546; goto ZHugu; CpeXZ: $d7 = 1.0507500716444169E-9; goto FOM50; lQyaW: $f1 = 0.599832206555888; goto pA30v; K_Jy0: $split2 = 5; goto Ss3tn; Og6j9: $c5 = 0.2417807251774506; goto KC4l4; V3kFw: $d4 = 0.14810397642748008; goto naG6I; cEnMC: $e2 = 1.7848265399172913; goto MAalP; EQvtw: $a2 = 1971.5909503065513; goto p2kS3; DbdAm: $d6 = 0.0005475938084995345; goto CpeXZ; mTuNl: $b7 = 5226.495278852854; goto F4Lb8; ies0w: $f6 = 1.421511758316446E-7; goto DwnOL; t6FeR: $q = $p - 0.5; goto vxKob; FOM50: $e0 = 6.657904643501103; goto ykyX5; MAalP: $e3 = 0.29656057182850487; goto soa_p; HoLK7: $a1 = 133.14166789178438; goto EQvtw; t6iEW: $d2 = 1.6763848301838038; goto hZJkp; Kiqgq: $b1 = 42.31333070160091; goto FEiTf; p2kS3: $a3 = 13731.69376550946; goto HHM9F; RvAy1: $b6 = 28729.085735721943; goto mTuNl; VlYHR: $d1 = 2.053191626637759; goto t6iEW; a0fMd: return $z; goto Nd539; Nd539: } public static function AVEDEV() { goto zbj3d; y_46p: $aMean = self::AVERAGE($aArgs); goto TPF8M; zbj3d: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto mSZRk; mSZRk: $returnValue = null; goto y_46p; PTgcv: return PHPExcel_Calculation_Functions::NaN(); goto Pyb0J; TPF8M: if ($aMean != PHPExcel_Calculation_Functions::DIV0()) { goto nkXTV; ddaOk: return $returnValue / $aCount; goto hKc1c; PK_Gu: if ($aCount == 0) { return PHPExcel_Calculation_Functions::DIV0(); } goto ddaOk; nkXTV: $aCount = 0; goto G4AXx; G4AXx: foreach ($aArgs as $k => $arg) { if (is_bool($arg) && (!PHPExcel_Calculation_Functions::isCellValue($k) || PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE)) { $arg = (int) $arg; } if (is_numeric($arg) && !is_string($arg)) { if (is_null($returnValue)) { $returnValue = abs($arg - $aMean); } else { $returnValue += abs($arg - $aMean); } ++$aCount; } } goto PK_Gu; hKc1c: } goto PTgcv; Pyb0J: } public static function AVERAGE() { goto azBYl; azBYl: $returnValue = $aCount = 0; goto a1h32; XUCJ1: if ($aCount > 0) { return $returnValue / $aCount; } else { return PHPExcel_Calculation_Functions::DIV0(); } goto b_Sa4; a1h32: foreach (PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()) as $k => $arg) { if (is_bool($arg) && (!PHPExcel_Calculation_Functions::isCellValue($k) || PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE)) { $arg = (int) $arg; } if (is_numeric($arg) && !is_string($arg)) { if (is_null($returnValue)) { $returnValue = $arg; } else { $returnValue += $arg; } ++$aCount; } } goto XUCJ1; b_Sa4: } public static function AVERAGEA() { goto fOTXm; CxtmX: foreach (PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()) as $k => $arg) { if (is_bool($arg) && !PHPExcel_Calculation_Functions::isMatrixValue($k)) { } else { if (is_numeric($arg) || is_bool($arg) || is_string($arg) && $arg != '') { goto c3gef; F0AiH: if (is_null($returnValue)) { $returnValue = $arg; } else { $returnValue += $arg; } goto pUr9a; c3gef: if (is_bool($arg)) { $arg = (int) $arg; } elseif (is_string($arg)) { $arg = 0; } goto F0AiH; pUr9a: ++$aCount; goto U77_6; U77_6: } } } goto WFAMt; aet00: $aCount = 0; goto CxtmX; WFAMt: if ($aCount > 0) { return $returnValue / $aCount; } else { return PHPExcel_Calculation_Functions::DIV0(); } goto v6kzI; fOTXm: $returnValue = null; goto aet00; v6kzI: } public static function AVERAGEIF($aArgs, $condition, $averageArgs = array()) { goto wzbwe; rcVZA: $aArgs = PHPExcel_Calculation_Functions::flattenArray($aArgs); goto SNYlk; wzbwe: $returnValue = 0; goto rcVZA; PlwAU: if ($aCount > 0) { return $returnValue / $aCount; } goto G_Mbb; deCIB: if (empty($averageArgs)) { $averageArgs = $aArgs; } goto MhWnm; PzFRf: $aCount = 0; goto YAIZI; YAIZI: foreach ($aArgs as $key => $arg) { goto AqDag; r6IzH: if (PHPExcel_Calculation::getInstance()->_calculateFormulaValue($testCondition)) { if (is_null($returnValue) || $arg > $returnValue) { $returnValue += $arg; ++$aCount; } } goto hkbPK; VgWWj: $testCondition = "\75" . $arg . $condition; goto r6IzH; AqDag: if (!is_numeric($arg)) { $arg = PHPExcel_Calculation::wrapResult(strtoupper($arg)); } goto VgWWj; hkbPK: } goto PlwAU; SNYlk: $averageArgs = PHPExcel_Calculation_Functions::flattenArray($averageArgs); goto deCIB; MhWnm: $condition = PHPExcel_Calculation_Functions::ifCondition($condition); goto PzFRf; G_Mbb: return PHPExcel_Calculation_Functions::DIV0(); goto buAu1; buAu1: } public static function BETADIST($value, $alpha, $beta, $rMin = 0, $rMax = 1) { goto GIfbh; GIfbh: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto uojww; aaSlj: return PHPExcel_Calculation_Functions::VALUE(); goto Zc4bj; nBcSx: $rMax = PHPExcel_Calculation_Functions::flattenSingleValue($rMax); goto ml9OH; CobAX: $beta = PHPExcel_Calculation_Functions::flattenSingleValue($beta); goto rUSBr; ml9OH: if (is_numeric($value) && is_numeric($alpha) && is_numeric($beta) && is_numeric($rMin) && is_numeric($rMax)) { goto FyfDY; FyfDY: if ($value < $rMin || $value > $rMax || $alpha <= 0 || $beta <= 0 || $rMin == $rMax) { return PHPExcel_Calculation_Functions::NaN(); } goto byAK_; gk3Y4: return self::incompleteBeta($value, $alpha, $beta); goto mLCys; byAK_: if ($rMin > $rMax) { goto T0FTC; XcpCp: $rMin = $rMax; goto DkUPK; T0FTC: $tmp = $rMin; goto XcpCp; DkUPK: $rMax = $tmp; goto DKm2G; DKm2G: } goto Tl5iC; Tl5iC: $value -= $rMin; goto P7zs5; P7zs5: $value /= $rMax - $rMin; goto gk3Y4; mLCys: } goto aaSlj; rUSBr: $rMin = PHPExcel_Calculation_Functions::flattenSingleValue($rMin); goto nBcSx; uojww: $alpha = PHPExcel_Calculation_Functions::flattenSingleValue($alpha); goto CobAX; Zc4bj: } public static function BETAINV($probability, $alpha, $beta, $rMin = 0, $rMax = 1) { goto frqFB; hM2zB: $rMax = PHPExcel_Calculation_Functions::flattenSingleValue($rMax); goto MiMKi; frqFB: $probability = PHPExcel_Calculation_Functions::flattenSingleValue($probability); goto gD_SC; Ju6c2: $rMin = PHPExcel_Calculation_Functions::flattenSingleValue($rMin); goto hM2zB; Yno8R: return PHPExcel_Calculation_Functions::VALUE(); goto G92oe; MiMKi: if (is_numeric($probability) && is_numeric($alpha) && is_numeric($beta) && is_numeric($rMin) && is_numeric($rMax)) { goto FUab1; nx5hR: if ($i == MAX_ITERATIONS) { return PHPExcel_Calculation_Functions::NA(); } goto bjueD; louB2: while ($b - $a > PRECISION && $i++ < MAX_ITERATIONS) { $guess = ($a + $b) / 2; $result = self::BETADIST($guess, $alpha, $beta); if ($result == $probability || $result == 0) { $b = $a; } elseif ($result > $probability) { $b = $guess; } else { $a = $guess; } } goto nx5hR; r8aQi: $a = 0; goto SDKnD; R8F5c: if ($rMin > $rMax) { goto Jv5kn; Jv5kn: $tmp = $rMin; goto HBC1f; HBC1f: $rMin = $rMax; goto WyN0r; WyN0r: $rMax = $tmp; goto AweNl; AweNl: } goto r8aQi; Tid9u: $i = 0; goto louB2; FUab1: if ($alpha <= 0 || $beta <= 0 || $rMin == $rMax || $probability <= 0 || $probability > 1) { return PHPExcel_Calculation_Functions::NaN(); } goto R8F5c; bjueD: return round($rMin + $guess * ($rMax - $rMin), 12); goto PikSR; SDKnD: $b = 2; goto Tid9u; PikSR: } goto Yno8R; gD_SC: $alpha = PHPExcel_Calculation_Functions::flattenSingleValue($alpha); goto oD2k6; oD2k6: $beta = PHPExcel_Calculation_Functions::flattenSingleValue($beta); goto Ju6c2; G92oe: } public static function BINOMDIST($value, $trials, $probability, $cumulative) { goto UF714; zd8pM: if (is_numeric($value) && is_numeric($trials) && is_numeric($probability)) { goto ZaWQ7; rTsAW: if (is_numeric($cumulative) || is_bool($cumulative)) { if ($cumulative) { goto b2Cbw; e6Ocn: for ($i = 0; $i <= $value; ++$i) { $summer += PHPExcel_Calculation_MathTrig::COMBIN($trials, $i) * pow($probability, $i) * pow(1 - $probability, $trials - $i); } goto SnfDZ; SnfDZ: return $summer; goto rHk8B; b2Cbw: $summer = 0; goto e6Ocn; rHk8B: } else { return PHPExcel_Calculation_MathTrig::COMBIN($trials, $value) * pow($probability, $value) * pow(1 - $probability, $trials - $value); } } goto A3lLz; egRzw: if ($probability < 0 || $probability > 1) { return PHPExcel_Calculation_Functions::NaN(); } goto rTsAW; ZaWQ7: if ($value < 0 || $value > $trials) { return PHPExcel_Calculation_Functions::NaN(); } goto egRzw; A3lLz: } goto SjPP9; HRq0_: $probability = PHPExcel_Calculation_Functions::flattenSingleValue($probability); goto zd8pM; UF714: $value = floor(PHPExcel_Calculation_Functions::flattenSingleValue($value)); goto OS_0S; OS_0S: $trials = floor(PHPExcel_Calculation_Functions::flattenSingleValue($trials)); goto HRq0_; SjPP9: return PHPExcel_Calculation_Functions::VALUE(); goto vsRFY; vsRFY: } public static function CHIDIST($value, $degrees) { goto mAEyS; Zf0MD: $degrees = floor(PHPExcel_Calculation_Functions::flattenSingleValue($degrees)); goto D4uRp; D4uRp: if (is_numeric($value) && is_numeric($degrees)) { goto lZWVA; lZWVA: if ($degrees < 1) { return PHPExcel_Calculation_Functions::NaN(); } goto opxYF; lBDYI: return 1 - self::incompleteGamma($degrees / 2, $value / 2) / self::gamma($degrees / 2); goto pEJcH; opxYF: if ($value < 0) { if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_GNUMERIC) { return 1; } return PHPExcel_Calculation_Functions::NaN(); } goto lBDYI; pEJcH: } goto pdy7N; mAEyS: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto Zf0MD; pdy7N: return PHPExcel_Calculation_Functions::VALUE(); goto tohJE; tohJE: } public static function CHIINV($probability, $degrees) { goto kxY5E; fiSxn: if (is_numeric($probability) && is_numeric($degrees)) { goto mrPi2; KtL9B: $i = 0; goto mEARa; mEARa: while (abs($dx) > PRECISION && $i++ < MAX_ITERATIONS) { $result = self::CHIDIST($x, $degrees); $error = $result - $probability; if ($error == 0.0) { $dx = 0; } elseif ($error < 0.0) { $xLo = $x; } else { $xHi = $x; } if ($result != 0.0) { $dx = $error / $result; $xNew = $x - $dx; } if ($xNew < $xLo || $xNew > $xHi || $result == 0.0) { $xNew = ($xLo + $xHi) / 2; $dx = $xNew - $x; } $x = $xNew; } goto ae0Js; S1CnZ: $x = $xNew = 1; goto Ih5rj; FaIKZ: $xHi = 0; goto S1CnZ; LA5yn: return round($x, 12); goto doYL3; ae0Js: if ($i == MAX_ITERATIONS) { return PHPExcel_Calculation_Functions::NA(); } goto LA5yn; mrPi2: $xLo = 100; goto FaIKZ; Ih5rj: $dx = 1; goto KtL9B; doYL3: } goto t0Ic4; t0Ic4: return PHPExcel_Calculation_Functions::VALUE(); goto apfbp; SK3yr: $degrees = floor(PHPExcel_Calculation_Functions::flattenSingleValue($degrees)); goto fiSxn; kxY5E: $probability = PHPExcel_Calculation_Functions::flattenSingleValue($probability); goto SK3yr; apfbp: } public static function CONFIDENCE($alpha, $stdDev, $size) { goto Llfqb; aTv9K: $stdDev = PHPExcel_Calculation_Functions::flattenSingleValue($stdDev); goto zZ6uN; EZDIA: return PHPExcel_Calculation_Functions::VALUE(); goto BZXE_; Z3FJS: if (is_numeric($alpha) && is_numeric($stdDev) && is_numeric($size)) { goto QOKBq; GTq2f: if ($stdDev <= 0 || $size < 1) { return PHPExcel_Calculation_Functions::NaN(); } goto f_IPN; f_IPN: return self::NORMSINV(1 - $alpha / 2) * $stdDev / sqrt($size); goto Jp3NN; QOKBq: if ($alpha <= 0 || $alpha >= 1) { return PHPExcel_Calculation_Functions::NaN(); } goto GTq2f; Jp3NN: } goto EZDIA; zZ6uN: $size = floor(PHPExcel_Calculation_Functions::flattenSingleValue($size)); goto Z3FJS; Llfqb: $alpha = PHPExcel_Calculation_Functions::flattenSingleValue($alpha); goto aTv9K; BZXE_: } public static function CORREL($yValues, $xValues = null) { goto znhO4; OQ9L2: if (!self::checkTrendArrays($yValues, $xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto vAGAW; cb7h8: $xValueCount = count($xValues); goto cI0WJ; cNpGm: $bestFitLinear = trendClass::calculate(trendClass::TREND_LINEAR, $yValues, $xValues); goto imwQr; imwQr: return $bestFitLinear->getCorrelation(); goto NX3tB; znhO4: if (is_null($xValues) || !is_array($yValues) || !is_array($xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto OQ9L2; vAGAW: $yValueCount = count($yValues); goto cb7h8; cI0WJ: if ($yValueCount == 0 || $yValueCount != $xValueCount) { return PHPExcel_Calculation_Functions::NA(); } elseif ($yValueCount == 1) { return PHPExcel_Calculation_Functions::DIV0(); } goto cNpGm; NX3tB: } public static function COUNT() { goto KMQHY; KMQHY: $returnValue = 0; goto TV_13; RJJ7v: foreach ($aArgs as $k => $arg) { if (is_bool($arg) && (!PHPExcel_Calculation_Functions::isCellValue($k) || PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE)) { $arg = (int) $arg; } if (is_numeric($arg) && !is_string($arg)) { ++$returnValue; } } goto tJQzY; TV_13: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto RJJ7v; tJQzY: return $returnValue; goto qTo2q; qTo2q: } public static function COUNTA() { goto tSgxZ; tSgxZ: $returnValue = 0; goto WSUgj; WSUgj: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto zneVY; cCFdw: return $returnValue; goto c6AqH; zneVY: foreach ($aArgs as $arg) { if (is_numeric($arg) || is_bool($arg) || is_string($arg) && $arg != '') { ++$returnValue; } } goto cCFdw; c6AqH: } public static function COUNTBLANK() { goto Xd29B; iPotb: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto n0v4R; n0v4R: foreach ($aArgs as $arg) { if (is_null($arg) || is_string($arg) && $arg == '') { ++$returnValue; } } goto PznC0; PznC0: return $returnValue; goto Jmc4e; Xd29B: $returnValue = 0; goto iPotb; Jmc4e: } public static function COUNTIF($aArgs, $condition) { goto GJUci; GJUci: $returnValue = 0; goto NtUFZ; ZTgZ_: $condition = PHPExcel_Calculation_Functions::ifCondition($condition); goto foZew; foZew: foreach ($aArgs as $arg) { goto y3F_5; OgcBg: if (PHPExcel_Calculation::getInstance()->_calculateFormulaValue($testCondition)) { ++$returnValue; } goto u7lWQ; y3F_5: if (!is_numeric($arg)) { $arg = PHPExcel_Calculation::wrapResult(strtoupper($arg)); } goto wWAaP; wWAaP: $testCondition = "\75" . $arg . $condition; goto OgcBg; u7lWQ: } goto xpYlx; xpYlx: return $returnValue; goto GWmyS; NtUFZ: $aArgs = PHPExcel_Calculation_Functions::flattenArray($aArgs); goto ZTgZ_; GWmyS: } public static function COVAR($yValues, $xValues) { goto FE5vx; FE5vx: if (!self::checkTrendArrays($yValues, $xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto uH3Wc; KVuy_: if ($yValueCount == 0 || $yValueCount != $xValueCount) { return PHPExcel_Calculation_Functions::NA(); } elseif ($yValueCount == 1) { return PHPExcel_Calculation_Functions::DIV0(); } goto sA6o9; dw8q_: $xValueCount = count($xValues); goto KVuy_; sA6o9: $bestFitLinear = trendClass::calculate(trendClass::TREND_LINEAR, $yValues, $xValues); goto u58Ln; u58Ln: return $bestFitLinear->getCovariance(); goto SRR2H; uH3Wc: $yValueCount = count($yValues); goto dw8q_; SRR2H: } public static function CRITBINOM($trials, $probability, $alpha) { goto kKzsM; HVxPE: $probability = PHPExcel_Calculation_Functions::flattenSingleValue($probability); goto Hiv9a; Tmka3: if (is_numeric($trials) && is_numeric($probability) && is_numeric($alpha)) { goto bfMTl; AOOsH: while (true) { if ($CumPGuessMinus1 < $alpha && $CumPGuess >= $alpha) { return $Guess; } elseif ($CumPGuessMinus1 < $alpha && $CumPGuess < $alpha) { goto Re7P3; Re7P3: $PGuessPlus1 = $PGuess * ($trials - $Guess) * $probability / $Guess / (1 - $probability); goto uyKlS; uyKlS: $CumPGuessMinus1 = $CumPGuess; goto kdOt9; kdOt9: $CumPGuess = $CumPGuess + $PGuessPlus1; goto Oyf4r; Oyf4r: $PGuess = $PGuessPlus1; goto XZfj7; XZfj7: ++$Guess; goto J3oEL; J3oEL: } elseif ($CumPGuessMinus1 >= $alpha && $CumPGuess >= $alpha) { goto ol46D; ol46D: $PGuessMinus1 = $PGuess * $Guess * (1 - $probability) / ($trials - $Guess + 1) / $probability; goto YoSGO; NsHyu: $CumPGuessMinus1 = $CumPGuessMinus1 - $PGuess; goto Y8kY0; Y8kY0: $PGuess = $PGuessMinus1; goto oliCz; YoSGO: $CumPGuess = $CumPGuessMinus1; goto NsHyu; oliCz: --$Guess; goto F3opL; F3opL: } } goto hSY9w; bx0Nv: $PreviousValue = 1; goto jFp1S; jk5QW: $TotalUnscaledProbability = $UnscaledPGuess = $UnscaledCumPGuess = 0.0; goto zliZ7; wrVS4: ++$TotalUnscaledProbability; goto rtWGy; Lp5L2: $m = floor($trials * $probability); goto wrVS4; a25kx: $CumPGuessMinus1 = $CumPGuess - 1; goto AOOsH; zliZ7: $EssentiallyZero = 9.999999999999999E-12; goto Lp5L2; jFp1S: $Done = false; goto nlqqO; Wqlcr: if ($m <= $Guess) { ++$UnscaledCumPGuess; } goto sKr02; sKr02: $PreviousValue = 1; goto m3Ymi; Ja5lT: while (!$Done && $k >= 0) { $CurrentValue = $PreviousValue * $k + 1 * (1 - $probability) / (($trials - $k) * $probability); $TotalUnscaledProbability += $CurrentValue; if ($k == $Guess) { $UnscaledPGuess += $CurrentValue; } if ($k <= $Guess) { $UnscaledCumPGuess += $CurrentValue; } if ($CurrentValue <= $EssentiallyZero) { $Done = true; } $PreviousValue = $CurrentValue; --$k; } goto EWJlT; zO8nV: while (!$Done && $k <= $trials) { $CurrentValue = $PreviousValue * ($trials - $k + 1) * $probability / ($k * (1 - $probability)); $TotalUnscaledProbability += $CurrentValue; if ($k == $Guess) { $UnscaledPGuess += $CurrentValue; } if ($k <= $Guess) { $UnscaledCumPGuess += $CurrentValue; } if ($CurrentValue <= $EssentiallyZero) { $Done = true; } $PreviousValue = $CurrentValue; ++$k; } goto bx0Nv; m3Ymi: $Done = false; goto y57aJ; IfL7c: $Guess = floor($trials * $probability + $trialsApprox * sqrt($trials * $probability * (1 - $probability))); goto h0xrb; Ms6Ht: $CumPGuess = $UnscaledCumPGuess / $TotalUnscaledProbability; goto a25kx; bfMTl: if ($trials < 0) { return PHPExcel_Calculation_Functions::NaN(); } elseif ($probability < 0 || $probability > 1) { return PHPExcel_Calculation_Functions::NaN(); } elseif ($alpha < 0 || $alpha > 1) { return PHPExcel_Calculation_Functions::NaN(); } elseif ($alpha <= 0.5) { $t = sqrt(log(1 / ($alpha * $alpha))); $trialsApprox = 0 - ($t + (2.515517 + 0.802853 * $t + 0.010328 * $t * $t) / (1 + 1.432788 * $t + 0.189269 * $t * $t + 0.001308 * $t * $t * $t)); } else { $t = sqrt(log(1 / pow(1 - $alpha, 2))); $trialsApprox = $t - (2.515517 + 0.802853 * $t + 0.010328 * $t * $t) / (1 + 1.432788 * $t + 0.189269 * $t * $t + 0.001308 * $t * $t * $t); } goto IfL7c; EWJlT: $PGuess = $UnscaledPGuess / $TotalUnscaledProbability; goto Ms6Ht; h0xrb: if ($Guess < 0) { $Guess = 0; } elseif ($Guess > $trials) { $Guess = $trials; } goto jk5QW; nlqqO: $k = $m - 1; goto Ja5lT; y57aJ: $k = $m + 1; goto zO8nV; rtWGy: if ($m == $Guess) { ++$UnscaledPGuess; } goto Wqlcr; hSY9w: } goto O3HQy; kKzsM: $trials = floor(PHPExcel_Calculation_Functions::flattenSingleValue($trials)); goto HVxPE; Hiv9a: $alpha = PHPExcel_Calculation_Functions::flattenSingleValue($alpha); goto Tmka3; O3HQy: return PHPExcel_Calculation_Functions::VALUE(); goto cmvej; cmvej: } public static function DEVSQ() { goto mGeQO; S9Ytb: $aMean = self::AVERAGE($aArgs); goto qhb3E; qhb3E: if ($aMean != PHPExcel_Calculation_Functions::DIV0()) { goto vgQhB; K7C6O: if (is_null($returnValue)) { return PHPExcel_Calculation_Functions::NaN(); } else { return $returnValue; } goto XYyAq; vgQhB: $aCount = -1; goto JoZDA; JoZDA: foreach ($aArgs as $k => $arg) { if (is_bool($arg) && (!PHPExcel_Calculation_Functions::isCellValue($k) || PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE)) { $arg = (int) $arg; } if (is_numeric($arg) && !is_string($arg)) { if (is_null($returnValue)) { $returnValue = pow($arg - $aMean, 2); } else { $returnValue += pow($arg - $aMean, 2); } ++$aCount; } } goto K7C6O; XYyAq: } goto D3Nzm; D3Nzm: return self::NA(); goto rVbes; mGeQO: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto WHeFe; WHeFe: $returnValue = null; goto S9Ytb; rVbes: } public static function EXPONDIST($value, $lambda, $cumulative) { goto sVUyS; B0B0E: if (is_numeric($value) && is_numeric($lambda)) { if ($value < 0 || $lambda < 0) { return PHPExcel_Calculation_Functions::NaN(); } if (is_numeric($cumulative) || is_bool($cumulative)) { if ($cumulative) { return 1 - exp(0 - $value * $lambda); } else { return $lambda * exp(0 - $value * $lambda); } } } goto zt3H1; nHn9k: $lambda = PHPExcel_Calculation_Functions::flattenSingleValue($lambda); goto O5NAF; O5NAF: $cumulative = PHPExcel_Calculation_Functions::flattenSingleValue($cumulative); goto B0B0E; sVUyS: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto nHn9k; zt3H1: return PHPExcel_Calculation_Functions::VALUE(); goto VEfMd; VEfMd: } public static function FISHER($value) { goto ZVqXg; Vdfbn: return PHPExcel_Calculation_Functions::VALUE(); goto eE232; DfXLq: if (is_numeric($value)) { if ($value <= -1 || $value >= 1) { return PHPExcel_Calculation_Functions::NaN(); } return 0.5 * log((1 + $value) / (1 - $value)); } goto Vdfbn; ZVqXg: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto DfXLq; eE232: } public static function FISHERINV($value) { goto AIa8w; trmFO: if (is_numeric($value)) { return (exp(2 * $value) - 1) / (exp(2 * $value) + 1); } goto VMLWF; VMLWF: return PHPExcel_Calculation_Functions::VALUE(); goto Z8MLm; AIa8w: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto trmFO; Z8MLm: } public static function FORECAST($xValue, $yValues, $xValues) { goto IJWpk; Sp9b6: if ($yValueCount == 0 || $yValueCount != $xValueCount) { return PHPExcel_Calculation_Functions::NA(); } elseif ($yValueCount == 1) { return PHPExcel_Calculation_Functions::DIV0(); } goto fJnmu; IJWpk: $xValue = PHPExcel_Calculation_Functions::flattenSingleValue($xValue); goto u8yMo; fJnmu: $bestFitLinear = trendClass::calculate(trendClass::TREND_LINEAR, $yValues, $xValues); goto HJgY9; u8yMo: if (!is_numeric($xValue)) { return PHPExcel_Calculation_Functions::VALUE(); } elseif (!self::checkTrendArrays($yValues, $xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto hX5xx; HJgY9: return $bestFitLinear->getValueOfYForX($xValue); goto iqNOn; hX5xx: $yValueCount = count($yValues); goto WekWs; WekWs: $xValueCount = count($xValues); goto Sp9b6; iqNOn: } public static function GAMMADIST($value, $a, $b, $cumulative) { goto ly20X; Y2PyQ: return PHPExcel_Calculation_Functions::VALUE(); goto L3z12; muXjJ: $a = PHPExcel_Calculation_Functions::flattenSingleValue($a); goto EAZ5i; ly20X: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto muXjJ; EAZ5i: $b = PHPExcel_Calculation_Functions::flattenSingleValue($b); goto qQnnU; qQnnU: if (is_numeric($value) && is_numeric($a) && is_numeric($b)) { if ($value < 0 || $a <= 0 || $b <= 0) { return PHPExcel_Calculation_Functions::NaN(); } if (is_numeric($cumulative) || is_bool($cumulative)) { if ($cumulative) { return self::incompleteGamma($a, $value / $b) / self::gamma($a); } else { return 1 / (pow($b, $a) * self::gamma($a)) * pow($value, $a - 1) * exp(0 - $value / $b); } } } goto Y2PyQ; L3z12: } public static function GAMMAINV($probability, $alpha, $beta) { goto IInIO; bU1VT: $beta = PHPExcel_Calculation_Functions::flattenSingleValue($beta); goto B6pGe; g4u4m: return PHPExcel_Calculation_Functions::VALUE(); goto fFCRV; U0mVo: $alpha = PHPExcel_Calculation_Functions::flattenSingleValue($alpha); goto bU1VT; B6pGe: if (is_numeric($probability) && is_numeric($alpha) && is_numeric($beta)) { goto aY5vV; aY5vV: if ($alpha <= 0 || $beta <= 0 || $probability < 0 || $probability > 1) { return PHPExcel_Calculation_Functions::NaN(); } goto itiQP; S1XzW: $x = $xNew = 1; goto W1Z99; F1S05: $i = 0; goto OqB1R; itiQP: $xLo = 0; goto srlf2; c2c1k: return $x; goto k2huL; W1Z99: $error = $pdf = 0; goto Mizt7; OqB1R: while (abs($dx) > PRECISION && $i++ < MAX_ITERATIONS) { $error = self::GAMMADIST($x, $alpha, $beta, true) - $probability; if ($error < 0.0) { $xLo = $x; } else { $xHi = $x; } $pdf = self::GAMMADIST($x, $alpha, $beta, false); if ($pdf != 0.0) { $dx = $error / $pdf; $xNew = $x - $dx; } if ($xNew < $xLo || $xNew > $xHi || $pdf == 0.0) { $xNew = ($xLo + $xHi) / 2; $dx = $xNew - $x; } $x = $xNew; } goto k7xyw; k7xyw: if ($i == MAX_ITERATIONS) { return PHPExcel_Calculation_Functions::NA(); } goto c2c1k; srlf2: $xHi = $alpha * $beta * 5; goto S1XzW; Mizt7: $dx = 1024; goto F1S05; k2huL: } goto g4u4m; IInIO: $probability = PHPExcel_Calculation_Functions::flattenSingleValue($probability); goto U0mVo; fFCRV: } public static function GAMMALN($value) { goto PqqdI; eQi0d: if (is_numeric($value)) { if ($value <= 0) { return PHPExcel_Calculation_Functions::NaN(); } return log(self::gamma($value)); } goto PfzSp; PfzSp: return PHPExcel_Calculation_Functions::VALUE(); goto oU8T9; PqqdI: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto eQi0d; oU8T9: } public static function GEOMEAN() { goto BFu40; hxG5C: return PHPExcel_Calculation_Functions::NaN(); goto M7jjj; MEU7J: if (is_numeric($aMean) && $aMean > 0) { $aCount = self::COUNT($aArgs); if (self::MIN($aArgs) > 0) { return pow($aMean, 1 / $aCount); } } goto hxG5C; BFu40: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto NdcIk; NdcIk: $aMean = PHPExcel_Calculation_MathTrig::PRODUCT($aArgs); goto MEU7J; M7jjj: } public static function GROWTH($yValues, $xValues = array(), $newValues = array(), $const = true) { goto ckPlF; UL1zi: $const = is_null($const) ? true : (bool) PHPExcel_Calculation_Functions::flattenSingleValue($const); goto d8Avp; ckPlF: $yValues = PHPExcel_Calculation_Functions::flattenArray($yValues); goto N9ln3; N9ln3: $xValues = PHPExcel_Calculation_Functions::flattenArray($xValues); goto VOGRY; DzTND: $returnArray = array(); goto PuPke; VOGRY: $newValues = PHPExcel_Calculation_Functions::flattenArray($newValues); goto UL1zi; nDOMj: if (empty($newValues)) { $newValues = $bestFitExponential->getXValues(); } goto DzTND; X3jMe: return $returnArray; goto laHl1; d8Avp: $bestFitExponential = trendClass::calculate(trendClass::TREND_EXPONENTIAL, $yValues, $xValues, $const); goto nDOMj; PuPke: foreach ($newValues as $xValue) { $returnArray[0][] = $bestFitExponential->getValueOfYForX($xValue); } goto X3jMe; laHl1: } public static function HARMEAN() { goto SGdd9; OP5Ij: if ($aCount > 0) { return 1 / ($returnValue / $aCount); } else { return $returnValue; } goto YVkG3; kCyD6: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto aSL85; QE9EB: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { goto KxJPV; NdaV7: ++$aCount; goto ntC3G; KxJPV: if ($arg <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto W8VFL; W8VFL: if (is_null($returnValue)) { $returnValue = 1 / $arg; } else { $returnValue += 1 / $arg; } goto NdaV7; ntC3G: } } goto OP5Ij; Rij9V: $aCount = 0; goto QE9EB; aSL85: if (self::MIN($aArgs) < 0) { return PHPExcel_Calculation_Functions::NaN(); } goto Rij9V; SGdd9: $returnValue = PHPExcel_Calculation_Functions::NA(); goto kCyD6; YVkG3: } public static function HYPGEOMDIST($sampleSuccesses, $sampleNumber, $populationSuccesses, $populationNumber) { goto tZA1X; tZA1X: $sampleSuccesses = floor(PHPExcel_Calculation_Functions::flattenSingleValue($sampleSuccesses)); goto dB1rH; A3T9b: $populationSuccesses = floor(PHPExcel_Calculation_Functions::flattenSingleValue($populationSuccesses)); goto Q397Q; dB1rH: $sampleNumber = floor(PHPExcel_Calculation_Functions::flattenSingleValue($sampleNumber)); goto A3T9b; UXM6F: return PHPExcel_Calculation_Functions::VALUE(); goto ezIVP; Q397Q: $populationNumber = floor(PHPExcel_Calculation_Functions::flattenSingleValue($populationNumber)); goto ZcgGd; ZcgGd: if (is_numeric($sampleSuccesses) && is_numeric($sampleNumber) && is_numeric($populationSuccesses) && is_numeric($populationNumber)) { goto peZA1; peZA1: if ($sampleSuccesses < 0 || $sampleSuccesses > $sampleNumber || $sampleSuccesses > $populationSuccesses) { return PHPExcel_Calculation_Functions::NaN(); } goto ZtWT1; eS6N5: if ($populationSuccesses <= 0 || $populationSuccesses > $populationNumber) { return PHPExcel_Calculation_Functions::NaN(); } goto Qv5AK; Qv5AK: return PHPExcel_Calculation_MathTrig::COMBIN($populationSuccesses, $sampleSuccesses) * PHPExcel_Calculation_MathTrig::COMBIN($populationNumber - $populationSuccesses, $sampleNumber - $sampleSuccesses) / PHPExcel_Calculation_MathTrig::COMBIN($populationNumber, $sampleNumber); goto sfpS1; ZtWT1: if ($sampleNumber <= 0 || $sampleNumber > $populationNumber) { return PHPExcel_Calculation_Functions::NaN(); } goto eS6N5; sfpS1: } goto UXM6F; ezIVP: } public static function INTERCEPT($yValues, $xValues) { goto Hq1Rd; zK0WZ: $xValueCount = count($xValues); goto ifiAp; pWEgb: $yValueCount = count($yValues); goto zK0WZ; ifiAp: if ($yValueCount == 0 || $yValueCount != $xValueCount) { return PHPExcel_Calculation_Functions::NA(); } elseif ($yValueCount == 1) { return PHPExcel_Calculation_Functions::DIV0(); } goto LNdBB; Hq1Rd: if (!self::checkTrendArrays($yValues, $xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto pWEgb; LNdBB: $bestFitLinear = trendClass::calculate(trendClass::TREND_LINEAR, $yValues, $xValues); goto ig21Q; ig21Q: return $bestFitLinear->getIntersect(); goto z1OLN; z1OLN: } public static function KURT() { goto OBIF9; th3jy: return PHPExcel_Calculation_Functions::DIV0(); goto u7Tcp; yG8jg: if ($stdDev > 0) { goto toKWh; PJwHy: foreach ($aArgs as $k => $arg) { if (is_bool($arg) && !PHPExcel_Calculation_Functions::isMatrixValue($k)) { } else { if (is_numeric($arg) && !is_string($arg)) { $summer += pow(($arg - $mean) / $stdDev, 4); ++$count; } } } goto VqDsX; toKWh: $count = $summer = 0; goto PJwHy; VqDsX: if ($count > 3) { return $summer * ($count * ($count + 1) / (($count - 1) * ($count - 2) * ($count - 3))) - 3 * pow($count - 1, 2) / (($count - 2) * ($count - 3)); } goto Lmzmr; Lmzmr: } goto th3jy; OBIF9: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto W9928; TIRwO: $stdDev = self::STDEV($aArgs); goto yG8jg; W9928: $mean = self::AVERAGE($aArgs); goto TIRwO; u7Tcp: } public static function LARGE() { goto oQzf1; gyLRC: return PHPExcel_Calculation_Functions::VALUE(); goto MPuZi; FDTnn: $entry = floor(array_pop($aArgs)); goto p9GYX; oQzf1: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto FDTnn; p9GYX: if (is_numeric($entry) && !is_string($entry)) { goto QhvdZ; eEvuA: if ($entry < 0 || $entry >= $count || $count == 0) { return PHPExcel_Calculation_Functions::NaN(); } goto vmq2C; WopyR: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { $mArgs[] = $arg; } } goto OCDMq; OCDMq: $count = self::COUNT($mArgs); goto JLSBV; JLSBV: $entry = floor(--$entry); goto eEvuA; QhvdZ: $mArgs = array(); goto WopyR; djwOg: return $mArgs[$entry]; goto LranX; vmq2C: rsort($mArgs); goto djwOg; LranX: } goto gyLRC; MPuZi: } public static function LINEST($yValues, $xValues = null, $const = true, $stats = false) { goto pDbZr; r63um: $xValueCount = count($xValues); goto cxdx3; p6gQ9: $yValueCount = count($yValues); goto r63um; ILURm: if (is_null($xValues)) { $xValues = range(1, count(PHPExcel_Calculation_Functions::flattenArray($yValues))); } goto gc9e0; N1IZp: $stats = is_null($stats) ? false : (bool) PHPExcel_Calculation_Functions::flattenSingleValue($stats); goto ILURm; gc9e0: if (!self::checkTrendArrays($yValues, $xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto p6gQ9; pDbZr: $const = is_null($const) ? true : (bool) PHPExcel_Calculation_Functions::flattenSingleValue($const); goto N1IZp; qZrZP: $bestFitLinear = trendClass::calculate(trendClass::TREND_LINEAR, $yValues, $xValues, $const); goto kgObf; cxdx3: if ($yValueCount == 0 || $yValueCount != $xValueCount) { return PHPExcel_Calculation_Functions::NA(); } elseif ($yValueCount == 1) { return 0; } goto qZrZP; kgObf: if ($stats) { return array(array($bestFitLinear->getSlope(), $bestFitLinear->getSlopeSE(), $bestFitLinear->getGoodnessOfFit(), $bestFitLinear->getF(), $bestFitLinear->getSSRegression()), array($bestFitLinear->getIntersect(), $bestFitLinear->getIntersectSE(), $bestFitLinear->getStdevOfResiduals(), $bestFitLinear->getDFResiduals(), $bestFitLinear->getSSResiduals())); } else { return array($bestFitLinear->getSlope(), $bestFitLinear->getIntersect()); } goto htYPu; htYPu: } public static function LOGEST($yValues, $xValues = null, $const = true, $stats = false) { goto cpfIg; O3tje: foreach ($yValues as $value) { if ($value <= 0.0) { return PHPExcel_Calculation_Functions::NaN(); } } goto Tuz7D; i8z4O: $stats = is_null($stats) ? false : (bool) PHPExcel_Calculation_Functions::flattenSingleValue($stats); goto BVXCN; uuttf: if (!self::checkTrendArrays($yValues, $xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto jgW08; OazMY: if ($stats) { return array(array($bestFitExponential->getSlope(), $bestFitExponential->getSlopeSE(), $bestFitExponential->getGoodnessOfFit(), $bestFitExponential->getF(), $bestFitExponential->getSSRegression()), array($bestFitExponential->getIntersect(), $bestFitExponential->getIntersectSE(), $bestFitExponential->getStdevOfResiduals(), $bestFitExponential->getDFResiduals(), $bestFitExponential->getSSResiduals())); } else { return array($bestFitExponential->getSlope(), $bestFitExponential->getIntersect()); } goto Gz3I4; cpfIg: $const = is_null($const) ? true : (bool) PHPExcel_Calculation_Functions::flattenSingleValue($const); goto i8z4O; X2Duv: $xValueCount = count($xValues); goto O3tje; jgW08: $yValueCount = count($yValues); goto X2Duv; yJsx7: $bestFitExponential = trendClass::calculate(trendClass::TREND_EXPONENTIAL, $yValues, $xValues, $const); goto OazMY; Tuz7D: if ($yValueCount == 0 || $yValueCount != $xValueCount) { return PHPExcel_Calculation_Functions::NA(); } elseif ($yValueCount == 1) { return 1; } goto yJsx7; BVXCN: if (is_null($xValues)) { $xValues = range(1, count(PHPExcel_Calculation_Functions::flattenArray($yValues))); } goto uuttf; Gz3I4: } public static function LOGINV($probability, $mean, $stdDev) { goto VOTS3; yAJgM: if (is_numeric($probability) && is_numeric($mean) && is_numeric($stdDev)) { if ($probability < 0 || $probability > 1 || $stdDev <= 0) { return PHPExcel_Calculation_Functions::NaN(); } return exp($mean + $stdDev * self::NORMSINV($probability)); } goto m6VS7; qJrx7: $mean = PHPExcel_Calculation_Functions::flattenSingleValue($mean); goto lgF06; VOTS3: $probability = PHPExcel_Calculation_Functions::flattenSingleValue($probability); goto qJrx7; lgF06: $stdDev = PHPExcel_Calculation_Functions::flattenSingleValue($stdDev); goto yAJgM; m6VS7: return PHPExcel_Calculation_Functions::VALUE(); goto pn15p; pn15p: } public static function LOGNORMDIST($value, $mean, $stdDev) { goto XWk9M; Ii_FD: $mean = PHPExcel_Calculation_Functions::flattenSingleValue($mean); goto ZtU3a; fK_tO: return PHPExcel_Calculation_Functions::VALUE(); goto xhEDr; ZtU3a: $stdDev = PHPExcel_Calculation_Functions::flattenSingleValue($stdDev); goto A7rz3; XWk9M: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto Ii_FD; A7rz3: if (is_numeric($value) && is_numeric($mean) && is_numeric($stdDev)) { if ($value <= 0 || $stdDev <= 0) { return PHPExcel_Calculation_Functions::NaN(); } return self::NORMSDIST((log($value) - $mean) / $stdDev); } goto fK_tO; xhEDr: } public static function MAX() { goto wEi2I; wEi2I: $returnValue = null; goto K9IAU; Ibb6u: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { if (is_null($returnValue) || $arg > $returnValue) { $returnValue = $arg; } } } goto y_l_f; gweM3: return $returnValue; goto rb47x; K9IAU: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto Ibb6u; y_l_f: if (is_null($returnValue)) { return 0; } goto gweM3; rb47x: } public static function MAXA() { goto WW8aP; SL6o2: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto AwB3K; WW8aP: $returnValue = null; goto SL6o2; SFep9: if (is_null($returnValue)) { return 0; } goto Aszgg; AwB3K: foreach ($aArgs as $arg) { if (is_numeric($arg) || is_bool($arg) || is_string($arg) && $arg != '') { if (is_bool($arg)) { $arg = (int) $arg; } elseif (is_string($arg)) { $arg = 0; } if (is_null($returnValue) || $arg > $returnValue) { $returnValue = $arg; } } } goto SFep9; Aszgg: return $returnValue; goto R9yx1; R9yx1: } public static function MAXIF($aArgs, $condition, $sumArgs = array()) { goto t6Q2r; t6Q2r: $returnValue = null; goto DWPVI; N0Quo: foreach ($aArgs as $key => $arg) { goto OQa89; OQa89: if (!is_numeric($arg)) { $arg = PHPExcel_Calculation::wrapResult(strtoupper($arg)); } goto haXwY; BcesL: if (PHPExcel_Calculation::getInstance()->_calculateFormulaValue($testCondition)) { if (is_null($returnValue) || $arg > $returnValue) { $returnValue = $arg; } } goto vu8Wl; haXwY: $testCondition = "\75" . $arg . $condition; goto BcesL; vu8Wl: } goto ioel3; ioel3: return $returnValue; goto pHyTU; I0yna: $sumArgs = PHPExcel_Calculation_Functions::flattenArray($sumArgs); goto zsskv; DWPVI: $aArgs = PHPExcel_Calculation_Functions::flattenArray($aArgs); goto I0yna; bVrB4: $condition = PHPExcel_Calculation_Functions::ifCondition($condition); goto N0Quo; zsskv: if (empty($sumArgs)) { $sumArgs = $aArgs; } goto bVrB4; pHyTU: } public static function MEDIAN() { goto vQmaH; SMOIU: return $returnValue; goto hX00P; cn_a8: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { $mArgs[] = $arg; } } goto kyDKj; aG5HS: $mArgs = array(); goto a1m3W; kyDKj: $mValueCount = count($mArgs); goto S79Et; a1m3W: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto cn_a8; vQmaH: $returnValue = PHPExcel_Calculation_Functions::NaN(); goto aG5HS; S79Et: if ($mValueCount > 0) { goto kITLa; EphcG: $mValueCount = $mValueCount / 2; goto S10sH; S10sH: if ($mValueCount == floor($mValueCount)) { $returnValue = ($mArgs[$mValueCount--] + $mArgs[$mValueCount]) / 2; } else { $mValueCount = floor($mValueCount); $returnValue = $mArgs[$mValueCount]; } goto uHz43; kITLa: sort($mArgs, SORT_NUMERIC); goto EphcG; uHz43: } goto SMOIU; hX00P: } public static function MIN() { goto fRZqa; flcEi: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto cH__i; srzSx: if (is_null($returnValue)) { return 0; } goto c22m0; cH__i: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { if (is_null($returnValue) || $arg < $returnValue) { $returnValue = $arg; } } } goto srzSx; fRZqa: $returnValue = null; goto flcEi; c22m0: return $returnValue; goto yggK4; yggK4: } public static function MINA() { goto qlTxC; HTL3m: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto l8Ywt; l8Ywt: foreach ($aArgs as $arg) { if (is_numeric($arg) || is_bool($arg) || is_string($arg) && $arg != '') { if (is_bool($arg)) { $arg = (int) $arg; } elseif (is_string($arg)) { $arg = 0; } if (is_null($returnValue) || $arg < $returnValue) { $returnValue = $arg; } } } goto j69VX; UdG5Y: return $returnValue; goto qjh7I; qlTxC: $returnValue = null; goto HTL3m; j69VX: if (is_null($returnValue)) { return 0; } goto UdG5Y; qjh7I: } public static function MINIF($aArgs, $condition, $sumArgs = array()) { goto tBj8k; Iy9EG: if (empty($sumArgs)) { $sumArgs = $aArgs; } goto FT4Ha; tBj8k: $returnValue = null; goto PbUnf; FT4Ha: $condition = PHPExcel_Calculation_Functions::ifCondition($condition); goto hfAUH; PbUnf: $aArgs = PHPExcel_Calculation_Functions::flattenArray($aArgs); goto YQGMe; YQGMe: $sumArgs = PHPExcel_Calculation_Functions::flattenArray($sumArgs); goto Iy9EG; Dnws3: return $returnValue; goto GSiBA; hfAUH: foreach ($aArgs as $key => $arg) { goto wkKYG; AN140: if (PHPExcel_Calculation::getInstance()->_calculateFormulaValue($testCondition)) { if (is_null($returnValue) || $arg < $returnValue) { $returnValue = $arg; } } goto HYmpG; Lr43t: $testCondition = "\75" . $arg . $condition; goto AN140; wkKYG: if (!is_numeric($arg)) { $arg = PHPExcel_Calculation::wrapResult(strtoupper($arg)); } goto Lr43t; HYmpG: } goto Dnws3; GSiBA: } private static function modeCalc($data) { goto qFdUC; HBJoN: if ($frequencyArray[0]["\x66\x72\x65\x71\165\x65\156\143\x79"] == 1) { return PHPExcel_Calculation_Functions::NA(); } goto dniCx; dniCx: return $frequencyArray[0]["\166\141\154\165\145"]; goto NkQR7; qFdUC: $frequencyArray = array(); goto wt_ne; wixBu: foreach ($frequencyArray as $key => $value) { $frequencyList[$key] = $value["\x66\162\145\x71\165\145\x6e\x63\x79"]; $valueList[$key] = $value["\166\x61\154\165\x65"]; } goto Rp1HH; Rp1HH: array_multisort($frequencyList, SORT_DESC, $valueList, SORT_ASC, SORT_NUMERIC, $frequencyArray); goto HBJoN; wt_ne: foreach ($data as $datum) { goto YY2PL; YY2PL: $found = false; goto x7xu3; sQ3ZH: if (!$found) { $frequencyArray[] = array("\166\141\154\x75\x65" => $datum, "\x66\x72\145\161\165\x65\156\x63\x79" => 1); } goto yHjwH; x7xu3: foreach ($frequencyArray as $key => $value) { if ((string) $value["\x76\x61\154\x75\145"] == (string) $datum) { goto iHzGh; g8USB: $found = true; goto St7et; iHzGh: ++$frequencyArray[$key]["\x66\162\145\161\165\145\156\143\171"]; goto g8USB; St7et: break; goto kcGna; kcGna: } } goto sQ3ZH; yHjwH: } goto wixBu; NkQR7: } public static function MODE() { goto IGedO; m5mUn: if (!empty($mArgs)) { return self::modeCalc($mArgs); } goto o_1E9; A7jLA: $mArgs = array(); goto G96fU; G96fU: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { $mArgs[] = $arg; } } goto m5mUn; IGedO: $returnValue = PHPExcel_Calculation_Functions::NA(); goto KpoiD; o_1E9: return $returnValue; goto BzTvG; KpoiD: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto A7jLA; BzTvG: } public static function NEGBINOMDIST($failures, $successes, $probability) { goto ziNfc; i7i0l: if (is_numeric($failures) && is_numeric($successes) && is_numeric($probability)) { goto jF_3n; jF_3n: if ($failures < 0 || $successes < 1) { return PHPExcel_Calculation_Functions::NaN(); } elseif ($probability < 0 || $probability > 1) { return PHPExcel_Calculation_Functions::NaN(); } goto VLIaM; Lt_HE: return PHPExcel_Calculation_MathTrig::COMBIN($failures + $successes - 1, $successes - 1) * pow($probability, $successes) * pow(1 - $probability, $failures); goto qZu_k; VLIaM: if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_GNUMERIC) { if ($failures + $successes - 1 <= 0) { return PHPExcel_Calculation_Functions::NaN(); } } goto Lt_HE; qZu_k: } goto eC3bl; eC3bl: return PHPExcel_Calculation_Functions::VALUE(); goto va8hr; s70CP: $probability = PHPExcel_Calculation_Functions::flattenSingleValue($probability); goto i7i0l; ziNfc: $failures = floor(PHPExcel_Calculation_Functions::flattenSingleValue($failures)); goto q739G; q739G: $successes = floor(PHPExcel_Calculation_Functions::flattenSingleValue($successes)); goto s70CP; va8hr: } public static function NORMDIST($value, $mean, $stdDev, $cumulative) { goto PMViJ; MU9wA: return PHPExcel_Calculation_Functions::VALUE(); goto HNbZd; Wtq_l: if (is_numeric($value) && is_numeric($mean) && is_numeric($stdDev)) { if ($stdDev < 0) { return PHPExcel_Calculation_Functions::NaN(); } if (is_numeric($cumulative) || is_bool($cumulative)) { if ($cumulative) { return 0.5 * (1 + PHPExcel_Calculation_Engineering::erfVal(($value - $mean) / ($stdDev * sqrt(2)))); } else { return 1 / (SQRT2PI * $stdDev) * exp(0 - pow($value - $mean, 2) / (2 * ($stdDev * $stdDev))); } } } goto MU9wA; sepbQ: $mean = PHPExcel_Calculation_Functions::flattenSingleValue($mean); goto H2jaV; H2jaV: $stdDev = PHPExcel_Calculation_Functions::flattenSingleValue($stdDev); goto Wtq_l; PMViJ: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto sepbQ; HNbZd: } public static function NORMINV($probability, $mean, $stdDev) { goto esviM; hAhjP: $mean = PHPExcel_Calculation_Functions::flattenSingleValue($mean); goto OnCdA; lWdQi: return PHPExcel_Calculation_Functions::VALUE(); goto nHf4E; esviM: $probability = PHPExcel_Calculation_Functions::flattenSingleValue($probability); goto hAhjP; fmUtw: if (is_numeric($probability) && is_numeric($mean) && is_numeric($stdDev)) { goto KoY9P; H1Uuk: if ($stdDev < 0) { return PHPExcel_Calculation_Functions::NaN(); } goto FYsia; FYsia: return self::inverseNcdf($probability) * $stdDev + $mean; goto msL5y; KoY9P: if ($probability < 0 || $probability > 1) { return PHPExcel_Calculation_Functions::NaN(); } goto H1Uuk; msL5y: } goto lWdQi; OnCdA: $stdDev = PHPExcel_Calculation_Functions::flattenSingleValue($stdDev); goto fmUtw; nHf4E: } public static function NORMSDIST($value) { $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); return self::NORMDIST($value, 0, 1, true); } public static function NORMSINV($value) { return self::NORMINV($value, 0, 1); } public static function PERCENTILE() { goto IRMFk; eMywS: if (is_numeric($entry) && !is_string($entry)) { goto iZoxM; Z8Hf9: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { $mArgs[] = $arg; } } goto JATTe; aJqRR: if ($mValueCount > 0) { goto yL4z2; PKDwr: $index = $entry * ($count - 1); goto JTXWk; yL4z2: sort($mArgs); goto BWd6a; JTXWk: $iBase = floor($index); goto qV6jM; qV6jM: if ($index == $iBase) { return $mArgs[$index]; } else { goto XX175; rR3ri: return $mArgs[$iBase] + ($mArgs[$iNext] - $mArgs[$iBase]) * $iProportion; goto fkZot; XX175: $iNext = $iBase + 1; goto x3vgI; x3vgI: $iProportion = $index - $iBase; goto rR3ri; fkZot: } goto paSsS; BWd6a: $count = self::COUNT($mArgs); goto PKDwr; paSsS: } goto BOS02; brBJi: $mArgs = array(); goto Z8Hf9; iZoxM: if ($entry < 0 || $entry > 1) { return PHPExcel_Calculation_Functions::NaN(); } goto brBJi; JATTe: $mValueCount = count($mArgs); goto aJqRR; BOS02: } goto Gj4LT; Gj4LT: return PHPExcel_Calculation_Functions::VALUE(); goto ZnA1H; IRMFk: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto xpwph; xpwph: $entry = array_pop($aArgs); goto eMywS; ZnA1H: } public static function PERCENTRANK($valueSet, $value, $significance = 3) { goto FtVRZ; e0kbT: if ($valueCount == 0) { return PHPExcel_Calculation_Functions::NaN(); } goto fhUpr; FZ7Ix: sort($valueSet, SORT_NUMERIC); goto Q5k67; fhUpr: $valueAdjustor = $valueCount - 1; goto BK5qk; BK5qk: if ($value < $valueSet[0] || $value > $valueSet[$valueAdjustor]) { return PHPExcel_Calculation_Functions::NA(); } goto qWysJ; YKEDt: if ($pos === false) { goto ysi4w; ePNuQ: $testValue = $valueSet[0]; goto IT1ee; IT1ee: while ($testValue < $value) { $testValue = $valueSet[++$pos]; } goto Z_Xta; ysi4w: $pos = 0; goto ePNuQ; Z6KRv: $pos += ($value - $valueSet[$pos]) / ($testValue - $valueSet[$pos]); goto pCxEI; Z_Xta: --$pos; goto Z6KRv; pCxEI: } goto We83_; qWysJ: $pos = array_search($value, $valueSet); goto YKEDt; FtVRZ: $valueSet = PHPExcel_Calculation_Functions::flattenArray($valueSet); goto JUzNn; Q5k67: $valueCount = count($valueSet); goto e0kbT; JUzNn: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto qNvE3; We83_: return round($pos / $valueAdjustor, $significance); goto ORIOI; qNvE3: $significance = is_null($significance) ? 3 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($significance); goto B4umb; B4umb: foreach ($valueSet as $key => $valueEntry) { if (!is_numeric($valueEntry)) { unset($valueSet[$key]); } } goto FZ7Ix; ORIOI: } public static function PERMUT($numObjs, $numInSet) { goto xBNdM; tPZmf: $numInSet = PHPExcel_Calculation_Functions::flattenSingleValue($numInSet); goto z8wFg; xBNdM: $numObjs = PHPExcel_Calculation_Functions::flattenSingleValue($numObjs); goto tPZmf; bKKZI: return PHPExcel_Calculation_Functions::VALUE(); goto C8tbr; z8wFg: if (is_numeric($numObjs) && is_numeric($numInSet)) { goto QnA2m; dwa64: if ($numObjs < $numInSet) { return PHPExcel_Calculation_Functions::NaN(); } goto gpaAB; QnA2m: $numInSet = floor($numInSet); goto dwa64; gpaAB: return round(PHPExcel_Calculation_MathTrig::FACT($numObjs) / PHPExcel_Calculation_MathTrig::FACT($numObjs - $numInSet)); goto TI1kK; TI1kK: } goto bKKZI; C8tbr: } public static function POISSON($value, $mean, $cumulative) { goto Suo7I; qC3cw: if (is_numeric($value) && is_numeric($mean)) { if ($value < 0 || $mean <= 0) { return PHPExcel_Calculation_Functions::NaN(); } if (is_numeric($cumulative) || is_bool($cumulative)) { if ($cumulative) { goto g6Rrj; ejd0Z: return exp(0 - $mean) * $summer; goto yRwBl; XpfGs: for ($i = 0; $i <= floor($value); ++$i) { $summer += pow($mean, $i) / PHPExcel_Calculation_MathTrig::FACT($i); } goto ejd0Z; g6Rrj: $summer = 0; goto XpfGs; yRwBl: } else { return exp(0 - $mean) * pow($mean, $value) / PHPExcel_Calculation_MathTrig::FACT($value); } } } goto k8yh3; k8yh3: return PHPExcel_Calculation_Functions::VALUE(); goto Z1waT; jsKxx: $mean = PHPExcel_Calculation_Functions::flattenSingleValue($mean); goto qC3cw; Suo7I: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto jsKxx; Z1waT: } public static function QUARTILE() { goto BZaRW; U2V24: $entry = floor(array_pop($aArgs)); goto qap0C; BZaRW: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto U2V24; DL0uy: return PHPExcel_Calculation_Functions::VALUE(); goto bMX5C; qap0C: if (is_numeric($entry) && !is_string($entry)) { goto wMiZi; wMiZi: $entry /= 4; goto V9mR6; V9mR6: if ($entry < 0 || $entry > 1) { return PHPExcel_Calculation_Functions::NaN(); } goto J2NL0; J2NL0: return self::PERCENTILE($aArgs, $entry); goto kpnBd; kpnBd: } goto DL0uy; bMX5C: } public static function RANK($value, $valueSet, $order = 0) { goto op57P; b4iCA: $valueSet = PHPExcel_Calculation_Functions::flattenArray($valueSet); goto zs6Ly; bBaIw: foreach ($valueSet as $key => $valueEntry) { if (!is_numeric($valueEntry)) { unset($valueSet[$key]); } } goto cw0tI; op57P: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto b4iCA; cw0tI: if ($order == 0) { rsort($valueSet, SORT_NUMERIC); } else { sort($valueSet, SORT_NUMERIC); } goto Echi2; JJYt1: if ($pos === false) { return PHPExcel_Calculation_Functions::NA(); } goto pbnNi; zs6Ly: $order = is_null($order) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($order); goto bBaIw; Echi2: $pos = array_search($value, $valueSet); goto JJYt1; pbnNi: return ++$pos; goto K6JVv; K6JVv: } public static function RSQ($yValues, $xValues) { goto JzXqH; RmSkT: $xValueCount = count($xValues); goto frXX6; pJRyg: return $bestFitLinear->getGoodnessOfFit(); goto oFdf4; frXX6: if ($yValueCount == 0 || $yValueCount != $xValueCount) { return PHPExcel_Calculation_Functions::NA(); } elseif ($yValueCount == 1) { return PHPExcel_Calculation_Functions::DIV0(); } goto Z2juS; Z2juS: $bestFitLinear = trendClass::calculate(trendClass::TREND_LINEAR, $yValues, $xValues); goto pJRyg; JzXqH: if (!self::checkTrendArrays($yValues, $xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto NuKMZ; NuKMZ: $yValueCount = count($yValues); goto RmSkT; oFdf4: } public static function SKEW() { goto zf0la; uSKkL: foreach ($aArgs as $k => $arg) { if (is_bool($arg) && !PHPExcel_Calculation_Functions::isMatrixValue($k)) { } else { if (is_numeric($arg) && !is_string($arg)) { $summer += pow(($arg - $mean) / $stdDev, 3); ++$count; } } } goto NLe4c; F5GvC: $stdDev = self::STDEV($aArgs); goto NBs8v; DFCn2: $mean = self::AVERAGE($aArgs); goto F5GvC; NLe4c: if ($count > 2) { return $summer * ($count / (($count - 1) * ($count - 2))); } goto j_64A; NBs8v: $count = $summer = 0; goto uSKkL; zf0la: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto DFCn2; j_64A: return PHPExcel_Calculation_Functions::DIV0(); goto kE9xu; kE9xu: } public static function SLOPE($yValues, $xValues) { goto pxTPP; qlqed: $yValueCount = count($yValues); goto SXv67; rRnnH: if ($yValueCount == 0 || $yValueCount != $xValueCount) { return PHPExcel_Calculation_Functions::NA(); } elseif ($yValueCount == 1) { return PHPExcel_Calculation_Functions::DIV0(); } goto fNR8G; fNR8G: $bestFitLinear = trendClass::calculate(trendClass::TREND_LINEAR, $yValues, $xValues); goto TDmiI; pxTPP: if (!self::checkTrendArrays($yValues, $xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto qlqed; TDmiI: return $bestFitLinear->getSlope(); goto vWxtQ; SXv67: $xValueCount = count($xValues); goto rRnnH; vWxtQ: } public static function SMALL() { goto EJAPC; zx7fo: $entry = array_pop($aArgs); goto A8_I8; EJAPC: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto zx7fo; A8_I8: if (is_numeric($entry) && !is_string($entry)) { goto KAKqX; j0pLe: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { $mArgs[] = $arg; } } goto PFnva; KAKqX: $mArgs = array(); goto j0pLe; H6aGo: return $mArgs[$entry]; goto t9u_v; u5bQk: $entry = floor(--$entry); goto Hx8U2; HcBOd: sort($mArgs); goto H6aGo; Hx8U2: if ($entry < 0 || $entry >= $count || $count == 0) { return PHPExcel_Calculation_Functions::NaN(); } goto HcBOd; PFnva: $count = self::COUNT($mArgs); goto u5bQk; t9u_v: } goto lQmcj; lQmcj: return PHPExcel_Calculation_Functions::VALUE(); goto wXKiy; wXKiy: } public static function STANDARDIZE($value, $mean, $stdDev) { goto OPh54; Aa313: if (is_numeric($value) && is_numeric($mean) && is_numeric($stdDev)) { if ($stdDev <= 0) { return PHPExcel_Calculation_Functions::NaN(); } return ($value - $mean) / $stdDev; } goto A0XCT; SIP64: $stdDev = PHPExcel_Calculation_Functions::flattenSingleValue($stdDev); goto Aa313; A0XCT: return PHPExcel_Calculation_Functions::VALUE(); goto hTV2n; OPh54: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto sSX1f; sSX1f: $mean = PHPExcel_Calculation_Functions::flattenSingleValue($mean); goto SIP64; hTV2n: } public static function STDEV() { goto rRA71; BA0Az: if (!is_null($aMean)) { goto NsDDc; NsDDc: $aCount = -1; goto yJfHp; yJfHp: foreach ($aArgs as $k => $arg) { if (is_bool($arg) && (!PHPExcel_Calculation_Functions::isCellValue($k) || PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE)) { $arg = (int) $arg; } if (is_numeric($arg) && !is_string($arg)) { if (is_null($returnValue)) { $returnValue = pow($arg - $aMean, 2); } else { $returnValue += pow($arg - $aMean, 2); } ++$aCount; } } goto TzWeF; TzWeF: if ($aCount > 0 && $returnValue >= 0) { return sqrt($returnValue / $aCount); } goto cPUhB; cPUhB: } goto d8n3F; AuPva: $aMean = self::AVERAGE($aArgs); goto BA0Az; d8n3F: return PHPExcel_Calculation_Functions::DIV0(); goto cwNsG; rRA71: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto QbT0c; QbT0c: $returnValue = null; goto AuPva; cwNsG: } public static function STDEVA() { goto jovOd; g7svk: return PHPExcel_Calculation_Functions::DIV0(); goto jj1jj; zUdQ3: $returnValue = null; goto swTOG; jovOd: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto zUdQ3; swTOG: $aMean = self::AVERAGEA($aArgs); goto fYjLe; fYjLe: if (!is_null($aMean)) { goto kaXSc; I8nSD: if ($aCount > 0 && $returnValue >= 0) { return sqrt($returnValue / $aCount); } goto iYZDg; qOLRu: foreach ($aArgs as $k => $arg) { if (is_bool($arg) && !PHPExcel_Calculation_Functions::isMatrixValue($k)) { } else { if (is_numeric($arg) || is_bool($arg) || is_string($arg) & $arg != '') { goto YdQ5_; aSIVz: if (is_null($returnValue)) { $returnValue = pow($arg - $aMean, 2); } else { $returnValue += pow($arg - $aMean, 2); } goto L0b1S; YdQ5_: if (is_bool($arg)) { $arg = (int) $arg; } elseif (is_string($arg)) { $arg = 0; } goto aSIVz; L0b1S: ++$aCount; goto DvZgB; DvZgB: } } } goto I8nSD; kaXSc: $aCount = -1; goto qOLRu; iYZDg: } goto g7svk; jj1jj: } public static function STDEVP() { goto oHGSb; UCMZZ: return PHPExcel_Calculation_Functions::DIV0(); goto CpOgn; oHGSb: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto UmvVY; KDPM0: $aMean = self::AVERAGE($aArgs); goto ReaX9; ReaX9: if (!is_null($aMean)) { goto K0xUm; LLOFV: if ($aCount > 0 && $returnValue >= 0) { return sqrt($returnValue / $aCount); } goto pPzlT; K0xUm: $aCount = 0; goto VQ9Kf; VQ9Kf: foreach ($aArgs as $k => $arg) { if (is_bool($arg) && (!PHPExcel_Calculation_Functions::isCellValue($k) || PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE)) { $arg = (int) $arg; } if (is_numeric($arg) && !is_string($arg)) { if (is_null($returnValue)) { $returnValue = pow($arg - $aMean, 2); } else { $returnValue += pow($arg - $aMean, 2); } ++$aCount; } } goto LLOFV; pPzlT: } goto UCMZZ; UmvVY: $returnValue = null; goto KDPM0; CpOgn: } public static function STDEVPA() { goto QEAO4; A4nq9: $aMean = self::AVERAGEA($aArgs); goto YTl1p; g0BYG: return PHPExcel_Calculation_Functions::DIV0(); goto SrKBr; QEAO4: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto hUmuz; YTl1p: if (!is_null($aMean)) { goto zQBNR; zQBNR: $aCount = 0; goto TZIuo; yYXTf: if ($aCount > 0 && $returnValue >= 0) { return sqrt($returnValue / $aCount); } goto T6svC; TZIuo: foreach ($aArgs as $k => $arg) { if (is_bool($arg) && !PHPExcel_Calculation_Functions::isMatrixValue($k)) { } else { if (is_numeric($arg) || is_bool($arg) || is_string($arg) & $arg != '') { goto z7501; uGAcA: if (is_null($returnValue)) { $returnValue = pow($arg - $aMean, 2); } else { $returnValue += pow($arg - $aMean, 2); } goto gU3yi; gU3yi: ++$aCount; goto nhlFT; z7501: if (is_bool($arg)) { $arg = (int) $arg; } elseif (is_string($arg)) { $arg = 0; } goto uGAcA; nhlFT: } } } goto yYXTf; T6svC: } goto g0BYG; hUmuz: $returnValue = null; goto A4nq9; SrKBr: } public static function STEYX($yValues, $xValues) { goto MRaej; whWWn: $yValueCount = count($yValues); goto H9khL; MRaej: if (!self::checkTrendArrays($yValues, $xValues)) { return PHPExcel_Calculation_Functions::VALUE(); } goto whWWn; y8WM5: $bestFitLinear = trendClass::calculate(trendClass::TREND_LINEAR, $yValues, $xValues); goto OygXx; eNCR_: if ($yValueCount == 0 || $yValueCount != $xValueCount) { return PHPExcel_Calculation_Functions::NA(); } elseif ($yValueCount == 1) { return PHPExcel_Calculation_Functions::DIV0(); } goto y8WM5; OygXx: return $bestFitLinear->getStdevOfResiduals(); goto eI7Sk; H9khL: $xValueCount = count($xValues); goto eNCR_; eI7Sk: } public static function TDIST($value, $degrees, $tails) { goto fISKj; fISKj: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto mIS_q; mIS_q: $degrees = floor(PHPExcel_Calculation_Functions::flattenSingleValue($degrees)); goto LIwP8; QPHds: return PHPExcel_Calculation_Functions::VALUE(); goto tWQtK; LIwP8: $tails = floor(PHPExcel_Calculation_Functions::flattenSingleValue($tails)); goto bFzsl; bFzsl: if (is_numeric($value) && is_numeric($degrees) && is_numeric($tails)) { goto G4b3Q; gwolf: if ($degrees % 2 == 1) { $tsum = M_2DIVPI * ($tsum + $ttheta); } goto IA2IK; X_k10: $tsum *= $ts; goto gwolf; owzNL: if ($degrees % 2 == 1) { $ti = 3; $tterm = $tc; } else { $ti = 2; $tterm = 1; } goto TnGn_; NaJuM: $ttheta = atan2($value, sqrt($tterm)); goto GoUiU; L7L7r: $tterm = $degrees; goto NaJuM; MdFCy: while ($ti < $degrees) { $tterm *= $tc * $tc * ($ti - 1) / $ti; $tsum += $tterm; $ti += 2; } goto X_k10; luXYb: if ($tails == 1) { return 1 - abs($tValue); } else { return 1 - abs(1 - $tValue - $tValue); } goto WDv5b; X1I_E: $ts = sin($ttheta); goto YItSj; G4b3Q: if ($value < 0 || $degrees < 1 || $tails < 1 || $tails > 2) { return PHPExcel_Calculation_Functions::NaN(); } goto L7L7r; IA2IK: $tValue = 0.5 * (1 + $tsum); goto luXYb; TnGn_: $tsum = $tterm; goto MdFCy; YItSj: $tsum = 0; goto owzNL; GoUiU: $tc = cos($ttheta); goto X1I_E; WDv5b: } goto QPHds; tWQtK: } public static function TINV($probability, $degrees) { goto qh0kL; lxpi9: return PHPExcel_Calculation_Functions::VALUE(); goto MRc_q; qh0kL: $probability = PHPExcel_Calculation_Functions::flattenSingleValue($probability); goto BkX1H; jLHMj: if (is_numeric($probability) && is_numeric($degrees)) { goto rWJ5D; PsTlk: $dx = 1; goto Ib7Wm; NxMef: return round($x, 12); goto ggXnc; v8_et: $xHi = 0; goto wYCu5; tgc_I: while (abs($dx) > PRECISION && $i++ < MAX_ITERATIONS) { $result = self::TDIST($x, $degrees, 2); $error = $result - $probability; if ($error == 0.0) { $dx = 0; } elseif ($error < 0.0) { $xLo = $x; } else { $xHi = $x; } if ($result != 0.0) { $dx = $error / $result; $xNew = $x - $dx; } if ($xNew < $xLo || $xNew > $xHi || $result == 0.0) { $xNew = ($xLo + $xHi) / 2; $dx = $xNew - $x; } $x = $xNew; } goto fc_Hi; fc_Hi: if ($i == MAX_ITERATIONS) { return PHPExcel_Calculation_Functions::NA(); } goto NxMef; rWJ5D: $xLo = 100; goto v8_et; wYCu5: $x = $xNew = 1; goto PsTlk; Ib7Wm: $i = 0; goto tgc_I; ggXnc: } goto lxpi9; BkX1H: $degrees = floor(PHPExcel_Calculation_Functions::flattenSingleValue($degrees)); goto jLHMj; MRc_q: } public static function TREND($yValues, $xValues = array(), $newValues = array(), $const = true) { goto DtgUJ; ugnpA: $const = is_null($const) ? true : (bool) PHPExcel_Calculation_Functions::flattenSingleValue($const); goto qR8SQ; Vm56x: foreach ($newValues as $xValue) { $returnArray[0][] = $bestFitLinear->getValueOfYForX($xValue); } goto M35Em; qR8SQ: $bestFitLinear = trendClass::calculate(trendClass::TREND_LINEAR, $yValues, $xValues, $const); goto r5Hfd; Irm1y: $newValues = PHPExcel_Calculation_Functions::flattenArray($newValues); goto ugnpA; M35Em: return $returnArray; goto mBH1S; fg4p0: $xValues = PHPExcel_Calculation_Functions::flattenArray($xValues); goto Irm1y; DtgUJ: $yValues = PHPExcel_Calculation_Functions::flattenArray($yValues); goto fg4p0; JtPqt: $returnArray = array(); goto Vm56x; r5Hfd: if (empty($newValues)) { $newValues = $bestFitLinear->getXValues(); } goto JtPqt; mBH1S: } public static function TRIMMEAN() { goto SY1GC; hA0H8: $percent = array_pop($aArgs); goto DJg4C; zNHFf: return PHPExcel_Calculation_Functions::VALUE(); goto FebdH; DJg4C: if (is_numeric($percent) && !is_string($percent)) { goto RGev2; DpP1y: $mArgs = array(); goto cnUqo; cnUqo: foreach ($aArgs as $arg) { if (is_numeric($arg) && !is_string($arg)) { $mArgs[] = $arg; } } goto WmvbH; u3dGB: sort($mArgs); goto gnof4; RGev2: if ($percent < 0 || $percent > 1) { return PHPExcel_Calculation_Functions::NaN(); } goto DpP1y; gnof4: for ($i = 0; $i < $discard; ++$i) { array_pop($mArgs); array_shift($mArgs); } goto BTItT; BTItT: return self::AVERAGE($mArgs); goto FyqI3; WmvbH: $discard = floor(self::COUNT($mArgs) * $percent / 2); goto u3dGB; FyqI3: } goto zNHFf; SY1GC: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto hA0H8; FebdH: } public static function VARFunc() { goto HpV_5; xCfb6: if ($aCount > 1) { goto cZ7XJ; cZ7XJ: $summerA *= $aCount; goto ws1II; ZSbG0: $returnValue = ($summerA - $summerB) / ($aCount * ($aCount - 1)); goto r1D0x; ws1II: $summerB *= $summerB; goto ZSbG0; r1D0x: } goto zxmLs; HpV_5: $returnValue = PHPExcel_Calculation_Functions::DIV0(); goto dkQrj; dkQrj: $summerA = $summerB = 0; goto WQVyv; ny5Gq: $aCount = 0; goto nnM10; WQVyv: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto ny5Gq; nnM10: foreach ($aArgs as $arg) { if (is_bool($arg)) { $arg = (int) $arg; } if (is_numeric($arg) && !is_string($arg)) { goto buSnL; Wmm6v: $summerB += $arg; goto cwJ8m; cwJ8m: ++$aCount; goto iWVGK; buSnL: $summerA += $arg * $arg; goto Wmm6v; iWVGK: } } goto xCfb6; zxmLs: return $returnValue; goto uwm2i; uwm2i: } public static function VARA() { goto fbJ5E; B7hwK: return $returnValue; goto ZHtEY; N4Eza: $aCount = 0; goto xxUut; GS_mG: $summerA = $summerB = 0; goto MUPUX; lLoH3: if ($aCount > 1) { goto mAwtP; mAwtP: $summerA *= $aCount; goto dU2SL; EGMzO: $returnValue = ($summerA - $summerB) / ($aCount * ($aCount - 1)); goto GR9pd; dU2SL: $summerB *= $summerB; goto EGMzO; GR9pd: } goto B7hwK; fbJ5E: $returnValue = PHPExcel_Calculation_Functions::DIV0(); goto GS_mG; xxUut: foreach ($aArgs as $k => $arg) { if (is_string($arg) && PHPExcel_Calculation_Functions::isValue($k)) { return PHPExcel_Calculation_Functions::VALUE(); } elseif (is_string($arg) && !PHPExcel_Calculation_Functions::isMatrixValue($k)) { } else { if (is_numeric($arg) || is_bool($arg) || is_string($arg) & $arg != '') { goto CJCD4; FTojk: $summerA += $arg * $arg; goto sySzG; sySzG: $summerB += $arg; goto x4tnd; x4tnd: ++$aCount; goto olYJb; CJCD4: if (is_bool($arg)) { $arg = (int) $arg; } elseif (is_string($arg)) { $arg = 0; } goto FTojk; olYJb: } } } goto lLoH3; MUPUX: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto N4Eza; ZHtEY: } public static function VARP() { goto Caef_; Caef_: $returnValue = PHPExcel_Calculation_Functions::DIV0(); goto qOaIP; FW8D_: if ($aCount > 0) { goto QMCxC; R6YWn: $summerB *= $summerB; goto e9jzU; QMCxC: $summerA *= $aCount; goto R6YWn; e9jzU: $returnValue = ($summerA - $summerB) / ($aCount * $aCount); goto Tl0kx; Tl0kx: } goto dWBYD; BWD8f: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto IO322; qOaIP: $summerA = $summerB = 0; goto BWD8f; dWBYD: return $returnValue; goto BX0bt; EXdqu: foreach ($aArgs as $arg) { if (is_bool($arg)) { $arg = (int) $arg; } if (is_numeric($arg) && !is_string($arg)) { goto a0SpT; vCrdj: $summerB += $arg; goto VbmQn; VbmQn: ++$aCount; goto rJIWL; a0SpT: $summerA += $arg * $arg; goto vCrdj; rJIWL: } } goto FW8D_; IO322: $aCount = 0; goto EXdqu; BX0bt: } public static function VARPA() { goto i_zY8; LGXtv: $aArgs = PHPExcel_Calculation_Functions::flattenArrayIndexed(func_get_args()); goto Uazhd; kD66L: if ($aCount > 0) { goto NN5qL; NN5qL: $summerA *= $aCount; goto muEsK; muEsK: $summerB *= $summerB; goto x8imj; x8imj: $returnValue = ($summerA - $summerB) / ($aCount * $aCount); goto HNr24; HNr24: } goto P756g; dP_QZ: foreach ($aArgs as $k => $arg) { if (is_string($arg) && PHPExcel_Calculation_Functions::isValue($k)) { return PHPExcel_Calculation_Functions::VALUE(); } elseif (is_string($arg) && !PHPExcel_Calculation_Functions::isMatrixValue($k)) { } else { if (is_numeric($arg) || is_bool($arg) || is_string($arg) & $arg != '') { goto pOhjY; LcWv4: $summerB += $arg; goto S2ylh; xfewz: $summerA += $arg * $arg; goto LcWv4; S2ylh: ++$aCount; goto kotLV; pOhjY: if (is_bool($arg)) { $arg = (int) $arg; } elseif (is_string($arg)) { $arg = 0; } goto xfewz; kotLV: } } } goto kD66L; i_zY8: $returnValue = PHPExcel_Calculation_Functions::DIV0(); goto Ec7So; Uazhd: $aCount = 0; goto dP_QZ; P756g: return $returnValue; goto Dx6QM; Ec7So: $summerA = $summerB = 0; goto LGXtv; Dx6QM: } public static function WEIBULL($value, $alpha, $beta, $cumulative) { goto yDb5O; qHSX1: if (is_numeric($value) && is_numeric($alpha) && is_numeric($beta)) { if ($value < 0 || $alpha <= 0 || $beta <= 0) { return PHPExcel_Calculation_Functions::NaN(); } if (is_numeric($cumulative) || is_bool($cumulative)) { if ($cumulative) { return 1 - exp(0 - pow($value / $beta, $alpha)); } else { return $alpha / pow($beta, $alpha) * pow($value, $alpha - 1) * exp(0 - pow($value / $beta, $alpha)); } } } goto QGVuX; GKQiD: $beta = PHPExcel_Calculation_Functions::flattenSingleValue($beta); goto qHSX1; yjgK0: $alpha = PHPExcel_Calculation_Functions::flattenSingleValue($alpha); goto GKQiD; QGVuX: return PHPExcel_Calculation_Functions::VALUE(); goto W9pQz; yDb5O: $value = PHPExcel_Calculation_Functions::flattenSingleValue($value); goto yjgK0; W9pQz: } public static function ZTEST($dataSet, $m0, $sigma = null) { goto gG8yl; P5jxP: $n = count($dataSet); goto Pyqgm; Pyqgm: return 1 - self::NORMSDIST((self::AVERAGE($dataSet) - $m0) / ($sigma / SQRT($n))); goto ZzXuw; FdU1K: if (is_null($sigma)) { $sigma = self::STDEV($dataSet); } goto P5jxP; E1zv2: $m0 = PHPExcel_Calculation_Functions::flattenSingleValue($m0); goto YYVAU; gG8yl: $dataSet = PHPExcel_Calculation_Functions::flattenArrayIndexed($dataSet); goto E1zv2; YYVAU: $sigma = PHPExcel_Calculation_Functions::flattenSingleValue($sigma); goto FdU1K; ZzXuw: } }
