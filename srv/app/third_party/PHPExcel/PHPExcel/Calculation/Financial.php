<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:04              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto izEZa; izEZa: if (!defined("\120\x48\120\105\x58\103\105\114\137\122\117\117\124")) { define("\x50\110\x50\x45\x58\x43\105\114\137\122\x4f\117\x54", dirname(__FILE__) . "\57\x2e\x2e\x2f\56\56\x2f"); require PHPEXCEL_ROOT . "\x50\110\120\105\x78\x63\145\154\x2f\101\165\164\157\x6c\157\141\144\145\x72\56\x70\150\x70"; } goto to078; to078: define("\106\x49\116\101\x4e\x43\x49\x41\x4c\137\115\x41\x58\x5f\111\124\x45\122\101\124\x49\x4f\x4e\x53", 128); goto oiNgA; oiNgA: define("\106\x49\116\101\x4e\x43\x49\101\114\x5f\x50\122\105\x43\x49\123\111\x4f\116", 1.0E-8); goto AV_KE; AV_KE: class PHPExcel_Calculation_Financial { private static function isLastDayOfMonth($testDate) { return $testDate->format("\x64") == $testDate->format("\x74"); } private static function isFirstDayOfMonth($testDate) { return $testDate->format("\x64") == 1; } private static function couponFirstPeriodDate($settlement, $maturity, $frequency, $next) { goto wdbkT; wdbkT: $months = 12 / $frequency; goto uQhaG; QwD2v: if ($eom) { $result->modify("\55\61\x20\144\x61\x79"); } goto shI75; uQhaG: $result = PHPExcel_Shared_Date::ExcelToPHPObject($maturity); goto YLtic; YLtic: $eom = self::isLastDayOfMonth($result); goto ILGZb; zBKqR: if ($next) { $result->modify("\53" . $months . "\x20\x6d\x6f\156\164\150\163"); } goto QwD2v; shI75: return PHPExcel_Shared_Date::PHPToExcel($result); goto w7gGo; ILGZb: while ($settlement < PHPExcel_Shared_Date::PHPToExcel($result)) { $result->modify("\55" . $months . "\x20\x6d\x6f\x6e\164\x68\163"); } goto zBKqR; w7gGo: } private static function isValidFrequency($frequency) { goto BWqqq; BWqqq: if ($frequency == 1 || $frequency == 2 || $frequency == 4) { return true; } goto qSUyl; SLfKE: return false; goto Y4LbX; qSUyl: if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_GNUMERIC && ($frequency == 6 || $frequency == 12)) { return true; } goto SLfKE; Y4LbX: } private static function daysPerYear($year, $basis = 0) { switch ($basis) { case 0: case 2: case 4: $daysPerYear = 360; break; case 3: $daysPerYear = 365; break; case 1: $daysPerYear = PHPExcel_Calculation_DateTime::isLeapYear($year) ? 366 : 365; break; default: return PHPExcel_Calculation_Functions::NaN(); } return $daysPerYear; } private static function interestAndPrincipal($rate = 0, $per = 0, $nper = 0, $pv = 0, $fv = 0, $type = 0) { goto JNIXY; IHjx5: for ($i = 1; $i <= $per; ++$i) { $interest = $type && $i == 1 ? 0 : -$capital * $rate; $principal = $pmt - $interest; $capital += $principal; } goto ciUZw; JNIXY: $pmt = self::PMT($rate, $nper, $pv, $fv, $type); goto d5PR9; d5PR9: $capital = $pv; goto IHjx5; ciUZw: return array($interest, $principal); goto jZWxa; jZWxa: } public static function ACCRINT($issue, $firstinterest, $settlement, $rate, $par = 1000, $frequency = 1, $basis = 0) { goto VVG4b; eiQr1: return PHPExcel_Calculation_Functions::VALUE(); goto R3GH9; bog5i: $basis = is_null($basis) ? 0 : PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto OT_cD; OT_cD: if (is_numeric($rate) && is_numeric($par)) { goto FR2xN; MmjYq: if (!is_numeric($daysBetweenIssueAndSettlement)) { return $daysBetweenIssueAndSettlement; } goto t7_OD; It8cT: if ($rate <= 0 || $par <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto KEAq8; KEAq8: $daysBetweenIssueAndSettlement = PHPExcel_Calculation_DateTime::YEARFRAC($issue, $settlement, $basis); goto MmjYq; RoBll: $par = (float) $par; goto It8cT; t7_OD: return $par * $rate * $daysBetweenIssueAndSettlement; goto EP4Dc; FR2xN: $rate = (float) $rate; goto RoBll; EP4Dc: } goto eiQr1; VVG4b: $issue = PHPExcel_Calculation_Functions::flattenSingleValue($issue); goto WjDB7; IqW07: $frequency = is_null($frequency) ? 1 : PHPExcel_Calculation_Functions::flattenSingleValue($frequency); goto bog5i; FcH4A: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto OE0Wv; OE0Wv: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto N2u7e; N2u7e: $par = is_null($par) ? 1000 : PHPExcel_Calculation_Functions::flattenSingleValue($par); goto IqW07; WjDB7: $firstinterest = PHPExcel_Calculation_Functions::flattenSingleValue($firstinterest); goto FcH4A; R3GH9: } public static function ACCRINTM($issue, $settlement, $rate, $par = 1000, $basis = 0) { goto F1wHP; kIp7Q: $par = is_null($par) ? 1000 : PHPExcel_Calculation_Functions::flattenSingleValue($par); goto uXpMg; AlnCb: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto Lj2LU; uXpMg: $basis = is_null($basis) ? 0 : PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto Yyzl1; Yyzl1: if (is_numeric($rate) && is_numeric($par)) { goto zSwBW; ivXhn: if (!is_numeric($daysBetweenIssueAndSettlement)) { return $daysBetweenIssueAndSettlement; } goto Uy4ex; R96qz: if ($rate <= 0 || $par <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto a99jb; WqRM4: $par = (float) $par; goto R96qz; Uy4ex: return $par * $rate * $daysBetweenIssueAndSettlement; goto qvehX; zSwBW: $rate = (float) $rate; goto WqRM4; a99jb: $daysBetweenIssueAndSettlement = PHPExcel_Calculation_DateTime::YEARFRAC($issue, $settlement, $basis); goto ivXhn; qvehX: } goto oDTWy; oDTWy: return PHPExcel_Calculation_Functions::VALUE(); goto VBuEz; F1wHP: $issue = PHPExcel_Calculation_Functions::flattenSingleValue($issue); goto AlnCb; Lj2LU: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto kIp7Q; VBuEz: } public static function AMORDEGRC($cost, $purchased, $firstPeriod, $salvage, $period, $rate, $basis = 0) { goto Qll9e; Qll9e: $cost = PHPExcel_Calculation_Functions::flattenSingleValue($cost); goto gEhUL; yD7ei: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto XF_zv; ZpnwM: for ($n = 0; $n < $period; ++$n) { $fNRate = round($rate * $cost, 0); $fRest -= $fNRate; if ($fRest < 0.0) { switch ($period - $n) { case 0: case 1: return round($cost * 0.5, 0); default: return 0.0; } } $cost -= $fNRate; } goto sedlR; wW7LE: $fRest = $cost - $salvage; goto ZpnwM; gEhUL: $purchased = PHPExcel_Calculation_Functions::flattenSingleValue($purchased); goto WlfMF; XF_zv: $basis = is_null($basis) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto KAJwb; gwSAk: $fNRate = round(PHPExcel_Calculation_DateTime::YEARFRAC($purchased, $firstPeriod, $basis) * $rate * $cost, 0); goto R89Ln; sedlR: return $fNRate; goto X4Xq1; kf3lO: if ($fUsePer < 3.0) { $amortiseCoeff = 1.0; } elseif ($fUsePer < 5.0) { $amortiseCoeff = 1.5; } elseif ($fUsePer <= 6.0) { $amortiseCoeff = 2.0; } else { $amortiseCoeff = 2.5; } goto uLwP1; kJcvm: $salvage = PHPExcel_Calculation_Functions::flattenSingleValue($salvage); goto ZWBmQ; KAJwb: $fUsePer = 1.0 / $rate; goto kf3lO; uLwP1: $rate *= $amortiseCoeff; goto gwSAk; ZWBmQ: $period = floor(PHPExcel_Calculation_Functions::flattenSingleValue($period)); goto yD7ei; R89Ln: $cost -= $fNRate; goto wW7LE; WlfMF: $firstPeriod = PHPExcel_Calculation_Functions::flattenSingleValue($firstPeriod); goto kJcvm; X4Xq1: } public static function AMORLINC($cost, $purchased, $firstPeriod, $salvage, $period, $rate, $basis = 0) { goto GaDAH; zvOpH: $purchasedYear = PHPExcel_Calculation_DateTime::YEAR($purchased); goto PxlUt; Jq0LC: $fOneRate = $cost * $rate; goto THuDk; sA1rB: if ($basis == 1 && $yearFrac < 1 && PHPExcel_Calculation_DateTime::isLeapYear($purchasedYear)) { $yearFrac *= 365 / 366; } goto SCQWb; VT2VU: $nNumOfFullPeriods = intval(($cost - $salvage - $f0Rate) / $fOneRate); goto LRct8; THuDk: $fCostDelta = $cost - $salvage; goto zvOpH; HmUWh: $basis = is_null($basis) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto Jq0LC; EkX_Y: $salvage = PHPExcel_Calculation_Functions::flattenSingleValue($salvage); goto c72z5; LRct8: if ($period == 0) { return $f0Rate; } elseif ($period <= $nNumOfFullPeriods) { return $fOneRate; } elseif ($period == $nNumOfFullPeriods + 1) { return $fCostDelta - $fOneRate * $nNumOfFullPeriods - $f0Rate; } else { return 0.0; } goto Fezw5; SCQWb: $f0Rate = $yearFrac * $rate * $cost; goto VT2VU; sixEt: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto HmUWh; PxlUt: $yearFrac = PHPExcel_Calculation_DateTime::YEARFRAC($purchased, $firstPeriod, $basis); goto sA1rB; LTg1J: $purchased = PHPExcel_Calculation_Functions::flattenSingleValue($purchased); goto T5Kcn; c72z5: $period = PHPExcel_Calculation_Functions::flattenSingleValue($period); goto sixEt; GaDAH: $cost = PHPExcel_Calculation_Functions::flattenSingleValue($cost); goto LTg1J; T5Kcn: $firstPeriod = PHPExcel_Calculation_Functions::flattenSingleValue($firstPeriod); goto EkX_Y; Fezw5: } public static function COUPDAYBS($settlement, $maturity, $frequency, $basis = 0) { goto fI9V6; CtmHd: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto CqofC; j5g6Y: return PHPExcel_Calculation_DateTime::YEARFRAC($prev, $settlement, $basis) * $daysPerYear; goto ukOvV; hEppR: $basis = is_null($basis) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto iIMnc; q1Xyn: $daysPerYear = self::daysPerYear(PHPExcel_Calculation_DateTime::YEAR($settlement), $basis); goto T_MZT; xEvVv: if ($settlement > $maturity || !self::isValidFrequency($frequency) || ($basis < 0 || $basis > 4)) { return PHPExcel_Calculation_Functions::NaN(); } goto q1Xyn; fI9V6: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto CtmHd; iIMnc: if (is_string($settlement = PHPExcel_Calculation_DateTime::getDateValue($settlement))) { return PHPExcel_Calculation_Functions::VALUE(); } goto mf9ps; T_MZT: $prev = self::couponFirstPeriodDate($settlement, $maturity, $frequency, false); goto j5g6Y; CqofC: $frequency = (int) PHPExcel_Calculation_Functions::flattenSingleValue($frequency); goto hEppR; mf9ps: if (is_string($maturity = PHPExcel_Calculation_DateTime::getDateValue($maturity))) { return PHPExcel_Calculation_Functions::VALUE(); } goto xEvVv; ukOvV: } public static function COUPDAYS($settlement, $maturity, $frequency, $basis = 0) { goto K8Tbe; K8Tbe: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto ZqqmO; bWiFu: $frequency = (int) PHPExcel_Calculation_Functions::flattenSingleValue($frequency); goto Xdcu1; LphEP: if ($settlement > $maturity || !self::isValidFrequency($frequency) || ($basis < 0 || $basis > 4)) { return PHPExcel_Calculation_Functions::NaN(); } goto LNc6B; LNc6B: switch ($basis) { case 3: return 365 / $frequency; case 1: goto kzxIq; HVySI: $prev = self::couponFirstPeriodDate($settlement, $maturity, $frequency, false); goto qzE8X; qzE8X: $next = self::couponFirstPeriodDate($settlement, $maturity, $frequency, true); goto f0d0T; f0d0T: return $next - $prev; goto sZqe0; kzxIq: if ($frequency == 1) { $daysPerYear = self::daysPerYear(PHPExcel_Calculation_DateTime::YEAR($maturity), $basis); return $daysPerYear / $frequency; } goto HVySI; sZqe0: default: return 360 / $frequency; } goto JF1U2; Xdcu1: $basis = is_null($basis) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto V4E6B; t0_zy: if (is_string($maturity = PHPExcel_Calculation_DateTime::getDateValue($maturity))) { return PHPExcel_Calculation_Functions::VALUE(); } goto LphEP; ZqqmO: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto bWiFu; V4E6B: if (is_string($settlement = PHPExcel_Calculation_DateTime::getDateValue($settlement))) { return PHPExcel_Calculation_Functions::VALUE(); } goto t0_zy; JF1U2: return PHPExcel_Calculation_Functions::VALUE(); goto fpjyJ; fpjyJ: } public static function COUPDAYSNC($settlement, $maturity, $frequency, $basis = 0) { goto qbZFY; kDt5F: if ($settlement > $maturity || !self::isValidFrequency($frequency) || ($basis < 0 || $basis > 4)) { return PHPExcel_Calculation_Functions::NaN(); } goto S394H; YvyKH: return PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $next, $basis) * $daysPerYear; goto EByjn; CvwJk: if (is_string($settlement = PHPExcel_Calculation_DateTime::getDateValue($settlement))) { return PHPExcel_Calculation_Functions::VALUE(); } goto vLW9K; S394H: $daysPerYear = self::daysPerYear(PHPExcel_Calculation_DateTime::YEAR($settlement), $basis); goto jbKCn; jbKCn: $next = self::couponFirstPeriodDate($settlement, $maturity, $frequency, true); goto YvyKH; j_p_W: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto ogNL6; vLW9K: if (is_string($maturity = PHPExcel_Calculation_DateTime::getDateValue($maturity))) { return PHPExcel_Calculation_Functions::VALUE(); } goto kDt5F; qbZFY: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto j_p_W; ogNL6: $frequency = (int) PHPExcel_Calculation_Functions::flattenSingleValue($frequency); goto uNIxT; uNIxT: $basis = is_null($basis) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto CvwJk; EByjn: } public static function COUPNCD($settlement, $maturity, $frequency, $basis = 0) { goto BJnAa; jrl2b: $frequency = (int) PHPExcel_Calculation_Functions::flattenSingleValue($frequency); goto j23s7; ZKAvX: return self::couponFirstPeriodDate($settlement, $maturity, $frequency, true); goto ftN7Y; SShqO: if ($settlement > $maturity || !self::isValidFrequency($frequency) || ($basis < 0 || $basis > 4)) { return PHPExcel_Calculation_Functions::NaN(); } goto ZKAvX; yyFWL: if (is_string($settlement = PHPExcel_Calculation_DateTime::getDateValue($settlement))) { return PHPExcel_Calculation_Functions::VALUE(); } goto KmOhP; iiecj: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto jrl2b; BJnAa: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto iiecj; j23s7: $basis = is_null($basis) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto yyFWL; KmOhP: if (is_string($maturity = PHPExcel_Calculation_DateTime::getDateValue($maturity))) { return PHPExcel_Calculation_Functions::VALUE(); } goto SShqO; ftN7Y: } public static function COUPNUM($settlement, $maturity, $frequency, $basis = 0) { goto E7nCL; O_7Zj: if ($settlement > $maturity || !self::isValidFrequency($frequency) || ($basis < 0 || $basis > 4)) { return PHPExcel_Calculation_Functions::NaN(); } goto DhHMB; DhHMB: $settlement = self::couponFirstPeriodDate($settlement, $maturity, $frequency, true); goto tG811; op3fN: return PHPExcel_Calculation_Functions::VALUE(); goto I9XrQ; jFSV_: if (is_string($settlement = PHPExcel_Calculation_DateTime::getDateValue($settlement))) { return PHPExcel_Calculation_Functions::VALUE(); } goto X9VAj; K6QsU: $basis = is_null($basis) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto jFSV_; tUIwB: switch ($frequency) { case 1: return ceil($daysBetweenSettlementAndMaturity / 360); case 2: return ceil($daysBetweenSettlementAndMaturity / 180); case 4: return ceil($daysBetweenSettlementAndMaturity / 90); case 6: return ceil($daysBetweenSettlementAndMaturity / 60); case 12: return ceil($daysBetweenSettlementAndMaturity / 30); } goto op3fN; pVGoB: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto B8UmI; X9VAj: if (is_string($maturity = PHPExcel_Calculation_DateTime::getDateValue($maturity))) { return PHPExcel_Calculation_Functions::VALUE(); } goto O_7Zj; B8UmI: $frequency = (int) PHPExcel_Calculation_Functions::flattenSingleValue($frequency); goto K6QsU; E7nCL: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto pVGoB; tG811: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity, $basis) * 365; goto tUIwB; I9XrQ: } public static function COUPPCD($settlement, $maturity, $frequency, $basis = 0) { goto U8xVx; fEYCu: $frequency = (int) PHPExcel_Calculation_Functions::flattenSingleValue($frequency); goto HQ0w2; U8xVx: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto hqxZE; NIvV6: if ($settlement > $maturity || !self::isValidFrequency($frequency) || ($basis < 0 || $basis > 4)) { return PHPExcel_Calculation_Functions::NaN(); } goto RI7C9; hqxZE: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto fEYCu; u6cd5: if (is_string($settlement = PHPExcel_Calculation_DateTime::getDateValue($settlement))) { return PHPExcel_Calculation_Functions::VALUE(); } goto eXclV; RI7C9: return self::couponFirstPeriodDate($settlement, $maturity, $frequency, false); goto ZIi_z; HQ0w2: $basis = is_null($basis) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto u6cd5; eXclV: if (is_string($maturity = PHPExcel_Calculation_DateTime::getDateValue($maturity))) { return PHPExcel_Calculation_Functions::VALUE(); } goto NIvV6; ZIi_z: } public static function CUMIPMT($rate, $nper, $pv, $start, $end, $type = 0) { goto SGHOa; QSHi5: $type = (int) PHPExcel_Calculation_Functions::flattenSingleValue($type); goto scIdK; yvk0M: $start = (int) PHPExcel_Calculation_Functions::flattenSingleValue($start); goto V5ert; KJTol: $pv = PHPExcel_Calculation_Functions::flattenSingleValue($pv); goto yvk0M; V5ert: $end = (int) PHPExcel_Calculation_Functions::flattenSingleValue($end); goto QSHi5; SGHOa: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto ZmwuF; ZmwuF: $nper = (int) PHPExcel_Calculation_Functions::flattenSingleValue($nper); goto KJTol; khnZI: return $interest; goto Y2O1W; SO3m3: if ($start < 1 || $start > $end) { return PHPExcel_Calculation_Functions::VALUE(); } goto ByllZ; Nx2Pv: for ($per = $start; $per <= $end; ++$per) { $interest += self::IPMT($rate, $per, $nper, $pv, 0, $type); } goto khnZI; ByllZ: $interest = 0; goto Nx2Pv; scIdK: if ($type != 0 && $type != 1) { return PHPExcel_Calculation_Functions::NaN(); } goto SO3m3; Y2O1W: } public static function CUMPRINC($rate, $nper, $pv, $start, $end, $type = 0) { goto e880A; xh3DZ: return $principal; goto MC_n5; pwBsc: $start = (int) PHPExcel_Calculation_Functions::flattenSingleValue($start); goto fXVxj; e880A: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto QeTkP; KXOW9: $pv = PHPExcel_Calculation_Functions::flattenSingleValue($pv); goto pwBsc; E0TnU: $type = (int) PHPExcel_Calculation_Functions::flattenSingleValue($type); goto MJa3S; QeTkP: $nper = (int) PHPExcel_Calculation_Functions::flattenSingleValue($nper); goto KXOW9; MJa3S: if ($type != 0 && $type != 1) { return PHPExcel_Calculation_Functions::NaN(); } goto sVsrY; T_J_b: for ($per = $start; $per <= $end; ++$per) { $principal += self::PPMT($rate, $per, $nper, $pv, 0, $type); } goto xh3DZ; W0oZr: $principal = 0; goto T_J_b; fXVxj: $end = (int) PHPExcel_Calculation_Functions::flattenSingleValue($end); goto E0TnU; sVsrY: if ($start < 1 || $start > $end) { return PHPExcel_Calculation_Functions::VALUE(); } goto W0oZr; MC_n5: } public static function DB($cost, $salvage, $life, $period, $month = 12) { goto IAUb1; aAmR0: $period = PHPExcel_Calculation_Functions::flattenSingleValue($period); goto ATnBL; ATnBL: $month = PHPExcel_Calculation_Functions::flattenSingleValue($month); goto e0hCR; cziMp: $life = PHPExcel_Calculation_Functions::flattenSingleValue($life); goto aAmR0; TgkNx: return PHPExcel_Calculation_Functions::VALUE(); goto Jvj_0; nnSAv: $salvage = PHPExcel_Calculation_Functions::flattenSingleValue($salvage); goto cziMp; e0hCR: if (is_numeric($cost) && is_numeric($salvage) && is_numeric($life) && is_numeric($period) && is_numeric($month)) { goto SRokF; mPdP4: $life = (int) $life; goto RRPw2; uYXpT: if ($cost == 0) { return 0.0; } elseif ($cost < 0 || $salvage / $cost < 0 || $life <= 0 || $period < 1 || $month < 1) { return PHPExcel_Calculation_Functions::NaN(); } goto GMl7M; F8CiM: $previousDepreciation = 0; goto tfqrU; tfqrU: for ($per = 1; $per <= $period; ++$per) { if ($per == 1) { $depreciation = $cost * $fixedDepreciationRate * $month / 12; } elseif ($per == $life + 1) { $depreciation = ($cost - $previousDepreciation) * $fixedDepreciationRate * (12 - $month) / 12; } else { $depreciation = ($cost - $previousDepreciation) * $fixedDepreciationRate; } $previousDepreciation += $depreciation; } goto zbrNN; GMl7M: $fixedDepreciationRate = 1 - pow($salvage / $cost, 1 / $life); goto NDqWG; RRPw2: $period = (int) $period; goto QYXv7; SRokF: $cost = (float) $cost; goto OHgHV; zbrNN: if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_GNUMERIC) { $depreciation = round($depreciation, 2); } goto WEgtH; NDqWG: $fixedDepreciationRate = round($fixedDepreciationRate, 3); goto F8CiM; QYXv7: $month = (int) $month; goto uYXpT; WEgtH: return $depreciation; goto F1TXX; OHgHV: $salvage = (float) $salvage; goto mPdP4; F1TXX: } goto TgkNx; IAUb1: $cost = PHPExcel_Calculation_Functions::flattenSingleValue($cost); goto nnSAv; Jvj_0: } public static function DDB($cost, $salvage, $life, $period, $factor = 2.0) { goto b2THl; Y_n2g: $life = PHPExcel_Calculation_Functions::flattenSingleValue($life); goto SpBs_; b2THl: $cost = PHPExcel_Calculation_Functions::flattenSingleValue($cost); goto wAbYw; ipMwn: $factor = PHPExcel_Calculation_Functions::flattenSingleValue($factor); goto URqfF; URqfF: if (is_numeric($cost) && is_numeric($salvage) && is_numeric($life) && is_numeric($period) && is_numeric($factor)) { goto QDCNJ; N_oyy: if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_GNUMERIC) { $depreciation = round($depreciation, 2); } goto Ui2ja; Ui2ja: return $depreciation; goto SHQVG; JIh5h: for ($per = 1; $per <= $period; ++$per) { $depreciation = min(($cost - $previousDepreciation) * ($factor / $life), $cost - $salvage - $previousDepreciation); $previousDepreciation += $depreciation; } goto N_oyy; xxF6c: $previousDepreciation = 0; goto JIh5h; vIdGq: $fixedDepreciationRate = round($fixedDepreciationRate, 3); goto xxF6c; bcs7u: $period = (int) $period; goto W8YUG; K1SsY: if ($cost <= 0 || $salvage / $cost < 0 || $life <= 0 || $period < 1 || $factor <= 0.0 || $period > $life) { return PHPExcel_Calculation_Functions::NaN(); } goto edCdO; QDCNJ: $cost = (float) $cost; goto Snxks; bIJxP: $life = (int) $life; goto bcs7u; W8YUG: $factor = (float) $factor; goto K1SsY; Snxks: $salvage = (float) $salvage; goto bIJxP; edCdO: $fixedDepreciationRate = 1 - pow($salvage / $cost, 1 / $life); goto vIdGq; SHQVG: } goto PHxR0; wAbYw: $salvage = PHPExcel_Calculation_Functions::flattenSingleValue($salvage); goto Y_n2g; SpBs_: $period = PHPExcel_Calculation_Functions::flattenSingleValue($period); goto ipMwn; PHxR0: return PHPExcel_Calculation_Functions::VALUE(); goto p2QZu; p2QZu: } public static function DISC($settlement, $maturity, $price, $redemption, $basis = 0) { goto zoqNl; rJ2Mr: $basis = PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto AZMMg; HdGPW: $price = PHPExcel_Calculation_Functions::flattenSingleValue($price); goto pOpGv; pOpGv: $redemption = PHPExcel_Calculation_Functions::flattenSingleValue($redemption); goto rJ2Mr; AZMMg: if (is_numeric($price) && is_numeric($redemption) && is_numeric($basis)) { goto tE2bo; ch3Q_: if ($price <= 0 || $redemption <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto UzoZa; z9wBU: $basis = (int) $basis; goto ch3Q_; eB72R: $redemption = (float) $redemption; goto z9wBU; tE2bo: $price = (float) $price; goto eB72R; UzoZa: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity, $basis); goto e0XNC; e0XNC: if (!is_numeric($daysBetweenSettlementAndMaturity)) { return $daysBetweenSettlementAndMaturity; } goto ia3Kd; ia3Kd: return (1 - $price / $redemption) / $daysBetweenSettlementAndMaturity; goto JOxpc; JOxpc: } goto ujG61; zoqNl: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto dvKdZ; dvKdZ: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto HdGPW; ujG61: return PHPExcel_Calculation_Functions::VALUE(); goto yPT4N; yPT4N: } public static function DOLLARDE($fractional_dollar = null, $fraction = 0) { goto N57ac; gdlk4: $cents = fmod($fractional_dollar, 1); goto tisN1; PqpJ6: if ($fraction == 0) { return PHPExcel_Calculation_Functions::DIV0(); } goto arIjH; aeoAF: $cents *= pow(10, ceil(log10($fraction))); goto U2jnz; U2jnz: return $dollars + $cents; goto uTiMc; tisN1: $cents /= $fraction; goto aeoAF; fyFq8: if (is_null($fractional_dollar) || $fraction < 0) { return PHPExcel_Calculation_Functions::NaN(); } goto PqpJ6; mz4qL: $fraction = (int) PHPExcel_Calculation_Functions::flattenSingleValue($fraction); goto fyFq8; arIjH: $dollars = floor($fractional_dollar); goto gdlk4; N57ac: $fractional_dollar = PHPExcel_Calculation_Functions::flattenSingleValue($fractional_dollar); goto mz4qL; uTiMc: } public static function DOLLARFR($decimal_dollar = null, $fraction = 0) { goto ZK2y9; TIqgO: if (is_null($decimal_dollar) || $fraction < 0) { return PHPExcel_Calculation_Functions::NaN(); } goto EzHGk; EzHGk: if ($fraction == 0) { return PHPExcel_Calculation_Functions::DIV0(); } goto mdn3s; mJtvP: $cents = fmod($decimal_dollar, 1); goto gz2rn; W08AN: $fraction = (int) PHPExcel_Calculation_Functions::flattenSingleValue($fraction); goto TIqgO; ZK2y9: $decimal_dollar = PHPExcel_Calculation_Functions::flattenSingleValue($decimal_dollar); goto W08AN; mdn3s: $dollars = floor($decimal_dollar); goto mJtvP; AzsxE: return $dollars + $cents; goto sK3fx; gz2rn: $cents *= $fraction; goto poQlB; poQlB: $cents *= pow(10, -ceil(log10($fraction))); goto AzsxE; sK3fx: } public static function EFFECT($nominal_rate = 0, $npery = 0) { goto EF8Bd; mhv4r: if ($nominal_rate <= 0 || $npery < 1) { return PHPExcel_Calculation_Functions::NaN(); } goto IZCUX; EF8Bd: $nominal_rate = PHPExcel_Calculation_Functions::flattenSingleValue($nominal_rate); goto pmkO2; pmkO2: $npery = (int) PHPExcel_Calculation_Functions::flattenSingleValue($npery); goto mhv4r; IZCUX: return pow(1 + $nominal_rate / $npery, $npery) - 1; goto AOZJu; AOZJu: } public static function FV($rate = 0, $nper = 0, $pmt = 0, $pv = 0, $type = 0) { goto QBb6q; Nu1YR: if (!is_null($rate) && $rate != 0) { return -$pv * pow(1 + $rate, $nper) - $pmt * (1 + $rate * $type) * (pow(1 + $rate, $nper) - 1) / $rate; } goto mVeu1; mfUY1: $type = PHPExcel_Calculation_Functions::flattenSingleValue($type); goto oZCIA; qYZwm: $pmt = PHPExcel_Calculation_Functions::flattenSingleValue($pmt); goto eHh5U; QBb6q: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto UA4gJ; mVeu1: return -$pv - $pmt * $nper; goto LPC0E; eHh5U: $pv = PHPExcel_Calculation_Functions::flattenSingleValue($pv); goto mfUY1; oZCIA: if ($type != 0 && $type != 1) { return PHPExcel_Calculation_Functions::NaN(); } goto Nu1YR; UA4gJ: $nper = PHPExcel_Calculation_Functions::flattenSingleValue($nper); goto qYZwm; LPC0E: } public static function FVSCHEDULE($principal, $schedule) { goto vhYYI; mE0Ev: foreach ($schedule as $rate) { $principal *= 1 + $rate; } goto IHvyi; vhYYI: $principal = PHPExcel_Calculation_Functions::flattenSingleValue($principal); goto jVVr3; IHvyi: return $principal; goto ouv2t; jVVr3: $schedule = PHPExcel_Calculation_Functions::flattenArray($schedule); goto mE0Ev; ouv2t: } public static function INTRATE($settlement, $maturity, $investment, $redemption, $basis = 0) { goto Q0KXD; T04lm: $basis = PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto Bd9OZ; Bd9OZ: if (is_numeric($investment) && is_numeric($redemption) && is_numeric($basis)) { goto vY0r7; dNcIL: if ($investment <= 0 || $redemption <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto bCUIb; ZedqB: $redemption = (float) $redemption; goto YlPHw; Lb8VH: return ($redemption / $investment - 1) / $daysBetweenSettlementAndMaturity; goto VdQxL; bCUIb: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity, $basis); goto GjyKd; GjyKd: if (!is_numeric($daysBetweenSettlementAndMaturity)) { return $daysBetweenSettlementAndMaturity; } goto Lb8VH; vY0r7: $investment = (float) $investment; goto ZedqB; YlPHw: $basis = (int) $basis; goto dNcIL; VdQxL: } goto E92LB; ATP_h: $redemption = PHPExcel_Calculation_Functions::flattenSingleValue($redemption); goto T04lm; E92LB: return PHPExcel_Calculation_Functions::VALUE(); goto wacHP; x7P70: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto aXoDy; aXoDy: $investment = PHPExcel_Calculation_Functions::flattenSingleValue($investment); goto ATP_h; Q0KXD: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto x7P70; wacHP: } public static function IPMT($rate, $per, $nper, $pv, $fv = 0, $type = 0) { goto EmNuJ; P_O4o: $fv = PHPExcel_Calculation_Functions::flattenSingleValue($fv); goto X_h4r; X_h4r: $type = (int) PHPExcel_Calculation_Functions::flattenSingleValue($type); goto h8f6i; h8f6i: if ($type != 0 && $type != 1) { return PHPExcel_Calculation_Functions::NaN(); } goto nI_T8; nI_T8: if ($per <= 0 || $per > $nper) { return PHPExcel_Calculation_Functions::VALUE(); } goto RxZCG; RxZCG: $interestAndPrincipal = self::interestAndPrincipal($rate, $per, $nper, $pv, $fv, $type); goto ph3zs; a2Yza: $nper = (int) PHPExcel_Calculation_Functions::flattenSingleValue($nper); goto qdZ_F; ph3zs: return $interestAndPrincipal[0]; goto FuXqn; EmNuJ: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto H2I8q; H2I8q: $per = (int) PHPExcel_Calculation_Functions::flattenSingleValue($per); goto a2Yza; qdZ_F: $pv = PHPExcel_Calculation_Functions::flattenSingleValue($pv); goto P_O4o; FuXqn: } public static function IRR($values, $guess = 0.1) { goto H3VpO; FlXtM: $values = PHPExcel_Calculation_Functions::flattenArray($values); goto pC0Bv; RXS1I: for ($i = 0; $i < FINANCIAL_MAX_ITERATIONS; ++$i) { $dx *= 0.5; $x_mid = $rtb + $dx; $f_mid = self::NPV($x_mid, $values); if ($f_mid <= 0.0) { $rtb = $x_mid; } if (abs($f_mid) < FINANCIAL_PRECISION || abs($dx) < FINANCIAL_PRECISION) { return $x_mid; } } goto Mu28W; H3VpO: if (!is_array($values)) { return PHPExcel_Calculation_Functions::VALUE(); } goto FlXtM; ZaEPM: $f2 = self::NPV($x2, $values); goto e2EB9; Z2Glm: $x2 = $guess; goto NVsPX; e2EB9: for ($i = 0; $i < FINANCIAL_MAX_ITERATIONS; ++$i) { if ($f1 * $f2 < 0.0) { break; } if (abs($f1) < abs($f2)) { $f1 = self::NPV($x1 += 1.6 * ($x1 - $x2), $values); } else { $f2 = self::NPV($x2 += 1.6 * ($x2 - $x1), $values); } } goto dqRpB; Mu28W: return PHPExcel_Calculation_Functions::VALUE(); goto YuXwa; moyyA: $x1 = 0.0; goto Z2Glm; NVsPX: $f1 = self::NPV($x1, $values); goto ZaEPM; pC0Bv: $guess = PHPExcel_Calculation_Functions::flattenSingleValue($guess); goto moyyA; dqRpB: if ($f1 * $f2 > 0.0) { return PHPExcel_Calculation_Functions::VALUE(); } goto ViSVj; KKG5N: if ($f < 0.0) { $rtb = $x1; $dx = $x2 - $x1; } else { $rtb = $x2; $dx = $x1 - $x2; } goto RXS1I; ViSVj: $f = self::NPV($x1, $values); goto KKG5N; YuXwa: } public static function ISPMT() { goto Dj26V; ehPfG: $interestRate = array_shift($aArgs); goto CJp3n; uP1mc: return $returnValue; goto fS768; RrK4G: for ($i = 0; $i <= $period; ++$i) { $returnValue = $interestRate * $principleRemaining * -1; $principleRemaining -= $principlePayment; if ($i == $numberPeriods) { $returnValue = 0; } } goto uP1mc; pJf7X: $numberPeriods = array_shift($aArgs); goto OAXQR; XeVSh: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto ehPfG; OAXQR: $principleRemaining = array_shift($aArgs); goto lvz0a; Dj26V: $returnValue = 0; goto XeVSh; CJp3n: $period = array_shift($aArgs); goto pJf7X; lvz0a: $principlePayment = $principleRemaining * 1.0 / ($numberPeriods * 1.0); goto RrK4G; fS768: } public static function MIRR($values, $finance_rate, $reinvestment_rate) { goto faX34; ftNm5: $npv_pos = $npv_neg = 0.0; goto KxHaE; ktIcA: $reinvestment_rate = PHPExcel_Calculation_Functions::flattenSingleValue($reinvestment_rate); goto WcUcl; KxHaE: foreach ($values as $i => $v) { if ($v >= 0) { $npv_pos += $v / pow($rr, $i); } else { $npv_neg += $v / pow($fr, $i); } } goto pVGWt; pVGWt: if ($npv_neg == 0 || $npv_pos == 0 || $reinvestment_rate <= -1) { return PHPExcel_Calculation_Functions::VALUE(); } goto sp3iC; q_cwY: return is_finite($mirr) ? $mirr : PHPExcel_Calculation_Functions::VALUE(); goto q6mLw; eqo3_: $rr = 1.0 + $reinvestment_rate; goto O7Hy3; WoM6h: $finance_rate = PHPExcel_Calculation_Functions::flattenSingleValue($finance_rate); goto ktIcA; sp3iC: $mirr = pow(-$npv_pos * pow($rr, $n) / ($npv_neg * $rr), 1.0 / ($n - 1)) - 1.0; goto q_cwY; O7Hy3: $fr = 1.0 + $finance_rate; goto ftNm5; iN4gW: $values = PHPExcel_Calculation_Functions::flattenArray($values); goto WoM6h; faX34: if (!is_array($values)) { return PHPExcel_Calculation_Functions::VALUE(); } goto iN4gW; WcUcl: $n = count($values); goto eqo3_; q6mLw: } public static function NOMINAL($effect_rate = 0, $npery = 0) { goto BfyFi; RzlE1: $npery = (int) PHPExcel_Calculation_Functions::flattenSingleValue($npery); goto ZHtCh; ZHtCh: if ($effect_rate <= 0 || $npery < 1) { return PHPExcel_Calculation_Functions::NaN(); } goto lft8K; BfyFi: $effect_rate = PHPExcel_Calculation_Functions::flattenSingleValue($effect_rate); goto RzlE1; lft8K: return $npery * (pow($effect_rate + 1, 1 / $npery) - 1); goto iSqZ7; iSqZ7: } public static function NPER($rate = 0, $pmt = 0, $pv = 0, $fv = 0, $type = 0) { goto Yu2tD; sOlny: $type = PHPExcel_Calculation_Functions::flattenSingleValue($type); goto M0U8l; IJpE1: if ($pmt == 0) { return PHPExcel_Calculation_Functions::NaN(); } goto Cbk8h; M0U8l: if ($type != 0 && $type != 1) { return PHPExcel_Calculation_Functions::NaN(); } goto uRp7C; Gc6jM: $pv = PHPExcel_Calculation_Functions::flattenSingleValue($pv); goto Pho70; Cbk8h: return (-$pv - $fv) / $pmt; goto PI3nD; Pho70: $fv = PHPExcel_Calculation_Functions::flattenSingleValue($fv); goto sOlny; uRp7C: if (!is_null($rate) && $rate != 0) { if ($pmt == 0 && $pv == 0) { return PHPExcel_Calculation_Functions::NaN(); } return log(($pmt * (1 + $rate * $type) / $rate - $fv) / ($pv + $pmt * (1 + $rate * $type) / $rate)) / log(1 + $rate); } goto IJpE1; Yu2tD: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto j6FQS; j6FQS: $pmt = PHPExcel_Calculation_Functions::flattenSingleValue($pmt); goto Gc6jM; PI3nD: } public static function NPV() { goto VuBG4; VuBG4: $returnValue = 0; goto gUyEd; gvtWr: return $returnValue; goto Et7DP; gUyEd: $aArgs = PHPExcel_Calculation_Functions::flattenArray(func_get_args()); goto Sy8V1; Sy8V1: $rate = array_shift($aArgs); goto ycK1f; ycK1f: for ($i = 1; $i <= count($aArgs); ++$i) { if (is_numeric($aArgs[$i - 1])) { $returnValue += $aArgs[$i - 1] / pow(1 + $rate, $i); } } goto gvtWr; Et7DP: } public static function PMT($rate = 0, $nper = 0, $pv = 0, $fv = 0, $type = 0) { goto RTZU9; U3YUW: if ($type != 0 && $type != 1) { return PHPExcel_Calculation_Functions::NaN(); } goto IoTy_; RTZU9: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto JWS_t; IoTy_: if (!is_null($rate) && $rate != 0) { return (-$fv - $pv * pow(1 + $rate, $nper)) / (1 + $rate * $type) / ((pow(1 + $rate, $nper) - 1) / $rate); } goto PceAP; zS_wf: $fv = PHPExcel_Calculation_Functions::flattenSingleValue($fv); goto yLYDR; XC0b2: $pv = PHPExcel_Calculation_Functions::flattenSingleValue($pv); goto zS_wf; JWS_t: $nper = PHPExcel_Calculation_Functions::flattenSingleValue($nper); goto XC0b2; PceAP: return (-$pv - $fv) / $nper; goto swaFA; yLYDR: $type = PHPExcel_Calculation_Functions::flattenSingleValue($type); goto U3YUW; swaFA: } public static function PPMT($rate, $per, $nper, $pv, $fv = 0, $type = 0) { goto bZ8om; gsX6a: if ($per <= 0 || $per > $nper) { return PHPExcel_Calculation_Functions::VALUE(); } goto PBMf4; GUgbs: return $interestAndPrincipal[1]; goto cy7P5; PBMf4: $interestAndPrincipal = self::interestAndPrincipal($rate, $per, $nper, $pv, $fv, $type); goto GUgbs; DeYQn: $nper = (int) PHPExcel_Calculation_Functions::flattenSingleValue($nper); goto y0tfC; sc8z4: $fv = PHPExcel_Calculation_Functions::flattenSingleValue($fv); goto M3IBA; bKc5X: if ($type != 0 && $type != 1) { return PHPExcel_Calculation_Functions::NaN(); } goto gsX6a; y0tfC: $pv = PHPExcel_Calculation_Functions::flattenSingleValue($pv); goto sc8z4; M3IBA: $type = (int) PHPExcel_Calculation_Functions::flattenSingleValue($type); goto bKc5X; yBkRD: $per = (int) PHPExcel_Calculation_Functions::flattenSingleValue($per); goto DeYQn; bZ8om: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto yBkRD; cy7P5: } public static function PRICE($settlement, $maturity, $rate, $yield, $redemption, $frequency, $basis = 0) { goto KM_Ps; Xx4TK: if (is_string($maturity = PHPExcel_Calculation_DateTime::getDateValue($maturity))) { return PHPExcel_Calculation_Functions::VALUE(); } goto TerAa; qQXS0: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto uzPux; zULq3: $e = self::COUPDAYS($settlement, $maturity, $frequency, $basis); goto rNpG2; f37gB: $yield = (float) PHPExcel_Calculation_Functions::flattenSingleValue($yield); goto mTLhL; ieiIK: return $result; goto w_ftb; udqoY: $result -= $rfp * ($a / $e); goto ieiIK; f1Mz1: $a = self::COUPDAYBS($settlement, $maturity, $frequency, $basis); goto Tn14V; mTLhL: $redemption = (float) PHPExcel_Calculation_Functions::flattenSingleValue($redemption); goto c3jOY; dqD1s: if (is_string($settlement = PHPExcel_Calculation_DateTime::getDateValue($settlement))) { return PHPExcel_Calculation_Functions::VALUE(); } goto Xx4TK; Ci73o: $dsc = self::COUPDAYSNC($settlement, $maturity, $frequency, $basis); goto zULq3; TerAa: if ($settlement > $maturity || !self::isValidFrequency($frequency) || ($basis < 0 || $basis > 4)) { return PHPExcel_Calculation_Functions::NaN(); } goto Ci73o; eMmSU: $de = $dsc / $e; goto j9Nzm; rNpG2: $n = self::COUPNUM($settlement, $maturity, $frequency, $basis); goto f1Mz1; j9Nzm: $result = $redemption / pow($baseYF, --$n + $de); goto S3613; uzPux: $rate = (float) PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto f37gB; S3613: for ($k = 0; $k <= $n; ++$k) { $result += $rfp / pow($baseYF, $k + $de); } goto udqoY; KM_Ps: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto qQXS0; c3jOY: $frequency = (int) PHPExcel_Calculation_Functions::flattenSingleValue($frequency); goto qYO82; qYO82: $basis = is_null($basis) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto dqD1s; Rx2eg: $rfp = 100 * ($rate / $frequency); goto eMmSU; Tn14V: $baseYF = 1.0 + $yield / $frequency; goto Rx2eg; w_ftb: } public static function PRICEDISC($settlement, $maturity, $discount, $redemption, $basis = 0) { goto ow5Cs; ojOcD: if (is_numeric($discount) && is_numeric($redemption) && is_numeric($basis)) { goto gQbZi; k0iTW: return $redemption * (1 - $discount * $daysBetweenSettlementAndMaturity); goto ha6ar; Hjn1z: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity, $basis); goto DKaFy; gQbZi: if ($discount <= 0 || $redemption <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto Hjn1z; DKaFy: if (!is_numeric($daysBetweenSettlementAndMaturity)) { return $daysBetweenSettlementAndMaturity; } goto k0iTW; ha6ar: } goto UrXew; oxX7E: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto AQ21n; L6XNT: $redemption = (float) PHPExcel_Calculation_Functions::flattenSingleValue($redemption); goto kA5XW; AQ21n: $discount = (float) PHPExcel_Calculation_Functions::flattenSingleValue($discount); goto L6XNT; UrXew: return PHPExcel_Calculation_Functions::VALUE(); goto UGLvq; ow5Cs: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto oxX7E; kA5XW: $basis = (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto ojOcD; UGLvq: } public static function PRICEMAT($settlement, $maturity, $issue, $rate, $yield, $basis = 0) { goto UeV5R; UeV5R: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto aM2RM; QF_XJ: return PHPExcel_Calculation_Functions::VALUE(); goto TaoRn; ZhL45: $issue = PHPExcel_Calculation_Functions::flattenSingleValue($issue); goto EVqdO; KucNZ: $basis = (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto oDklL; aM2RM: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto ZhL45; oDklL: if (is_numeric($rate) && is_numeric($yield)) { goto EpHA3; iB93e: if (!is_numeric($daysPerYear)) { return $daysPerYear; } goto wllun; dcdDc: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity, $basis); goto Yttsj; pcs3E: $daysBetweenIssueAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($issue, $maturity, $basis); goto VT3ni; EpHA3: if ($rate <= 0 || $yield <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto HcSyt; VT3ni: if (!is_numeric($daysBetweenIssueAndMaturity)) { return $daysBetweenIssueAndMaturity; } goto wqGuz; ETorD: $daysBetweenSettlementAndMaturity *= $daysPerYear; goto LMZX0; Yttsj: if (!is_numeric($daysBetweenSettlementAndMaturity)) { return $daysBetweenSettlementAndMaturity; } goto ETorD; mWD9D: $daysBetweenIssueAndSettlement *= $daysPerYear; goto pcs3E; wqGuz: $daysBetweenIssueAndMaturity *= $daysPerYear; goto dcdDc; LMZX0: return (100 + $daysBetweenIssueAndMaturity / $daysPerYear * $rate * 100) / (1 + $daysBetweenSettlementAndMaturity / $daysPerYear * $yield) - $daysBetweenIssueAndSettlement / $daysPerYear * $rate * 100; goto L1gPt; gYbN4: if (!is_numeric($daysBetweenIssueAndSettlement)) { return $daysBetweenIssueAndSettlement; } goto mWD9D; HcSyt: $daysPerYear = self::daysPerYear(PHPExcel_Calculation_DateTime::YEAR($settlement), $basis); goto iB93e; wllun: $daysBetweenIssueAndSettlement = PHPExcel_Calculation_DateTime::YEARFRAC($issue, $settlement, $basis); goto gYbN4; L1gPt: } goto QF_XJ; lkxG5: $yield = PHPExcel_Calculation_Functions::flattenSingleValue($yield); goto KucNZ; EVqdO: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto lkxG5; TaoRn: } public static function PV($rate = 0, $nper = 0, $pmt = 0, $fv = 0, $type = 0) { goto Br826; Smc0v: $pmt = PHPExcel_Calculation_Functions::flattenSingleValue($pmt); goto qL9c3; FbZCT: $nper = PHPExcel_Calculation_Functions::flattenSingleValue($nper); goto Smc0v; J8IXQ: if ($type != 0 && $type != 1) { return PHPExcel_Calculation_Functions::NaN(); } goto VKHPf; Br826: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto FbZCT; qL9c3: $fv = PHPExcel_Calculation_Functions::flattenSingleValue($fv); goto RAony; RAony: $type = PHPExcel_Calculation_Functions::flattenSingleValue($type); goto J8IXQ; VKHPf: if (!is_null($rate) && $rate != 0) { return (-$pmt * (1 + $rate * $type) * ((pow(1 + $rate, $nper) - 1) / $rate) - $fv) / pow(1 + $rate, $nper); } goto uR7vc; uR7vc: return -$fv - $pmt * $nper; goto w8y7Z; w8y7Z: } public static function RATE($nper, $pmt, $pv, $fv = 0.0, $type = 0, $guess = 0.1) { goto YYVwu; iw9Sd: $x1 = $rate; goto lTsFG; sM5ZI: $fv = is_null($fv) ? 0.0 : PHPExcel_Calculation_Functions::flattenSingleValue($fv); goto TT6NK; p9N07: $y1 = $pv * $f + $pmt * (1 / $rate + $type) * ($f - 1) + $fv; goto FyPxR; RrkO0: return $rate; goto hKXba; TT6NK: $type = is_null($type) ? 0 : (int) PHPExcel_Calculation_Functions::flattenSingleValue($type); goto r4iT4; r4iT4: $guess = is_null($guess) ? 0.1 : PHPExcel_Calculation_Functions::flattenSingleValue($guess); goto FIDdx; TneZM: if (abs($rate) < FINANCIAL_PRECISION) { $y = $pv * (1 + $nper * $rate) + $pmt * (1 + $rate * $type) * $nper + $fv; } else { $f = exp($nper * log(1 + $rate)); $y = $pv * $f + $pmt * (1 / $rate + $type) * ($f - 1) + $fv; } goto ScuKi; G7TtZ: $pv = PHPExcel_Calculation_Functions::flattenSingleValue($pv); goto sM5ZI; O5waW: $pmt = PHPExcel_Calculation_Functions::flattenSingleValue($pmt); goto G7TtZ; YYVwu: $nper = (int) PHPExcel_Calculation_Functions::flattenSingleValue($nper); goto O5waW; ScuKi: $y0 = $pv + $pmt * $nper + $fv; goto p9N07; lTsFG: while (abs($y0 - $y1) > FINANCIAL_PRECISION && $i < FINANCIAL_MAX_ITERATIONS) { $rate = ($y1 * $x0 - $y0 * $x1) / ($y1 - $y0); $x0 = $x1; $x1 = $rate; if ($nper * abs($pmt) > $pv - $fv) { $x1 = abs($x1); } if (abs($rate) < FINANCIAL_PRECISION) { $y = $pv * (1 + $nper * $rate) + $pmt * (1 + $rate * $type) * $nper + $fv; } else { $f = exp($nper * log(1 + $rate)); $y = $pv * $f + $pmt * (1 / $rate + $type) * ($f - 1) + $fv; } $y0 = $y1; $y1 = $y; ++$i; } goto RrkO0; FIDdx: $rate = $guess; goto TneZM; FyPxR: $i = $x0 = 0.0; goto iw9Sd; hKXba: } public static function RECEIVED($settlement, $maturity, $investment, $discount, $basis = 0) { goto QxhJd; yY5tl: $investment = (float) PHPExcel_Calculation_Functions::flattenSingleValue($investment); goto RsAvA; V8r0K: return PHPExcel_Calculation_Functions::VALUE(); goto XcU68; iDle5: if (is_numeric($investment) && is_numeric($discount) && is_numeric($basis)) { goto wIfz8; JcQDv: if (!is_numeric($daysBetweenSettlementAndMaturity)) { return $daysBetweenSettlementAndMaturity; } goto MO6LE; wIfz8: if ($investment <= 0 || $discount <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto lrSdM; lrSdM: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity, $basis); goto JcQDv; MO6LE: return $investment / (1 - $discount * $daysBetweenSettlementAndMaturity); goto O97pE; O97pE: } goto V8r0K; QxhJd: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto YrlRC; YrlRC: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto yY5tl; RsAvA: $discount = (float) PHPExcel_Calculation_Functions::flattenSingleValue($discount); goto Sx42i; Sx42i: $basis = (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto iDle5; XcU68: } public static function SLN($cost, $salvage, $life) { goto lnLgp; tprHp: $salvage = PHPExcel_Calculation_Functions::flattenSingleValue($salvage); goto N7AEu; lnLgp: $cost = PHPExcel_Calculation_Functions::flattenSingleValue($cost); goto tprHp; FDMlb: return PHPExcel_Calculation_Functions::VALUE(); goto iNVEp; N7AEu: $life = PHPExcel_Calculation_Functions::flattenSingleValue($life); goto lMnwW; lMnwW: if (is_numeric($cost) && is_numeric($salvage) && is_numeric($life)) { if ($life < 0) { return PHPExcel_Calculation_Functions::NaN(); } return ($cost - $salvage) / $life; } goto FDMlb; iNVEp: } public static function SYD($cost, $salvage, $life, $period) { goto ouwjw; w0PNy: $life = PHPExcel_Calculation_Functions::flattenSingleValue($life); goto DoQKi; DoQKi: $period = PHPExcel_Calculation_Functions::flattenSingleValue($period); goto K7pqX; K7pqX: if (is_numeric($cost) && is_numeric($salvage) && is_numeric($life) && is_numeric($period)) { if ($life < 1 || $period > $life) { return PHPExcel_Calculation_Functions::NaN(); } return ($cost - $salvage) * ($life - $period + 1) * 2 / ($life * ($life + 1)); } goto HcxId; xmtrF: $salvage = PHPExcel_Calculation_Functions::flattenSingleValue($salvage); goto w0PNy; HcxId: return PHPExcel_Calculation_Functions::VALUE(); goto zPG2D; ouwjw: $cost = PHPExcel_Calculation_Functions::flattenSingleValue($cost); goto xmtrF; zPG2D: } public static function TBILLEQ($settlement, $maturity, $discount) { goto lTivZ; a1_p1: if (is_string($maturity = PHPExcel_Calculation_DateTime::getDateValue($maturity))) { return PHPExcel_Calculation_Functions::VALUE(); } goto RHuW4; CS5WN: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto eQkxv; RJR8m: return 365 * $discount / (360 - $discount * $daysBetweenSettlementAndMaturity); goto QHnUx; lTivZ: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto CS5WN; pxcph: if (is_string($testValue)) { return $testValue; } goto a1_p1; eQkxv: $discount = PHPExcel_Calculation_Functions::flattenSingleValue($discount); goto Rq__R; Rq__R: $testValue = self::TBILLPRICE($settlement, $maturity, $discount); goto pxcph; RHuW4: if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE) { ++$maturity; $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity) * 360; } else { $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::getDateValue($maturity) - PHPExcel_Calculation_DateTime::getDateValue($settlement); } goto RJR8m; QHnUx: } public static function TBILLPRICE($settlement, $maturity, $discount) { goto mstuJ; TqhyP: $discount = PHPExcel_Calculation_Functions::flattenSingleValue($discount); goto M6oP2; M6oP2: if (is_string($maturity = PHPExcel_Calculation_DateTime::getDateValue($maturity))) { return PHPExcel_Calculation_Functions::VALUE(); } goto R32Vo; R32Vo: if (is_numeric($discount)) { goto ZrA2S; cM80f: if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE) { goto ek02x; FvuWB: if (!is_numeric($daysBetweenSettlementAndMaturity)) { return $daysBetweenSettlementAndMaturity; } goto YYpIK; R8b2R: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity) * 360; goto FvuWB; ek02x: ++$maturity; goto R8b2R; YYpIK: } else { $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::getDateValue($maturity) - PHPExcel_Calculation_DateTime::getDateValue($settlement); } goto knYxA; ZrA2S: if ($discount <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto cM80f; knYxA: if ($daysBetweenSettlementAndMaturity > 360) { return PHPExcel_Calculation_Functions::NaN(); } goto l2C8A; l2C8A: $price = 100 * (1 - $discount * $daysBetweenSettlementAndMaturity / 360); goto S2Zay; S2Zay: if ($price <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto SsilH; SsilH: return $price; goto e43a9; e43a9: } goto rdNrP; mstuJ: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto GcBhl; GcBhl: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto TqhyP; rdNrP: return PHPExcel_Calculation_Functions::VALUE(); goto K1qYA; K1qYA: } public static function TBILLYIELD($settlement, $maturity, $price) { goto TJoQw; I2P8R: $price = PHPExcel_Calculation_Functions::flattenSingleValue($price); goto p2Llc; TJoQw: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto MStV3; KFMLT: return PHPExcel_Calculation_Functions::VALUE(); goto yVq1c; p2Llc: if (is_numeric($price)) { goto bOwCb; O4A0e: if (PHPExcel_Calculation_Functions::getCompatibilityMode() == PHPExcel_Calculation_Functions::COMPATIBILITY_OPENOFFICE) { goto O9kAx; mLMvw: if (!is_numeric($daysBetweenSettlementAndMaturity)) { return $daysBetweenSettlementAndMaturity; } goto RmhF2; O9kAx: ++$maturity; goto SPHPR; SPHPR: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity) * 360; goto mLMvw; RmhF2: } else { $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::getDateValue($maturity) - PHPExcel_Calculation_DateTime::getDateValue($settlement); } goto MIiJC; fSybP: return (100 - $price) / $price * (360 / $daysBetweenSettlementAndMaturity); goto B3odN; MIiJC: if ($daysBetweenSettlementAndMaturity > 360) { return PHPExcel_Calculation_Functions::NaN(); } goto fSybP; bOwCb: if ($price <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto O4A0e; B3odN: } goto KFMLT; MStV3: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto I2P8R; yVq1c: } public static function XIRR($values, $dates, $guess = 0.1) { goto jmjIS; VRBq6: $x1 = 0.0; goto CBhHM; sD0UT: return PHPExcel_Calculation_Functions::VALUE(); goto N53ck; kOsq5: $guess = PHPExcel_Calculation_Functions::flattenSingleValue($guess); goto MvnK5; gjvVn: $f2 = self::XNPV($x2, $values, $dates); goto M5h6B; PE_Cw: for ($i = 0; $i < FINANCIAL_MAX_ITERATIONS; ++$i) { $dx *= 0.5; $x_mid = $rtb + $dx; $f_mid = self::XNPV($x_mid, $values, $dates); if ($f_mid <= 0.0) { $rtb = $x_mid; } if (abs($f_mid) < FINANCIAL_PRECISION || abs($dx) < FINANCIAL_PRECISION) { return $x_mid; } } goto sD0UT; CBhHM: $x2 = $guess; goto kCkRo; M5h6B: for ($i = 0; $i < FINANCIAL_MAX_ITERATIONS; ++$i) { if ($f1 * $f2 < 0.0) { break; } elseif (abs($f1) < abs($f2)) { $f1 = self::XNPV($x1 += 1.6 * ($x1 - $x2), $values, $dates); } else { $f2 = self::XNPV($x2 += 1.6 * ($x2 - $x1), $values, $dates); } } goto vq7ES; nMaIs: $values = PHPExcel_Calculation_Functions::flattenArray($values); goto nqs0b; jmjIS: if (!is_array($values) && !is_array($dates)) { return PHPExcel_Calculation_Functions::VALUE(); } goto nMaIs; eSrQF: if ($f < 0.0) { $rtb = $x1; $dx = $x2 - $x1; } else { $rtb = $x2; $dx = $x1 - $x2; } goto PE_Cw; MvnK5: if (count($values) != count($dates)) { return PHPExcel_Calculation_Functions::NaN(); } goto VRBq6; nqs0b: $dates = PHPExcel_Calculation_Functions::flattenArray($dates); goto kOsq5; vq7ES: if ($f1 * $f2 > 0.0) { return PHPExcel_Calculation_Functions::VALUE(); } goto tj73H; tj73H: $f = self::XNPV($x1, $values, $dates); goto eSrQF; kCkRo: $f1 = self::XNPV($x1, $values, $dates); goto gjvVn; N53ck: } public static function XNPV($rate, $values, $dates) { goto ihaXp; pGlBV: if (!is_array($values) || !is_array($dates)) { return PHPExcel_Calculation_Functions::VALUE(); } goto oIoX8; oIoX8: $values = PHPExcel_Calculation_Functions::flattenArray($values); goto oFAdj; KgpoZ: if ($valCount != count($dates)) { return PHPExcel_Calculation_Functions::NaN(); } goto JAQME; HIn6V: if (!is_numeric($rate)) { return PHPExcel_Calculation_Functions::VALUE(); } goto pGlBV; JAQME: if (min($values) > 0 || max($values) < 0) { return PHPExcel_Calculation_Functions::VALUE(); } goto XC5as; oFAdj: $dates = PHPExcel_Calculation_Functions::flattenArray($dates); goto v5J66; v5J66: $valCount = count($values); goto KgpoZ; QIs08: for ($i = 0; $i < $valCount; ++$i) { if (!is_numeric($values[$i])) { return PHPExcel_Calculation_Functions::VALUE(); } $xnpv += $values[$i] / pow(1 + $rate, PHPExcel_Calculation_DateTime::DATEDIF($dates[0], $dates[$i], "\144") / 365); } goto SkZdP; SkZdP: return is_finite($xnpv) ? $xnpv : PHPExcel_Calculation_Functions::VALUE(); goto YWVZ0; XC5as: $xnpv = 0.0; goto QIs08; ihaXp: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto HIn6V; YWVZ0: } public static function YIELDDISC($settlement, $maturity, $price, $redemption, $basis = 0) { goto NLc1F; MhGCD: $price = PHPExcel_Calculation_Functions::flattenSingleValue($price); goto rGMay; NLc1F: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto wzuKF; wzuKF: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto MhGCD; yFLJ_: return PHPExcel_Calculation_Functions::VALUE(); goto RMr_1; rGMay: $redemption = PHPExcel_Calculation_Functions::flattenSingleValue($redemption); goto y_YYY; y_YYY: $basis = (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto WAL3J; WAL3J: if (is_numeric($price) && is_numeric($redemption)) { goto cxmQS; aWNuq: if (!is_numeric($daysBetweenSettlementAndMaturity)) { return $daysBetweenSettlementAndMaturity; } goto zL1qV; zidN_: return ($redemption - $price) / $price * ($daysPerYear / $daysBetweenSettlementAndMaturity); goto Zh1lP; cxmQS: if ($price <= 0 || $redemption <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto Mrjr6; kvkTC: if (!is_numeric($daysPerYear)) { return $daysPerYear; } goto QRxHz; QRxHz: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity, $basis); goto aWNuq; zL1qV: $daysBetweenSettlementAndMaturity *= $daysPerYear; goto zidN_; Mrjr6: $daysPerYear = self::daysPerYear(PHPExcel_Calculation_DateTime::YEAR($settlement), $basis); goto kvkTC; Zh1lP: } goto yFLJ_; RMr_1: } public static function YIELDMAT($settlement, $maturity, $issue, $rate, $price, $basis = 0) { goto cPGSp; cPGSp: $settlement = PHPExcel_Calculation_Functions::flattenSingleValue($settlement); goto vPHJo; Ml4cg: $rate = PHPExcel_Calculation_Functions::flattenSingleValue($rate); goto wl23x; OkOO8: $issue = PHPExcel_Calculation_Functions::flattenSingleValue($issue); goto Ml4cg; fpYvy: if (is_numeric($rate) && is_numeric($price)) { goto dTFH_; bq1n4: $daysBetweenSettlementAndMaturity *= $daysPerYear; goto BL9JB; BL9JB: return (1 + $daysBetweenIssueAndMaturity / $daysPerYear * $rate - ($price / 100 + $daysBetweenIssueAndSettlement / $daysPerYear * $rate)) / ($price / 100 + $daysBetweenIssueAndSettlement / $daysPerYear * $rate) * ($daysPerYear / $daysBetweenSettlementAndMaturity); goto jrVvB; J22HK: $daysBetweenIssueAndMaturity *= $daysPerYear; goto orRC2; fNBYO: if (!is_numeric($daysBetweenIssueAndSettlement)) { return $daysBetweenIssueAndSettlement; } goto XnQa5; fna2P: $daysBetweenIssueAndSettlement = PHPExcel_Calculation_DateTime::YEARFRAC($issue, $settlement, $basis); goto fNBYO; bev2i: $daysPerYear = self::daysPerYear(PHPExcel_Calculation_DateTime::YEAR($settlement), $basis); goto RlsYC; XnQa5: $daysBetweenIssueAndSettlement *= $daysPerYear; goto cADgm; orRC2: $daysBetweenSettlementAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($settlement, $maturity, $basis); goto RZHc7; U39gR: if (!is_numeric($daysBetweenIssueAndMaturity)) { return $daysBetweenIssueAndMaturity; } goto J22HK; cADgm: $daysBetweenIssueAndMaturity = PHPExcel_Calculation_DateTime::YEARFRAC($issue, $maturity, $basis); goto U39gR; RZHc7: if (!is_numeric($daysBetweenSettlementAndMaturity)) { return $daysBetweenSettlementAndMaturity; } goto bq1n4; RlsYC: if (!is_numeric($daysPerYear)) { return $daysPerYear; } goto fna2P; dTFH_: if ($rate <= 0 || $price <= 0) { return PHPExcel_Calculation_Functions::NaN(); } goto bev2i; jrVvB: } goto BKwKl; NyblD: $basis = (int) PHPExcel_Calculation_Functions::flattenSingleValue($basis); goto fpYvy; BKwKl: return PHPExcel_Calculation_Functions::VALUE(); goto EpAaS; wl23x: $price = PHPExcel_Calculation_Functions::flattenSingleValue($price); goto NyblD; vPHJo: $maturity = PHPExcel_Calculation_Functions::flattenSingleValue($maturity); goto OkOO8; EpAaS: } }
