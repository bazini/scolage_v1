<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:07              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Writer_Excel5_Parser { const REGEX_SHEET_TITLE_UNQUOTED = "\x5b\136\x5c\x2a\134\72\134\x2f\134\134\x5c\x3f\x5c\133\x5c\x5d\134\x2b\134\x2d\x5c\x25\x20\x5c\x27\x5c\x5e\134\x26\134\x3c\x5c\x3e\x5c\x3d\x5c\x2c\x5c\x3b\134\x23\x5c\50\134\51\x5c\42\x5c\173\x5c\x7d\135\53"; const REGEX_SHEET_TITLE_QUOTED = "\x28\50\x5b\x5e\134\x2a\134\72\x5c\57\134\134\134\77\134\133\x5c\135\x5c\x27\135\x29\53\x7c\50\x5c\x27\134\x27\51\x2b\51\x2b"; public $currentCharacter; public $currentToken; private $formula; public $lookAhead; private $parseTree; private $externalSheets; public $references; public function __construct() { goto ebegB; c0LSw: $this->formula = ''; goto OD_bg; ShrkW: $this->parseTree = ''; goto WXeYh; Qvy4f: $this->externalSheets = array(); goto xphtu; ebegB: $this->currentCharacter = 0; goto SNu1L; SNu1L: $this->currentToken = ''; goto c0LSw; OD_bg: $this->lookAhead = ''; goto ShrkW; WXeYh: $this->initializeHashes(); goto Qvy4f; xphtu: $this->references = array(); goto jWTNd; jWTNd: } private function initializeHashes() { $this->ptg = array("\x70\x74\147\x45\x78\x70" => 0x1, "\160\x74\x67\x54\142\154" => 0x2, "\160\164\147\101\x64\144" => 0x3, "\160\164\x67\123\x75\142" => 0x4, "\160\x74\147\115\165\154" => 0x5, "\160\164\147\104\151\166" => 0x6, "\160\164\x67\120\x6f\x77\x65\162" => 0x7, "\160\164\x67\x43\157\156\143\x61\x74" => 0x8, "\160\x74\x67\x4c\x54" => 0x9, "\160\x74\x67\x4c\x45" => 0xa, "\160\164\147\105\121" => 0xb, "\x70\164\147\107\x45" => 0xc, "\x70\x74\147\107\x54" => 0xd, "\160\x74\147\x4e\105" => 0xe, "\160\x74\147\111\x73\x65\x63\x74" => 0xf, "\160\164\x67\125\x6e\151\157\x6e" => 0x10, "\x70\x74\x67\x52\x61\x6e\x67\x65" => 0x11, "\160\164\x67\125\x70\x6c\165\x73" => 0x12, "\160\164\x67\125\x6d\x69\156\x75\x73" => 0x13, "\160\164\x67\120\145\x72\x63\145\x6e\x74" => 0x14, "\160\x74\147\x50\141\x72\145\x6e" => 0x15, "\160\164\147\115\151\x73\x73\101\x72\147" => 0x16, "\160\x74\147\123\x74\x72" => 0x17, "\x70\x74\147\x41\x74\164\x72" => 0x19, "\x70\164\x67\x53\x68\x65\145\164" => 0x1a, "\x70\164\147\x45\x6e\144\123\x68\145\145\164" => 0x1b, "\x70\x74\x67\105\162\x72" => 0x1c, "\x70\164\147\x42\x6f\157\x6c" => 0x1d, "\160\164\147\x49\156\164" => 0x1e, "\x70\164\147\116\165\x6d" => 0x1f, "\x70\x74\147\x41\162\x72\x61\171" => 0x20, "\160\x74\x67\106\165\x6e\143" => 0x21, "\160\x74\147\x46\165\x6e\143\126\141\x72" => 0x22, "\160\164\147\116\141\155\145" => 0x23, "\x70\x74\147\x52\145\146" => 0x24, "\x70\x74\x67\x41\162\145\141" => 0x25, "\160\x74\147\x4d\145\x6d\101\162\145\x61" => 0x26, "\x70\164\147\115\145\155\105\162\x72" => 0x27, "\160\164\x67\x4d\145\x6d\116\157\115\x65\155" => 0x28, "\160\x74\147\x4d\x65\155\x46\x75\x6e\x63" => 0x29, "\x70\164\147\122\x65\146\105\162\162" => 0x2a, "\x70\x74\x67\x41\x72\x65\x61\x45\x72\x72" => 0x2b, "\x70\x74\x67\x52\145\146\116" => 0x2c, "\x70\x74\x67\x41\x72\145\141\116" => 0x2d, "\x70\164\147\x4d\145\x6d\x41\x72\x65\141\116" => 0x2e, "\x70\164\x67\115\x65\155\116\157\115\145\155\x4e" => 0x2f, "\160\x74\147\x4e\141\155\145\130" => 0x39, "\160\x74\x67\122\145\x66\x33\x64" => 0x3a, "\160\x74\x67\101\162\x65\141\x33\144" => 0x3b, "\160\x74\x67\122\145\x66\x45\x72\x72\x33\144" => 0x3c, "\160\x74\x67\101\x72\x65\x61\x45\x72\x72\x33\144" => 0x3d, "\160\164\147\101\x72\x72\x61\171\126" => 0x40, "\160\164\147\106\165\x6e\143\126" => 0x41, "\x70\164\147\x46\165\x6e\x63\x56\141\x72\126" => 0x42, "\x70\x74\x67\116\141\155\145\126" => 0x43, "\160\164\x67\122\145\x66\126" => 0x44, "\x70\x74\x67\x41\x72\145\x61\126" => 0x45, "\x70\x74\147\115\x65\155\x41\x72\145\141\x56" => 0x46, "\160\164\147\x4d\x65\x6d\105\162\x72\x56" => 0x47, "\160\x74\x67\115\145\155\x4e\x6f\115\x65\155\x56" => 0x48, "\160\x74\x67\115\x65\155\106\165\156\143\x56" => 0x49, "\160\x74\147\122\145\146\105\162\x72\126" => 0x4a, "\160\x74\147\x41\x72\x65\141\105\162\162\126" => 0x4b, "\160\164\147\x52\145\x66\x4e\126" => 0x4c, "\x70\164\147\101\162\x65\141\x4e\x56" => 0x4d, "\x70\x74\x67\x4d\145\155\x41\162\145\141\116\x56" => 0x4e, "\160\164\x67\115\x65\155\116\x6f\115\x65\155\116" => 0x4f, "\160\164\147\106\x75\x6e\x63\103\105\126" => 0x58, "\x70\x74\147\x4e\x61\x6d\x65\x58\x56" => 0x59, "\160\x74\x67\122\145\146\x33\x64\x56" => 0x5a, "\160\164\147\x41\162\145\141\63\144\126" => 0x5b, "\x70\x74\x67\122\145\x66\105\162\x72\x33\x64\x56" => 0x5c, "\x70\x74\x67\x41\162\x65\141\x45\162\x72\63\144" => 0x5d, "\x70\164\x67\x41\162\x72\x61\171\x41" => 0x60, "\x70\164\x67\106\165\156\143\101" => 0x61, "\x70\164\x67\x46\165\x6e\143\x56\x61\x72\101" => 0x62, "\x70\164\x67\116\x61\x6d\145\101" => 0x63, "\x70\164\147\x52\x65\x66\x41" => 0x64, "\160\164\x67\101\x72\145\141\101" => 0x65, "\x70\164\x67\115\145\x6d\101\x72\x65\141\x41" => 0x66, "\160\164\x67\115\x65\155\x45\x72\x72\101" => 0x67, "\x70\164\147\x4d\x65\155\116\x6f\115\x65\155\101" => 0x68, "\x70\x74\x67\115\145\x6d\106\165\156\143\x41" => 0x69, "\x70\164\147\122\145\146\x45\x72\x72\x41" => 0x6a, "\x70\x74\x67\x41\162\x65\141\105\162\x72\x41" => 0x6b, "\160\x74\x67\x52\145\146\116\x41" => 0x6c, "\x70\x74\147\x41\x72\145\x61\x4e\101" => 0x6d, "\160\x74\147\115\145\155\101\x72\x65\141\116\101" => 0x6e, "\x70\x74\x67\115\x65\x6d\116\x6f\x4d\145\x6d\116" => 0x6f, "\160\x74\147\x46\165\x6e\143\x43\x45\x41" => 0x78, "\x70\164\147\x4e\x61\155\145\130\x41" => 0x79, "\x70\164\x67\122\145\x66\x33\x64\x41" => 0x7a, "\x70\x74\147\101\x72\x65\x61\63\144\x41" => 0x7b, "\x70\x74\147\122\x65\x66\105\x72\162\x33\144\x41" => 0x7c, "\160\164\147\x41\x72\145\x61\105\162\162\63\x64" => 0x7d); $this->functions = array("\103\x4f\125\116\124" => array(0, -1, 0, 0), "\x49\x46" => array(1, -1, 1, 0), "\x49\x53\x4e\x41" => array(2, 1, 1, 0), "\x49\x53\x45\122\122\117\122" => array(3, 1, 1, 0), "\123\x55\115" => array(4, -1, 0, 0), "\101\126\x45\122\x41\x47\105" => array(5, -1, 0, 0), "\115\x49\116" => array(6, -1, 0, 0), "\115\x41\130" => array(7, -1, 0, 0), "\x52\x4f\x57" => array(8, -1, 0, 0), "\103\x4f\x4c\125\x4d\116" => array(9, -1, 0, 0), "\116\101" => array(10, 0, 0, 0), "\116\x50\x56" => array(11, -1, 1, 0), "\123\x54\x44\x45\x56" => array(12, -1, 0, 0), "\x44\117\x4c\114\101\122" => array(13, -1, 1, 0), "\106\x49\x58\105\x44" => array(14, -1, 1, 0), "\x53\x49\x4e" => array(15, 1, 1, 0), "\x43\117\123" => array(16, 1, 1, 0), "\x54\x41\x4e" => array(17, 1, 1, 0), "\101\124\x41\116" => array(18, 1, 1, 0), "\120\111" => array(19, 0, 1, 0), "\x53\x51\x52\124" => array(20, 1, 1, 0), "\x45\x58\120" => array(21, 1, 1, 0), "\114\116" => array(22, 1, 1, 0), "\x4c\x4f\x47\61\60" => array(23, 1, 1, 0), "\101\x42\123" => array(24, 1, 1, 0), "\x49\x4e\124" => array(25, 1, 1, 0), "\123\111\x47\x4e" => array(26, 1, 1, 0), "\x52\x4f\x55\x4e\104" => array(27, 2, 1, 0), "\114\117\117\x4b\125\120" => array(28, -1, 0, 0), "\111\x4e\x44\x45\130" => array(29, -1, 0, 1), "\x52\x45\120\x54" => array(30, 2, 1, 0), "\x4d\x49\x44" => array(31, 3, 1, 0), "\114\x45\x4e" => array(32, 1, 1, 0), "\x56\x41\114\x55\x45" => array(33, 1, 1, 0), "\124\122\125\x45" => array(34, 0, 1, 0), "\x46\101\x4c\x53\105" => array(35, 0, 1, 0), "\101\x4e\x44" => array(36, -1, 0, 0), "\x4f\x52" => array(37, -1, 0, 0), "\x4e\117\124" => array(38, 1, 1, 0), "\115\117\x44" => array(39, 2, 1, 0), "\104\103\x4f\x55\116\124" => array(40, 3, 0, 0), "\x44\x53\125\x4d" => array(41, 3, 0, 0), "\x44\x41\x56\105\122\x41\x47\105" => array(42, 3, 0, 0), "\104\115\x49\x4e" => array(43, 3, 0, 0), "\104\x4d\x41\130" => array(44, 3, 0, 0), "\104\x53\x54\104\105\x56" => array(45, 3, 0, 0), "\x56\x41\x52" => array(46, -1, 0, 0), "\x44\x56\x41\122" => array(47, 3, 0, 0), "\124\x45\130\x54" => array(48, 2, 1, 0), "\114\x49\x4e\x45\x53\124" => array(49, -1, 0, 0), "\124\x52\x45\x4e\104" => array(50, -1, 0, 0), "\114\117\107\105\x53\124" => array(51, -1, 0, 0), "\x47\x52\x4f\x57\x54\110" => array(52, -1, 0, 0), "\x50\126" => array(56, -1, 1, 0), "\x46\x56" => array(57, -1, 1, 0), "\116\120\105\x52" => array(58, -1, 1, 0), "\120\x4d\124" => array(59, -1, 1, 0), "\122\x41\x54\x45" => array(60, -1, 1, 0), "\x4d\111\x52\122" => array(61, 3, 0, 0), "\x49\122\x52" => array(62, -1, 0, 0), "\122\101\116\104" => array(63, 0, 1, 1), "\115\x41\124\103\x48" => array(64, -1, 0, 0), "\104\x41\124\x45" => array(65, 3, 1, 0), "\x54\x49\115\105" => array(66, 3, 1, 0), "\x44\x41\x59" => array(67, 1, 1, 0), "\x4d\x4f\x4e\124\110" => array(68, 1, 1, 0), "\131\105\101\122" => array(69, 1, 1, 0), "\127\x45\105\x4b\104\x41\131" => array(70, -1, 1, 0), "\110\117\x55\x52" => array(71, 1, 1, 0), "\115\111\116\x55\x54\x45" => array(72, 1, 1, 0), "\x53\x45\103\117\x4e\x44" => array(73, 1, 1, 0), "\x4e\x4f\127" => array(74, 0, 1, 1), "\x41\x52\105\x41\123" => array(75, 1, 0, 1), "\x52\x4f\127\x53" => array(76, 1, 0, 1), "\x43\x4f\114\125\x4d\116\x53" => array(77, 1, 0, 1), "\x4f\106\x46\123\105\x54" => array(78, -1, 0, 1), "\x53\105\101\122\103\110" => array(82, -1, 1, 0), "\x54\122\101\116\x53\120\x4f\123\x45" => array(83, 1, 1, 0), "\x54\x59\120\x45" => array(86, 1, 1, 0), "\101\124\x41\x4e\62" => array(97, 2, 1, 0), "\101\x53\x49\x4e" => array(98, 1, 1, 0), "\101\x43\117\x53" => array(99, 1, 1, 0), "\103\110\x4f\117\x53\105" => array(100, -1, 1, 0), "\110\114\x4f\117\113\x55\x50" => array(101, -1, 0, 0), "\x56\x4c\x4f\x4f\x4b\x55\x50" => array(102, -1, 0, 0), "\x49\x53\x52\x45\106" => array(105, 1, 0, 0), "\114\117\x47" => array(109, -1, 1, 0), "\x43\110\x41\x52" => array(111, 1, 1, 0), "\114\x4f\x57\x45\x52" => array(112, 1, 1, 0), "\125\x50\120\x45\122" => array(113, 1, 1, 0), "\x50\x52\x4f\x50\x45\x52" => array(114, 1, 1, 0), "\114\x45\x46\x54" => array(115, -1, 1, 0), "\x52\111\107\x48\x54" => array(116, -1, 1, 0), "\x45\x58\101\x43\x54" => array(117, 2, 1, 0), "\x54\122\111\x4d" => array(118, 1, 1, 0), "\122\105\x50\114\x41\x43\105" => array(119, 4, 1, 0), "\123\125\x42\123\124\x49\124\125\124\x45" => array(120, -1, 1, 0), "\103\x4f\x44\105" => array(121, 1, 1, 0), "\x46\111\116\x44" => array(124, -1, 1, 0), "\103\105\114\x4c" => array(125, -1, 0, 1), "\111\123\105\122\122" => array(126, 1, 1, 0), "\111\123\x54\105\x58\124" => array(127, 1, 1, 0), "\111\x53\x4e\x55\115\102\x45\122" => array(128, 1, 1, 0), "\111\123\x42\114\x41\x4e\x4b" => array(129, 1, 1, 0), "\x54" => array(130, 1, 0, 0), "\x4e" => array(131, 1, 0, 0), "\x44\x41\x54\105\126\x41\114\x55\x45" => array(140, 1, 1, 0), "\x54\x49\x4d\x45\126\x41\x4c\125\105" => array(141, 1, 1, 0), "\123\114\116" => array(142, 3, 1, 0), "\x53\131\x44" => array(143, 4, 1, 0), "\104\104\x42" => array(144, -1, 1, 0), "\111\x4e\104\x49\122\x45\x43\x54" => array(148, -1, 1, 1), "\103\x41\x4c\114" => array(150, -1, 1, 0), "\103\114\105\101\x4e" => array(162, 1, 1, 0), "\x4d\x44\x45\124\105\122\115" => array(163, 1, 2, 0), "\115\111\x4e\x56\105\x52\x53\x45" => array(164, 1, 2, 0), "\x4d\115\x55\x4c\x54" => array(165, 2, 2, 0), "\111\120\115\x54" => array(167, -1, 1, 0), "\120\120\115\124" => array(168, -1, 1, 0), "\x43\x4f\125\116\x54\101" => array(169, -1, 0, 0), "\120\x52\x4f\104\125\x43\x54" => array(183, -1, 0, 0), "\x46\101\x43\124" => array(184, 1, 1, 0), "\x44\120\x52\x4f\104\x55\103\124" => array(189, 3, 0, 0), "\111\x53\116\x4f\116\124\x45\130\124" => array(190, 1, 1, 0), "\x53\x54\104\x45\x56\x50" => array(193, -1, 0, 0), "\126\101\122\120" => array(194, -1, 0, 0), "\x44\123\124\104\105\x56\x50" => array(195, 3, 0, 0), "\104\x56\x41\x52\120" => array(196, 3, 0, 0), "\124\x52\x55\116\103" => array(197, -1, 1, 0), "\111\x53\x4c\117\x47\111\x43\101\x4c" => array(198, 1, 1, 0), "\104\x43\x4f\x55\x4e\124\101" => array(199, 3, 0, 0), "\x55\123\104\x4f\x4c\114\x41\122" => array(204, -1, 1, 0), "\106\x49\x4e\x44\102" => array(205, -1, 1, 0), "\x53\x45\101\x52\103\110\x42" => array(206, -1, 1, 0), "\122\x45\120\x4c\101\x43\105\x42" => array(207, 4, 1, 0), "\x4c\x45\x46\x54\102" => array(208, -1, 1, 0), "\x52\111\x47\x48\124\102" => array(209, -1, 1, 0), "\115\111\x44\x42" => array(210, 3, 1, 0), "\114\x45\x4e\x42" => array(211, 1, 1, 0), "\x52\x4f\125\116\x44\125\120" => array(212, 2, 1, 0), "\122\117\x55\x4e\x44\104\117\127\116" => array(213, 2, 1, 0), "\101\x53\103" => array(214, 1, 1, 0), "\x44\102\x43\x53" => array(215, 1, 1, 0), "\x52\x41\116\113" => array(216, -1, 0, 0), "\x41\104\x44\x52\105\x53\x53" => array(219, -1, 1, 0), "\104\101\x59\123\x33\66\x30" => array(220, -1, 1, 0), "\124\117\104\101\x59" => array(221, 0, 1, 1), "\126\x44\x42" => array(222, -1, 1, 0), "\115\x45\x44\x49\101\x4e" => array(227, -1, 0, 0), "\x53\x55\x4d\120\122\117\x44\125\x43\124" => array(228, -1, 2, 0), "\123\111\x4e\x48" => array(229, 1, 1, 0), "\x43\x4f\123\110" => array(230, 1, 1, 0), "\x54\x41\116\110" => array(231, 1, 1, 0), "\x41\123\x49\x4e\x48" => array(232, 1, 1, 0), "\x41\103\x4f\123\x48" => array(233, 1, 1, 0), "\x41\x54\x41\116\110" => array(234, 1, 1, 0), "\x44\107\105\x54" => array(235, 3, 0, 0), "\x49\116\106\x4f" => array(244, 1, 1, 1), "\104\102" => array(247, -1, 1, 0), "\x46\122\x45\x51\125\105\116\103\131" => array(252, 2, 0, 0), "\105\122\x52\x4f\122\x2e\x54\x59\x50\x45" => array(261, 1, 1, 0), "\122\105\107\111\x53\124\x45\x52\56\111\104" => array(267, -1, 1, 0), "\x41\126\105\104\x45\x56" => array(269, -1, 0, 0), "\102\x45\x54\x41\104\x49\123\124" => array(270, -1, 1, 0), "\x47\101\115\115\x41\114\116" => array(271, 1, 1, 0), "\x42\x45\124\101\x49\x4e\126" => array(272, -1, 1, 0), "\x42\111\116\x4f\115\x44\x49\x53\124" => array(273, 4, 1, 0), "\x43\x48\111\104\111\123\x54" => array(274, 2, 1, 0), "\x43\x48\111\111\x4e\x56" => array(275, 2, 1, 0), "\103\x4f\x4d\102\111\116" => array(276, 2, 1, 0), "\103\117\116\x46\111\104\105\x4e\x43\105" => array(277, 3, 1, 0), "\x43\122\111\124\x42\x49\x4e\117\x4d" => array(278, 3, 1, 0), "\x45\126\x45\x4e" => array(279, 1, 1, 0), "\105\130\x50\117\116\104\111\123\x54" => array(280, 3, 1, 0), "\106\x44\111\123\124" => array(281, 3, 1, 0), "\106\x49\x4e\126" => array(282, 3, 1, 0), "\x46\111\x53\x48\105\x52" => array(283, 1, 1, 0), "\x46\x49\x53\x48\105\122\111\116\126" => array(284, 1, 1, 0), "\x46\x4c\117\117\x52" => array(285, 2, 1, 0), "\x47\101\x4d\x4d\x41\x44\x49\x53\124" => array(286, 4, 1, 0), "\107\101\x4d\x4d\x41\111\x4e\x56" => array(287, 3, 1, 0), "\x43\105\111\x4c\111\x4e\x47" => array(288, 2, 1, 0), "\x48\x59\120\x47\105\x4f\115\x44\111\x53\x54" => array(289, 4, 1, 0), "\114\117\107\x4e\117\x52\115\104\111\123\124" => array(290, 3, 1, 0), "\114\x4f\x47\x49\116\x56" => array(291, 3, 1, 0), "\116\x45\107\x42\111\116\117\115\x44\x49\x53\x54" => array(292, 3, 1, 0), "\116\x4f\x52\x4d\x44\x49\123\124" => array(293, 4, 1, 0), "\x4e\x4f\122\x4d\123\104\111\123\x54" => array(294, 1, 1, 0), "\116\117\x52\115\111\116\126" => array(295, 3, 1, 0), "\x4e\117\122\115\123\x49\116\126" => array(296, 1, 1, 0), "\123\x54\101\116\x44\101\122\104\111\132\105" => array(297, 3, 1, 0), "\x4f\104\x44" => array(298, 1, 1, 0), "\x50\x45\x52\x4d\x55\x54" => array(299, 2, 1, 0), "\120\x4f\x49\x53\123\117\x4e" => array(300, 3, 1, 0), "\124\x44\111\123\x54" => array(301, 3, 1, 0), "\127\x45\x49\102\125\x4c\x4c" => array(302, 4, 1, 0), "\x53\x55\115\x58\x4d\131\62" => array(303, 2, 2, 0), "\x53\125\115\130\62\x4d\x59\x32" => array(304, 2, 2, 0), "\123\125\x4d\130\x32\x50\x59\x32" => array(305, 2, 2, 0), "\103\110\111\124\105\123\124" => array(306, 2, 2, 0), "\x43\x4f\x52\122\x45\114" => array(307, 2, 2, 0), "\103\117\x56\101\122" => array(308, 2, 2, 0), "\x46\x4f\x52\x45\x43\x41\123\x54" => array(309, 3, 2, 0), "\x46\124\x45\123\124" => array(310, 2, 2, 0), "\x49\x4e\124\105\122\103\105\x50\x54" => array(311, 2, 2, 0), "\120\x45\101\122\123\117\x4e" => array(312, 2, 2, 0), "\122\123\x51" => array(313, 2, 2, 0), "\123\124\105\131\x58" => array(314, 2, 2, 0), "\x53\114\x4f\x50\x45" => array(315, 2, 2, 0), "\124\124\x45\x53\x54" => array(316, 4, 2, 0), "\x50\122\117\102" => array(317, -1, 2, 0), "\104\105\126\123\121" => array(318, -1, 0, 0), "\107\x45\x4f\x4d\105\x41\116" => array(319, -1, 0, 0), "\110\101\x52\115\105\101\x4e" => array(320, -1, 0, 0), "\123\125\115\x53\x51" => array(321, -1, 0, 0), "\113\125\122\x54" => array(322, -1, 0, 0), "\x53\113\x45\x57" => array(323, -1, 0, 0), "\132\124\x45\123\124" => array(324, -1, 0, 0), "\x4c\x41\122\107\x45" => array(325, 2, 0, 0), "\123\x4d\101\114\114" => array(326, 2, 0, 0), "\121\125\x41\x52\x54\x49\x4c\105" => array(327, 2, 0, 0), "\120\105\x52\x43\105\x4e\124\111\114\105" => array(328, 2, 0, 0), "\x50\105\x52\x43\x45\116\124\x52\x41\116\x4b" => array(329, -1, 0, 0), "\x4d\117\104\x45" => array(330, -1, 2, 0), "\124\x52\x49\x4d\115\x45\101\x4e" => array(331, 2, 0, 0), "\x54\111\116\x56" => array(332, 2, 1, 0), "\x43\117\116\x43\x41\124\105\116\101\x54\x45" => array(336, -1, 1, 0), "\120\x4f\x57\x45\122" => array(337, 2, 1, 0), "\122\101\x44\111\x41\116\123" => array(342, 1, 1, 0), "\x44\105\107\x52\105\105\x53" => array(343, 1, 1, 0), "\123\x55\x42\124\117\124\x41\114" => array(344, -1, 0, 0), "\123\125\x4d\111\x46" => array(345, -1, 0, 0), "\x43\x4f\x55\x4e\124\111\106" => array(346, 2, 0, 0), "\x43\117\125\x4e\x54\x42\114\x41\116\113" => array(347, 1, 0, 0), "\111\x53\120\115\124" => array(350, 4, 1, 0), "\104\101\x54\105\x44\111\x46" => array(351, 3, 1, 0), "\x44\101\x54\x45\123\x54\x52\111\x4e\107" => array(352, 1, 1, 0), "\x4e\125\x4d\x42\105\x52\x53\124\122\x49\x4e\107" => array(353, 2, 1, 0), "\x52\117\115\101\x4e" => array(354, -1, 1, 0), "\107\105\124\120\x49\126\x4f\124\104\101\x54\x41" => array(358, -1, 0, 0), "\x48\x59\x50\105\122\114\111\x4e\113" => array(359, -1, 1, 0), "\x50\110\x4f\116\x45\x54\111\x43" => array(360, 1, 0, 0), "\101\126\x45\122\x41\x47\105\x41" => array(361, -1, 0, 0), "\115\101\130\101" => array(362, -1, 0, 0), "\x4d\111\x4e\101" => array(363, -1, 0, 0), "\x53\x54\104\105\x56\x50\x41" => array(364, -1, 0, 0), "\x56\101\122\120\x41" => array(365, -1, 0, 0), "\123\124\x44\105\126\101" => array(366, -1, 0, 0), "\126\101\x52\x41" => array(367, -1, 0, 0), "\x42\x41\x48\124\x54\x45\x58\x54" => array(368, 1, 0, 0)); } private function convert($token) { if (preg_match("\x2f\42\x28\133\136\x22\x5d\x7c\42\x22\51\173\x30\54\x32\x35\65\x7d\42\57", $token)) { return $this->convertString($token); } elseif (is_numeric($token)) { return $this->convertNumber($token); } elseif (preg_match("\57\x5e\x5c\44\x3f\x28\133\x41\55\x49\x61\x2d\x69\x5d\77\133\x41\x2d\x5a\x61\x2d\172\x5d\51\134\44\x3f\x28\x5c\144\x2b\51\44\57", $token)) { return $this->convertRef2d($token); } elseif (preg_match("\57\x5e" . self::REGEX_SHEET_TITLE_UNQUOTED . "\50\134\x3a" . self::REGEX_SHEET_TITLE_UNQUOTED . "\51\77\x5c\x21\x5c\44\77\133\101\55\111\141\55\x69\x5d\x3f\133\101\x2d\132\x61\x2d\172\135\134\x24\x3f\50\x5c\144\53\51\44\57\x75", $token)) { return $this->convertRef3d($token); } elseif (preg_match("\57\x5e\x27" . self::REGEX_SHEET_TITLE_QUOTED . "\x28\134\x3a" . self::REGEX_SHEET_TITLE_QUOTED . "\51\x3f\x27\134\x21\x5c\44\77\133\101\x2d\x49\x61\55\151\x5d\x3f\133\x41\55\x5a\x61\x2d\x7a\x5d\134\44\77\50\x5c\144\x2b\51\x24\x2f\x75", $token)) { return $this->convertRef3d($token); } elseif (preg_match("\x2f\136\50\134\44\51\77\133\101\x2d\x49\141\55\x69\135\x3f\133\x41\x2d\132\141\55\x7a\x5d\50\x5c\x24\51\x3f\50\134\144\53\51\134\x3a\x28\x5c\x24\x29\77\133\101\x2d\x49\141\x2d\151\135\77\x5b\101\x2d\132\x61\x2d\x7a\x5d\x28\134\44\x29\77\x28\x5c\144\x2b\51\44\57", $token)) { return $this->convertRange2d($token); } elseif (preg_match("\57\x5e" . self::REGEX_SHEET_TITLE_UNQUOTED . "\x28\x5c\x3a" . self::REGEX_SHEET_TITLE_UNQUOTED . "\51\x3f\134\x21\134\44\x3f\50\x5b\x41\55\111\141\55\151\135\77\x5b\x41\x2d\x5a\141\x2d\x7a\x5d\51\77\134\x24\x3f\50\x5c\x64\x2b\51\x5c\72\134\44\77\50\x5b\101\55\x49\141\x2d\151\135\77\133\101\x2d\132\141\55\x7a\x5d\x29\x3f\x5c\44\x3f\x28\x5c\x64\x2b\x29\x24\x2f\x75", $token)) { return $this->convertRange3d($token); } elseif (preg_match("\57\136\47" . self::REGEX_SHEET_TITLE_QUOTED . "\50\x5c\72" . self::REGEX_SHEET_TITLE_QUOTED . "\x29\x3f\47\x5c\x21\134\x24\77\50\x5b\x41\55\x49\141\55\151\135\x3f\x5b\x41\x2d\132\x61\55\x7a\x5d\51\x3f\x5c\44\x3f\x28\134\x64\x2b\x29\134\72\x5c\x24\x3f\50\133\101\55\x49\141\55\151\x5d\77\133\101\55\x5a\x61\x2d\x7a\135\x29\x3f\x5c\x24\x3f\x28\134\x64\53\x29\44\x2f\165", $token)) { return $this->convertRange3d($token); } elseif (isset($this->ptg[$token])) { return pack("\103", $this->ptg[$token]); } elseif (preg_match("\x2f\x5e\x23\x5b\x41\55\132\60\x5c\x2f\x5d\x7b\63\x2c\x35\x7d\x5b\41\77\x5d\x7b\x31\175\44\x2f", $token) or $token == "\43\x4e\57\x41") { return $this->convertError($token); } elseif ($token == "\141\x72\x67") { return ''; } throw new PHPExcel_Writer_Exception("\x55\156\153\x6e\157\167\x6e\40\x74\157\153\145\x6e\40{$token}"); } private function convertNumber($num) { if (preg_match("\57\136\134\144\x2b\44\57", $num) and $num <= 65535) { return pack("\x43\x76", $this->ptg["\160\164\147\x49\x6e\x74"], $num); } else { if (PHPExcel_Writer_Excel5_BIFFwriter::getByteOrder()) { $num = strrev($num); } return pack("\103\144", $this->ptg["\160\164\x67\x4e\x75\x6d"], $num); } } private function convertString($string) { goto aqlzi; aqlzi: $string = substr($string, 1, strlen($string) - 2); goto cwF4o; cwF4o: if (strlen($string) > 255) { throw new PHPExcel_Writer_Exception("\x53\164\162\151\156\x67\x20\x69\163\40\164\x6f\157\x20\x6c\x6f\156\147"); } goto THX6v; THX6v: return pack("\103", $this->ptg["\x70\x74\147\x53\x74\x72"]) . PHPExcel_Shared_String::UTF8toBIFF8UnicodeShort($string); goto q2om6; q2om6: } private function convertFunction($token, $num_args) { goto KmdtE; vqIsl: if ($args == -1) { return pack("\x43\103\166", $this->ptg["\x70\x74\x67\106\x75\156\x63\x56\x61\x72\126"], $num_args, $this->functions[$token][0]); } goto kFLxH; KmdtE: $args = $this->functions[$token][1]; goto BJjkW; BJjkW: if ($args >= 0) { return pack("\x43\166", $this->ptg["\x70\164\x67\x46\165\x6e\x63\126"], $this->functions[$token][0]); } goto vqIsl; kFLxH: } private function convertRange2d($range, $class = 0) { goto nNi0j; qZvFY: return $ptgArea . $row1 . $row2 . $col1 . $col2; goto sWDFk; nNi0j: if (preg_match("\57\136\50\x5c\44\51\x3f\x28\133\x41\x2d\111\141\x2d\x69\135\77\x5b\x41\55\132\x61\x2d\x7a\135\x29\x28\x5c\x24\x29\77\50\134\x64\x2b\x29\x5c\x3a\50\134\x24\x29\x3f\50\x5b\101\55\111\141\55\x69\135\x3f\133\101\55\132\141\55\172\x5d\51\x28\x5c\44\51\77\50\x5c\x64\53\51\x24\x2f", $range)) { list($cell1, $cell2) = explode("\x3a", $range); } else { throw new PHPExcel_Writer_Exception("\x55\156\153\x6e\x6f\167\156\40\x72\x61\x6e\x67\x65\40\163\x65\160\x61\x72\141\x74\157\x72"); } goto s43QP; dvAy3: if ($class == 0) { $ptgArea = pack("\103", $this->ptg["\x70\x74\x67\101\162\x65\x61"]); } elseif ($class == 1) { $ptgArea = pack("\103", $this->ptg["\160\x74\x67\101\x72\145\141\126"]); } elseif ($class == 2) { $ptgArea = pack("\103", $this->ptg["\160\x74\147\x41\162\145\141\x41"]); } else { throw new PHPExcel_Writer_Exception("\x55\156\x6b\156\x6f\x77\156\40\143\154\x61\x73\163\40{$class}"); } goto qZvFY; McoG6: list($row2, $col2) = $this->cellToPackedRowcol($cell2); goto dvAy3; s43QP: list($row1, $col1) = $this->cellToPackedRowcol($cell1); goto McoG6; sWDFk: } private function convertRange3d($token) { goto ijJBX; ua1Ah: return $ptgArea . $ext_ref . $row1 . $row2 . $col1 . $col2; goto lzIks; tVfcH: $ptgArea = pack("\103", $this->ptg["\160\x74\x67\101\162\x65\141\63\144"]); goto ua1Ah; ELM1L: $ext_ref = $this->getRefIndex($ext_ref); goto Tk4FM; nByt_: if (preg_match("\57\x5e\50\x5c\x24\51\77\x5b\101\55\111\141\55\x69\135\77\133\101\55\x5a\x61\55\x7a\135\x28\134\44\51\x3f\50\x5c\x64\x2b\x29\44\57", $cell1)) { list($row1, $col1) = $this->cellToPackedRowcol($cell1); list($row2, $col2) = $this->cellToPackedRowcol($cell2); } else { list($row1, $col1, $row2, $col2) = $this->rangeToPackedRange($cell1 . "\72" . $cell2); } goto tVfcH; Tk4FM: list($cell1, $cell2) = explode("\72", $range); goto nByt_; ijJBX: list($ext_ref, $range) = explode("\x21", $token); goto ELM1L; lzIks: } private function convertRef2d($cell) { goto ehr4_; r4Isu: $ptgRef = pack("\103", $this->ptg["\160\164\147\122\145\x66\x41"]); goto QDJEB; W8kg2: list($row, $col) = $cell_array; goto r4Isu; ehr4_: $cell_array = $this->cellToPackedRowcol($cell); goto W8kg2; QDJEB: return $ptgRef . $row . $col; goto bUX9M; bUX9M: } private function convertRef3d($cell) { goto zE2D8; zE2D8: list($ext_ref, $cell) = explode("\x21", $cell); goto rG86y; rG86y: $ext_ref = $this->getRefIndex($ext_ref); goto to9bR; pwIc1: $ptgRef = pack("\103", $this->ptg["\x70\x74\147\x52\145\x66\x33\144\101"]); goto oyXlk; oyXlk: return $ptgRef . $ext_ref . $row . $col; goto LyDSe; to9bR: list($row, $col) = $this->cellToPackedRowcol($cell); goto pwIc1; LyDSe: } private function convertError($errorCode) { switch ($errorCode) { case "\43\116\x55\x4c\x4c\x21": return pack("\103", 0x0); case "\43\104\x49\126\57\60\x21": return pack("\103", 0x7); case "\43\x56\x41\114\125\x45\x21": return pack("\x43", 0xf); case "\x23\x52\x45\x46\x21": return pack("\x43", 0x17); case "\x23\116\101\115\x45\x3f": return pack("\x43", 0x1d); case "\x23\116\x55\x4d\x21": return pack("\103", 0x24); case "\43\116\57\x41": return pack("\103", 0x2a); } return pack("\x43", 0xff); } private function packExtRef($ext_ref) { goto wlorT; gOIhX: return pack("\166\144\x76\166", $offset, 0x0, $sheet1, $sheet2); goto mo9MR; QZV2G: $ext_ref = preg_replace("\57\47\44\x2f", '', $ext_ref); goto U_MBc; wlorT: $ext_ref = preg_replace("\x2f\x5e\x27\57", '', $ext_ref); goto QZV2G; lMJvC: $offset = -1 - $sheet1; goto gOIhX; U_MBc: if (preg_match("\x2f\72\x2f", $ext_ref)) { goto QrUo4; QrUo4: list($sheet_name1, $sheet_name2) = explode("\x3a", $ext_ref); goto H87M6; kJqo0: if ($sheet1 == -1) { throw new PHPExcel_Writer_Exception("\125\x6e\153\x6e\157\167\x6e\x20\163\x68\145\x65\164\x20\156\141\155\x65\x20{$sheet_name1}\x20\151\156\x20\x66\x6f\x72\155\x75\154\x61"); } goto frM5M; H87M6: $sheet1 = $this->getSheetIndex($sheet_name1); goto kJqo0; gVf8Z: if ($sheet1 > $sheet2) { list($sheet1, $sheet2) = array($sheet2, $sheet1); } goto c4lgP; frM5M: $sheet2 = $this->getSheetIndex($sheet_name2); goto tGBWk; tGBWk: if ($sheet2 == -1) { throw new PHPExcel_Writer_Exception("\x55\156\153\x6e\x6f\x77\156\x20\163\150\145\145\x74\40\156\x61\155\x65\x20{$sheet_name2}\40\151\x6e\x20\x66\157\x72\155\165\154\x61"); } goto gVf8Z; c4lgP: } else { goto rdPLX; rdPLX: $sheet1 = $this->getSheetIndex($ext_ref); goto vlcBF; Gu1MO: $sheet2 = $sheet1; goto vSm18; vlcBF: if ($sheet1 == -1) { throw new PHPExcel_Writer_Exception("\125\x6e\153\x6e\x6f\167\156\x20\x73\150\x65\145\x74\x20\156\141\155\145\40{$ext_ref}\40\151\156\40\146\157\162\155\165\x6c\x61"); } goto Gu1MO; vSm18: } goto lMJvC; mo9MR: } private function getRefIndex($ext_ref) { goto AeklP; v65E7: $supbook_index = 0x0; goto uqBi_; AeklP: $ext_ref = preg_replace("\x2f\136\47\x2f", '', $ext_ref); goto Ozyyg; GndYg: $ext_ref = str_replace("\x27\47", "\x27", $ext_ref); goto opt1H; uqBi_: $ref = pack("\166\166\x76", $supbook_index, $sheet1, $sheet2); goto uQyft; oCiY1: $index = -1; goto Zjty4; uQyft: $totalreferences = count($this->references); goto oCiY1; Zjty4: for ($i = 0; $i < $totalreferences; ++$i) { if ($ref == $this->references[$i]) { $index = $i; break; } } goto WLYug; KSPJA: return pack("\x76", $index); goto NjvDE; Ozyyg: $ext_ref = preg_replace("\x2f\x27\44\57", '', $ext_ref); goto GndYg; WLYug: if ($index == -1) { $this->references[$totalreferences] = $ref; $index = $totalreferences; } goto KSPJA; opt1H: if (preg_match("\x2f\x3a\57", $ext_ref)) { goto mzMMJ; spjjr: if ($sheet2 == -1) { throw new PHPExcel_Writer_Exception("\125\156\153\x6e\157\x77\156\40\163\x68\x65\x65\x74\x20\156\x61\155\145\40{$sheet_name2}\x20\151\156\40\x66\x6f\162\x6d\165\154\141"); } goto glmCB; Upxnx: if ($sheet1 == -1) { throw new PHPExcel_Writer_Exception("\125\x6e\153\x6e\157\x77\156\x20\x73\150\145\145\164\x20\156\x61\155\145\40{$sheet_name1}\40\151\x6e\x20\146\x6f\x72\155\x75\154\x61"); } goto OuAhz; OuAhz: $sheet2 = $this->getSheetIndex($sheet_name2); goto spjjr; mzMMJ: list($sheet_name1, $sheet_name2) = explode("\72", $ext_ref); goto wXhya; glmCB: if ($sheet1 > $sheet2) { list($sheet1, $sheet2) = array($sheet2, $sheet1); } goto AeoWU; wXhya: $sheet1 = $this->getSheetIndex($sheet_name1); goto Upxnx; AeoWU: } else { goto QTCGd; QTCGd: $sheet1 = $this->getSheetIndex($ext_ref); goto wLbdf; wLbdf: if ($sheet1 == -1) { throw new PHPExcel_Writer_Exception("\x55\156\153\156\157\167\156\x20\163\150\145\145\x74\x20\156\x61\155\145\40{$ext_ref}\x20\151\x6e\40\x66\x6f\162\155\165\x6c\141"); } goto lEqGM; lEqGM: $sheet2 = $sheet1; goto SdLHc; SdLHc: } goto v65E7; NjvDE: } private function getSheetIndex($sheet_name) { if (!isset($this->externalSheets[$sheet_name])) { return -1; } else { return $this->externalSheets[$sheet_name]; } } public function setExtSheet($name, $index) { $this->externalSheets[$name] = $index; } private function cellToPackedRowcol($cell) { goto DO6Gh; kT6Ky: $col = pack("\166", $col); goto hNh1M; gnl3L: $col |= $row_rel << 15; goto kT6Ky; DO6Gh: $cell = strtoupper($cell); goto eaKLS; JgYp6: if ($col >= 256) { throw new PHPExcel_Writer_Exception("\x43\x6f\154\165\x6d\x6e\x20\151\156\x3a\40{$cell}\40\147\162\145\141\x74\x65\162\x20\164\150\x61\156\40\62\65\x35"); } goto OOO1B; OOO1B: if ($row >= 65536) { throw new PHPExcel_Writer_Exception("\122\x6f\167\40\151\156\x3a\x20{$cell}\40\x67\162\x65\141\164\x65\x72\x20\x74\x68\x61\156\40\66\65\65\63\66\40"); } goto kMRf9; kMRf9: $col |= $col_rel << 14; goto gnl3L; hNh1M: $row = pack("\x76", $row); goto mDJ1X; mDJ1X: return array($row, $col); goto qx7Dp; eaKLS: list($row, $col, $row_rel, $col_rel) = $this->cellToRowcol($cell); goto JgYp6; qx7Dp: } private function rangeToPackedRange($range) { goto OhPvk; h3jK7: $col1 = 0; goto miSsD; iwvv6: $row2 = $match[4]; goto yU4Qq; NYsoO: $row1 = pack("\166", $row1); goto L2p0U; r2up1: --$row2; goto h3jK7; vaQQ5: $col1 |= $row1_rel << 15; goto swiD4; RCEsi: if ($row1 >= 65536 or $row2 >= 65536) { throw new PHPExcel_Writer_Exception("\122\157\x77\40\151\x6e\x3a\40{$range}\x20\x67\x72\145\x61\164\145\162\40\x74\150\x61\x6e\x20\x36\65\65\63\66\40"); } goto vaQQ5; miSsD: $col2 = 65535; goto RCEsi; v02xq: $row2_rel = empty($match[3]) ? 1 : 0; goto iwvv6; HGFzx: $row1_rel = empty($match[1]) ? 1 : 0; goto y03aI; OhPvk: preg_match("\x2f\50\x5c\x24\x29\77\x28\x5c\x64\53\x29\x5c\72\50\x5c\44\x29\77\x28\x5c\x64\x2b\x29\x2f", $range, $match); goto HGFzx; yU4Qq: --$row1; goto r2up1; y03aI: $row1 = $match[2]; goto v02xq; L2p0U: $row2 = pack("\166", $row2); goto ot1H6; iSCdi: $col2 = pack("\x76", $col2); goto NYsoO; swiD4: $col2 |= $row2_rel << 15; goto BAF30; ot1H6: return array($row1, $col1, $row2, $col2); goto eA48K; BAF30: $col1 = pack("\x76", $col1); goto iSCdi; eA48K: } private function cellToRowcol($cell) { goto xNFCS; cvGnu: $row_rel = empty($match[3]) ? 1 : 0; goto GNpb2; NX6z5: --$row; goto tCkme; LNDdm: return array($row, $col, $row_rel, $col_rel); goto uLDKW; oUotH: $col_ref = $match[2]; goto cvGnu; z3uD_: $col_rel = empty($match[1]) ? 1 : 0; goto oUotH; zlnWT: $expn = strlen($col_ref) - 1; goto I_md0; xNFCS: preg_match("\57\x28\x5c\x24\x29\77\x28\133\101\55\111\x5d\77\x5b\101\55\x5a\x5d\x29\50\x5c\x24\51\77\x28\x5c\144\x2b\x29\57", $cell, $match); goto z3uD_; tCkme: --$col; goto LNDdm; Oa2Z6: $col_ref_length = strlen($col_ref); goto uPMfb; I_md0: $col = 0; goto Oa2Z6; uPMfb: for ($i = 0; $i < $col_ref_length; ++$i) { $col += (ord($col_ref[$i]) - 64) * pow(26, $expn); --$expn; } goto NX6z5; GNpb2: $row = $match[4]; goto zlnWT; uLDKW: } private function advance() { goto TquQP; YF4lH: if ($i < $formula_length) { goto Y3OM7; fNkbV: $token = ''; goto mK6ML; Y3OM7: while ($this->formula[$i] == "\x20") { ++$i; } goto Pzgx2; Pzgx2: if ($i < $formula_length - 1) { $this->lookAhead = $this->formula[$i + 1]; } goto fNkbV; mK6ML: } goto PtpN6; TquQP: $i = $this->currentCharacter; goto zxAmo; zxAmo: $formula_length = strlen($this->formula); goto YF4lH; PtpN6: while ($i < $formula_length) { $token .= $this->formula[$i]; if ($i < $formula_length - 1) { $this->lookAhead = $this->formula[$i + 1]; } else { $this->lookAhead = ''; } if ($this->match($token) != '') { goto Z2juz; Z2juz: $this->currentCharacter = $i + 1; goto qPFaE; OA0ca: return 1; goto gf52G; qPFaE: $this->currentToken = $token; goto OA0ca; gf52G: } if ($i < $formula_length - 2) { $this->lookAhead = $this->formula[$i + 2]; } else { $this->lookAhead = ''; } ++$i; } goto iEb1E; iEb1E: } private function match($token) { switch ($token) { case "\53": case "\55": case "\x2a": case "\x2f": case "\50": case "\x29": case "\54": case "\73": case "\76\75": case "\x3c\75": case "\x3d": case "\x3c\x3e": case "\136": case "\46": case "\45": return $token; break; case "\76": goto QzTzq; zIqik: break; goto wnyC0; Xk8Zi: return $token; goto zIqik; QzTzq: if ($this->lookAhead == "\x3d") { break; } goto Xk8Zi; wnyC0: case "\74": goto p2HXs; p2HXs: if ($this->lookAhead == "\75" or $this->lookAhead == "\76") { break; } goto tBClI; tBClI: return $token; goto L9Rrr; L9Rrr: break; goto Kj8OT; Kj8OT: default: if (preg_match("\57\x5e\x5c\44\77\133\101\x2d\x49\141\x2d\151\135\77\133\101\x2d\132\141\55\x7a\135\x5c\x24\77\133\x30\55\71\x5d\x2b\x24\57", $token) and !preg_match("\57\133\60\55\71\135\x2f", $this->lookAhead) and $this->lookAhead != "\72" and $this->lookAhead != "\56" and $this->lookAhead != "\x21") { return $token; } elseif (preg_match("\x2f\x5e" . self::REGEX_SHEET_TITLE_UNQUOTED . "\50\134\x3a" . self::REGEX_SHEET_TITLE_UNQUOTED . "\x29\77\134\x21\x5c\x24\x3f\133\101\x2d\x49\x61\x2d\x69\x5d\77\x5b\101\55\x5a\141\x2d\x7a\x5d\x5c\x24\x3f\x5b\x30\55\x39\135\53\x24\57\165", $token) and !preg_match("\57\133\x30\x2d\71\135\x2f", $this->lookAhead) and $this->lookAhead != "\72" and $this->lookAhead != "\x2e") { return $token; } elseif (preg_match("\x2f\x5e\47" . self::REGEX_SHEET_TITLE_QUOTED . "\50\x5c\x3a" . self::REGEX_SHEET_TITLE_QUOTED . "\x29\77\x27\x5c\x21\x5c\44\x3f\x5b\x41\x2d\111\141\55\x69\x5d\77\133\x41\55\x5a\x61\55\172\135\x5c\x24\77\133\x30\x2d\71\x5d\x2b\44\x2f\165", $token) and !preg_match("\57\133\60\55\71\x5d\57", $this->lookAhead) and $this->lookAhead != "\x3a" and $this->lookAhead != "\x2e") { return $token; } elseif (preg_match("\57\x5e\x28\x5c\x24\x29\x3f\x5b\x41\x2d\x49\x61\x2d\151\135\77\133\x41\x2d\x5a\x61\55\172\x5d\x28\134\44\51\x3f\x5b\x30\55\x39\x5d\53\x3a\50\134\44\51\77\133\x41\55\x49\x61\55\151\x5d\77\x5b\x41\x2d\132\141\55\172\135\50\134\x24\51\77\133\60\55\71\135\x2b\44\57", $token) && !preg_match("\x2f\133\60\x2d\71\x5d\x2f", $this->lookAhead)) { return $token; } elseif (preg_match("\57\136" . self::REGEX_SHEET_TITLE_UNQUOTED . "\50\x5c\x3a" . self::REGEX_SHEET_TITLE_UNQUOTED . "\51\x3f\x5c\x21\x5c\x24\77\x28\133\101\x2d\111\141\55\x69\135\x3f\x5b\101\55\x5a\141\55\x7a\x5d\51\77\134\44\x3f\133\x30\55\71\135\53\x3a\x5c\44\77\50\133\x41\x2d\x49\141\x2d\151\135\77\x5b\x41\x2d\x5a\x61\x2d\x7a\x5d\51\x3f\x5c\x24\77\133\60\x2d\71\x5d\x2b\44\57\x75", $token) and !preg_match("\57\133\60\55\71\x5d\57", $this->lookAhead)) { return $token; } elseif (preg_match("\x2f\x5e\47" . self::REGEX_SHEET_TITLE_QUOTED . "\50\x5c\72" . self::REGEX_SHEET_TITLE_QUOTED . "\x29\77\47\x5c\41\x5c\x24\x3f\50\133\x41\x2d\x49\141\55\151\135\77\133\x41\55\x5a\141\55\172\x5d\x29\77\134\44\x3f\133\60\55\x39\x5d\x2b\72\134\44\x3f\50\133\101\x2d\x49\x61\55\x69\135\77\x5b\101\x2d\132\x61\x2d\172\135\x29\77\x5c\x24\77\133\x30\55\x39\x5d\x2b\44\57\x75", $token) and !preg_match("\57\133\60\55\71\135\57", $this->lookAhead)) { return $token; } elseif (is_numeric($token) and (!is_numeric($token . $this->lookAhead) or $this->lookAhead == '') and $this->lookAhead != "\x21" and $this->lookAhead != "\72") { return $token; } elseif (preg_match("\x2f\42\x28\x5b\136\42\x5d\174\42\x22\51\x7b\x30\x2c\62\65\65\175\x22\57", $token) and $this->lookAhead != "\x22" and substr_count($token, "\42") % 2 == 0) { return $token; } elseif (preg_match("\57\x5e\x23\133\x41\x2d\132\x30\134\57\135\x7b\x33\54\65\175\x5b\x21\x3f\135\x7b\61\175\44\x2f", $token) or $token == "\43\x4e\x2f\101") { return $token; } elseif (preg_match("\x2f\136\133\x41\55\x5a\60\55\71\xc0\x2d\xdc\x5c\56\135\x2b\x24\x2f\151", $token) and $this->lookAhead == "\50") { return $token; } elseif (substr($token, -1) == "\x29") { return $token; } return ''; } } public function parse($formula) { goto VcfJt; H4jE0: $this->advance(); goto vkJ8g; VcfJt: $this->currentCharacter = 0; goto tmT5v; lJDG2: $this->lookAhead = isset($formula[1]) ? $formula[1] : ''; goto H4jE0; vkJ8g: $this->parseTree = $this->condition(); goto Uq3I3; Uq3I3: return true; goto WIhEi; tmT5v: $this->formula = $formula; goto lJDG2; WIhEi: } private function condition() { goto rZ3BK; cX9D7: if ($this->currentToken == "\x3c") { goto HrVqU; W2Mfu: $result2 = $this->expression(); goto u_6yg; u_6yg: $result = $this->createTree("\x70\x74\147\x4c\124", $result, $result2); goto YNP8S; HrVqU: $this->advance(); goto W2Mfu; YNP8S: } elseif ($this->currentToken == "\x3e") { goto YVXbb; ZMp2_: $result = $this->createTree("\x70\164\x67\107\x54", $result, $result2); goto hmB0u; L2xdg: $result2 = $this->expression(); goto ZMp2_; YVXbb: $this->advance(); goto L2xdg; hmB0u: } elseif ($this->currentToken == "\x3c\x3d") { goto Pe3YQ; SPnYy: $result = $this->createTree("\x70\x74\x67\114\105", $result, $result2); goto sQGLq; aNL2l: $result2 = $this->expression(); goto SPnYy; Pe3YQ: $this->advance(); goto aNL2l; sQGLq: } elseif ($this->currentToken == "\76\x3d") { goto WJ46F; WJ46F: $this->advance(); goto or1JO; jzDjy: $result = $this->createTree("\160\164\x67\x47\x45", $result, $result2); goto KGrR2; or1JO: $result2 = $this->expression(); goto jzDjy; KGrR2: } elseif ($this->currentToken == "\x3d") { goto NpBPe; Kbh10: $result = $this->createTree("\160\164\147\105\121", $result, $result2); goto qOa4T; Gb3QT: $result2 = $this->expression(); goto Kbh10; NpBPe: $this->advance(); goto Gb3QT; qOa4T: } elseif ($this->currentToken == "\x3c\x3e") { goto uzfUV; uzfUV: $this->advance(); goto WbE30; WbE30: $result2 = $this->expression(); goto g5QiF; g5QiF: $result = $this->createTree("\160\164\147\116\x45", $result, $result2); goto PIzLn; PIzLn: } elseif ($this->currentToken == "\x26") { goto bW8D0; gFaY8: $result = $this->createTree("\x70\164\147\x43\157\156\x63\141\x74", $result, $result2); goto THJFg; teoau: $result2 = $this->expression(); goto gFaY8; bW8D0: $this->advance(); goto teoau; THJFg: } goto bTKr8; bTKr8: return $result; goto vFI8m; rZ3BK: $result = $this->expression(); goto cX9D7; vFI8m: } private function expression() { goto j8pUo; j8pUo: if (preg_match("\x2f\x22\x28\x5b\x5e\42\135\174\x22\42\51\173\60\x2c\62\65\x35\x7d\42\x2f", $this->currentToken)) { goto TG8z8; dFWk4: $this->advance(); goto D8WjA; TG8z8: $tmp = str_replace("\x22\42", "\42", $this->currentToken); goto X0DoH; MowD8: $result = $this->createTree($tmp, '', ''); goto dFWk4; X0DoH: if ($tmp == "\42" || $tmp == '') { $tmp = "\x22\42"; } goto MowD8; D8WjA: return $result; goto qUrFo; qUrFo: } elseif (preg_match("\57\x5e\x23\x5b\101\55\132\60\x5c\57\x5d\173\x33\x2c\x35\x7d\x5b\x21\x3f\135\173\61\175\44\57", $this->currentToken) or $this->currentToken == "\43\x4e\57\x41") { goto v2FAM; jN97C: return $result; goto x2Io1; oHpI0: $this->advance(); goto jN97C; v2FAM: $result = $this->createTree($this->currentToken, "\160\x74\147\x45\x72\x72", ''); goto oHpI0; x2Io1: } elseif ($this->currentToken == "\55") { goto qlRYs; qlRYs: $this->advance(); goto y2KId; a0til: return $result; goto W6tcK; y2KId: $result2 = $this->expression(); goto P1Abn; P1Abn: $result = $this->createTree("\160\x74\x67\125\155\151\156\165\x73", $result2, ''); goto a0til; W6tcK: } elseif ($this->currentToken == "\53") { goto U9dTl; U9dTl: $this->advance(); goto imog1; qOh9X: $result = $this->createTree("\160\164\147\125\160\x6c\x75\x73", $result2, ''); goto MKBD3; MKBD3: return $result; goto ujimL; imog1: $result2 = $this->expression(); goto qOh9X; ujimL: } goto KmGTR; ErODc: return $result; goto XZzkP; mlM0u: while ($this->currentToken == "\53" or $this->currentToken == "\55" or $this->currentToken == "\x5e") { if ($this->currentToken == "\x2b") { goto xVRv0; xVRv0: $this->advance(); goto aQQFa; P7jHx: $result = $this->createTree("\160\164\x67\101\x64\x64", $result, $result2); goto PDH8_; aQQFa: $result2 = $this->term(); goto P7jHx; PDH8_: } elseif ($this->currentToken == "\55") { goto X9rY6; X9rY6: $this->advance(); goto JFqxo; JFqxo: $result2 = $this->term(); goto FpYg4; FpYg4: $result = $this->createTree("\160\164\x67\123\165\142", $result, $result2); goto VV_kh; VV_kh: } else { goto JDaaB; BBQa9: $result = $this->createTree("\160\164\x67\120\x6f\x77\145\162", $result, $result2); goto ii45d; XJGCj: $result2 = $this->term(); goto BBQa9; JDaaB: $this->advance(); goto XJGCj; ii45d: } } goto ErODc; KmGTR: $result = $this->term(); goto mlM0u; XZzkP: } private function parenthesizedExpression() { $result = $this->createTree("\x70\164\x67\120\x61\162\x65\156", $this->expression(), ''); return $result; } private function term() { goto Zq45L; Zq45L: $result = $this->fact(); goto WVcmV; WVcmV: while ($this->currentToken == "\x2a" or $this->currentToken == "\x2f") { if ($this->currentToken == "\52") { goto J0aaH; JMr8Z: $result = $this->createTree("\160\x74\147\115\x75\x6c", $result, $result2); goto ff5gj; qkUuE: $result2 = $this->fact(); goto JMr8Z; J0aaH: $this->advance(); goto qkUuE; ff5gj: } else { goto u8Hsk; EaP69: $result = $this->createTree("\x70\x74\147\104\x69\166", $result, $result2); goto UkXhG; u8Hsk: $this->advance(); goto RtzA6; RtzA6: $result2 = $this->fact(); goto EaP69; UkXhG: } } goto FuttX; FuttX: return $result; goto PaTbA; PaTbA: } private function fact() { goto ngO02; ngO02: if ($this->currentToken == "\50") { goto JxKTP; ZTQV5: if ($this->currentToken != "\51") { throw new PHPExcel_Writer_Exception("\x27\x29\x27\x20\164\x6f\153\x65\156\x20\x65\170\160\145\143\164\145\x64\56"); } goto oLDa9; Bzueq: $result = $this->parenthesizedExpression(); goto ZTQV5; oLDa9: $this->advance(); goto RM8cV; JxKTP: $this->advance(); goto Bzueq; RM8cV: return $result; goto uOUHT; uOUHT: } goto WIU5t; WIU5t: if (preg_match("\57\x5e\x5c\x24\77\133\x41\55\x49\141\x2d\151\x5d\77\x5b\x41\x2d\132\141\x2d\172\x5d\134\x24\77\x5b\60\55\x39\x5d\53\x24\57", $this->currentToken)) { goto KmCfE; w5XAh: return $result; goto vnNmO; VK6hQ: $this->advance(); goto w5XAh; KmCfE: $result = $this->createTree($this->currentToken, '', ''); goto VK6hQ; vnNmO: } elseif (preg_match("\x2f\x5e" . self::REGEX_SHEET_TITLE_UNQUOTED . "\x28\x5c\72" . self::REGEX_SHEET_TITLE_UNQUOTED . "\x29\x3f\134\x21\x5c\44\77\133\101\55\111\141\55\151\x5d\77\x5b\101\x2d\x5a\141\x2d\172\135\134\x24\x3f\133\x30\x2d\x39\x5d\x2b\44\x2f\165", $this->currentToken)) { goto QknZe; sMERF: return $result; goto SY04j; QknZe: $result = $this->createTree($this->currentToken, '', ''); goto LQlL2; LQlL2: $this->advance(); goto sMERF; SY04j: } elseif (preg_match("\x2f\x5e\47" . self::REGEX_SHEET_TITLE_QUOTED . "\x28\134\x3a" . self::REGEX_SHEET_TITLE_QUOTED . "\51\77\x27\x5c\x21\134\44\x3f\x5b\101\55\111\141\55\x69\x5d\x3f\x5b\x41\x2d\x5a\141\x2d\172\x5d\x5c\x24\77\x5b\60\55\71\x5d\x2b\44\57\x75", $this->currentToken)) { goto yQsep; vJiXo: return $result; goto y1fRW; godHk: $this->advance(); goto vJiXo; yQsep: $result = $this->createTree($this->currentToken, '', ''); goto godHk; y1fRW: } elseif (preg_match("\57\136\50\x5c\44\x29\77\133\101\55\x49\141\55\151\x5d\77\x5b\101\x2d\132\x61\55\172\135\x28\x5c\44\51\77\x5b\60\55\x39\135\x2b\72\x28\134\x24\x29\x3f\x5b\x41\x2d\111\x61\55\151\x5d\77\x5b\x41\x2d\x5a\141\x2d\172\135\50\134\44\x29\x3f\133\60\x2d\x39\135\x2b\44\x2f", $this->currentToken) or preg_match("\x2f\136\x28\x5c\44\51\77\133\x41\55\111\x61\x2d\151\x5d\x3f\133\x41\x2d\x5a\x61\x2d\x7a\135\x28\x5c\44\51\x3f\133\x30\x2d\71\x5d\53\x5c\56\134\x2e\x28\134\x24\51\x3f\x5b\101\55\111\141\x2d\x69\x5d\x3f\x5b\101\x2d\x5a\x61\x2d\172\135\50\x5c\x24\51\77\133\x30\55\x39\135\53\x24\57", $this->currentToken)) { goto LO18o; dYzzw: $this->advance(); goto X7eI6; LO18o: $result = $this->createTree($this->currentToken, '', ''); goto dYzzw; X7eI6: return $result; goto gJYU_; gJYU_: } elseif (preg_match("\57\x5e" . self::REGEX_SHEET_TITLE_UNQUOTED . "\50\x5c\x3a" . self::REGEX_SHEET_TITLE_UNQUOTED . "\51\77\x5c\41\134\44\x3f\50\133\101\55\x49\x61\x2d\x69\135\x3f\133\x41\55\x5a\141\55\172\x5d\x29\77\x5c\x24\77\133\x30\55\71\x5d\x2b\72\x5c\x24\77\50\x5b\x41\x2d\111\x61\x2d\x69\x5d\x3f\133\101\x2d\x5a\141\x2d\172\135\x29\x3f\x5c\x24\77\133\x30\x2d\x39\x5d\53\44\57\x75", $this->currentToken)) { goto abVA2; b83Ae: $this->advance(); goto cZk_j; abVA2: $result = $this->createTree($this->currentToken, '', ''); goto b83Ae; cZk_j: return $result; goto vSPS_; vSPS_: } elseif (preg_match("\57\136\x27" . self::REGEX_SHEET_TITLE_QUOTED . "\x28\134\72" . self::REGEX_SHEET_TITLE_QUOTED . "\51\77\x27\x5c\x21\134\x24\77\50\133\101\55\111\141\x2d\x69\135\77\133\x41\55\132\141\x2d\x7a\135\x29\77\134\x24\77\x5b\x30\x2d\71\135\53\72\134\x24\77\x28\133\101\x2d\111\x61\55\151\x5d\77\x5b\101\x2d\x5a\141\x2d\x7a\135\x29\x3f\x5c\44\77\x5b\x30\55\x39\x5d\x2b\x24\57\x75", $this->currentToken)) { goto Tfyam; D0Qrw: return $result; goto RAHjG; Tfyam: $result = $this->createTree($this->currentToken, '', ''); goto oEYLz; oEYLz: $this->advance(); goto D0Qrw; RAHjG: } elseif (is_numeric($this->currentToken)) { goto FNnr5; vHGi5: $this->advance(); goto MNu4y; FNnr5: if ($this->lookAhead == "\x25") { $result = $this->createTree("\x70\164\x67\120\145\162\x63\145\x6e\x74", $this->currentToken, ''); $this->advance(); } else { $result = $this->createTree($this->currentToken, '', ''); } goto vHGi5; MNu4y: return $result; goto qm9aK; qm9aK: } elseif (preg_match("\57\x5e\133\101\55\x5a\60\55\x39\xc0\55\334\x5c\56\135\x2b\x24\57\151", $this->currentToken)) { $result = $this->func(); return $result; } goto YzFJB; YzFJB: throw new PHPExcel_Writer_Exception("\x53\171\x6e\x74\x61\170\x20\x65\x72\x72\157\x72\x3a\x20" . $this->currentToken . "\x2c\40\x6c\x6f\157\153\x61\x68\145\x61\144\x3a\40" . $this->lookAhead . "\x2c\x20\x63\x75\162\x72\145\x6e\x74\x20\x63\x68\141\162\x3a\x20" . $this->currentCharacter); goto oHFyh; oHFyh: } private function func() { goto WtiEj; pEuQA: $this->advance(); goto FjJ52; nqVKa: $args = $this->functions[$function][1]; goto vWOaZ; FPHgy: $result = ''; goto bVjse; WtiEj: $num_args = 0; goto avuHM; FjJ52: return $result; goto H9uEg; DjjHw: while ($this->currentToken != "\51") { if ($num_args > 0) { goto L96Z0; kgX4A: $result = $this->createTree("\141\162\147", $result, $result2); goto ZYpjd; L96Z0: if ($this->currentToken == "\54" || $this->currentToken == "\x3b") { $this->advance(); } else { throw new PHPExcel_Writer_Exception("\123\171\x6e\164\141\170\x20\145\x72\x72\157\x72\72\40\x63\157\155\155\x61\40\145\x78\x70\145\143\x74\x65\144\40\x69\x6e\40\146\x75\156\x63\x74\151\x6f\156\x20{$function}\54\x20\x61\x72\147\x20\43{$num_args}"); } goto M0cQq; M0cQq: $result2 = $this->condition(); goto kgX4A; ZYpjd: } else { $result2 = $this->condition(); $result = $this->createTree("\x61\x72\147", '', $result2); } ++$num_args; } goto Y4O63; d1XJT: $this->advance(); goto DjjHw; avuHM: $function = strtoupper($this->currentToken); goto FPHgy; Y4O63: if (!isset($this->functions[$function])) { throw new PHPExcel_Writer_Exception("\106\x75\156\143\164\x69\157\156\x20{$function}\50\51\x20\x64\x6f\145\163\156\47\x74\40\x65\x78\151\x73\x74"); } goto nqVKa; vWOaZ: if ($args >= 0 and $args != $num_args) { throw new PHPExcel_Writer_Exception("\x49\156\143\x6f\x72\162\145\143\164\40\x6e\165\155\142\145\x72\40\157\146\x20\141\x72\147\165\155\145\x6e\164\x73\x20\151\156\40\x66\x75\x6e\x63\164\x69\157\x6e\40{$function}\50\51\x20"); } goto Oa2NI; bVjse: $this->advance(); goto d1XJT; Oa2NI: $result = $this->createTree($function, $result, $num_args); goto pEuQA; H9uEg: } private function createTree($value, $left, $right) { return array("\166\x61\x6c\165\x65" => $value, "\154\145\x66\164" => $left, "\x72\151\147\150\x74" => $right); } public function toReversePolish($tree = array()) { goto di0xz; u2UdV: if (empty($tree)) { $tree = $this->parseTree; } goto GxKBb; u_C9c: if (is_array($tree["\162\x69\x67\x68\164"])) { $converted_tree = $this->toReversePolish($tree["\x72\151\x67\x68\x74"]); $polish .= $converted_tree; } elseif ($tree["\162\x69\x67\x68\x74"] != '') { $converted_tree = $this->convert($tree["\x72\x69\147\150\x74"]); $polish .= $converted_tree; } goto XFHS9; XFHS9: if (preg_match("\x2f\x5e\x5b\x41\55\132\60\55\x39\300\x2d\334\134\56\135\53\x24\x2f", $tree["\166\x61\x6c\165\x65"]) and !preg_match("\57\136\50\x5b\x41\x2d\x49\x61\55\x69\x5d\x3f\x5b\x41\x2d\x5a\x61\x2d\172\135\x29\50\134\x64\x2b\x29\x24\57", $tree["\x76\141\154\165\145"]) and !preg_match("\x2f\136\x5b\101\55\x49\x61\55\x69\x5d\77\x5b\x41\55\132\141\55\x7a\x5d\x28\134\x64\x2b\51\x5c\56\134\56\133\x41\x2d\111\x61\x2d\151\135\x3f\x5b\x41\55\132\x61\x2d\x7a\x5d\50\x5c\x64\x2b\x29\44\x2f", $tree["\166\x61\x6c\x75\x65"]) and !is_numeric($tree["\x76\141\154\x75\x65"]) and !isset($this->ptg[$tree["\166\x61\x6c\x75\x65"]])) { if ($tree["\x6c\x65\146\x74"] != '') { $left_tree = $this->toReversePolish($tree["\x6c\x65\x66\x74"]); } else { $left_tree = ''; } return $left_tree . $this->convertFunction($tree["\166\141\x6c\165\x65"], $tree["\x72\x69\147\x68\164"]); } else { $converted_tree = $this->convert($tree["\x76\141\x6c\165\145"]); } goto r8vv6; r8vv6: $polish .= $converted_tree; goto RpHbw; GxKBb: if (is_array($tree["\x6c\x65\146\x74"])) { $converted_tree = $this->toReversePolish($tree["\154\145\x66\x74"]); $polish .= $converted_tree; } elseif ($tree["\154\x65\146\164"] != '') { $converted_tree = $this->convert($tree["\154\145\146\164"]); $polish .= $converted_tree; } goto u_C9c; di0xz: $polish = ''; goto u2UdV; RpHbw: return $polish; goto Zqk0i; Zqk0i: } }
