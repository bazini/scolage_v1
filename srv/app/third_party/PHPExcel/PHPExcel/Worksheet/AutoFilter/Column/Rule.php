<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:08              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Worksheet_AutoFilter_Column_Rule { const AUTOFILTER_RULETYPE_FILTER = "\146\x69\x6c\164\x65\x72"; const AUTOFILTER_RULETYPE_DATEGROUP = "\x64\x61\x74\145\107\162\x6f\x75\160\111\x74\x65\155"; const AUTOFILTER_RULETYPE_CUSTOMFILTER = "\143\x75\163\164\157\155\x46\151\154\x74\145\x72"; const AUTOFILTER_RULETYPE_DYNAMICFILTER = "\144\171\x6e\141\x6d\151\143\x46\151\x6c\x74\x65\162"; const AUTOFILTER_RULETYPE_TOPTENFILTER = "\x74\157\160\61\60\x46\151\154\x74\x65\162"; private static $ruleTypes = array(self::AUTOFILTER_RULETYPE_FILTER, self::AUTOFILTER_RULETYPE_DATEGROUP, self::AUTOFILTER_RULETYPE_CUSTOMFILTER, self::AUTOFILTER_RULETYPE_DYNAMICFILTER, self::AUTOFILTER_RULETYPE_TOPTENFILTER); const AUTOFILTER_RULETYPE_DATEGROUP_YEAR = "\171\145\141\x72"; const AUTOFILTER_RULETYPE_DATEGROUP_MONTH = "\x6d\157\x6e\x74\x68"; const AUTOFILTER_RULETYPE_DATEGROUP_DAY = "\x64\x61\171"; const AUTOFILTER_RULETYPE_DATEGROUP_HOUR = "\x68\157\165\x72"; const AUTOFILTER_RULETYPE_DATEGROUP_MINUTE = "\x6d\151\x6e\x75\164\x65"; const AUTOFILTER_RULETYPE_DATEGROUP_SECOND = "\163\x65\x63\157\156\144"; private static $dateTimeGroups = array(self::AUTOFILTER_RULETYPE_DATEGROUP_YEAR, self::AUTOFILTER_RULETYPE_DATEGROUP_MONTH, self::AUTOFILTER_RULETYPE_DATEGROUP_DAY, self::AUTOFILTER_RULETYPE_DATEGROUP_HOUR, self::AUTOFILTER_RULETYPE_DATEGROUP_MINUTE, self::AUTOFILTER_RULETYPE_DATEGROUP_SECOND); const AUTOFILTER_RULETYPE_DYNAMIC_YESTERDAY = "\x79\145\163\x74\145\x72\x64\141\171"; const AUTOFILTER_RULETYPE_DYNAMIC_TODAY = "\164\157\x64\141\x79"; const AUTOFILTER_RULETYPE_DYNAMIC_TOMORROW = "\164\157\x6d\x6f\x72\x72\157\x77"; const AUTOFILTER_RULETYPE_DYNAMIC_YEARTODATE = "\x79\145\x61\162\x54\157\x44\x61\164\x65"; const AUTOFILTER_RULETYPE_DYNAMIC_THISYEAR = "\x74\150\151\x73\131\x65\x61\162"; const AUTOFILTER_RULETYPE_DYNAMIC_THISQUARTER = "\164\150\151\x73\121\165\141\x72\x74\145\x72"; const AUTOFILTER_RULETYPE_DYNAMIC_THISMONTH = "\x74\150\x69\x73\115\157\x6e\164\150"; const AUTOFILTER_RULETYPE_DYNAMIC_THISWEEK = "\164\x68\151\163\x57\x65\145\x6b"; const AUTOFILTER_RULETYPE_DYNAMIC_LASTYEAR = "\x6c\141\163\x74\x59\x65\x61\x72"; const AUTOFILTER_RULETYPE_DYNAMIC_LASTQUARTER = "\154\141\x73\164\121\165\141\x72\x74\x65\x72"; const AUTOFILTER_RULETYPE_DYNAMIC_LASTMONTH = "\x6c\x61\x73\164\115\x6f\x6e\x74\x68"; const AUTOFILTER_RULETYPE_DYNAMIC_LASTWEEK = "\x6c\141\163\164\127\x65\x65\153"; const AUTOFILTER_RULETYPE_DYNAMIC_NEXTYEAR = "\x6e\145\x78\164\x59\x65\x61\162"; const AUTOFILTER_RULETYPE_DYNAMIC_NEXTQUARTER = "\x6e\x65\170\164\121\x75\141\x72\x74\145\162"; const AUTOFILTER_RULETYPE_DYNAMIC_NEXTMONTH = "\156\x65\x78\x74\x4d\x6f\x6e\x74\150"; const AUTOFILTER_RULETYPE_DYNAMIC_NEXTWEEK = "\156\145\x78\164\x57\145\x65\x6b"; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_1 = "\115\x31"; const AUTOFILTER_RULETYPE_DYNAMIC_JANUARY = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_1; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_2 = "\x4d\x32"; const AUTOFILTER_RULETYPE_DYNAMIC_FEBRUARY = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_2; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_3 = "\115\63"; const AUTOFILTER_RULETYPE_DYNAMIC_MARCH = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_3; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_4 = "\x4d\x34"; const AUTOFILTER_RULETYPE_DYNAMIC_APRIL = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_4; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_5 = "\x4d\65"; const AUTOFILTER_RULETYPE_DYNAMIC_MAY = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_5; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_6 = "\x4d\66"; const AUTOFILTER_RULETYPE_DYNAMIC_JUNE = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_6; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_7 = "\115\67"; const AUTOFILTER_RULETYPE_DYNAMIC_JULY = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_7; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_8 = "\x4d\x38"; const AUTOFILTER_RULETYPE_DYNAMIC_AUGUST = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_8; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_9 = "\x4d\x39"; const AUTOFILTER_RULETYPE_DYNAMIC_SEPTEMBER = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_9; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_10 = "\115\61\x30"; const AUTOFILTER_RULETYPE_DYNAMIC_OCTOBER = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_10; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_11 = "\115\x31\61"; const AUTOFILTER_RULETYPE_DYNAMIC_NOVEMBER = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_11; const AUTOFILTER_RULETYPE_DYNAMIC_MONTH_12 = "\x4d\61\x32"; const AUTOFILTER_RULETYPE_DYNAMIC_DECEMBER = self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_12; const AUTOFILTER_RULETYPE_DYNAMIC_QUARTER_1 = "\121\61"; const AUTOFILTER_RULETYPE_DYNAMIC_QUARTER_2 = "\121\62"; const AUTOFILTER_RULETYPE_DYNAMIC_QUARTER_3 = "\x51\63"; const AUTOFILTER_RULETYPE_DYNAMIC_QUARTER_4 = "\121\64"; const AUTOFILTER_RULETYPE_DYNAMIC_ABOVEAVERAGE = "\141\142\157\x76\x65\101\166\x65\162\x61\147\145"; const AUTOFILTER_RULETYPE_DYNAMIC_BELOWAVERAGE = "\142\145\154\157\x77\101\166\145\x72\x61\x67\145"; private static $dynamicTypes = array(self::AUTOFILTER_RULETYPE_DYNAMIC_YESTERDAY, self::AUTOFILTER_RULETYPE_DYNAMIC_TODAY, self::AUTOFILTER_RULETYPE_DYNAMIC_TOMORROW, self::AUTOFILTER_RULETYPE_DYNAMIC_YEARTODATE, self::AUTOFILTER_RULETYPE_DYNAMIC_THISYEAR, self::AUTOFILTER_RULETYPE_DYNAMIC_THISQUARTER, self::AUTOFILTER_RULETYPE_DYNAMIC_THISMONTH, self::AUTOFILTER_RULETYPE_DYNAMIC_THISWEEK, self::AUTOFILTER_RULETYPE_DYNAMIC_LASTYEAR, self::AUTOFILTER_RULETYPE_DYNAMIC_LASTQUARTER, self::AUTOFILTER_RULETYPE_DYNAMIC_LASTMONTH, self::AUTOFILTER_RULETYPE_DYNAMIC_LASTWEEK, self::AUTOFILTER_RULETYPE_DYNAMIC_NEXTYEAR, self::AUTOFILTER_RULETYPE_DYNAMIC_NEXTQUARTER, self::AUTOFILTER_RULETYPE_DYNAMIC_NEXTMONTH, self::AUTOFILTER_RULETYPE_DYNAMIC_NEXTWEEK, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_1, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_2, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_3, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_4, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_5, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_6, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_7, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_8, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_9, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_10, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_11, self::AUTOFILTER_RULETYPE_DYNAMIC_MONTH_12, self::AUTOFILTER_RULETYPE_DYNAMIC_QUARTER_1, self::AUTOFILTER_RULETYPE_DYNAMIC_QUARTER_2, self::AUTOFILTER_RULETYPE_DYNAMIC_QUARTER_3, self::AUTOFILTER_RULETYPE_DYNAMIC_QUARTER_4, self::AUTOFILTER_RULETYPE_DYNAMIC_ABOVEAVERAGE, self::AUTOFILTER_RULETYPE_DYNAMIC_BELOWAVERAGE); const AUTOFILTER_COLUMN_RULE_EQUAL = "\145\161\165\141\154"; const AUTOFILTER_COLUMN_RULE_NOTEQUAL = "\x6e\x6f\x74\105\161\165\141\154"; const AUTOFILTER_COLUMN_RULE_GREATERTHAN = "\147\x72\145\x61\x74\x65\x72\x54\150\141\156"; const AUTOFILTER_COLUMN_RULE_GREATERTHANOREQUAL = "\x67\x72\x65\141\164\145\x72\x54\150\x61\156\x4f\x72\x45\x71\165\141\154"; const AUTOFILTER_COLUMN_RULE_LESSTHAN = "\x6c\x65\163\163\x54\x68\141\x6e"; const AUTOFILTER_COLUMN_RULE_LESSTHANOREQUAL = "\154\145\163\x73\x54\150\141\x6e\117\x72\x45\161\x75\x61\154"; private static $operators = array(self::AUTOFILTER_COLUMN_RULE_EQUAL, self::AUTOFILTER_COLUMN_RULE_NOTEQUAL, self::AUTOFILTER_COLUMN_RULE_GREATERTHAN, self::AUTOFILTER_COLUMN_RULE_GREATERTHANOREQUAL, self::AUTOFILTER_COLUMN_RULE_LESSTHAN, self::AUTOFILTER_COLUMN_RULE_LESSTHANOREQUAL); const AUTOFILTER_COLUMN_RULE_TOPTEN_BY_VALUE = "\142\x79\x56\x61\154\x75\145"; const AUTOFILTER_COLUMN_RULE_TOPTEN_PERCENT = "\142\x79\120\145\162\143\145\x6e\164"; private static $topTenValue = array(self::AUTOFILTER_COLUMN_RULE_TOPTEN_BY_VALUE, self::AUTOFILTER_COLUMN_RULE_TOPTEN_PERCENT); const AUTOFILTER_COLUMN_RULE_TOPTEN_TOP = "\x74\x6f\x70"; const AUTOFILTER_COLUMN_RULE_TOPTEN_BOTTOM = "\142\157\x74\x74\x6f\155"; private static $topTenType = array(self::AUTOFILTER_COLUMN_RULE_TOPTEN_TOP, self::AUTOFILTER_COLUMN_RULE_TOPTEN_BOTTOM); private $parent = null; private $ruleType = self::AUTOFILTER_RULETYPE_FILTER; private $value = ''; private $operator = self::AUTOFILTER_COLUMN_RULE_EQUAL; private $grouping = ''; public function __construct(PHPExcel_Worksheet_AutoFilter_Column $pParent = null) { $this->parent = $pParent; } public function getRuleType() { return $this->ruleType; } public function setRuleType($pRuleType = self::AUTOFILTER_RULETYPE_FILTER) { goto WRjGX; u_iQd: return $this; goto P459b; WDzXy: $this->ruleType = $pRuleType; goto u_iQd; WRjGX: if (!in_array($pRuleType, self::$ruleTypes)) { throw new PHPExcel_Exception("\x49\x6e\166\x61\x6c\x69\144\40\162\165\x6c\x65\40\x74\171\160\145\x20\146\157\x72\40\143\x6f\x6c\165\155\156\x20\x41\165\x74\157\x46\x69\154\164\145\162\x20\x52\x75\154\145\x2e"); } goto WDzXy; P459b: } public function getValue() { return $this->value; } public function setValue($pValue = '') { goto CTZj1; CTZj1: if (is_array($pValue)) { goto T6AjE; iYYlc: $this->setGrouping(self::$dateTimeGroups[$grouping]); goto hJFQA; vLqIr: if (count($pValue) == 0) { throw new PHPExcel_Exception("\x49\156\166\141\154\151\x64\40\x72\165\x6c\145\40\166\141\x6c\165\145\x20\x66\x6f\162\x20\143\157\x6c\x75\x6d\156\x20\101\x75\x74\157\x46\151\x6c\164\145\162\x20\122\x75\x6c\145\56"); } goto iYYlc; T6AjE: $grouping = -1; goto Jf0zw; Jf0zw: foreach ($pValue as $key => $value) { if (!in_array($key, self::$dateTimeGroups)) { unset($pValue[$key]); } else { $grouping = max($grouping, array_search($key, self::$dateTimeGroups)); } } goto vLqIr; hJFQA: } goto QcWm7; QcWm7: $this->value = $pValue; goto uA1JV; uA1JV: return $this; goto BUyVb; BUyVb: } public function getOperator() { return $this->operator; } public function setOperator($pOperator = self::AUTOFILTER_COLUMN_RULE_EQUAL) { goto Sk9G5; iSnER: if (!in_array($pOperator, self::$operators) && !in_array($pOperator, self::$topTenValue)) { throw new PHPExcel_Exception("\x49\x6e\x76\141\154\151\144\x20\x6f\x70\x65\x72\x61\x74\x6f\162\x20\x66\x6f\162\40\x63\x6f\154\165\x6d\156\40\101\x75\164\x6f\106\151\x6c\x74\145\162\x20\122\165\x6c\145\56"); } goto J1Ln0; Sk9G5: if (empty($pOperator)) { $pOperator = self::AUTOFILTER_COLUMN_RULE_EQUAL; } goto iSnER; J1Ln0: $this->operator = $pOperator; goto dptxf; dptxf: return $this; goto xSf4F; xSf4F: } public function getGrouping() { return $this->grouping; } public function setGrouping($pGrouping = null) { goto u751f; u751f: if ($pGrouping !== null && !in_array($pGrouping, self::$dateTimeGroups) && !in_array($pGrouping, self::$dynamicTypes) && !in_array($pGrouping, self::$topTenType)) { throw new PHPExcel_Exception("\x49\156\x76\x61\x6c\x69\x64\x20\162\165\154\145\40\x74\171\160\x65\40\146\157\162\x20\x63\157\154\x75\x6d\156\x20\x41\x75\164\157\106\151\x6c\164\x65\162\x20\122\165\154\145\56"); } goto HmTny; oITBs: return $this; goto LiP8s; HmTny: $this->grouping = $pGrouping; goto oITBs; LiP8s: } public function setRule($pOperator = self::AUTOFILTER_COLUMN_RULE_EQUAL, $pValue = '', $pGrouping = null) { goto KO8PB; DZHBH: return $this; goto elE2q; KO8PB: $this->setOperator($pOperator); goto y57uv; QdWgx: if ($pGrouping !== null) { $this->setGrouping($pGrouping); } goto DZHBH; y57uv: $this->setValue($pValue); goto QdWgx; elE2q: } public function getParent() { return $this->parent; } public function setParent(PHPExcel_Worksheet_AutoFilter_Column $pParent = null) { $this->parent = $pParent; return $this; } public function __clone() { $vars = get_object_vars($this); foreach ($vars as $key => $value) { if (is_object($value)) { if ($key == "\x70\x61\x72\x65\x6e\164") { $this->{$key} = null; } else { $this->{$key} = clone $value; } } else { $this->{$key} = $value; } } } }
