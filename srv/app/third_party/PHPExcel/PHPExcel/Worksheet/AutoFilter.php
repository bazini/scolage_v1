<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:08              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Worksheet_AutoFilter { private $workSheet; private $range = ''; private $columns = array(); public function __construct($pRange = '', PHPExcel_Worksheet $pSheet = null) { $this->range = $pRange; $this->workSheet = $pSheet; } public function getParent() { return $this->workSheet; } public function setParent(PHPExcel_Worksheet $pSheet = null) { $this->workSheet = $pSheet; return $this; } public function getRange() { return $this->range; } public function setRange($pRange = '') { goto pqWrP; onYdg: if (strpos($pRange, "\x3a") !== false) { $this->range = $pRange; } elseif (empty($pRange)) { $this->range = ''; } else { throw new PHPExcel_Exception("\x41\x75\164\x6f\146\x69\x6c\x74\145\x72\x20\155\x75\x73\164\40\x62\x65\40\163\x65\164\x20\157\156\40\x61\x20\x72\141\156\x67\145\40\x6f\x66\x20\143\145\154\154\x73\x2e"); } goto hby78; pqWrP: $cellAddress = explode("\x21", strtoupper($pRange)); goto J2LJL; hby78: if (empty($pRange)) { $this->columns = array(); } else { list($rangeStart, $rangeEnd) = PHPExcel_Cell::rangeBoundaries($this->range); foreach ($this->columns as $key => $value) { $colIndex = PHPExcel_Cell::columnIndexFromString($key); if ($rangeStart[0] > $colIndex || $rangeEnd[0] < $colIndex) { unset($this->columns[$key]); } } } goto HG9kK; J2LJL: if (count($cellAddress) > 1) { list($worksheet, $pRange) = $cellAddress; } goto onYdg; HG9kK: return $this; goto J39kr; J39kr: } public function getColumns() { return $this->columns; } public function testColumnInRange($column) { goto p4uru; WRsBf: $columnIndex = PHPExcel_Cell::columnIndexFromString($column); goto Grmjm; UbAYp: return $columnIndex - $rangeStart[0]; goto rWAfx; Grmjm: list($rangeStart, $rangeEnd) = PHPExcel_Cell::rangeBoundaries($this->range); goto al5sj; al5sj: if ($rangeStart[0] > $columnIndex || $rangeEnd[0] < $columnIndex) { throw new PHPExcel_Exception("\x43\157\154\165\155\156\40\151\163\40\157\x75\164\163\x69\x64\145\x20\157\x66\40\143\165\x72\x72\x65\x6e\164\x20\141\x75\x74\157\146\x69\x6c\164\x65\162\40\162\141\156\x67\145\56"); } goto UbAYp; p4uru: if (empty($this->range)) { throw new PHPExcel_Exception("\116\x6f\x20\x61\x75\164\157\146\151\154\x74\145\x72\40\162\x61\156\x67\145\x20\x69\163\40\x64\x65\x66\x69\x6e\145\144\56"); } goto WRsBf; rWAfx: } public function getColumnOffset($pColumn) { return $this->testColumnInRange($pColumn); } public function getColumn($pColumn) { goto TC1YV; MNakF: if (!isset($this->columns[$pColumn])) { $this->columns[$pColumn] = new PHPExcel_Worksheet_AutoFilter_Column($pColumn, $this); } goto k5SEN; k5SEN: return $this->columns[$pColumn]; goto oTeos; TC1YV: $this->testColumnInRange($pColumn); goto MNakF; oTeos: } public function getColumnByOffset($pColumnOffset = 0) { goto AFje2; AFje2: list($rangeStart, $rangeEnd) = PHPExcel_Cell::rangeBoundaries($this->range); goto KOs7t; KOs7t: $pColumn = PHPExcel_Cell::stringFromColumnIndex($rangeStart[0] + $pColumnOffset - 1); goto Tn71G; Tn71G: return $this->getColumn($pColumn); goto xM52a; xM52a: } public function setColumn($pColumn) { goto Unbsn; jRjEj: if (is_string($pColumn)) { $this->columns[$pColumn] = new PHPExcel_Worksheet_AutoFilter_Column($pColumn, $this); } elseif (is_object($pColumn) && $pColumn instanceof PHPExcel_Worksheet_AutoFilter_Column) { $pColumn->setParent($this); $this->columns[$column] = $pColumn; } goto Ill01; JuGcE: $this->testColumnInRange($column); goto jRjEj; zQmgq: return $this; goto r5IQL; Unbsn: if (is_string($pColumn) && !empty($pColumn)) { $column = $pColumn; } elseif (is_object($pColumn) && $pColumn instanceof PHPExcel_Worksheet_AutoFilter_Column) { $column = $pColumn->getColumnIndex(); } else { throw new PHPExcel_Exception("\103\x6f\154\165\x6d\x6e\40\151\x73\40\156\157\x74\40\x77\x69\x74\x68\151\x6e\x20\x74\150\145\40\x61\x75\164\x6f\x66\x69\154\x74\145\x72\x20\x72\141\156\x67\145\x2e"); } goto JuGcE; Ill01: ksort($this->columns); goto zQmgq; r5IQL: } public function clearColumn($pColumn) { goto POeoL; POeoL: $this->testColumnInRange($pColumn); goto IQQ3v; sX1xQ: return $this; goto et1k4; IQQ3v: if (isset($this->columns[$pColumn])) { unset($this->columns[$pColumn]); } goto sX1xQ; et1k4: } public function shiftColumn($fromColumn = null, $toColumn = null) { goto jC0qL; o5bc_: return $this; goto rF8qg; DcDb0: $toColumn = strtoupper($toColumn); goto pqsn_; jC0qL: $fromColumn = strtoupper($fromColumn); goto DcDb0; pqsn_: if ($fromColumn !== null && isset($this->columns[$fromColumn]) && $toColumn !== null) { goto zdN9T; UIYMf: $this->columns[$toColumn]->setParent($this); goto EECR7; lLmZi: $this->columns[$fromColumn]->setColumnIndex($toColumn); goto CX9Nv; EECR7: unset($this->columns[$fromColumn]); goto BBFDz; CX9Nv: $this->columns[$toColumn] = $this->columns[$fromColumn]; goto UIYMf; zdN9T: $this->columns[$fromColumn]->setParent(); goto lLmZi; BBFDz: ksort($this->columns); goto XSgnR; XSgnR: } goto o5bc_; rF8qg: } private static function filterTestInSimpleDataSet($cellValue, $dataSet) { goto LqyMp; L3Tu_: $blanks = $dataSet["\142\x6c\x61\156\153\163"]; goto GX0e4; CB_DO: return in_array($cellValue, $dataSetValues); goto dE8mU; LqyMp: $dataSetValues = $dataSet["\x66\x69\x6c\164\x65\162\126\x61\x6c\x75\145\163"]; goto L3Tu_; GX0e4: if ($cellValue == '' || $cellValue === null) { return $blanks; } goto CB_DO; dE8mU: } private static function filterTestInDateGroupSet($cellValue, $dataSet) { goto YF1XN; tvd1j: $blanks = $dataSet["\142\154\x61\156\x6b\x73"]; goto vd4wZ; QbWiQ: return false; goto MSHT_; vd4wZ: if ($cellValue == '' || $cellValue === null) { return $blanks; } goto TbnsO; TbnsO: if (is_numeric($cellValue)) { goto IHNyT; IHNyT: $dateValue = PHPExcel_Shared_Date::ExcelToPHP($cellValue); goto EprJQ; EprJQ: if ($cellValue < 1) { $dtVal = date("\110\x69\163", $dateValue); $dateSet = $dateSet["\x74\x69\155\145"]; } elseif ($cellValue == floor($cellValue)) { $dtVal = date("\x59\155\144", $dateValue); $dateSet = $dateSet["\144\x61\164\145"]; } else { $dtVal = date("\131\x6d\144\110\x69\163", $dateValue); $dateSet = $dateSet["\x64\141\164\145\x54\151\x6d\145"]; } goto c1o9N; c1o9N: foreach ($dateSet as $dateValue) { if (substr($dtVal, 0, strlen($dateValue)) == $dateValue) { return true; } } goto aoYks; aoYks: } goto QbWiQ; YF1XN: $dateSet = $dataSet["\146\151\x6c\x74\145\162\x56\141\154\165\145\x73"]; goto tvd1j; MSHT_: } private static function filterTestInCustomDataSet($cellValue, $ruleSet) { goto cmZjO; A8wy7: $customRuleForBlanks = isset($ruleSet["\x63\x75\163\x74\157\155\122\x75\x6c\145\106\157\x72\102\154\141\156\153\x73"]) ? $ruleSet["\x63\x75\163\164\157\x6d\122\165\154\145\x46\x6f\162\x42\x6c\x61\x6e\x6b\163"] : false; goto RUKXa; j1sZi: $returnVal = $join == PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_COLUMN_JOIN_AND; goto yH2Kp; wj4Yg: return $returnVal; goto Hg7HJ; RUKXa: if (!$customRuleForBlanks) { if ($cellValue == '' || $cellValue === null) { return false; } } goto j1sZi; cmZjO: $dataSet = $ruleSet["\x66\151\x6c\x74\x65\162\x52\165\x6c\145\163"]; goto ibgHd; yH2Kp: foreach ($dataSet as $rule) { if (is_numeric($rule["\166\x61\x6c\x75\x65"])) { switch ($rule["\157\160\145\162\141\164\x6f\x72"]) { case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_EQUAL: $retVal = $cellValue == $rule["\166\x61\154\165\145"]; break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_NOTEQUAL: $retVal = $cellValue != $rule["\166\141\154\165\145"]; break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_GREATERTHAN: $retVal = $cellValue > $rule["\166\x61\154\165\145"]; break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_GREATERTHANOREQUAL: $retVal = $cellValue >= $rule["\166\x61\x6c\x75\145"]; break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_LESSTHAN: $retVal = $cellValue < $rule["\166\141\154\x75\145"]; break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_LESSTHANOREQUAL: $retVal = $cellValue <= $rule["\166\141\154\165\145"]; break; } } elseif ($rule["\166\x61\154\x75\x65"] == '') { switch ($rule["\157\x70\145\x72\x61\x74\157\x72"]) { case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_EQUAL: $retVal = $cellValue == '' || $cellValue === null; break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_NOTEQUAL: $retVal = $cellValue != '' && $cellValue !== null; break; default: $retVal = true; break; } } else { $retVal = preg_match("\57\x5e" . $rule["\x76\141\154\165\x65"] . "\x24\x2f\x69", $cellValue); } switch ($join) { case PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_COLUMN_JOIN_OR: goto jruIH; jruIH: $returnVal = $returnVal || $retVal; goto Ll8p4; zq8Fx: break; goto ItxIh; Ll8p4: if ($returnVal) { return $returnVal; } goto zq8Fx; ItxIh: case PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_COLUMN_JOIN_AND: $returnVal = $returnVal && $retVal; break; } } goto wj4Yg; ibgHd: $join = $ruleSet["\x6a\x6f\x69\156"]; goto A8wy7; Hg7HJ: } private static function filterTestInPeriodDateSet($cellValue, $monthSet) { goto JCZa9; ILSXo: if (is_numeric($cellValue)) { $dateValue = date("\155", PHPExcel_Shared_Date::ExcelToPHP($cellValue)); if (in_array($dateValue, $monthSet)) { return true; } } goto TRe61; TRe61: return false; goto tNZAo; JCZa9: if ($cellValue == '' || $cellValue === null) { return false; } goto ILSXo; tNZAo: } private static $fromReplace = array("\x5c\x2a", "\134\77", "\x7e\x7e", "\x7e\x2e\52", "\x7e\56\77"); private static $toReplace = array("\56\52", "\x2e", "\176", "\x5c\x2a", "\134\77"); private function dynamicFilterDateRange($dynamicRuleType, &$filterColumn) { goto Z1Uln; KajNF: switch ($dynamicRuleType) { case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_TODAY: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_YESTERDAY: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_TOMORROW: goto dfN2m; dfN2m: $maxVal = (int) PHPExcel_Shared_Date::PHPtoExcel(strtotime("\x2b\61\x20\x64\141\171", $baseDate)); goto xJPY2; xJPY2: $val = (int) PHPExcel_Shared_Date::PHPToExcel($baseDate); goto FsruF; FsruF: break; goto CyL73; CyL73: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_YEARTODATE: goto LIfTk; LIfTk: $maxVal = (int) PHPExcel_Shared_Date::PHPtoExcel(strtotime("\53\61\x20\x64\x61\x79", $baseDate)); goto UAWYz; v_AkD: break; goto oSrQR; UAWYz: $val = (int) PHPExcel_Shared_Date::PHPToExcel(gmmktime(0, 0, 0, 1, 1, date("\x59", $baseDate))); goto v_AkD; oSrQR: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_THISYEAR: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_LASTYEAR: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_NEXTYEAR: goto DKnuZ; Bgqp7: break; goto WcPYG; VPQ3V: $val = (int) PHPExcel_Shared_Date::PHPToExcel(gmmktime(0, 0, 0, 1, 1, date("\131", $baseDate))); goto Bgqp7; x7aAM: ++$maxVal; goto VPQ3V; DKnuZ: $maxVal = (int) PHPExcel_Shared_Date::PHPToExcel(gmmktime(0, 0, 0, 31, 12, date("\x59", $baseDate))); goto x7aAM; WcPYG: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_THISQUARTER: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_LASTQUARTER: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_NEXTQUARTER: goto l4R_4; taL2O: $thisQuarter = floor(--$thisMonth / 3); goto aPZa7; Bjlr9: break; goto N9MDR; l4R_4: $thisMonth = date("\x6d", $baseDate); goto taL2O; aPZa7: $maxVal = (int) PHPExcel_Shared_Date::PHPtoExcel(gmmktime(0, 0, 0, date("\164", $baseDate), (1 + $thisQuarter) * 3, date("\x59", $baseDate))); goto og11c; og11c: ++$maxVal; goto I881P; I881P: $val = (int) PHPExcel_Shared_Date::PHPToExcel(gmmktime(0, 0, 0, 1, 1 + $thisQuarter * 3, date("\x59", $baseDate))); goto Bjlr9; N9MDR: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_THISMONTH: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_LASTMONTH: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_NEXTMONTH: goto U7qfn; U7qfn: $maxVal = (int) PHPExcel_Shared_Date::PHPtoExcel(gmmktime(0, 0, 0, date("\x74", $baseDate), date("\155", $baseDate), date("\x59", $baseDate))); goto cfm0v; cfm0v: ++$maxVal; goto gOnDp; dGVzV: break; goto yZcrs; gOnDp: $val = (int) PHPExcel_Shared_Date::PHPToExcel(gmmktime(0, 0, 0, 1, date("\x6d", $baseDate), date("\131", $baseDate))); goto dGVzV; yZcrs: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_THISWEEK: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_LASTWEEK: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_NEXTWEEK: goto ZD2ho; C1c5M: $maxVal = $val + 7; goto jNQW1; jNQW1: break; goto jpfvx; ZD2ho: $dayOfWeek = date("\167", $baseDate); goto S6s7Z; S6s7Z: $val = (int) PHPExcel_Shared_Date::PHPToExcel($baseDate) - $dayOfWeek; goto C1c5M; jpfvx: } goto SlNA5; roRU9: $baseDate = PHPExcel_Calculation_DateTime::DATENOW(); goto iq4ke; KCtl5: $ruleValues[] = array("\x6f\160\145\162\x61\x74\157\x72" => PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_LESSTHAN, "\x76\x61\154\165\145" => $maxVal); goto hodRs; Enyth: $ruleValues = array(); goto roRU9; JGYUr: return array("\x6d\145\164\150\157\x64" => "\x66\x69\154\x74\x65\162\x54\145\x73\164\111\x6e\x43\165\x73\164\157\x6d\104\141\x74\141\123\x65\x74", "\x61\x72\x67\x75\x6d\x65\156\164\163" => array("\x66\x69\154\x74\x65\x72\x52\165\154\x65\163" => $ruleValues, "\x6a\157\151\156" => PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_COLUMN_JOIN_AND)); goto JxMHy; SlNA5: switch ($dynamicRuleType) { case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_YESTERDAY: goto xV0Zo; xV0Zo: --$maxVal; goto xHSYa; xHSYa: --$val; goto ejqEx; ejqEx: break; goto bV2cz; bV2cz: case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_TOMORROW: goto usEkq; tNMY_: ++$val; goto m2DQq; usEkq: ++$maxVal; goto tNMY_; m2DQq: break; goto HbeyL; HbeyL: } goto Zy0MC; Zy0MC: $filterColumn->setAttributes(array("\x76\141\x6c" => $val, "\x6d\x61\x78\x56\141\154" => $maxVal)); goto mbWeb; iq4ke: switch ($dynamicRuleType) { case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_LASTWEEK: $baseDate = strtotime("\55\67\40\144\x61\x79\x73", $baseDate); break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_NEXTWEEK: $baseDate = strtotime("\x2d\x37\x20\x64\x61\171\163", $baseDate); break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_LASTMONTH: $baseDate = strtotime("\55\61\x20\x6d\x6f\156\164\x68", gmmktime(0, 0, 0, 1, date("\155", $baseDate), date("\x59", $baseDate))); break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_NEXTMONTH: $baseDate = strtotime("\x2b\x31\40\x6d\157\x6e\164\150", gmmktime(0, 0, 0, 1, date("\x6d", $baseDate), date("\131", $baseDate))); break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_LASTQUARTER: $baseDate = strtotime("\x2d\x33\x20\155\157\x6e\x74\x68", gmmktime(0, 0, 0, 1, date("\155", $baseDate), date("\131", $baseDate))); break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_NEXTQUARTER: $baseDate = strtotime("\x2b\x33\x20\155\157\156\164\150", gmmktime(0, 0, 0, 1, date("\x6d", $baseDate), date("\x59", $baseDate))); break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_LASTYEAR: $baseDate = strtotime("\x2d\x31\x20\x79\145\x61\x72", gmmktime(0, 0, 0, 1, date("\x6d", $baseDate), date("\131", $baseDate))); break; case PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_NEXTYEAR: $baseDate = strtotime("\x2b\x31\40\171\x65\141\x72", gmmktime(0, 0, 0, 1, date("\x6d", $baseDate), date("\131", $baseDate))); break; } goto KajNF; hodRs: PHPExcel_Calculation_Functions::setReturnDateType($rDateType); goto JGYUr; mbWeb: $ruleValues[] = array("\157\x70\x65\x72\x61\164\157\x72" => PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_GREATERTHANOREQUAL, "\x76\x61\154\x75\x65" => $val); goto KCtl5; elZ3Y: $val = $maxVal = null; goto Enyth; LIBX8: PHPExcel_Calculation_Functions::setReturnDateType(PHPExcel_Calculation_Functions::RETURNDATE_PHP_NUMERIC); goto elZ3Y; Z1Uln: $rDateType = PHPExcel_Calculation_Functions::getReturnDateType(); goto LIBX8; JxMHy: } private function calculateTopTenValue($columnID, $startRow, $endRow, $ruleType, $ruleValue) { goto crxWr; Jsylb: $dataValues = PHPExcel_Calculation_Functions::flattenArray($this->workSheet->rangeToArray($range, null, true, false)); goto Wv7Hp; nHl8R: return array_pop(array_slice($dataValues, 0, $ruleValue)); goto c20lQ; Wv7Hp: $dataValues = array_filter($dataValues); goto QkEhX; crxWr: $range = $columnID . $startRow . "\72" . $columnID . $endRow; goto Jsylb; QkEhX: if ($ruleType == PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_TOPTEN_TOP) { rsort($dataValues); } else { sort($dataValues); } goto nHl8R; c20lQ: } public function showHideRows() { goto jL6nT; Wjzy_: return $this; goto LawKw; Kfv5T: foreach ($this->columns as $columnID => $filterColumn) { $rules = $filterColumn->getRules(); switch ($filterColumn->getFilterType()) { case PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_FILTERTYPE_FILTER: goto piVf2; gTTIk: $ruleDataSet = array_filter($ruleValues); goto zmZA1; AB1mt: $blanks = false; goto gTTIk; zmZA1: if (count($ruleValues) != count($ruleDataSet)) { $blanks = true; } goto r8BMU; r8BMU: if ($ruleType == PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_FILTER) { $columnFilterTests[$columnID] = array("\x6d\x65\x74\150\157\144" => "\146\x69\154\x74\145\x72\124\145\x73\164\111\156\123\151\155\160\154\145\x44\141\x74\x61\x53\145\x74", "\141\x72\147\x75\x6d\x65\x6e\x74\163" => array("\146\x69\x6c\x74\145\162\126\141\x6c\165\145\x73" => $ruleDataSet, "\142\154\x61\156\x6b\163" => $blanks)); } else { goto GpW9Y; fZH0D: $arguments["\x64\x61\x74\x65"] = array_filter($arguments["\x64\x61\164\x65"]); goto nktdx; L9GQ_: $columnFilterTests[$columnID] = array("\155\x65\164\150\x6f\144" => "\x66\151\154\x74\145\162\124\x65\x73\x74\111\156\104\x61\x74\145\107\162\x6f\x75\160\123\145\164", "\x61\162\147\x75\x6d\145\x6e\x74\x73" => array("\x66\x69\x6c\x74\145\162\x56\x61\x6c\x75\145\x73" => $arguments, "\142\154\x61\156\153\163" => $blanks)); goto k0pk7; eT9eK: foreach ($ruleDataSet as $ruleValue) { goto L2W98; Yowc5: if (isset($ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_MONTH]) && $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_MONTH] != '') { $date .= sprintf("\x25\x30\62\144", $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_MONTH]); } goto W6C5d; QsK56: $arguments["\x64\x61\x74\x65\124\x69\x6d\145"][] = $dateTime; goto xyy0I; L2W98: $date = $time = ''; goto pmCbf; e4eVx: $dateTime = $date . $time; goto gY4qw; s6mtc: if (isset($ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_HOUR]) && $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_HOUR] !== '') { $time .= sprintf("\x25\x30\62\x64", $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_HOUR]); } goto oVYyt; gY4qw: $arguments["\x64\141\164\x65"][] = $date; goto jIbsF; jIbsF: $arguments["\164\x69\155\x65"][] = $time; goto QsK56; oVYyt: if (isset($ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_MINUTE]) && $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_MINUTE] !== '') { $time .= sprintf("\45\x30\62\144", $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_MINUTE]); } goto StaeQ; pmCbf: if (isset($ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_YEAR]) && $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_YEAR] !== '') { $date .= sprintf("\x25\x30\x34\144", $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_YEAR]); } goto Yowc5; W6C5d: if (isset($ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_DAY]) && $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_DAY] !== '') { $date .= sprintf("\x25\60\62\x64", $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_DAY]); } goto s6mtc; StaeQ: if (isset($ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_SECOND]) && $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_SECOND] !== '') { $time .= sprintf("\45\60\x32\x64", $ruleValue[PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DATEGROUP_SECOND]); } goto e4eVx; xyy0I: } goto fZH0D; GpW9Y: $arguments = array("\144\x61\164\x65" => array(), "\164\x69\x6d\145" => array(), "\x64\x61\x74\x65\124\x69\x6d\145" => array()); goto eT9eK; jIVCT: $arguments["\x64\141\164\145\x54\x69\155\x65"] = array_filter($arguments["\x64\x61\164\145\x54\x69\x6d\145"]); goto L9GQ_; nktdx: $arguments["\x74\151\x6d\145"] = array_filter($arguments["\x74\151\155\145"]); goto jIVCT; k0pk7: } goto Z1AX6; gIxxV: foreach ($rules as $rule) { $ruleType = $rule->getRuleType(); $ruleValues[] = $rule->getValue(); } goto AB1mt; Z1AX6: break; goto wv5Ih; piVf2: $ruleValues = array(); goto gIxxV; wv5Ih: case PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_FILTERTYPE_CUSTOMFILTER: goto DeajL; xY5wP: foreach ($rules as $rule) { goto Q1X2h; Zv3cQ: $ruleValue = $rule->getValue(); goto NMpOU; Q1X2h: $ruleType = $rule->getRuleType(); goto Zv3cQ; UVDt8: $ruleValues[] = array("\x6f\x70\145\x72\x61\x74\157\x72" => $rule->getOperator(), "\166\x61\x6c\x75\145" => $ruleValue); goto bdUgq; NMpOU: if (!is_numeric($ruleValue)) { goto JRSsu; TjP1v: if (trim($ruleValue) == '') { $customRuleForBlanks = true; $ruleValue = trim($ruleValue); } goto A7uHg; dgbVV: $ruleValue = str_replace(self::$fromReplace, self::$toReplace, $ruleValue); goto TjP1v; JRSsu: $ruleValue = preg_quote($ruleValue); goto dgbVV; A7uHg: } goto UVDt8; bdUgq: } goto MbXVZ; MbXVZ: $join = $filterColumn->getJoin(); goto indB8; bSq_N: $ruleValues = array(); goto xY5wP; DeajL: $customRuleForBlanks = false; goto bSq_N; indB8: $columnFilterTests[$columnID] = array("\x6d\145\x74\150\157\144" => "\x66\151\x6c\164\x65\x72\124\x65\163\x74\111\156\103\165\163\164\x6f\155\x44\141\x74\141\123\145\164", "\141\162\147\x75\155\x65\156\164\x73" => array("\146\151\154\x74\x65\162\122\165\x6c\x65\163" => $ruleValues, "\x6a\157\151\x6e" => $join, "\x63\x75\x73\x74\x6f\x6d\x52\165\x6c\145\106\157\162\102\154\x61\x6e\153\163" => $customRuleForBlanks)); goto LbWp0; LbWp0: break; goto PcJod; PcJod: case PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_FILTERTYPE_DYNAMICFILTER: goto tohSP; aDvBH: foreach ($rules as $rule) { $dynamicRuleType = $rule->getGrouping(); if ($dynamicRuleType == PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_ABOVEAVERAGE || $dynamicRuleType == PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_BELOWAVERAGE) { goto UYY2a; CSFhX: $operator = $dynamicRuleType === PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_RULETYPE_DYNAMIC_ABOVEAVERAGE ? PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_GREATERTHAN : PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_LESSTHAN; goto HZXbB; h2QL5: $columnFilterTests[$columnID] = array("\x6d\145\x74\x68\x6f\x64" => "\146\151\x6c\164\145\x72\124\145\x73\x74\111\x6e\103\165\163\164\157\x6d\x44\141\x74\x61\x53\x65\x74", "\x61\x72\147\x75\155\x65\156\164\x73" => array("\146\151\154\x74\x65\162\x52\165\x6c\145\163" => $ruleValues, "\x6a\157\x69\156" => PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_COLUMN_JOIN_OR)); goto xsjac; HZXbB: $ruleValues[] = array("\x6f\160\x65\162\x61\164\x6f\162" => $operator, "\166\x61\x6c\x75\145" => $average); goto h2QL5; UYY2a: $averageFormula = "\75\101\126\x45\122\101\x47\105\x28" . $columnID . ($rangeStart[1] + 1) . "\x3a" . $columnID . $rangeEnd[1] . "\x29"; goto ZHSU1; ZHSU1: $average = PHPExcel_Calculation::getInstance()->calculateFormula($averageFormula, null, $this->workSheet->getCell("\101\x31")); goto CSFhX; xsjac: } else { if ($dynamicRuleType[0] == "\x4d" || $dynamicRuleType[0] == "\x51") { goto wkm0R; SuGnD: $filterColumn->setAttributes(array()); goto g5l6n; ByU8_: if ($periodType == "\115") { $ruleValues = array($period); } else { goto kYaaI; kYaaI: --$period; goto beTQO; BgbNz: $periodStart = 1 + $period * 3; goto llsu1; llsu1: $ruleValues = range($periodStart, $periodEnd); goto OHutF; beTQO: $periodEnd = (1 + $period) * 3; goto BgbNz; OHutF: } goto Axipn; Axipn: $columnFilterTests[$columnID] = array("\x6d\x65\x74\x68\x6f\144" => "\146\151\154\164\145\x72\124\x65\x73\x74\x49\x6e\120\x65\x72\151\x6f\x64\x44\x61\164\x65\123\145\164", "\x61\x72\x67\x75\x6d\145\x6e\164\x73" => $ruleValues); goto SuGnD; wkm0R: sscanf($dynamicRuleType, "\x25\x5b\x41\x2d\x5a\x5d\45\144", $periodType, $period); goto ByU8_; g5l6n: } else { $columnFilterTests[$columnID] = $this->dynamicFilterDateRange($dynamicRuleType, $filterColumn); break; } } } goto GC12l; tohSP: $ruleValues = array(); goto aDvBH; GC12l: break; goto eLoj8; eLoj8: case PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_FILTERTYPE_TOPTENFILTER: goto AQs6c; rJr0d: $maxVal = $this->calculateTopTenValue($columnID, $rangeStart[1] + 1, $rangeEnd[1], $toptenRuleType, $ruleValue); goto FHpOX; y0nnY: if ($ruleValue > 500) { $ruleValue = 500; } goto rJr0d; aDz8U: foreach ($rules as $rule) { goto CHtW2; YUbsE: $ruleValue = $rule->getValue(); goto YEkZB; CHtW2: $toptenRuleType = $rule->getGrouping(); goto YUbsE; YEkZB: $ruleOperator = $rule->getOperator(); goto A4WkO; A4WkO: } goto TyBHX; cojrT: $filterColumn->setAttributes(array("\155\141\x78\x56\x61\x6c" => $maxVal)); goto Pc42v; BKQEe: $columnFilterTests[$columnID] = array("\x6d\x65\164\x68\x6f\144" => "\146\151\154\164\145\x72\x54\x65\163\164\x49\156\103\165\163\x74\x6f\155\x44\141\164\x61\123\x65\x74", "\141\162\x67\165\155\145\156\x74\163" => array("\146\x69\x6c\x74\x65\x72\x52\x75\x6c\x65\163" => $ruleValues, "\152\x6f\x69\156" => PHPExcel_Worksheet_AutoFilter_Column::AUTOFILTER_COLUMN_JOIN_OR)); goto cojrT; FHpOX: $operator = $toptenRuleType == PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_TOPTEN_TOP ? PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_GREATERTHANOREQUAL : PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_LESSTHANOREQUAL; goto lpMyd; owTkp: $dataRowCount = $rangeEnd[1] - $rangeStart[1]; goto aDz8U; AQs6c: $ruleValues = array(); goto owTkp; dVSof: if ($ruleValue < 1) { $ruleValue = 1; } goto y0nnY; TyBHX: if ($ruleOperator === PHPExcel_Worksheet_AutoFilter_Column_Rule::AUTOFILTER_COLUMN_RULE_TOPTEN_PERCENT) { $ruleValue = floor($ruleValue * ($dataRowCount / 100)); } goto dVSof; lpMyd: $ruleValues[] = array("\157\160\145\x72\x61\164\x6f\162" => $operator, "\166\x61\x6c\165\145" => $maxVal); goto BKQEe; Pc42v: break; goto SLLS8; SLLS8: } } goto h00FO; jL6nT: list($rangeStart, $rangeEnd) = PHPExcel_Cell::rangeBoundaries($this->range); goto u96K5; PfhN_: $columnFilterTests = array(); goto Kfv5T; h00FO: for ($row = $rangeStart[1] + 1; $row <= $rangeEnd[1]; ++$row) { $result = true; foreach ($columnFilterTests as $columnID => $columnFilterTest) { goto byKLD; byKLD: $cellValue = $this->workSheet->getCell($columnID . $row)->getCalculatedValue(); goto sRbh3; sRbh3: $result = $result && call_user_func_array(array("\x50\x48\x50\105\170\x63\x65\x6c\x5f\x57\157\x72\153\x73\150\145\x65\164\137\x41\x75\x74\x6f\106\x69\154\164\x65\162", $columnFilterTest["\155\145\164\150\x6f\x64"]), array($cellValue, $columnFilterTest["\141\x72\147\165\155\x65\156\164\x73"])); goto uWJpg; uWJpg: if (!$result) { break; } goto rDAIv; rDAIv: } $this->workSheet->getRowDimension($row)->setVisible($result); } goto Wjzy_; u96K5: $this->workSheet->getRowDimension($rangeStart[1])->setVisible(true); goto PfhN_; LawKw: } public function __clone() { $vars = get_object_vars($this); foreach ($vars as $key => $value) { if (is_object($value)) { if ($key == "\167\157\x72\x6b\123\150\145\145\x74") { $this->{$key} = null; } else { $this->{$key} = clone $value; } } elseif (is_array($value) && $key == "\143\157\x6c\x75\x6d\156\163") { $this->{$key} = array(); foreach ($value as $k => $v) { $this->{$key}[$k] = clone $v; $this->{$key}[$k]->setParent($this); } } else { $this->{$key} = $value; } } } public function __toString() { return (string) $this->range; } }
