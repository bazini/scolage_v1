<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:07              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Worksheet_HeaderFooter { const IMAGE_HEADER_LEFT = "\x4c\110"; const IMAGE_HEADER_CENTER = "\x43\110"; const IMAGE_HEADER_RIGHT = "\122\x48"; const IMAGE_FOOTER_LEFT = "\114\106"; const IMAGE_FOOTER_CENTER = "\103\x46"; const IMAGE_FOOTER_RIGHT = "\122\106"; private $oddHeader = ''; private $oddFooter = ''; private $evenHeader = ''; private $evenFooter = ''; private $firstHeader = ''; private $firstFooter = ''; private $differentOddEven = false; private $differentFirst = false; private $scaleWithDocument = true; private $alignWithMargins = true; private $headerFooterImages = array(); public function __construct() { } public function getOddHeader() { return $this->oddHeader; } public function setOddHeader($pValue) { $this->oddHeader = $pValue; return $this; } public function getOddFooter() { return $this->oddFooter; } public function setOddFooter($pValue) { $this->oddFooter = $pValue; return $this; } public function getEvenHeader() { return $this->evenHeader; } public function setEvenHeader($pValue) { $this->evenHeader = $pValue; return $this; } public function getEvenFooter() { return $this->evenFooter; } public function setEvenFooter($pValue) { $this->evenFooter = $pValue; return $this; } public function getFirstHeader() { return $this->firstHeader; } public function setFirstHeader($pValue) { $this->firstHeader = $pValue; return $this; } public function getFirstFooter() { return $this->firstFooter; } public function setFirstFooter($pValue) { $this->firstFooter = $pValue; return $this; } public function getDifferentOddEven() { return $this->differentOddEven; } public function setDifferentOddEven($pValue = false) { $this->differentOddEven = $pValue; return $this; } public function getDifferentFirst() { return $this->differentFirst; } public function setDifferentFirst($pValue = false) { $this->differentFirst = $pValue; return $this; } public function getScaleWithDocument() { return $this->scaleWithDocument; } public function setScaleWithDocument($pValue = true) { $this->scaleWithDocument = $pValue; return $this; } public function getAlignWithMargins() { return $this->alignWithMargins; } public function setAlignWithMargins($pValue = true) { $this->alignWithMargins = $pValue; return $this; } public function addImage(PHPExcel_Worksheet_HeaderFooterDrawing $image = null, $location = self::IMAGE_HEADER_LEFT) { $this->headerFooterImages[$location] = $image; return $this; } public function removeImage($location = self::IMAGE_HEADER_LEFT) { if (isset($this->headerFooterImages[$location])) { unset($this->headerFooterImages[$location]); } return $this; } public function setImages($images) { goto vaTVt; d1qWN: return $this; goto gON3R; EKag7: $this->headerFooterImages = $images; goto d1qWN; vaTVt: if (!is_array($images)) { throw new PHPExcel_Exception("\111\156\166\x61\x6c\x69\144\40\x70\x61\162\141\x6d\x65\x74\x65\x72\x21"); } goto EKag7; gON3R: } public function getImages() { goto rQD56; qZ51j: if (isset($this->headerFooterImages[self::IMAGE_HEADER_LEFT])) { $images[self::IMAGE_HEADER_LEFT] = $this->headerFooterImages[self::IMAGE_HEADER_LEFT]; } goto F1Os4; NBXkR: if (isset($this->headerFooterImages[self::IMAGE_HEADER_RIGHT])) { $images[self::IMAGE_HEADER_RIGHT] = $this->headerFooterImages[self::IMAGE_HEADER_RIGHT]; } goto g_2je; Xqn_e: return $this->headerFooterImages; goto WRB4w; g_2je: if (isset($this->headerFooterImages[self::IMAGE_FOOTER_LEFT])) { $images[self::IMAGE_FOOTER_LEFT] = $this->headerFooterImages[self::IMAGE_FOOTER_LEFT]; } goto IdmpC; V7okM: if (isset($this->headerFooterImages[self::IMAGE_FOOTER_RIGHT])) { $images[self::IMAGE_FOOTER_RIGHT] = $this->headerFooterImages[self::IMAGE_FOOTER_RIGHT]; } goto fu674; fu674: $this->headerFooterImages = $images; goto Xqn_e; F1Os4: if (isset($this->headerFooterImages[self::IMAGE_HEADER_CENTER])) { $images[self::IMAGE_HEADER_CENTER] = $this->headerFooterImages[self::IMAGE_HEADER_CENTER]; } goto NBXkR; rQD56: $images = array(); goto qZ51j; IdmpC: if (isset($this->headerFooterImages[self::IMAGE_FOOTER_CENTER])) { $images[self::IMAGE_FOOTER_CENTER] = $this->headerFooterImages[self::IMAGE_FOOTER_CENTER]; } goto V7okM; WRB4w: } public function __clone() { $vars = get_object_vars($this); foreach ($vars as $key => $value) { if (is_object($value)) { $this->{$key} = clone $value; } else { $this->{$key} = $value; } } } }
