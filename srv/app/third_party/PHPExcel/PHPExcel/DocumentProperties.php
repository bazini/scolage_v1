<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:06              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_DocumentProperties { const PROPERTY_TYPE_BOOLEAN = "\142"; const PROPERTY_TYPE_INTEGER = "\151"; const PROPERTY_TYPE_FLOAT = "\146"; const PROPERTY_TYPE_DATE = "\144"; const PROPERTY_TYPE_STRING = "\x73"; const PROPERTY_TYPE_UNKNOWN = "\165"; private $creator = "\x55\156\x6b\x6e\157\167\156\x20\x43\x72\145\x61\164\157\162"; private $lastModifiedBy; private $created; private $modified; private $title = "\x55\156\x74\151\164\154\145\x64\40\123\160\162\145\x61\x64\163\x68\145\x65\164"; private $description = ''; private $subject = ''; private $keywords = ''; private $category = ''; private $manager = ''; private $company = "\x4d\151\143\162\157\x73\x6f\146\x74\40\103\157\x72\160\x6f\162\141\164\x69\x6f\x6e"; private $customProperties = array(); public function __construct() { goto n2G59; sqMTq: $this->created = time(); goto j81wv; n2G59: $this->lastModifiedBy = $this->creator; goto sqMTq; j81wv: $this->modified = time(); goto TJh0N; TJh0N: } public function getCreator() { return $this->creator; } public function setCreator($pValue = '') { $this->creator = $pValue; return $this; } public function getLastModifiedBy() { return $this->lastModifiedBy; } public function setLastModifiedBy($pValue = '') { $this->lastModifiedBy = $pValue; return $this; } public function getCreated() { return $this->created; } public function setCreated($pValue = null) { goto HvJMK; HvJMK: if ($pValue === null) { $pValue = time(); } elseif (is_string($pValue)) { if (is_numeric($pValue)) { $pValue = intval($pValue); } else { $pValue = strtotime($pValue); } } goto tekDQ; tekDQ: $this->created = $pValue; goto TYFsy; TYFsy: return $this; goto tJC_3; tJC_3: } public function getModified() { return $this->modified; } public function setModified($pValue = null) { goto NBvY9; UvRub: $this->modified = $pValue; goto Rm5F3; NBvY9: if ($pValue === null) { $pValue = time(); } elseif (is_string($pValue)) { if (is_numeric($pValue)) { $pValue = intval($pValue); } else { $pValue = strtotime($pValue); } } goto UvRub; Rm5F3: return $this; goto w1VTN; w1VTN: } public function getTitle() { return $this->title; } public function setTitle($pValue = '') { $this->title = $pValue; return $this; } public function getDescription() { return $this->description; } public function setDescription($pValue = '') { $this->description = $pValue; return $this; } public function getSubject() { return $this->subject; } public function setSubject($pValue = '') { $this->subject = $pValue; return $this; } public function getKeywords() { return $this->keywords; } public function setKeywords($pValue = '') { $this->keywords = $pValue; return $this; } public function getCategory() { return $this->category; } public function setCategory($pValue = '') { $this->category = $pValue; return $this; } public function getCompany() { return $this->company; } public function setCompany($pValue = '') { $this->company = $pValue; return $this; } public function getManager() { return $this->manager; } public function setManager($pValue = '') { $this->manager = $pValue; return $this; } public function getCustomProperties() { return array_keys($this->customProperties); } public function isCustomPropertySet($propertyName) { return isset($this->customProperties[$propertyName]); } public function getCustomPropertyValue($propertyName) { if (isset($this->customProperties[$propertyName])) { return $this->customProperties[$propertyName]["\x76\141\154\165\x65"]; } } public function getCustomPropertyType($propertyName) { if (isset($this->customProperties[$propertyName])) { return $this->customProperties[$propertyName]["\164\171\160\x65"]; } } public function setCustomProperty($propertyName, $propertyValue = '', $propertyType = null) { goto ggC_Y; ggC_Y: if ($propertyType === null || !in_array($propertyType, array(self::PROPERTY_TYPE_INTEGER, self::PROPERTY_TYPE_FLOAT, self::PROPERTY_TYPE_STRING, self::PROPERTY_TYPE_DATE, self::PROPERTY_TYPE_BOOLEAN))) { if ($propertyValue === null) { $propertyType = self::PROPERTY_TYPE_STRING; } elseif (is_float($propertyValue)) { $propertyType = self::PROPERTY_TYPE_FLOAT; } elseif (is_int($propertyValue)) { $propertyType = self::PROPERTY_TYPE_INTEGER; } elseif (is_bool($propertyValue)) { $propertyType = self::PROPERTY_TYPE_BOOLEAN; } else { $propertyType = self::PROPERTY_TYPE_STRING; } } goto YklWw; YklWw: $this->customProperties[$propertyName] = array("\x76\141\154\x75\x65" => $propertyValue, "\164\x79\x70\x65" => $propertyType); goto j_Ww_; j_Ww_: return $this; goto ORr1D; ORr1D: } public function __clone() { $vars = get_object_vars($this); foreach ($vars as $key => $value) { if (is_object($value)) { $this->{$key} = clone $value; } else { $this->{$key} = $value; } } } public static function convertProperty($propertyValue, $propertyType) { switch ($propertyType) { case "\x65\155\160\x74\171": return ''; break; case "\x6e\x75\154\154": return null; break; case "\151\x31": case "\151\x32": case "\x69\64": case "\151\x38": case "\151\x6e\164": return (int) $propertyValue; break; case "\x75\x69\61": case "\x75\x69\x32": case "\x75\x69\64": case "\165\151\x38": case "\165\151\x6e\164": return abs((int) $propertyValue); break; case "\162\x34": case "\162\x38": case "\144\x65\x63\x69\x6d\x61\x6c": return (float) $propertyValue; break; case "\154\160\163\164\x72": case "\154\x70\167\163\x74\162": case "\x62\x73\164\x72": return $propertyValue; break; case "\144\141\164\x65": case "\146\151\x6c\x65\164\151\x6d\145": return strtotime($propertyValue); break; case "\x62\x6f\x6f\x6c": return $propertyValue == "\164\162\165\145" ? true : false; break; case "\143\171": case "\145\162\162\157\162": case "\x76\145\x63\164\157\x72": case "\x61\x72\162\141\171": case "\142\154\157\x62": case "\157\142\x6c\157\x62": case "\163\164\x72\x65\x61\x6d": case "\x6f\x73\x74\162\145\141\x6d": case "\x73\x74\157\x72\x61\x67\x65": case "\157\x73\x74\157\x72\x61\147\x65": case "\x76\x73\164\x72\x65\x61\x6d": case "\x63\x6c\163\151\x64": case "\143\x66": return $propertyValue; break; } return $propertyValue; } public static function convertPropertyType($propertyType) { switch ($propertyType) { case "\151\61": case "\x69\x32": case "\151\x34": case "\151\x38": case "\x69\x6e\164": case "\x75\x69\x31": case "\165\151\x32": case "\165\151\x34": case "\165\151\x38": case "\165\x69\156\164": return self::PROPERTY_TYPE_INTEGER; break; case "\x72\x34": case "\x72\70": case "\144\145\143\x69\x6d\141\154": return self::PROPERTY_TYPE_FLOAT; break; case "\145\x6d\160\164\x79": case "\x6e\x75\154\x6c": case "\x6c\160\x73\x74\162": case "\x6c\160\x77\x73\164\162": case "\x62\x73\x74\x72": return self::PROPERTY_TYPE_STRING; break; case "\x64\141\x74\x65": case "\146\151\x6c\x65\x74\151\155\145": return self::PROPERTY_TYPE_DATE; break; case "\142\x6f\x6f\154": return self::PROPERTY_TYPE_BOOLEAN; break; case "\143\x79": case "\x65\x72\162\157\162": case "\166\145\143\x74\157\x72": case "\x61\162\x72\141\x79": case "\x62\154\x6f\x62": case "\x6f\142\x6c\157\x62": case "\163\x74\162\145\x61\x6d": case "\157\163\164\x72\x65\x61\x6d": case "\x73\x74\x6f\x72\141\x67\x65": case "\x6f\163\x74\157\162\141\x67\145": case "\x76\x73\x74\x72\145\x61\x6d": case "\x63\154\x73\151\144": case "\143\146": return self::PROPERTY_TYPE_UNKNOWN; break; } return self::PROPERTY_TYPE_UNKNOWN; } }
