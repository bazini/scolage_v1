<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:05              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Style_Color extends PHPExcel_Style_Supervisor implements PHPExcel_IComparable { const COLOR_BLACK = "\106\106\60\60\60\x30\x30\60"; const COLOR_WHITE = "\x46\x46\x46\x46\x46\x46\x46\x46"; const COLOR_RED = "\106\106\106\106\x30\x30\x30\x30"; const COLOR_DARKRED = "\106\106\70\x30\60\x30\60\60"; const COLOR_BLUE = "\x46\106\60\x30\x30\60\x46\x46"; const COLOR_DARKBLUE = "\x46\x46\x30\60\x30\60\x38\60"; const COLOR_GREEN = "\106\x46\x30\x30\x46\x46\60\x30"; const COLOR_DARKGREEN = "\106\106\x30\x30\70\60\60\x30"; const COLOR_YELLOW = "\x46\x46\x46\x46\106\106\x30\60"; const COLOR_DARKYELLOW = "\x46\106\70\60\x38\x30\x30\60"; protected static $indexedColors; protected $argb = null; protected $parentPropertyName; public function __construct($pARGB = PHPExcel_Style_Color::COLOR_BLACK, $isSupervisor = false, $isConditional = false) { parent::__construct($isSupervisor); if (!$isConditional) { $this->argb = $pARGB; } } public function bindParent($parent, $parentPropertyName = null) { goto Ifiyj; YWySC: $this->parentPropertyName = $parentPropertyName; goto oejbi; oejbi: return $this; goto WXbjo; Ifiyj: $this->parent = $parent; goto YWySC; WXbjo: } public function getSharedComponent() { switch ($this->parentPropertyName) { case "\x65\156\x64\x43\x6f\x6c\157\x72": return $this->parent->getSharedComponent()->getEndColor(); case "\143\x6f\x6c\x6f\x72": return $this->parent->getSharedComponent()->getColor(); case "\x73\x74\141\162\x74\103\157\154\157\x72": return $this->parent->getSharedComponent()->getStartColor(); } } public function getStyleArray($array) { switch ($this->parentPropertyName) { case "\x65\x6e\144\103\x6f\x6c\157\162": $key = "\145\156\144\x63\157\x6c\x6f\x72"; break; case "\143\157\x6c\157\162": $key = "\x63\157\x6c\157\162"; break; case "\163\x74\141\x72\x74\103\x6f\154\157\x72": $key = "\163\x74\x61\162\x74\143\157\154\157\x72"; break; } return $this->parent->getStyleArray(array($key => $array)); } public function applyFromArray($pStyles = null) { if (is_array($pStyles)) { if ($this->isSupervisor) { $this->getActiveSheet()->getStyle($this->getSelectedCells())->applyFromArray($this->getStyleArray($pStyles)); } else { if (array_key_exists("\x72\147\x62", $pStyles)) { $this->setRGB($pStyles["\x72\147\142"]); } if (array_key_exists("\141\162\x67\142", $pStyles)) { $this->setARGB($pStyles["\141\162\x67\x62"]); } } } else { throw new PHPExcel_Exception("\x49\x6e\x76\141\154\151\144\x20\x73\164\171\154\145\40\x61\162\x72\141\x79\40\x70\141\x73\x73\145\144\56"); } return $this; } public function getARGB() { if ($this->isSupervisor) { return $this->getSharedComponent()->getARGB(); } return $this->argb; } public function setARGB($pValue = PHPExcel_Style_Color::COLOR_BLACK) { goto Whafo; VLyHe: if ($this->isSupervisor) { $styleArray = $this->getStyleArray(array("\141\162\x67\142" => $pValue)); $this->getActiveSheet()->getStyle($this->getSelectedCells())->applyFromArray($styleArray); } else { $this->argb = $pValue; } goto fDwmb; Whafo: if ($pValue == '') { $pValue = PHPExcel_Style_Color::COLOR_BLACK; } goto VLyHe; fDwmb: return $this; goto ID_Xg; ID_Xg: } public function getRGB() { if ($this->isSupervisor) { return $this->getSharedComponent()->getRGB(); } return substr($this->argb, 2); } public function setRGB($pValue = "\x30\x30\60\60\60\x30") { goto eaG8V; eaG8V: if ($pValue == '') { $pValue = "\60\x30\60\60\x30\x30"; } goto C4aJv; C4aJv: if ($this->isSupervisor) { $styleArray = $this->getStyleArray(array("\x61\x72\x67\142" => "\x46\106" . $pValue)); $this->getActiveSheet()->getStyle($this->getSelectedCells())->applyFromArray($styleArray); } else { $this->argb = "\x46\x46" . $pValue; } goto off3T; off3T: return $this; goto TnRnb; TnRnb: } private static function getColourComponent($RGB, $offset, $hex = true) { goto RzD3G; ce2Bs: if (!$hex) { $colour = hexdec($colour); } goto aZurP; aZurP: return $colour; goto jHlfv; RzD3G: $colour = substr($RGB, $offset, 2); goto ce2Bs; jHlfv: } public static function getRed($RGB, $hex = true) { return self::getColourComponent($RGB, strlen($RGB) - 6, $hex); } public static function getGreen($RGB, $hex = true) { return self::getColourComponent($RGB, strlen($RGB) - 4, $hex); } public static function getBlue($RGB, $hex = true) { return self::getColourComponent($RGB, strlen($RGB) - 2, $hex); } public static function changeBrightness($hex, $adjustPercentage) { goto Utmnf; Utmnf: $rgba = strlen($hex) == 8; goto DGXhF; MtK3i: return ($rgba ? "\x46\x46" : '') . $rgb; goto xq0js; nF_v8: if ($green < 0) { $green = 0; } elseif ($green > 255) { $green = 255; } goto aXdEl; aXdEl: if ($blue < 0) { $blue = 0; } elseif ($blue > 255) { $blue = 255; } goto Mc3X_; FeF0b: $blue = self::getBlue($hex, false); goto i55p2; Mc3X_: $rgb = strtoupper(str_pad(dechex($red), 2, "\x30", 0) . str_pad(dechex($green), 2, "\x30", 0) . str_pad(dechex($blue), 2, "\60", 0)); goto MtK3i; DGXhF: $red = self::getRed($hex, false); goto OVRaG; i55p2: if ($adjustPercentage > 0) { goto vYnfK; vYnfK: $red += (255 - $red) * $adjustPercentage; goto q96Oi; ENofw: $blue += (255 - $blue) * $adjustPercentage; goto UVxbJ; q96Oi: $green += (255 - $green) * $adjustPercentage; goto ENofw; UVxbJ: } else { goto S02CD; dl0S4: $green += $green * $adjustPercentage; goto vUR5R; vUR5R: $blue += $blue * $adjustPercentage; goto l2gIV; S02CD: $red += $red * $adjustPercentage; goto dl0S4; l2gIV: } goto f1m7f; f1m7f: if ($red < 0) { $red = 0; } elseif ($red > 255) { $red = 255; } goto nF_v8; OVRaG: $green = self::getGreen($hex, false); goto FeF0b; xq0js: } public static function indexedColor($pIndex, $background = false) { goto X2BWS; P_yJL: if (is_null(self::$indexedColors)) { self::$indexedColors = array(1 => "\x46\x46\x30\60\60\60\x30\60", 2 => "\x46\x46\x46\x46\x46\x46\106\106", 3 => "\x46\106\106\106\x30\60\60\x30", 4 => "\x46\x46\x30\60\106\106\60\x30", 5 => "\x46\106\60\x30\60\x30\x46\106", 6 => "\106\106\x46\x46\106\106\x30\x30", 7 => "\x46\x46\x46\x46\x30\x30\106\x46", 8 => "\106\x46\x30\60\x46\x46\x46\106", 9 => "\106\x46\x38\60\60\x30\60\x30", 10 => "\106\106\x30\x30\x38\60\60\x30", 11 => "\106\106\60\60\60\x30\x38\60", 12 => "\106\106\70\x30\70\60\60\60", 13 => "\106\106\x38\x30\60\x30\70\60", 14 => "\106\106\x30\x30\x38\60\x38\60", 15 => "\x46\x46\x43\x30\103\x30\103\60", 16 => "\106\x46\70\60\70\x30\x38\x30", 17 => "\106\x46\71\71\71\71\x46\x46", 18 => "\x46\106\71\x39\63\63\66\66", 19 => "\106\x46\x46\x46\106\x46\x43\x43", 20 => "\106\106\103\103\x46\x46\x46\x46", 21 => "\x46\x46\66\66\60\x30\66\66", 22 => "\x46\106\106\106\70\60\x38\x30", 23 => "\x46\x46\60\60\x36\66\x43\103", 24 => "\x46\106\x43\103\x43\x43\106\x46", 25 => "\x46\x46\60\60\60\x30\70\60", 26 => "\106\106\106\106\x30\x30\106\x46", 27 => "\106\x46\x46\x46\106\x46\60\x30", 28 => "\106\x46\x30\x30\106\106\106\x46", 29 => "\106\106\70\60\60\60\x38\60", 30 => "\106\106\70\x30\60\x30\60\60", 31 => "\x46\106\x30\x30\x38\x30\70\x30", 32 => "\x46\x46\60\x30\60\x30\x46\106", 33 => "\x46\x46\x30\x30\x43\x43\x46\x46", 34 => "\x46\x46\x43\x43\x46\106\x46\x46", 35 => "\x46\x46\x43\103\106\x46\x43\103", 36 => "\106\x46\106\106\x46\x46\71\71", 37 => "\106\x46\x39\71\x43\x43\x46\x46", 38 => "\x46\106\106\106\x39\71\x43\103", 39 => "\106\106\103\x43\x39\71\x46\x46", 40 => "\x46\x46\x46\x46\x43\103\71\x39", 41 => "\106\106\x33\x33\x36\66\x46\106", 42 => "\x46\106\x33\x33\103\x43\103\103", 43 => "\x46\106\x39\71\x43\x43\60\60", 44 => "\x46\106\x46\106\103\x43\x30\x30", 45 => "\x46\x46\x46\106\x39\71\60\x30", 46 => "\x46\106\106\106\66\66\60\60", 47 => "\x46\106\x36\x36\66\66\x39\x39", 48 => "\x46\106\71\x36\x39\66\71\66", 49 => "\106\x46\60\x30\x33\63\x36\x36", 50 => "\106\x46\63\63\x39\x39\66\x36", 51 => "\106\106\x30\60\63\x33\x30\60", 52 => "\x46\106\63\63\63\x33\60\60", 53 => "\106\x46\x39\71\63\x33\60\60", 54 => "\x46\x46\x39\71\x33\63\x36\x36", 55 => "\x46\x46\x33\63\63\x33\x39\x39", 56 => "\106\x46\63\x33\63\63\x33\x33"); } goto oU1Zr; jorAR: return new PHPExcel_Style_Color(self::COLOR_BLACK); goto MPVur; X2BWS: $pIndex = intval($pIndex); goto P_yJL; oU1Zr: if (array_key_exists($pIndex, self::$indexedColors)) { return new PHPExcel_Style_Color(self::$indexedColors[$pIndex]); } goto rjBTq; rjBTq: if ($background) { return new PHPExcel_Style_Color(self::COLOR_WHITE); } goto jorAR; MPVur: } public function getHashCode() { if ($this->isSupervisor) { return $this->getSharedComponent()->getHashCode(); } return md5($this->argb . __CLASS__); } }
