<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:05              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Style_Conditional implements PHPExcel_IComparable { const CONDITION_NONE = "\x6e\x6f\156\x65"; const CONDITION_CELLIS = "\x63\x65\x6c\154\x49\x73"; const CONDITION_CONTAINSTEXT = "\143\157\x6e\164\141\x69\x6e\163\124\x65\170\x74"; const CONDITION_EXPRESSION = "\145\x78\x70\162\x65\x73\163\151\157\156"; const OPERATOR_NONE = ''; const OPERATOR_BEGINSWITH = "\x62\145\x67\151\x6e\163\x57\151\x74\150"; const OPERATOR_ENDSWITH = "\145\x6e\x64\x73\127\x69\x74\150"; const OPERATOR_EQUAL = "\145\x71\165\x61\154"; const OPERATOR_GREATERTHAN = "\x67\x72\x65\x61\x74\x65\162\x54\x68\141\156"; const OPERATOR_GREATERTHANOREQUAL = "\x67\162\145\x61\x74\x65\x72\124\150\141\x6e\x4f\162\x45\x71\x75\x61\154"; const OPERATOR_LESSTHAN = "\154\145\x73\163\124\150\x61\x6e"; const OPERATOR_LESSTHANOREQUAL = "\x6c\x65\x73\163\x54\x68\141\156\x4f\162\105\161\x75\x61\x6c"; const OPERATOR_NOTEQUAL = "\x6e\157\164\x45\161\165\x61\154"; const OPERATOR_CONTAINSTEXT = "\x63\157\156\x74\141\x69\x6e\163\124\x65\x78\164"; const OPERATOR_NOTCONTAINS = "\156\157\164\103\157\156\x74\141\151\x6e\x73"; const OPERATOR_BETWEEN = "\x62\x65\x74\x77\x65\145\156"; private $conditionType; private $operatorType; private $text; private $condition = array(); private $style; public function __construct() { goto XM3C5; ZJxzL: $this->operatorType = PHPExcel_Style_Conditional::OPERATOR_NONE; goto Bwv51; Bwv51: $this->text = null; goto CBsGX; CBsGX: $this->condition = array(); goto wcEe3; XM3C5: $this->conditionType = PHPExcel_Style_Conditional::CONDITION_NONE; goto ZJxzL; wcEe3: $this->style = new PHPExcel_Style(false, true); goto y9TNC; y9TNC: } public function getConditionType() { return $this->conditionType; } public function setConditionType($pValue = PHPExcel_Style_Conditional::CONDITION_NONE) { $this->conditionType = $pValue; return $this; } public function getOperatorType() { return $this->operatorType; } public function setOperatorType($pValue = PHPExcel_Style_Conditional::OPERATOR_NONE) { $this->operatorType = $pValue; return $this; } public function getText() { return $this->text; } public function setText($value = null) { $this->text = $value; return $this; } public function getCondition() { if (isset($this->condition[0])) { return $this->condition[0]; } return ''; } public function setCondition($pValue = '') { if (!is_array($pValue)) { $pValue = array($pValue); } return $this->setConditions($pValue); } public function getConditions() { return $this->condition; } public function setConditions($pValue) { goto xOt3C; xOt3C: if (!is_array($pValue)) { $pValue = array($pValue); } goto Qun6C; Qun6C: $this->condition = $pValue; goto DSI2b; DSI2b: return $this; goto yev1B; yev1B: } public function addCondition($pValue = '') { $this->condition[] = $pValue; return $this; } public function getStyle() { return $this->style; } public function setStyle(PHPExcel_Style $pValue = null) { $this->style = $pValue; return $this; } public function getHashCode() { return md5($this->conditionType . $this->operatorType . implode("\x3b", $this->condition) . $this->style->getHashCode() . __CLASS__); } public function __clone() { $vars = get_object_vars($this); foreach ($vars as $key => $value) { if (is_object($value)) { $this->{$key} = clone $value; } else { $this->{$key} = $value; } } } }
