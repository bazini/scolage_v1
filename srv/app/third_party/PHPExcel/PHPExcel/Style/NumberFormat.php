<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:05              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Style_NumberFormat extends PHPExcel_Style_Supervisor implements PHPExcel_IComparable { const FORMAT_GENERAL = "\107\x65\156\x65\162\x61\x6c"; const FORMAT_TEXT = "\100"; const FORMAT_NUMBER = "\60"; const FORMAT_NUMBER_00 = "\x30\56\x30\60"; const FORMAT_NUMBER_COMMA_SEPARATED1 = "\x23\x2c\43\x23\x30\56\x30\x30"; const FORMAT_NUMBER_COMMA_SEPARATED2 = "\43\x2c\43\x23\x30\56\x30\x30\x5f\x2d"; const FORMAT_PERCENTAGE = "\60\x25"; const FORMAT_PERCENTAGE_00 = "\60\x2e\60\60\x25"; const FORMAT_DATE_YYYYMMDD2 = "\x79\171\171\171\55\155\155\55\144\144"; const FORMAT_DATE_YYYYMMDD = "\x79\x79\55\x6d\x6d\x2d\144\x64"; const FORMAT_DATE_DDMMYYYY = "\x64\x64\x2f\155\x6d\x2f\171\x79"; const FORMAT_DATE_DMYSLASH = "\x64\57\155\x2f\x79"; const FORMAT_DATE_DMYMINUS = "\144\x2d\155\x2d\x79"; const FORMAT_DATE_DMMINUS = "\x64\55\155"; const FORMAT_DATE_MYMINUS = "\155\55\x79"; const FORMAT_DATE_XLSX14 = "\155\155\x2d\144\144\55\171\x79"; const FORMAT_DATE_XLSX15 = "\144\x2d\x6d\155\155\55\x79\x79"; const FORMAT_DATE_XLSX16 = "\x64\55\155\x6d\x6d"; const FORMAT_DATE_XLSX17 = "\x6d\x6d\155\55\171\171"; const FORMAT_DATE_XLSX22 = "\x6d\x2f\x64\x2f\x79\x79\40\x68\x3a\155\x6d"; const FORMAT_DATE_DATETIME = "\144\57\155\57\x79\x20\150\72\x6d\155"; const FORMAT_DATE_TIME1 = "\x68\x3a\x6d\x6d\40\101\115\57\x50\x4d"; const FORMAT_DATE_TIME2 = "\150\72\155\155\x3a\163\x73\40\101\x4d\x2f\120\x4d"; const FORMAT_DATE_TIME3 = "\x68\72\155\155"; const FORMAT_DATE_TIME4 = "\150\x3a\x6d\155\x3a\163\163"; const FORMAT_DATE_TIME5 = "\x6d\x6d\72\x73\x73"; const FORMAT_DATE_TIME6 = "\x68\72\x6d\155\x3a\163\163"; const FORMAT_DATE_TIME7 = "\151\x3a\x73\x2e\123"; const FORMAT_DATE_TIME8 = "\150\x3a\155\x6d\72\x73\x73\73\100"; const FORMAT_DATE_YYYYMMDDSLASH = "\x79\171\57\155\x6d\x2f\144\144\73\100"; const FORMAT_CURRENCY_USD_SIMPLE = "\42\44\42\x23\x2c\x23\43\60\x2e\x30\x30\x5f\55"; const FORMAT_CURRENCY_USD = "\x24\43\54\43\43\x30\x5f\x2d"; const FORMAT_CURRENCY_EUR_SIMPLE = "\x5b\x24\x45\125\x52\x20\x5d\43\54\x23\43\60\x2e\60\60\137\55"; protected static $builtInFormats; protected static $flippedBuiltInFormats; protected $formatCode = PHPExcel_Style_NumberFormat::FORMAT_GENERAL; protected $builtInFormatCode = 0; public function __construct($isSupervisor = false, $isConditional = false) { parent::__construct($isSupervisor); if ($isConditional) { $this->formatCode = null; $this->builtInFormatCode = false; } } public function getSharedComponent() { return $this->parent->getSharedComponent()->getNumberFormat(); } public function getStyleArray($array) { return array("\x6e\165\155\x62\x65\x72\146\157\x72\155\x61\x74" => $array); } public function applyFromArray($pStyles = null) { if (is_array($pStyles)) { if ($this->isSupervisor) { $this->getActiveSheet()->getStyle($this->getSelectedCells())->applyFromArray($this->getStyleArray($pStyles)); } else { if (array_key_exists("\x63\x6f\x64\x65", $pStyles)) { $this->setFormatCode($pStyles["\143\x6f\144\x65"]); } } } else { throw new PHPExcel_Exception("\111\156\166\141\x6c\x69\144\x20\163\x74\171\x6c\x65\x20\x61\162\x72\141\171\40\x70\141\x73\163\x65\x64\56"); } return $this; } public function getFormatCode() { goto DxhMS; fyXg2: return $this->formatCode; goto MV5OC; DxhMS: if ($this->isSupervisor) { return $this->getSharedComponent()->getFormatCode(); } goto TRrFu; TRrFu: if ($this->builtInFormatCode !== false) { return self::builtInFormatCode($this->builtInFormatCode); } goto fyXg2; MV5OC: } public function setFormatCode($pValue = PHPExcel_Style_NumberFormat::FORMAT_GENERAL) { goto ojwle; ojwle: if ($pValue == '') { $pValue = PHPExcel_Style_NumberFormat::FORMAT_GENERAL; } goto kFKtq; kFKtq: if ($this->isSupervisor) { $styleArray = $this->getStyleArray(array("\x63\157\144\x65" => $pValue)); $this->getActiveSheet()->getStyle($this->getSelectedCells())->applyFromArray($styleArray); } else { $this->formatCode = $pValue; $this->builtInFormatCode = self::builtInFormatCodeIndex($pValue); } goto qVa9f; qVa9f: return $this; goto W3A6u; W3A6u: } public function getBuiltInFormatCode() { if ($this->isSupervisor) { return $this->getSharedComponent()->getBuiltInFormatCode(); } return $this->builtInFormatCode; } public function setBuiltInFormatCode($pValue = 0) { if ($this->isSupervisor) { $styleArray = $this->getStyleArray(array("\143\x6f\144\x65" => self::builtInFormatCode($pValue))); $this->getActiveSheet()->getStyle($this->getSelectedCells())->applyFromArray($styleArray); } else { $this->builtInFormatCode = $pValue; $this->formatCode = self::builtInFormatCode($pValue); } return $this; } private static function fillBuiltInFormatCodes() { if (is_null(self::$builtInFormats)) { goto QZuOw; EGT_k: self::$builtInFormats[14] = "\x6d\x2f\144\x2f\x79\171\171\x79"; goto CL8ur; fXkLz: self::$builtInFormats[21] = "\150\72\155\155\x3a\x73\x73"; goto YXgEm; ighVj: self::$builtInFormats[4] = "\x23\54\x23\43\x30\56\x30\x30"; goto REmd9; qx68r: self::$builtInFormats[48] = "\43\43\x30\56\60\105\53\x30"; goto lYZRb; LrGDI: self::$builtInFormats[20] = "\x68\72\x6d\x6d"; goto fXkLz; UJY8u: self::$builtInFormats[13] = "\43\40\77\77\x2f\77\77"; goto EGT_k; CL8ur: self::$builtInFormats[15] = "\144\55\155\155\x6d\x2d\171\171"; goto nUx1U; FJsDb: self::$builtInFormats[10] = "\60\56\x30\x30\45"; goto H8Q7i; g4y7u: self::$flippedBuiltInFormats = array_flip(self::$builtInFormats); goto rvfEM; lYZRb: self::$builtInFormats[49] = "\x40"; goto w9I4U; KSxVJ: self::$builtInFormats[59] = "\x74\x30"; goto GQi37; H6T80: self::$builtInFormats[57] = "\x5b\44\55\64\x30\64\x5d\145\x2f\x6d\x2f\x64"; goto KSxVJ; w9I4U: self::$builtInFormats[27] = "\133\44\55\x34\x30\x34\135\145\57\155\x2f\144"; goto GPllH; jjYho: self::$builtInFormats[68] = "\x74\60\x2e\60\x30\x25"; goto Ow5Ti; azKhc: self::$builtInFormats[3] = "\x23\x2c\43\43\x30"; goto ighVj; Demhu: self::$builtInFormats[2] = "\x30\x2e\x30\60"; goto azKhc; Cn4MD: self::$builtInFormats[62] = "\x74\43\x2c\43\43\x30\x2e\x30\x30"; goto TdJuT; IfEED: self::$builtInFormats[44] = "\137\50\x22\x24\x22\52\x20\x23\x2c\43\x23\60\x2e\60\x30\137\51\x3b\137\x28\42\x24\x22\52\40\134\x28\43\x2c\x23\x23\x30\x2e\60\x30\134\51\x3b\x5f\50\x22\44\42\52\40\x22\55\42\77\77\x5f\x29\x3b\137\50\100\137\x29"; goto eeUf1; kqlCp: self::$builtInFormats[19] = "\x68\72\x6d\155\72\163\x73\40\x41\x4d\57\120\115"; goto LrGDI; YXgEm: self::$builtInFormats[22] = "\x6d\57\144\57\171\171\171\171\x20\x68\72\x6d\155"; goto ig3iA; TdJuT: self::$builtInFormats[67] = "\x74\x30\45"; goto jjYho; QmsPg: self::$builtInFormats[61] = "\164\43\54\x23\43\60"; goto Cn4MD; nUx1U: self::$builtInFormats[16] = "\x64\x2d\155\155\155"; goto ftvPB; REmd9: self::$builtInFormats[9] = "\x30\45"; goto FJsDb; ig3iA: self::$builtInFormats[37] = "\43\54\x23\x23\x30\137\x29\x3b\50\x23\x2c\43\x23\60\51"; goto W44Ew; EPKZX: self::$builtInFormats[50] = "\133\x24\x2d\x34\x30\x34\135\x65\57\155\57\144"; goto H6T80; l42IC: self::$builtInFormats[47] = "\155\155\x3a\x73\x73\56\x30"; goto qx68r; H8Q7i: self::$builtInFormats[11] = "\x30\56\60\60\x45\53\60\60"; goto ltk9t; GPllH: self::$builtInFormats[30] = "\155\57\144\57\x79\x79"; goto y8eYP; tgpvi: self::$builtInFormats[70] = "\164\x23\x20\x3f\x3f\57\x3f\x3f"; goto g4y7u; wWOc1: self::$builtInFormats[0] = PHPExcel_Style_NumberFormat::FORMAT_GENERAL; goto pUcOY; ftvPB: self::$builtInFormats[17] = "\155\155\x6d\x2d\x79\x79"; goto TB052; GQi37: self::$builtInFormats[60] = "\164\x30\x2e\60\x30"; goto QmsPg; pUcOY: self::$builtInFormats[1] = "\x30"; goto Demhu; TB052: self::$builtInFormats[18] = "\150\x3a\155\x6d\40\101\115\57\120\115"; goto kqlCp; J0wyO: self::$builtInFormats[40] = "\43\54\43\43\x30\x2e\x30\x30\x5f\51\73\133\x52\x65\x64\135\x28\x23\x2c\43\x23\60\56\x30\60\x29"; goto IfEED; zDhNW: self::$builtInFormats[39] = "\43\x2c\x23\x23\60\x2e\x30\x30\137\x29\x3b\50\43\54\x23\x23\x30\x2e\x30\x30\51"; goto J0wyO; y8eYP: self::$builtInFormats[36] = "\x5b\x24\x2d\x34\x30\x34\x5d\145\x2f\155\57\144"; goto EPKZX; Ow5Ti: self::$builtInFormats[69] = "\x74\x23\x20\x3f\x2f\77"; goto tgpvi; QZuOw: self::$builtInFormats = array(); goto wWOc1; W44Ew: self::$builtInFormats[38] = "\x23\x2c\43\x23\x30\x5f\x29\73\x5b\122\x65\x64\x5d\x28\x23\54\43\x23\60\51"; goto zDhNW; eeUf1: self::$builtInFormats[45] = "\x6d\155\72\x73\x73"; goto AxNz3; ltk9t: self::$builtInFormats[12] = "\43\x20\x3f\57\77"; goto UJY8u; AxNz3: self::$builtInFormats[46] = "\x5b\x68\135\72\155\155\x3a\163\163"; goto l42IC; rvfEM: } } public static function builtInFormatCode($pIndex) { goto BvNQp; vsev7: if (isset(self::$builtInFormats[$pIndex])) { return self::$builtInFormats[$pIndex]; } goto BSXrC; BvNQp: $pIndex = intval($pIndex); goto KBrVi; BSXrC: return ''; goto ZgMxi; KBrVi: self::fillBuiltInFormatCodes(); goto vsev7; ZgMxi: } public static function builtInFormatCodeIndex($formatCode) { goto Oz5J6; uXFEf: if (isset(self::$flippedBuiltInFormats[$formatCode])) { return self::$flippedBuiltInFormats[$formatCode]; } goto ZLrTG; Oz5J6: self::fillBuiltInFormatCodes(); goto uXFEf; ZLrTG: return false; goto xnDkt; xnDkt: } public function getHashCode() { if ($this->isSupervisor) { return $this->getSharedComponent()->getHashCode(); } return md5($this->formatCode . $this->builtInFormatCode . __CLASS__); } private static $dateFormatReplacements = array("\x5c" => '', "\141\x6d\x2f\x70\x6d" => "\x41", "\x65" => "\131", "\x79\x79\x79\171" => "\131", "\171\171" => "\x79", "\x6d\155\x6d\155\155" => "\115", "\155\x6d\155\x6d" => "\106", "\x6d\155\155" => "\x4d", "\x3a\x6d\x6d" => "\x3a\x69", "\155\155\72" => "\x69\x3a", "\155\x6d" => "\x6d", "\x6d" => "\x6e", "\144\144\x64\144" => "\x6c", "\x64\144\x64" => "\104", "\144\x64" => "\x64", "\x64" => "\x6a", "\163\x73" => "\163", "\56\163" => ''); private static $dateFormatReplacements24 = array("\x68\x68" => "\x48", "\x68" => "\x47"); private static $dateFormatReplacements12 = array("\150\150" => "\150", "\150" => "\147"); private static function setLowercaseCallback($matches) { return mb_strtolower($matches[0]); } private static function escapeQuotesCallback($matches) { return "\134" . implode("\134", str_split($matches[1])); } private static function formatAsDate(&$value, &$format) { goto eE4uC; hqkpW: $blocks = explode("\x22", $format); goto oXdZM; eE4uC: $format = preg_replace("\57\x5e\50\x5c\x5b\x5c\x24\133\x41\55\x5a\135\52\55\x5b\x30\55\71\101\x2d\106\135\x2a\134\x5d\51\x2f\151", '', $format); goto FDPra; BNzaT: $value = $dateObj->format($format); goto SEXtb; ysHIR: $dateObj = PHPExcel_Shared_Date::ExcelToPHPObject($value); goto BNzaT; FDPra: $format = preg_replace_callback("\57\50\x3f\x3a\x5e\x7c\42\x29\50\133\136\42\135\x2a\x29\50\x3f\x3a\44\174\42\x29\57", array("\x73\x65\x6c\146", "\163\x65\x74\x4c\157\167\x65\x72\143\141\163\145\x43\x61\x6c\154\142\141\143\x6b"), $format); goto hqkpW; gev9E: $format = preg_replace_callback("\x2f\x22\x28\x2e\x2a\51\x22\57\125", array("\163\145\154\146", "\145\x73\x63\141\160\145\x51\x75\157\x74\x65\163\x43\x61\154\154\x62\141\x63\x6b"), $format); goto ysHIR; oXdZM: foreach ($blocks as $key => &$block) { if ($key % 2 == 0) { $block = strtr($block, self::$dateFormatReplacements); if (!strpos($block, "\x41")) { $block = strtr($block, self::$dateFormatReplacements24); } else { $block = strtr($block, self::$dateFormatReplacements12); } } } goto vmk8J; vmk8J: $format = implode("\42", $blocks); goto gev9E; SEXtb: } private static function formatAsPercentage(&$value, &$format) { if ($format === self::FORMAT_PERCENTAGE) { $value = round(100 * $value, 0) . "\45"; } else { goto Vt3WP; Vt3WP: if (preg_match("\57\134\56\133\x23\60\x5d\x2b\57\151", $format, $m)) { $s = substr($m[0], 0, 1) . (strlen($m[0]) - 1); $format = str_replace($m[0], $s, $format); } goto hvjmn; hvjmn: if (preg_match("\x2f\136\x5b\43\60\135\x2b\57", $format, $m)) { $format = str_replace($m[0], strlen($m[0]), $format); } goto DxxgG; DxxgG: $format = "\x25" . str_replace("\x25", "\146\45\45", $format); goto MS00K; MS00K: $value = sprintf($format, 100 * $value); goto KHaKQ; KHaKQ: } } private static function formatAsFraction(&$value, &$format) { goto BjV0O; mAI0D: $adjustedDecimalDivisor = $decimalDivisor / $GCD; goto XXLg7; mCnd2: $adjustedDecimalPart = $decimalPart / $GCD; goto mAI0D; UknBi: $integerPart = floor(abs($value)); goto p0RQF; XXLg7: if (strpos($format, "\x30") !== false || strpos($format, "\x23") !== false || substr($format, 0, 3) == "\x3f\40\77") { if ($integerPart == 0) { $integerPart = ''; } $value = "{$sign}{$integerPart}\40{$adjustedDecimalPart}\x2f{$adjustedDecimalDivisor}"; } else { $adjustedDecimalPart += $integerPart * $adjustedDecimalDivisor; $value = "{$sign}{$adjustedDecimalPart}\x2f{$adjustedDecimalDivisor}"; } goto JxLao; Tgzsj: $decimalLength = strlen($decimalPart); goto yXxmm; BjV0O: $sign = $value < 0 ? "\55" : ''; goto UknBi; yXxmm: $decimalDivisor = pow(10, $decimalLength); goto B6AmX; p0RQF: $decimalPart = trim(fmod(abs($value), 1), "\60\56"); goto Tgzsj; B6AmX: $GCD = PHPExcel_Calculation_MathTrig::GCD($decimalPart, $decimalDivisor); goto mCnd2; JxLao: } private static function complexNumberFormatMask($number, $mask, $level = 0) { goto qnFHO; jZ5E1: $r = preg_match_all("\57\x30\x2b\x2f", $mask, $result, PREG_OFFSET_CAPTURE); goto d8SPq; cSXMq: return ($sign ? "\55" : '') . $result; goto cN8sG; qnFHO: $sign = $number < 0.0; goto r_0eY; r_0eY: $number = abs($number); goto uwsTY; uwsTY: if (strpos($mask, "\56") !== false) { goto WNbzs; QVzq5: $result1 = self::complexNumberFormatMask($numbers[0], $masks[0], 1); goto DWj1R; I0Fv9: $masks = explode("\x2e", $mask . "\56\x30"); goto QVzq5; yzxbl: return ($sign ? "\x2d" : '') . $result1 . "\x2e" . $result2; goto FZFr0; DWj1R: $result2 = strrev(self::complexNumberFormatMask(strrev($numbers[1]), strrev($masks[1]), 1)); goto yzxbl; WNbzs: $numbers = explode("\56", $number . "\56\x30"); goto I0Fv9; FZFr0: } goto jZ5E1; d8SPq: if ($r > 1) { goto vF0Y_; M1vTc: if ($number > 0) { $mask = substr_replace($mask, $number, $offset, 0); } goto XqHfu; Q4lv1: foreach ($result as $block) { goto uM7iW; uMm20: $number = floor($number / $divisor); goto szSgh; vA1vY: $offset = $block[1]; goto ZWg4V; ZWg4V: $blockValue = sprintf("\x25\60" . $size . "\x64", fmod($number, $divisor)); goto uMm20; YWCLI: $size = strlen($block[0]); goto vA1vY; szSgh: $mask = substr_replace($mask, $blockValue, $offset, $size); goto mtufG; uM7iW: $divisor = 1 . $block[0]; goto YWCLI; mtufG: } goto M1vTc; vF0Y_: $result = array_reverse($result[0]); goto Q4lv1; XqHfu: $result = $mask; goto Oo98M; Oo98M: } else { $result = $number; } goto cSXMq; cN8sG: } public static function toFormattedString($value = "\60", $format = PHPExcel_Style_NumberFormat::FORMAT_GENERAL, $callBack = null) { goto Z1GFv; Ti1qM: if ($callBack !== null) { list($writerInstance, $function) = $callBack; $value = $writerInstance->{$function}($value, $formatColor); } goto szLql; Z1GFv: if (!is_numeric($value)) { return $value; } goto FfUzP; yG3Y0: $sections = preg_split("\57\50\73\x29\50\77\x3d\50\77\72\x5b\136\x22\135\174\x22\133\136\42\135\52\x22\51\52\44\51\x2f\165", $format); goto VLVYe; VLVYe: switch (count($sections)) { case 1: $format = $sections[0]; break; case 2: goto nUzXz; eDQ14: $value = abs($value); goto e9TpO; nUzXz: $format = $value >= 0 ? $sections[0] : $sections[1]; goto eDQ14; e9TpO: break; goto VvrJN; VvrJN: case 3: goto m98YS; TilBZ: break; goto X8HgV; m98YS: $format = $value > 0 ? $sections[0] : ($value < 0 ? $sections[1] : $sections[2]); goto KQeIL; KQeIL: $value = abs($value); goto TilBZ; X8HgV: case 4: goto NEANt; Ta4fO: $value = abs($value); goto DN0Yo; NEANt: $format = $value > 0 ? $sections[0] : ($value < 0 ? $sections[1] : $sections[2]); goto Ta4fO; DN0Yo: break; goto pkHIe; pkHIe: default: $format = $sections[0]; break; } goto golQd; NDO_V: if (preg_match("\x2f\x28\134\x5b\x5c\x24\x5b\101\55\x5a\135\52\55\x5b\x30\x2d\71\x41\x2d\106\135\52\x5c\x5d\x29\52\x5b\x68\x6d\163\144\x79\x5d\50\x3f\x3d\x28\x3f\72\x5b\x5e\x22\135\x7c\42\133\x5e\x22\x5d\52\42\x29\x2a\44\x29\x2f\x6d\151\x75", $format, $matches)) { self::formatAsDate($value, $format); } elseif (preg_match("\x2f\45\x24\x2f", $format)) { self::formatAsPercentage($value, $format); } else { if ($format === self::FORMAT_CURRENCY_EUR_SIMPLE) { $value = "\x45\x55\122\x20" . sprintf("\45\x31\x2e\x32\146", $value); } else { goto NBYIN; f1LPx: $scale = 1; goto Bh1mp; Bh1mp: $matches = array(); goto Y2j22; Y2j22: if (preg_match("\x2f\50\x23\174\x30\x29\x28\54\x2b\x29\x2f", $format, $matches)) { goto sipKd; e8NrO: $format = preg_replace("\57\60\x2c\53\x2f", "\60", $format); goto a0W9h; sipKd: $scale = pow(1000, strlen($matches[2])); goto e8NrO; a0W9h: $format = preg_replace("\57\43\x2c\53\x2f", "\x23", $format); goto mQUAG; mQUAG: } goto hEuzq; sDjHf: if (preg_match("\57\134\x5b\x5c\44\x28\x2e\52\51\134\x5d\x2f\x75", $format, $m)) { goto wNJHE; y38yZ: list($currencyCode) = explode("\x2d", $currencyCode); goto c1kS_; FxSrT: $value = preg_replace("\x2f\134\x5b\x5c\x24\50\x5b\136\x5c\135\x5d\52\51\x5c\135\x2f\x75", $currencyCode, $value); goto lrKq5; TJ40w: $currencyCode = $m[1]; goto y38yZ; wNJHE: $currencyFormat = $m[0]; goto TJ40w; c1kS_: if ($currencyCode == '') { $currencyCode = PHPExcel_Shared_String::getCurrencyCode(); } goto FxSrT; lrKq5: } goto mugYN; V7E2K: if ($useThousands) { $format = preg_replace("\57\x30\x2c\x30\57", "\x30\60", $format); $format = preg_replace("\57\x23\x2c\x23\x2f", "\x23\43", $format); } goto f1LPx; ngVu_: $useThousands = preg_match("\57\50\43\54\43\174\60\54\60\x29\57", $format); goto V7E2K; hEuzq: if (preg_match("\57\43\77\x2e\52\134\x3f\134\x2f\134\77\x2f", $format, $m)) { if ($value != (int) $value) { self::formatAsFraction($value, $format); } } else { goto QXSiK; QXSiK: $value = $value / $scale; goto OOPln; SciO8: $n = "\x2f\x5c\133\x5b\x5e\134\135\135\53\x5c\x5d\57"; goto tlpRg; tlpRg: $m = preg_replace($n, '', $format); goto ewnTs; OOPln: $format = preg_replace("\57\x5c\x23\57", "\60", $format); goto SciO8; ewnTs: $number_regex = "\x2f\50\x30\53\x29\x28\x5c\x2e\77\51\x28\60\52\x29\x2f"; goto kkThh; kkThh: if (preg_match($number_regex, $m, $matches)) { goto qpqpD; qpqpD: $left = $matches[1]; goto ZITYK; ht8LU: if ($useThousands) { $value = number_format($value, strlen($right), PHPExcel_Shared_String::getDecimalSeparator(), PHPExcel_Shared_String::getThousandsSeparator()); $value = preg_replace($number_regex, $value, $format); } else { if (preg_match("\57\x5b\60\x23\135\105\x5b\x2b\x2d\135\60\57\151", $format)) { $value = sprintf("\x25\65\x2e\62\105", $value); } elseif (preg_match("\x2f\x30\x28\x5b\x5e\134\144\134\x2e\135\53\51\60\x2f", $format)) { $value = self::complexNumberFormatMask($value, $format); } else { goto WcFH2; uRBwS: $value = preg_replace($number_regex, $value, $format); goto S1fwz; WcFH2: $sprintf_pattern = "\45\x30{$minWidth}\56" . strlen($right) . "\x66"; goto Z1026; Z1026: $value = sprintf($sprintf_pattern, $value); goto uRBwS; S1fwz: } } goto ImhiW; A8GmO: $minWidth = strlen($left) + strlen($dec) + strlen($right); goto ht8LU; ZITYK: $dec = $matches[2]; goto mz6qA; mz6qA: $right = $matches[3]; goto A8GmO; ImhiW: } goto QmkX_; QmkX_: } goto sDjHf; NBYIN: $format = str_replace(array("\42", "\52"), '', $format); goto ngVu_; mugYN: } } goto gIMIb; tzY_O: $format = preg_replace($color_regex, '', $format); goto NDO_V; b6s8X: $color_regex = "\57\x5e\x5c\x5b\x5b\x61\55\x7a\101\x2d\x5a\135\x2b\x5c\135\x2f"; goto tzY_O; golQd: $format = preg_replace("\57\x5f\x2e\57", "\x20", $format); goto yfsJQ; FfUzP: if ($format === PHPExcel_Style_NumberFormat::FORMAT_GENERAL || $format === PHPExcel_Style_NumberFormat::FORMAT_TEXT) { return $value; } goto dx1QI; dx1QI: $format = preg_replace("\x2f\50\x5c\x5c\50\56\51\x29\50\x3f\75\50\x3f\72\x5b\x5e\x22\135\x7c\42\x5b\x5e\x22\135\x2a\x22\51\52\44\51\x2f\165", "\x22\x24\173\x32\x7d\42", $format); goto yG3Y0; yfsJQ: $formatColor = $format; goto b6s8X; gIMIb: $format = preg_replace("\57\x5c\134\x2f\165", "\134", $format); goto Ti1qM; szLql: return $value; goto Yskt0; Yskt0: } }
