<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:06              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 if (!defined("\120\110\120\105\130\x43\x45\114\x5f\x52\x4f\x4f\x54")) { define("\x50\x48\x50\105\x58\x43\x45\x4c\x5f\122\117\117\124", dirname(__FILE__) . "\57\56\x2e\x2f\56\x2e\x2f"); require PHPEXCEL_ROOT . "\120\x48\x50\x45\170\143\145\154\x2f\x41\x75\164\157\154\x6f\141\144\145\162\56\x70\150\x70"; } class PHPExcel_Reader_CSV extends PHPExcel_Reader_Abstract implements PHPExcel_Reader_IReader { private $inputEncoding = "\x55\124\x46\x2d\x38"; private $delimiter = "\x2c"; private $enclosure = "\42"; private $sheetIndex = 0; private $contiguous = false; private $contiguousRow = -1; public function __construct() { $this->readFilter = new PHPExcel_Reader_DefaultReadFilter(); } protected function isValidFormat() { return true; } public function setInputEncoding($pValue = "\x55\x54\106\55\x38") { $this->inputEncoding = $pValue; return $this; } public function getInputEncoding() { return $this->inputEncoding; } protected function skipBOM() { rewind($this->fileHandle); switch ($this->inputEncoding) { case "\x55\x54\106\55\70": fgets($this->fileHandle, 4) == "\xef\273\277" ? fseek($this->fileHandle, 3) : fseek($this->fileHandle, 0); break; case "\x55\124\106\x2d\x31\66\114\105": fgets($this->fileHandle, 3) == "\377\xfe" ? fseek($this->fileHandle, 2) : fseek($this->fileHandle, 0); break; case "\125\x54\x46\x2d\61\x36\102\105": fgets($this->fileHandle, 3) == "\xfe\xff" ? fseek($this->fileHandle, 2) : fseek($this->fileHandle, 0); break; case "\125\x54\x46\x2d\63\x32\114\x45": fgets($this->fileHandle, 5) == "\xff\xfe\x0\x0" ? fseek($this->fileHandle, 4) : fseek($this->fileHandle, 0); break; case "\x55\124\x46\55\63\62\102\105": fgets($this->fileHandle, 5) == "\x0\x0\376\377" ? fseek($this->fileHandle, 4) : fseek($this->fileHandle, 0); break; default: break; } } protected function checkSeparator() { goto zyHyR; zyHyR: $line = fgets($this->fileHandle); goto MmImj; MmImj: if ($line === false) { return; } goto YYPRx; YYPRx: if (strlen(trim($line, "\15\xa")) == 5 && stripos($line, "\x73\145\160\x3d") === 0) { $this->delimiter = substr($line, 4, 1); return; } goto fonaR; fonaR: return $this->skipBOM(); goto ZMOu_; ZMOu_: } public function listWorksheetInfo($pFilename) { goto BPRMs; uC8Cb: $worksheetInfo[0]["\x74\x6f\164\141\154\103\157\154\165\155\x6e\163"] = 0; goto IE3yY; pg8j1: $worksheetInfo = array(); goto xDp2Y; i_wJe: $this->skipBOM(); goto x19ft; IlsEl: fclose($fileHandle); goto Kaki6; f9Fr3: $worksheetInfo[0]["\x6c\141\x73\x74\103\x6f\x6c\x75\155\156\114\x65\164\x74\x65\x72"] = PHPExcel_Cell::stringFromColumnIndex($worksheetInfo[0]["\154\x61\x73\164\103\157\x6c\x75\155\x6e\111\156\144\x65\x78"]); goto PxGjm; Cjm0B: if (!$this->isValidFormat()) { fclose($this->fileHandle); throw new PHPExcel_Reader_Exception($pFilename . "\x20\151\x73\40\141\x6e\40\x49\156\x76\141\154\151\x64\40\x53\x70\x72\x65\141\x64\x73\x68\145\145\164\40\x66\151\154\145\x2e"); } goto TdS4t; unnsL: $escapeEnclosures = array("\134" . $this->enclosure, $this->enclosure . $this->enclosure); goto pg8j1; BPRMs: $this->openFile($pFilename); goto Cjm0B; Kaki6: return $worksheetInfo; goto zapIB; PQae1: $worksheetInfo[0]["\x74\x6f\x74\x61\x6c\x52\x6f\167\163"] = 0; goto uC8Cb; PxGjm: $worksheetInfo[0]["\x74\x6f\164\141\154\x43\157\x6c\x75\x6d\156\x73"] = $worksheetInfo[0]["\154\x61\163\164\x43\157\x6c\x75\x6d\156\x49\x6e\x64\145\170"] + 1; goto IlsEl; x19ft: $this->checkSeparator(); goto unnsL; TdS4t: $fileHandle = $this->fileHandle; goto i_wJe; wNERb: $worksheetInfo[0]["\154\x61\x73\x74\103\157\x6c\x75\155\x6e\111\156\144\x65\x78"] = 0; goto PQae1; ocnGL: $worksheetInfo[0]["\x6c\141\x73\164\x43\157\154\x75\x6d\x6e\x4c\145\164\x74\145\x72"] = "\x41"; goto wNERb; xDp2Y: $worksheetInfo[0]["\167\157\x72\153\163\x68\145\145\164\x4e\x61\x6d\x65"] = "\x57\157\x72\x6b\163\x68\145\145\164"; goto ocnGL; IE3yY: while (($rowData = fgetcsv($fileHandle, 0, $this->delimiter, $this->enclosure)) !== false) { $worksheetInfo[0]["\x74\157\164\141\154\122\157\x77\163"]++; $worksheetInfo[0]["\154\141\163\x74\x43\157\x6c\165\x6d\156\x49\156\144\x65\170"] = max($worksheetInfo[0]["\x6c\141\x73\164\103\157\x6c\165\155\156\111\156\x64\145\170"], count($rowData) - 1); } goto f9Fr3; zapIB: } public function load($pFilename) { $objPHPExcel = new PHPExcel(); return $this->loadIntoExisting($pFilename, $objPHPExcel); } public function loadIntoExisting($pFilename, PHPExcel $objPHPExcel) { goto PK3qS; mMHkR: $this->skipBOM(); goto ksAWY; vf26F: ini_set("\x61\x75\164\157\x5f\144\145\164\145\143\x74\137\154\x69\x6e\145\x5f\145\x6e\144\151\156\x67\163", true); goto HI5SK; PK3qS: $lineEnding = ini_get("\141\165\x74\x6f\x5f\x64\145\x74\145\143\x74\x5f\154\x69\x6e\145\x5f\145\x6e\x64\151\x6e\x67\x73"); goto vf26F; VlqDe: $escapeEnclosures = array("\134" . $this->enclosure, $this->enclosure . $this->enclosure); goto UbZ_o; YCA0d: if ($this->contiguous) { $this->contiguousRow = $currentRow; } goto Wr4A1; UVzHh: $fileHandle = $this->fileHandle; goto mMHkR; GOL5F: $sheet = $objPHPExcel->setActiveSheetIndex($this->sheetIndex); goto VlqDe; b51dR: fclose($fileHandle); goto YCA0d; Ev6TS: if (!$this->isValidFormat()) { fclose($this->fileHandle); throw new PHPExcel_Reader_Exception($pFilename . "\40\151\163\40\141\156\x20\111\156\x76\x61\154\x69\144\40\x53\x70\162\145\x61\144\163\150\x65\x65\164\40\x66\151\154\x65\56"); } goto UVzHh; MWHXn: if ($this->contiguous) { $currentRow = $this->contiguousRow == -1 ? $sheet->getHighestRow() : $this->contiguousRow; } goto fCnBj; Wr4A1: ini_set("\x61\x75\164\157\137\x64\x65\x74\x65\x63\x74\x5f\154\151\x6e\145\x5f\145\x6e\144\x69\156\147\163", $lineEnding); goto FLRHz; FLRHz: return $objPHPExcel; goto rL_yn; UbZ_o: $currentRow = 1; goto MWHXn; HI5SK: $this->openFile($pFilename); goto Ev6TS; pau3J: while ($objPHPExcel->getSheetCount() <= $this->sheetIndex) { $objPHPExcel->createSheet(); } goto GOL5F; fCnBj: while (($rowData = fgetcsv($fileHandle, 0, $this->delimiter, $this->enclosure)) !== false) { $columnLetter = "\101"; foreach ($rowData as $rowDatum) { if ($rowDatum != '' && $this->readFilter->readCell($columnLetter, $currentRow)) { goto CNC7I; CNC7I: $rowDatum = str_replace($escapeEnclosures, $this->enclosure, $rowDatum); goto Ekgdn; Ekgdn: if ($this->inputEncoding !== "\125\x54\x46\x2d\x38") { $rowDatum = PHPExcel_Shared_String::ConvertEncoding($rowDatum, "\125\124\106\x2d\70", $this->inputEncoding); } goto NIWMw; NIWMw: $sheet->getCell($columnLetter . $currentRow)->setValue($rowDatum); goto RdUGm; RdUGm: } ++$columnLetter; } ++$currentRow; } goto b51dR; ksAWY: $this->checkSeparator(); goto pau3J; rL_yn: } public function getDelimiter() { return $this->delimiter; } public function setDelimiter($pValue = "\x2c") { $this->delimiter = $pValue; return $this; } public function getEnclosure() { return $this->enclosure; } public function setEnclosure($pValue = "\x22") { goto bFfYn; bFfYn: if ($pValue == '') { $pValue = "\x22"; } goto RWjYQ; QEss_: return $this; goto pyRNJ; RWjYQ: $this->enclosure = $pValue; goto QEss_; pyRNJ: } public function getSheetIndex() { return $this->sheetIndex; } public function setSheetIndex($pValue = 0) { $this->sheetIndex = $pValue; return $this; } public function setContiguous($contiguous = false) { goto j0Rit; o0WWZ: return $this; goto JDX2_; gRXuz: if (!$contiguous) { $this->contiguousRow = -1; } goto o0WWZ; j0Rit: $this->contiguous = (bool) $contiguous; goto gRXuz; JDX2_: } public function getContiguous() { return $this->contiguous; } }
