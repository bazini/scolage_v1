<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:05              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 if (!defined("\120\x48\x50\x45\x58\x43\105\114\137\x52\x4f\117\x54")) { define("\120\x48\120\105\130\103\x45\x4c\137\122\x4f\117\124", dirname(__FILE__) . "\57\x2e\x2e\57\x2e\x2e\57"); require PHPEXCEL_ROOT . "\120\x48\x50\x45\x78\x63\x65\x6c\57\101\x75\x74\157\x6c\x6f\x61\144\145\162\x2e\x70\150\160"; } class PHPExcel_Reader_Excel2003XML extends PHPExcel_Reader_Abstract implements PHPExcel_Reader_IReader { protected $styles = array(); protected $charSet = "\125\124\x46\x2d\x38"; public function __construct() { $this->readFilter = new PHPExcel_Reader_DefaultReadFilter(); } public function canRead($pFilename) { goto yv6cl; yv6cl: $signature = array("\x3c\77\170\x6d\154\x20\x76\x65\x72\x73\x69\x6f\x6e\75\42\61\x2e\x30\x22", "\x3c\77\155\163\x6f\x2d\141\160\160\x6c\x69\x63\x61\164\x69\157\x6e\x20\x70\162\x6f\x67\151\144\75\42\x45\170\x63\x65\154\56\x53\x68\145\x65\x74\x22\77\x3e"); goto jEAGn; q0Lfn: return $valid; goto V7HeU; jEAGn: $this->openFile($pFilename); goto TdLjC; OOQ3l: $data = fread($fileHandle, 2048); goto o2ZcT; TdLjC: $fileHandle = $this->fileHandle; goto OOQ3l; o2ZcT: fclose($fileHandle); goto W5Lbv; W5Lbv: $valid = true; goto LThdM; LThdM: foreach ($signature as $match) { if (strpos($data, $match) === false) { $valid = false; break; } } goto vv3U6; vv3U6: if (preg_match("\x2f\74\77\x78\x6d\x6c\x2e\x2a\145\x6e\143\x6f\x64\x69\156\x67\x3d\x5b\47\42\135\50\56\52\77\51\133\x27\42\135\x2e\52\77\76\x2f\165\155", $data, $matches)) { $this->charSet = strtoupper($matches[1]); } goto q0Lfn; V7HeU: } public function listWorksheetNames($pFilename) { goto GaIuL; HujMQ: if (!$this->canRead($pFilename)) { throw new PHPExcel_Reader_Exception($pFilename . "\40\x69\163\x20\141\156\40\111\x6e\x76\x61\154\x69\144\40\x53\x70\162\x65\x61\144\x73\x68\x65\145\x74\x20\146\x69\154\145\56"); } goto wNCEI; wNCEI: $worksheetNames = array(); goto a9KAt; a9KAt: $xml = simplexml_load_string($this->securityScan(file_get_contents($pFilename)), "\123\151\155\160\154\x65\130\x4d\114\105\x6c\145\155\145\156\164", PHPExcel_Settings::getLibXmlLoaderOptions()); goto ibm3g; XtPpK: foreach ($xml_ss->Worksheet as $worksheet) { $worksheet_ss = $worksheet->attributes($namespaces["\x73\163"]); $worksheetNames[] = self::convertStringEncoding((string) $worksheet_ss["\116\x61\x6d\x65"], $this->charSet); } goto I3PrL; I3PrL: return $worksheetNames; goto sQYDZ; GaIuL: if (!file_exists($pFilename)) { throw new PHPExcel_Reader_Exception("\103\x6f\x75\154\144\40\x6e\x6f\x74\x20\157\160\145\x6e\x20" . $pFilename . "\x20\146\157\x72\40\162\145\x61\144\151\156\x67\41\40\x46\x69\154\x65\x20\144\x6f\145\163\x20\x6e\x6f\164\x20\x65\x78\151\163\x74\56"); } goto HujMQ; CCwN3: $xml_ss = $xml->children($namespaces["\x73\163"]); goto XtPpK; ibm3g: $namespaces = $xml->getNamespaces(true); goto CCwN3; sQYDZ: } public function listWorksheetInfo($pFilename) { goto ZQCCd; DAu1f: foreach ($xml_ss->Worksheet as $worksheet) { goto Q1xz8; fW41l: $tmpInfo["\x74\x6f\x74\141\x6c\103\157\x6c\165\155\156\163"] = 0; goto VRwn4; eOKMe: $tmpInfo["\x6c\141\163\164\x43\157\154\x75\155\x6e\x49\156\144\145\x78"] = 0; goto z5RaN; N5pyJ: $worksheetInfo[] = $tmpInfo; goto Foaxj; z5RaN: $tmpInfo["\164\157\x74\141\x6c\x52\x6f\x77\x73"] = 0; goto fW41l; fdCmw: $tmpInfo["\167\x6f\x72\153\x73\x68\x65\145\164\x4e\141\x6d\145"] = ''; goto yCJQm; yyhgv: $tmpInfo["\x74\157\x74\141\x6c\103\157\x6c\x75\x6d\156\x73"] = $tmpInfo["\x6c\x61\163\x74\103\157\154\165\x6d\x6e\111\x6e\x64\145\170"] + 1; goto N5pyJ; ro3t_: $tmpInfo = array(); goto fdCmw; VRwn4: if (isset($worksheet_ss["\116\x61\155\145"])) { $tmpInfo["\x77\157\x72\153\x73\150\x65\145\x74\x4e\141\155\x65"] = (string) $worksheet_ss["\116\x61\155\145"]; } else { $tmpInfo["\x77\x6f\x72\x6b\x73\150\145\x65\164\x4e\141\155\x65"] = "\127\x6f\x72\153\163\x68\x65\145\164\x5f{$worksheetID}"; } goto Qvv4i; Q1xz8: $worksheet_ss = $worksheet->attributes($namespaces["\x73\x73"]); goto ro3t_; Qvv4i: if (isset($worksheet->Table->Row)) { $rowIndex = 0; foreach ($worksheet->Table->Row as $rowData) { goto A0cf3; ksMR5: if ($rowHasData) { $tmpInfo["\164\x6f\164\x61\x6c\122\157\x77\163"] = max($tmpInfo["\x74\157\x74\141\x6c\122\x6f\167\163"], $rowIndex); } goto cH1xk; puAlx: $rowHasData = false; goto muuRa; UD9B9: ++$rowIndex; goto ksMR5; muuRa: foreach ($rowData->Cell as $cell) { if (isset($cell->Data)) { $tmpInfo["\x6c\x61\163\x74\103\x6f\x6c\165\155\156\111\156\144\x65\170"] = max($tmpInfo["\x6c\x61\163\164\x43\157\x6c\165\x6d\156\111\156\x64\145\x78"], $columnIndex); $rowHasData = true; } ++$columnIndex; } goto UD9B9; A0cf3: $columnIndex = 0; goto puAlx; cH1xk: } } goto bZI7B; Foaxj: ++$worksheetID; goto r72k6; bZI7B: $tmpInfo["\154\x61\163\x74\103\157\x6c\165\155\156\x4c\x65\164\164\145\x72"] = PHPExcel_Cell::stringFromColumnIndex($tmpInfo["\154\141\163\164\103\157\x6c\x75\155\156\x49\x6e\x64\x65\170"]); goto yyhgv; yCJQm: $tmpInfo["\154\x61\163\164\x43\157\154\x75\155\x6e\114\145\164\164\145\x72"] = "\101"; goto eOKMe; r72k6: } goto Hfhf1; tbnAs: $xml = simplexml_load_string($this->securityScan(file_get_contents($pFilename)), "\x53\151\x6d\x70\154\x65\130\115\114\105\154\145\155\x65\156\x74", PHPExcel_Settings::getLibXmlLoaderOptions()); goto EMMOV; VblFh: $xml_ss = $xml->children($namespaces["\163\x73"]); goto DAu1f; bd0Pm: $worksheetInfo = array(); goto tbnAs; ZQCCd: if (!file_exists($pFilename)) { throw new PHPExcel_Reader_Exception("\103\x6f\x75\154\144\40\x6e\x6f\x74\40\x6f\x70\x65\x6e\40" . $pFilename . "\40\x66\157\x72\40\162\145\141\x64\151\156\147\x21\x20\x46\151\x6c\x65\40\x64\157\x65\x73\40\156\157\x74\x20\x65\x78\151\x73\x74\x2e"); } goto bd0Pm; EvaVl: $worksheetID = 1; goto VblFh; EMMOV: $namespaces = $xml->getNamespaces(true); goto EvaVl; Hfhf1: return $worksheetInfo; goto HSj7H; HSj7H: } public function load($pFilename) { goto zT0MP; zT0MP: $objPHPExcel = new PHPExcel(); goto TC4sh; RkKb6: return $this->loadIntoExisting($pFilename, $objPHPExcel); goto PAeud; TC4sh: $objPHPExcel->removeSheetByIndex(0); goto RkKb6; PAeud: } protected static function identifyFixedStyleValue($styleList, &$styleAttributeValue) { goto A9gEc; A9gEc: $styleAttributeValue = strtolower($styleAttributeValue); goto j1dQh; eWAFH: return false; goto I8qC0; j1dQh: foreach ($styleList as $style) { if ($styleAttributeValue == strtolower($style)) { $styleAttributeValue = $style; return true; } } goto eWAFH; I8qC0: } protected static function pixel2WidthUnits($pxs) { goto dtIuO; E7q0E: return $widthUnits; goto X9wTr; dtIuO: $UNIT_OFFSET_MAP = array(0, 36, 73, 109, 146, 182, 219); goto TpsrA; PnvUu: $widthUnits += $UNIT_OFFSET_MAP[$pxs % 7]; goto E7q0E; TpsrA: $widthUnits = 256 * ($pxs / 7); goto PnvUu; X9wTr: } protected static function widthUnits2Pixel($widthUnits) { goto rwcm9; QBF24: $pixels += round($offsetWidthUnits / (256 / 7)); goto Wm4Zc; zaehy: $offsetWidthUnits = $widthUnits % 256; goto QBF24; rwcm9: $pixels = $widthUnits / 256 * 7; goto zaehy; Wm4Zc: return $pixels; goto Cb9cQ; Cb9cQ: } protected static function hex2str($hex) { return chr(hexdec($hex[1])); } public function loadIntoExisting($pFilename, PHPExcel $objPHPExcel) { goto umuYR; J308O: $toFormats = array("\x2d", "\40"); goto a9Fpg; EMuHn: $horizontalAlignmentStyles = array(PHPExcel_Style_Alignment::HORIZONTAL_GENERAL, PHPExcel_Style_Alignment::HORIZONTAL_LEFT, PHPExcel_Style_Alignment::HORIZONTAL_RIGHT, PHPExcel_Style_Alignment::HORIZONTAL_CENTER, PHPExcel_Style_Alignment::HORIZONTAL_CENTER_CONTINUOUS, PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY); goto CuMsc; K71wj: $namespaces = $xml->getNamespaces(true); goto eZuxp; umuYR: $fromFormats = array("\x5c\x2d", "\134\40"); goto J308O; CuMsc: $timezoneObj = new DateTimeZone("\105\165\x72\x6f\x70\145\x2f\114\157\156\x64\x6f\156"); goto r16zu; YdZuw: $xml = simplexml_load_string($this->securityScan(file_get_contents($pFilename)), "\x53\151\155\160\154\145\x58\115\x4c\105\154\145\155\x65\x6e\x74", PHPExcel_Settings::getLibXmlLoaderOptions()); goto K71wj; LBPbL: $worksheetID = 0; goto SNQS0; mUCUP: foreach ($xml_ss->Worksheet as $worksheet) { goto sQ4AO; ifxHV: $objPHPExcel->setActiveSheetIndex($worksheetID); goto zPa8p; T0eT0: if (isset($this->loadSheetsOnly) && isset($worksheet_ss["\x4e\x61\x6d\145"]) && !in_array($worksheet_ss["\116\x61\x6d\x65"], $this->loadSheetsOnly)) { continue; } goto OxwW3; gH8WK: $columnID = "\101"; goto N_JFt; DAFTV: $rowID = 1; goto B2X9H; B2X9H: if (isset($worksheet->Table->Row)) { $additionalMergedCells = 0; foreach ($worksheet->Table->Row as $rowData) { goto s2vVx; l_pzT: ++$rowID; goto WIkS2; BdOTF: if ($rowHasData) { if (isset($row_ss["\123\164\x79\x6c\x65\x49\x44"])) { $rowStyle = $row_ss["\x53\x74\x79\x6c\x65\111\x44"]; } if (isset($row_ss["\x48\145\151\147\150\164"])) { $rowHeight = $row_ss["\110\x65\151\147\150\x74"]; $objPHPExcel->getActiveSheet()->getRowDimension($rowID)->setRowHeight($rowHeight); } } goto l_pzT; xjepr: if (isset($row_ss["\111\x6e\x64\145\x78"])) { $rowID = (int) $row_ss["\x49\x6e\x64\x65\170"]; } goto glYXF; Hloju: $row_ss = $rowData->attributes($namespaces["\x73\163"]); goto xjepr; glYXF: $columnID = "\x41"; goto TuZ2v; TuZ2v: foreach ($rowData->Cell as $cell) { goto XEgCO; pZ15d: ++$columnID; goto N6W4y; IJvbY: if (isset($cell_ss["\106\x6f\x72\x6d\x75\154\x61"])) { goto MZpFt; d71Js: if (isset($cell_ss["\x41\162\x72\141\171\122\141\156\147\x65"])) { $cellDataCSEFormula = $cell_ss["\101\162\162\141\x79\x52\x61\156\147\145"]; } goto BPwqA; BPwqA: $hasCalculatedValue = true; goto wZ8H1; MZpFt: $cellDataFormula = $cell_ss["\x46\x6f\162\x6d\165\x6c\x61"]; goto d71Js; wZ8H1: } goto aDvNF; hLxx3: if (isset($cell_ss["\115\145\162\x67\145\x41\143\162\157\x73\x73"]) || isset($cell_ss["\115\x65\162\147\x65\104\x6f\167\156"])) { goto s4l9i; gAbqg: $cellRange .= "\x3a" . $columnTo . $rowTo; goto Fv1rD; Fv1rD: $objPHPExcel->getActiveSheet()->mergeCells($cellRange); goto WuWCY; tqpZU: if (isset($cell_ss["\x4d\145\x72\x67\145\x44\157\x77\x6e"])) { $rowTo = $rowTo + $cell_ss["\115\145\162\x67\x65\x44\x6f\167\x6e"]; } goto gAbqg; s4l9i: $columnTo = $columnID; goto H83o1; RjE22: $rowTo = $rowID; goto tqpZU; H83o1: if (isset($cell_ss["\x4d\145\x72\x67\x65\101\x63\x72\x6f\x73\x73"])) { $additionalMergedCells += (int) $cell_ss["\x4d\145\162\147\x65\101\143\162\x6f\x73\163"]; $columnTo = PHPExcel_Cell::stringFromColumnIndex(PHPExcel_Cell::columnIndexFromString($columnID) + $cell_ss["\115\x65\x72\x67\145\x41\x63\x72\x6f\163\163"] - 1); } goto RjE22; WuWCY: } goto TADpP; TADpP: $cellIsSet = $hasCalculatedValue = false; goto GH5Y2; XEgCO: $cell_ss = $cell->attributes($namespaces["\x73\x73"]); goto aYwKI; TCIGO: $cellRange = $columnID . $rowID; goto LaZZR; aYwKI: if (isset($cell_ss["\x49\x6e\144\x65\170"])) { $columnID = PHPExcel_Cell::stringFromColumnIndex($cell_ss["\111\x6e\x64\x65\x78"] - 1); } goto TCIGO; qaAHH: if ($cellIsSet && isset($cell_ss["\x53\164\171\x6c\x65\111\104"])) { $style = (string) $cell_ss["\123\x74\x79\x6c\x65\x49\x44"]; if (isset($this->styles[$style]) && !empty($this->styles[$style])) { if (!$objPHPExcel->getActiveSheet()->cellExists($columnID . $rowID)) { $objPHPExcel->getActiveSheet()->getCell($columnID . $rowID)->setValue(null); } $objPHPExcel->getActiveSheet()->getStyle($cellRange)->applyFromArray($this->styles[$style]); } } goto pZ15d; LaZZR: if ($this->getReadFilter() !== null) { if (!$this->getReadFilter()->readCell($columnID, $rowID, $worksheetName)) { continue; } } goto hLxx3; aDvNF: if (isset($cell->Data)) { goto sNeB1; Xu2ul: $objPHPExcel->getActiveSheet()->getCell($columnID . $rowID)->setValueExplicit($hasCalculatedValue ? $cellDataFormula : $cellValue, $type); goto MTrOm; j6IH0: $type = PHPExcel_Cell_DataType::TYPE_NULL; goto ezgqo; Mp7_b: if ($hasCalculatedValue) { goto zLzs0; Ahctc: unset($value); goto v2X2w; zLzs0: $type = PHPExcel_Cell_DataType::TYPE_FORMULA; goto x2clX; v2X2w: $cellDataFormula = implode("\x22", $temp); goto blh04; x2clX: $columnNumber = PHPExcel_Cell::columnIndexFromString($columnID); goto IiFcQ; IiFcQ: if (substr($cellDataFormula, 0, 3) == "\157\x66\x3a") { goto Xy36q; g9r5q: $temp = explode("\x22", $cellDataFormula); goto UrMiI; oOVzY: foreach ($temp as &$value) { if ($key = !$key) { $value = str_replace(array("\133\56", "\56", "\x5d"), '', $value); } } goto uycpv; Xy36q: $cellDataFormula = substr($cellDataFormula, 3); goto g9r5q; UrMiI: $key = false; goto oOVzY; uycpv: } else { goto gXe9_; gXe9_: $temp = explode("\x22", $cellDataFormula); goto BCANo; kcOWz: foreach ($temp as &$value) { if ($key = !$key) { goto rVajb; rVajb: preg_match_all("\x2f\50\122\x28\x5c\133\77\x2d\x3f\134\x64\x2a\134\x5d\77\x29\51\50\103\50\134\x5b\x3f\55\77\x5c\x64\x2a\134\x5d\x3f\51\51\x2f", $value, $cellReferences, PREG_SET_ORDER + PREG_OFFSET_CAPTURE); goto J9uj3; J9uj3: $cellReferences = array_reverse($cellReferences); goto YWYwi; YWYwi: foreach ($cellReferences as $cellReference) { goto UQ94I; mTPM1: $A1CellReference = PHPExcel_Cell::stringFromColumnIndex($columnReference - 1) . $rowReference; goto Z1kH2; UQ94I: $rowReference = $cellReference[2][0]; goto JhTZp; xIYEB: if ($rowReference[0] == "\x5b") { $rowReference = $rowID + trim($rowReference, "\133\135"); } goto gwgbr; RWG2m: if ($columnReference[0] == "\133") { $columnReference = $columnNumber + trim($columnReference, "\x5b\135"); } goto mTPM1; Z1kH2: $value = substr_replace($value, $A1CellReference, $cellReference[0][1], strlen($cellReference[0][0])); goto TBL73; JhTZp: if ($rowReference == '') { $rowReference = $rowID; } goto xIYEB; XUtgM: if ($columnReference == '') { $columnReference = $columnNumber; } goto RWG2m; gwgbr: $columnReference = $cellReference[4][0]; goto XUtgM; TBL73: } goto X1O9Z; X1O9Z: } } goto PUCr2; BCANo: $key = false; goto kcOWz; PUCr2: } goto Ahctc; blh04: } goto Xu2ul; MTrOm: if ($hasCalculatedValue) { $objPHPExcel->getActiveSheet()->getCell($columnID . $rowID)->setCalculatedValue($cellValue); } goto Xpq1a; ezgqo: $cellData_ss = $cellData->attributes($namespaces["\163\x73"]); goto XU1TM; sNeB1: $cellValue = $cellData = $cell->Data; goto j6IH0; XU1TM: if (isset($cellData_ss["\x54\171\160\x65"])) { $cellDataType = $cellData_ss["\124\x79\x70\x65"]; switch ($cellDataType) { case "\123\164\162\x69\x6e\147": goto W49UA; W49UA: $cellValue = self::convertStringEncoding($cellValue, $this->charSet); goto E0vw2; E0vw2: $type = PHPExcel_Cell_DataType::TYPE_STRING; goto jHqtG; jHqtG: break; goto T1OXG; T1OXG: case "\116\x75\155\142\x65\x72": goto GaSwH; nZtKe: break; goto jpIQo; RwH_Q: $cellValue = (float) $cellValue; goto l5qzt; l5qzt: if (floor($cellValue) == $cellValue) { $cellValue = (int) $cellValue; } goto nZtKe; GaSwH: $type = PHPExcel_Cell_DataType::TYPE_NUMERIC; goto RwH_Q; jpIQo: case "\x42\157\x6f\154\x65\141\156": goto yNgyS; KWs6I: $cellValue = $cellValue != 0; goto MlbdW; yNgyS: $type = PHPExcel_Cell_DataType::TYPE_BOOL; goto KWs6I; MlbdW: break; goto lif1r; lif1r: case "\x44\x61\164\145\124\x69\x6d\x65": goto Nl6cD; UOfuG: break; goto NYJBf; DGRS4: $cellValue = PHPExcel_Shared_Date::PHPToExcel(strtotime($cellValue)); goto UOfuG; Nl6cD: $type = PHPExcel_Cell_DataType::TYPE_NUMERIC; goto DGRS4; NYJBf: case "\x45\x72\162\157\162": $type = PHPExcel_Cell_DataType::TYPE_ERROR; break; } } goto Mp7_b; Xpq1a: $cellIsSet = $rowHasData = true; goto u9ec7; u9ec7: } goto tvRrp; GH5Y2: $cellDataFormula = ''; goto IJvbY; tvRrp: if (isset($cell->Comment)) { goto jB3YJ; HS7Q_: $annotation = strip_tags($node); goto SIVOd; SIVOd: $objPHPExcel->getActiveSheet()->getComment($columnID . $rowID)->setAuthor(self::convertStringEncoding($author, $this->charSet))->setText($this->parseRichText($annotation)); goto O2Nt3; kbAVH: if (isset($commentAttributes->Author)) { $author = (string) $commentAttributes->Author; } goto eI0MD; eI0MD: $node = $cell->Comment->Data->asXML(); goto HS7Q_; FADRK: $author = "\x75\x6e\153\x6e\x6f\x77\156"; goto kbAVH; jB3YJ: $commentAttributes = $cell->Comment->attributes($namespaces["\x73\x73"]); goto FADRK; O2Nt3: } goto qaAHH; N6W4y: while ($additionalMergedCells > 0) { ++$columnID; $additionalMergedCells--; } goto OGiQC; OGiQC: } goto BdOTF; s2vVx: $rowHasData = false; goto Hloju; WIkS2: } } goto bMlhL; zPa8p: if (isset($worksheet_ss["\x4e\141\x6d\145"])) { $worksheetName = self::convertStringEncoding((string) $worksheet_ss["\116\141\x6d\145"], $this->charSet); $objPHPExcel->getActiveSheet()->setTitle($worksheetName, false); } goto gH8WK; OxwW3: $objPHPExcel->createSheet(); goto ifxHV; bMlhL: ++$worksheetID; goto IvxC6; N_JFt: if (isset($worksheet->Table->Column)) { foreach ($worksheet->Table->Column as $columnData) { goto gixBF; B7IuK: ++$columnID; goto fXhdn; t9NT_: if (isset($columnData_ss["\x49\156\144\x65\170"])) { $columnID = PHPExcel_Cell::stringFromColumnIndex($columnData_ss["\111\x6e\144\145\x78"] - 1); } goto XSlmw; XSlmw: if (isset($columnData_ss["\x57\x69\144\164\x68"])) { $columnWidth = $columnData_ss["\x57\151\144\x74\150"]; $objPHPExcel->getActiveSheet()->getColumnDimension($columnID)->setWidth($columnWidth / 5.4); } goto B7IuK; gixBF: $columnData_ss = $columnData->attributes($namespaces["\163\163"]); goto t9NT_; fXhdn: } } goto DAFTV; sQ4AO: $worksheet_ss = $worksheet->attributes($namespaces["\x73\163"]); goto T0eT0; IvxC6: } goto R0NX7; DUy1j: if (!file_exists($pFilename)) { throw new PHPExcel_Reader_Exception("\103\157\165\154\x64\x20\156\157\x74\40\157\160\x65\156\40" . $pFilename . "\x20\146\157\162\40\x72\145\x61\144\x69\156\147\41\40\106\x69\154\x65\40\144\157\145\163\40\156\157\164\x20\x65\170\x69\163\164\x2e"); } goto BeCtL; Wb6ff: if (isset($xml->CustomDocumentProperties)) { foreach ($xml->CustomDocumentProperties[0] as $propertyName => $propertyValue) { goto huXKR; OqsNc: $propertyName = preg_replace_callback("\57\137\170\x28\133\60\55\x39\x61\55\x7a\135\x7b\x34\175\51\137\57", "\x50\110\120\105\170\143\x65\x6c\x5f\x52\145\141\144\145\x72\x5f\x45\x78\143\145\x6c\x32\x30\x30\63\130\115\x4c\x3a\72\x68\x65\x78\x32\x73\x74\162", $propertyName); goto j1ppj; huXKR: $propertyAttributes = $propertyValue->attributes($namespaces["\144\164"]); goto OqsNc; HCYt0: switch ((string) $propertyAttributes) { case "\x73\164\162\x69\x6e\147": goto zdPfN; fGAKu: $propertyValue = trim($propertyValue); goto gNfym; gNfym: break; goto TTygp; zdPfN: $propertyType = PHPExcel_DocumentProperties::PROPERTY_TYPE_STRING; goto fGAKu; TTygp: case "\x62\x6f\157\x6c\x65\141\x6e": goto NlhQo; FCE61: break; goto Pl79X; NlhQo: $propertyType = PHPExcel_DocumentProperties::PROPERTY_TYPE_BOOLEAN; goto vC0QA; vC0QA: $propertyValue = (bool) $propertyValue; goto FCE61; Pl79X: case "\151\156\164\145\x67\145\x72": goto T2T5O; zge_o: $propertyValue = intval($propertyValue); goto mkCyA; mkCyA: break; goto Ra1Gx; T2T5O: $propertyType = PHPExcel_DocumentProperties::PROPERTY_TYPE_INTEGER; goto zge_o; Ra1Gx: case "\146\154\157\141\164": goto QWYEJ; WTzZG: $propertyValue = floatval($propertyValue); goto RqtLo; QWYEJ: $propertyType = PHPExcel_DocumentProperties::PROPERTY_TYPE_FLOAT; goto WTzZG; RqtLo: break; goto Sa7dP; Sa7dP: case "\144\141\x74\145\124\x69\x6d\x65\56\x74\172": goto Ir1ru; obWMH: $propertyValue = strtotime(trim($propertyValue)); goto IVxpv; Ir1ru: $propertyType = PHPExcel_DocumentProperties::PROPERTY_TYPE_DATE; goto obWMH; IVxpv: break; goto qMkuG; qMkuG: } goto BDKJj; j1ppj: $propertyType = PHPExcel_DocumentProperties::PROPERTY_TYPE_UNKNOWN; goto HCYt0; BDKJj: $docProps->setCustomProperty($propertyName, $propertyValue, $propertyType); goto Udg9n; Udg9n: } } goto M2KYf; a9Fpg: $underlineStyles = array(PHPExcel_Style_Font::UNDERLINE_NONE, PHPExcel_Style_Font::UNDERLINE_DOUBLE, PHPExcel_Style_Font::UNDERLINE_DOUBLEACCOUNTING, PHPExcel_Style_Font::UNDERLINE_SINGLE, PHPExcel_Style_Font::UNDERLINE_SINGLEACCOUNTING); goto Tv0rb; BeCtL: if (!$this->canRead($pFilename)) { throw new PHPExcel_Reader_Exception($pFilename . "\40\151\163\40\x61\156\x20\111\x6e\x76\x61\x6c\x69\x64\x20\x53\160\x72\145\141\x64\163\150\145\x65\164\40\x66\151\154\x65\x2e"); } goto YdZuw; SNQS0: $xml_ss = $xml->children($namespaces["\163\163"]); goto mUCUP; R0NX7: return $objPHPExcel; goto tNa8s; eZuxp: $docProps = $objPHPExcel->getProperties(); goto nnXEG; M2KYf: foreach ($xml->Styles[0] as $style) { goto Rarv1; Rarv1: $style_ss = $style->attributes($namespaces["\x73\163"]); goto azGdP; azGdP: $styleID = (string) $style_ss["\x49\104"]; goto m6Teh; m6Teh: $this->styles[$styleID] = isset($this->styles["\104\145\146\x61\x75\154\x74"]) ? $this->styles["\104\145\146\x61\x75\154\x74"] : array(); goto xJZMu; xJZMu: foreach ($style as $styleType => $styleData) { $styleAttributes = $styleData->attributes($namespaces["\x73\163"]); switch ($styleType) { case "\x41\154\x69\147\x6e\155\x65\x6e\x74": foreach ($styleAttributes as $styleAttributeKey => $styleAttributeValue) { $styleAttributeValue = (string) $styleAttributeValue; switch ($styleAttributeKey) { case "\126\x65\162\x74\151\143\141\x6c": if (self::identifyFixedStyleValue($verticalAlignmentStyles, $styleAttributeValue)) { $this->styles[$styleID]["\x61\154\151\x67\156\155\145\x6e\x74"]["\166\145\x72\x74\151\143\x61\154"] = $styleAttributeValue; } break; case "\110\157\162\x69\172\x6f\x6e\x74\141\154": if (self::identifyFixedStyleValue($horizontalAlignmentStyles, $styleAttributeValue)) { $this->styles[$styleID]["\141\x6c\x69\x67\x6e\x6d\145\156\164"]["\x68\x6f\162\151\172\157\x6e\164\x61\154"] = $styleAttributeValue; } break; case "\127\162\x61\160\x54\x65\170\164": $this->styles[$styleID]["\x61\154\151\x67\156\155\145\156\x74"]["\x77\162\141\x70"] = true; break; } } break; case "\102\x6f\162\144\x65\x72\x73": foreach ($styleData->Border as $borderStyle) { goto o8bLD; KIf9H: foreach ($borderAttributes as $borderStyleKey => $borderStyleValue) { switch ($borderStyleKey) { case "\114\151\156\x65\x53\164\x79\x6c\x65": $thisBorder["\163\x74\x79\154\x65"] = PHPExcel_Style_Border::BORDER_MEDIUM; break; case "\127\145\151\147\150\x74": break; case "\120\157\x73\x69\x74\151\157\156": $borderPosition = strtolower($borderStyleValue); break; case "\x43\157\154\157\162": goto F4jfr; PJcj_: $thisBorder["\x63\157\x6c\157\162"]["\x72\x67\x62"] = $borderColour; goto sHPnN; F4jfr: $borderColour = substr($borderStyleValue, 1); goto PJcj_; sHPnN: break; goto B4jcs; B4jcs: } } goto RL2Zy; o8bLD: $borderAttributes = $borderStyle->attributes($namespaces["\163\x73"]); goto FK4kD; RL2Zy: if (!empty($thisBorder)) { if ($borderPosition == "\x6c\145\146\164" || $borderPosition == "\x72\x69\x67\150\x74" || $borderPosition == "\x74\157\160" || $borderPosition == "\x62\157\164\164\x6f\x6d") { $this->styles[$styleID]["\x62\157\x72\144\145\162\163"][$borderPosition] = $thisBorder; } } goto uneyu; FK4kD: $thisBorder = array(); goto KIf9H; uneyu: } break; case "\106\x6f\156\x74": foreach ($styleAttributes as $styleAttributeKey => $styleAttributeValue) { $styleAttributeValue = (string) $styleAttributeValue; switch ($styleAttributeKey) { case "\x46\x6f\156\164\x4e\141\155\x65": $this->styles[$styleID]["\146\157\x6e\x74"]["\x6e\x61\x6d\145"] = $styleAttributeValue; break; case "\123\x69\x7a\145": $this->styles[$styleID]["\x66\157\156\x74"]["\163\x69\x7a\x65"] = $styleAttributeValue; break; case "\103\157\154\157\162": $this->styles[$styleID]["\146\x6f\156\x74"]["\x63\157\154\x6f\x72"]["\x72\x67\x62"] = substr($styleAttributeValue, 1); break; case "\x42\157\154\x64": $this->styles[$styleID]["\146\157\156\x74"]["\142\x6f\x6c\x64"] = true; break; case "\111\164\x61\x6c\151\x63": $this->styles[$styleID]["\146\157\x6e\164"]["\x69\164\x61\154\x69\143"] = true; break; case "\x55\156\144\x65\162\x6c\151\156\x65": if (self::identifyFixedStyleValue($underlineStyles, $styleAttributeValue)) { $this->styles[$styleID]["\146\157\156\164"]["\x75\x6e\x64\145\x72\154\x69\x6e\x65"] = $styleAttributeValue; } break; } } break; case "\x49\156\x74\145\162\x69\157\162": foreach ($styleAttributes as $styleAttributeKey => $styleAttributeValue) { switch ($styleAttributeKey) { case "\x43\157\x6c\x6f\x72": $this->styles[$styleID]["\x66\151\x6c\x6c"]["\143\x6f\154\x6f\162"]["\162\x67\x62"] = substr($styleAttributeValue, 1); break; } } break; case "\x4e\165\155\x62\x65\x72\x46\x6f\x72\x6d\141\164": foreach ($styleAttributes as $styleAttributeKey => $styleAttributeValue) { goto yxQAM; sUUsz: if ($styleAttributeValue > '') { $this->styles[$styleID]["\x6e\x75\155\x62\145\x72\x66\157\162\x6d\x61\164"]["\143\157\144\145"] = $styleAttributeValue; } goto Btc1_; yxQAM: $styleAttributeValue = str_replace($fromFormats, $toFormats, $styleAttributeValue); goto ZjWCX; ZjWCX: switch ($styleAttributeValue) { case "\x53\x68\157\x72\164\40\x44\141\164\145": $styleAttributeValue = "\x64\144\x2f\x6d\x6d\57\171\x79\171\171"; break; } goto sUUsz; Btc1_: } break; case "\120\162\x6f\x74\145\x63\164\x69\x6f\156": foreach ($styleAttributes as $styleAttributeKey => $styleAttributeValue) { } break; } } goto OY0iF; OY0iF: } goto LBPbL; Tv0rb: $verticalAlignmentStyles = array(PHPExcel_Style_Alignment::VERTICAL_BOTTOM, PHPExcel_Style_Alignment::VERTICAL_TOP, PHPExcel_Style_Alignment::VERTICAL_CENTER, PHPExcel_Style_Alignment::VERTICAL_JUSTIFY); goto EMuHn; nnXEG: if (isset($xml->DocumentProperties[0])) { foreach ($xml->DocumentProperties[0] as $propertyName => $propertyValue) { switch ($propertyName) { case "\x54\x69\164\154\145": $docProps->setTitle(self::convertStringEncoding($propertyValue, $this->charSet)); break; case "\x53\x75\142\x6a\x65\143\x74": $docProps->setSubject(self::convertStringEncoding($propertyValue, $this->charSet)); break; case "\101\165\164\150\x6f\x72": $docProps->setCreator(self::convertStringEncoding($propertyValue, $this->charSet)); break; case "\x43\162\x65\141\164\145\144": goto tLup3; tLup3: $creationDate = strtotime($propertyValue); goto DBcRi; Xc0wh: break; goto mRZJg; DBcRi: $docProps->setCreated($creationDate); goto Xc0wh; mRZJg: case "\114\x61\163\164\x41\x75\x74\150\x6f\x72": $docProps->setLastModifiedBy(self::convertStringEncoding($propertyValue, $this->charSet)); break; case "\x4c\x61\163\164\x53\141\x76\x65\x64": goto E2sUX; is4uI: break; goto DucvZ; HBQ89: $docProps->setModified($lastSaveDate); goto is4uI; E2sUX: $lastSaveDate = strtotime($propertyValue); goto HBQ89; DucvZ: case "\x43\157\x6d\x70\x61\156\x79": $docProps->setCompany(self::convertStringEncoding($propertyValue, $this->charSet)); break; case "\103\x61\x74\145\147\157\162\x79": $docProps->setCategory(self::convertStringEncoding($propertyValue, $this->charSet)); break; case "\115\x61\x6e\x61\147\145\162": $docProps->setManager(self::convertStringEncoding($propertyValue, $this->charSet)); break; case "\x4b\x65\x79\167\157\162\144\x73": $docProps->setKeywords(self::convertStringEncoding($propertyValue, $this->charSet)); break; case "\x44\x65\163\143\x72\x69\160\164\x69\157\156": $docProps->setDescription(self::convertStringEncoding($propertyValue, $this->charSet)); break; } } } goto Wb6ff; r16zu: $GMT = new DateTimeZone("\x55\124\x43"); goto DUy1j; tNa8s: } protected static function convertStringEncoding($string, $charset) { if ($charset != "\x55\124\x46\x2d\70") { return PHPExcel_Shared_String::ConvertEncoding($string, "\x55\x54\x46\x2d\70", $charset); } return $string; } protected function parseRichText($is = '') { goto uHr8s; gsQgv: return $value; goto bn2eY; ay04F: $value->createText(self::convertStringEncoding($is, $this->charSet)); goto gsQgv; uHr8s: $value = new PHPExcel_RichText(); goto ay04F; bn2eY: } }
