<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:08              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class PHPExcel_Chart_DataSeriesValues { const DATASERIES_TYPE_STRING = "\123\164\x72\151\x6e\147"; const DATASERIES_TYPE_NUMBER = "\x4e\165\x6d\142\x65\162"; private static $dataTypeValues = array(self::DATASERIES_TYPE_STRING, self::DATASERIES_TYPE_NUMBER); private $dataType; private $dataSource; private $formatCode; private $pointMarker; private $pointCount = 0; private $dataValues = array(); public function __construct($dataType = self::DATASERIES_TYPE_NUMBER, $dataSource = null, $formatCode = null, $pointCount = 0, $dataValues = array(), $marker = null) { goto xOqyv; xOqyv: $this->setDataType($dataType); goto m4Y__; qVid7: $this->pointCount = $pointCount; goto GD3kr; gIBs0: $this->pointMarker = $marker; goto yP5kO; GD3kr: $this->dataValues = $dataValues; goto gIBs0; qUlUv: $this->formatCode = $formatCode; goto qVid7; m4Y__: $this->dataSource = $dataSource; goto qUlUv; yP5kO: } public function getDataType() { return $this->dataType; } public function setDataType($dataType = self::DATASERIES_TYPE_NUMBER) { goto qt6xa; q5z5T: $this->dataType = $dataType; goto UGbQ1; qt6xa: if (!in_array($dataType, self::$dataTypeValues)) { throw new PHPExcel_Chart_Exception("\x49\156\166\141\154\x69\144\40\144\x61\x74\x61\164\x79\160\x65\x20\x66\157\162\40\x63\x68\x61\162\x74\x20\144\x61\164\141\x20\163\x65\162\151\x65\x73\x20\166\141\154\x75\x65\x73"); } goto q5z5T; UGbQ1: return $this; goto nohWz; nohWz: } public function getDataSource() { return $this->dataSource; } public function setDataSource($dataSource = null, $refreshDataValues = true) { goto yNYB3; ZYizl: return $this; goto Kar0x; YbFRb: if ($refreshDataValues) { } goto ZYizl; yNYB3: $this->dataSource = $dataSource; goto YbFRb; Kar0x: } public function getPointMarker() { return $this->pointMarker; } public function setPointMarker($marker = null) { $this->pointMarker = $marker; return $this; } public function getFormatCode() { return $this->formatCode; } public function setFormatCode($formatCode = null) { $this->formatCode = $formatCode; return $this; } public function getPointCount() { return $this->pointCount; } public function isMultiLevelSeries() { if (count($this->dataValues) > 0) { return is_array($this->dataValues[0]); } return null; } public function multiLevelCount() { goto WrOyb; zmFLa: foreach ($this->dataValues as $dataValueSet) { $levelCount = max($levelCount, count($dataValueSet)); } goto SVWc0; WrOyb: $levelCount = 0; goto zmFLa; SVWc0: return $levelCount; goto BlvxN; BlvxN: } public function getDataValues() { return $this->dataValues; } public function getDataValue() { goto Xe0Q2; UwDTF: return $this->dataValues; goto Db2ps; IaFYt: if ($count == 0) { return null; } elseif ($count == 1) { return $this->dataValues[0]; } goto UwDTF; Xe0Q2: $count = count($this->dataValues); goto IaFYt; Db2ps: } public function setDataValues($dataValues = array(), $refreshDataSource = true) { goto xCumr; FWcFE: if ($refreshDataSource) { } goto Kijy9; Kijy9: return $this; goto v4Hmv; xCumr: $this->dataValues = PHPExcel_Calculation_Functions::flattenArray($dataValues); goto IH6Yt; IH6Yt: $this->pointCount = count($dataValues); goto FWcFE; v4Hmv: } private function stripNulls($var) { return $var !== null; } public function refresh(PHPExcel_Worksheet $worksheet, $flatten = true) { if ($this->dataSource !== null) { goto TACqK; yL9uv: $this->pointCount = count($this->dataValues); goto m_Jmx; v0ZyM: $newDataValues = PHPExcel_Calculation::unwrapResult($calcEngine->_calculateFormulaValue("\75" . $this->dataSource, null, $worksheet->getCell("\101\x31"))); goto eEY3f; TACqK: $calcEngine = PHPExcel_Calculation::getInstance($worksheet->getParent()); goto v0ZyM; eEY3f: if ($flatten) { goto Npsl9; Npsl9: $this->dataValues = PHPExcel_Calculation_Functions::flattenArray($newDataValues); goto x4pY8; x4pY8: foreach ($this->dataValues as &$dataValue) { if (!empty($dataValue) && $dataValue[0] == "\x23") { $dataValue = 0.0; } } goto JDQpV; JDQpV: unset($dataValue); goto WYzBE; WYzBE: } else { goto C0Ht5; ALoXE: $dimensions = PHPExcel_Cell::rangeDimension(str_replace("\x24", '', $cellRange)); goto EDcmH; EDcmH: if ($dimensions[0] == 1 || $dimensions[1] == 1) { $this->dataValues = PHPExcel_Calculation_Functions::flattenArray($newDataValues); } else { goto FcPK1; sH9ML: foreach ($newArray as $i => $newDataSet) { $newArray[$i] = array($newDataSet); } goto XM91k; FcPK1: $newArray = array_values(array_shift($newDataValues)); goto sH9ML; XM91k: foreach ($newDataValues as $newDataSet) { $i = 0; foreach ($newDataSet as $newDataVal) { array_unshift($newArray[$i++], $newDataVal); } } goto m8Rta; m8Rta: $this->dataValues = $newArray; goto CqayW; CqayW: } goto AyLBk; djEKH: if (count($cellRange) > 1) { list(, $cellRange) = $cellRange; } goto ALoXE; C0Ht5: $cellRange = explode("\x21", $this->dataSource); goto djEKH; AyLBk: } goto yL9uv; m_Jmx: } } }
