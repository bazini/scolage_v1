<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:12:03              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 if (!defined("\120\x48\x50\105\130\x43\105\x4c\137\122\x4f\x4f\124")) { define("\x50\110\120\x45\130\x43\105\x4c\137\x52\117\x4f\124", dirname(__FILE__) . "\57"); require PHPEXCEL_ROOT . "\x50\110\x50\105\170\x63\x65\154\57\x41\x75\164\157\154\157\141\144\x65\162\56\160\150\x70"; } class PHPExcel { private $uniqueID; private $properties; private $security; private $workSheetCollection = array(); private $calculationEngine; private $activeSheetIndex = 0; private $namedRanges = array(); private $cellXfSupervisor; private $cellXfCollection = array(); private $cellStyleXfCollection = array(); private $hasMacros = false; private $macrosCode; private $macrosCertificate; private $ribbonXMLData; private $ribbonBinObjects; public function hasMacros() { return $this->hasMacros; } public function setHasMacros($hasMacros = false) { $this->hasMacros = (bool) $hasMacros; } public function setMacrosCode($MacrosCode = null) { $this->macrosCode = $MacrosCode; $this->setHasMacros(!is_null($MacrosCode)); } public function getMacrosCode() { return $this->macrosCode; } public function setMacrosCertificate($Certificate = null) { $this->macrosCertificate = $Certificate; } public function hasMacrosCertificate() { return !is_null($this->macrosCertificate); } public function getMacrosCertificate() { return $this->macrosCertificate; } public function discardMacros() { goto gYai_; gYai_: $this->hasMacros = false; goto CVSGt; UbaJf: $this->macrosCertificate = null; goto BE6DW; CVSGt: $this->macrosCode = null; goto UbaJf; BE6DW: } public function setRibbonXMLData($Target = null, $XMLData = null) { if (!is_null($Target) && !is_null($XMLData)) { $this->ribbonXMLData = array("\x74\141\162\147\x65\164" => $Target, "\x64\141\x74\141" => $XMLData); } else { $this->ribbonXMLData = null; } } public function getRibbonXMLData($What = "\x61\154\154") { goto aVO2d; C6kIH: return $ReturnData; goto Bm7pR; FkkRZ: switch ($What) { case "\141\x6c\154": $ReturnData = $this->ribbonXMLData; break; case "\164\141\162\x67\x65\164": case "\x64\x61\164\141": if (is_array($this->ribbonXMLData) && array_key_exists($What, $this->ribbonXMLData)) { $ReturnData = $this->ribbonXMLData[$What]; } break; } goto C6kIH; Zqw61: $What = strtolower($What); goto FkkRZ; aVO2d: $ReturnData = null; goto Zqw61; Bm7pR: } public function setRibbonBinObjects($BinObjectsNames = null, $BinObjectsData = null) { if (!is_null($BinObjectsNames) && !is_null($BinObjectsData)) { $this->ribbonBinObjects = array("\156\x61\x6d\145\163" => $BinObjectsNames, "\144\x61\x74\141" => $BinObjectsData); } else { $this->ribbonBinObjects = null; } } private function getExtensionOnly($ThePath) { return pathinfo($ThePath, PATHINFO_EXTENSION); } public function getRibbonBinObjects($What = "\141\x6c\x6c") { goto e402p; uyf6l: switch ($What) { case "\141\x6c\154": return $this->ribbonBinObjects; break; case "\156\141\155\145\163": case "\144\x61\164\x61": if (is_array($this->ribbonBinObjects) && array_key_exists($What, $this->ribbonBinObjects)) { $ReturnData = $this->ribbonBinObjects[$What]; } break; case "\x74\x79\160\145\163": if (is_array($this->ribbonBinObjects) && array_key_exists("\x64\141\164\141", $this->ribbonBinObjects) && is_array($this->ribbonBinObjects["\144\141\164\141"])) { $tmpTypes = array_keys($this->ribbonBinObjects["\144\x61\164\x61"]); $ReturnData = array_unique(array_map(array($this, "\147\x65\x74\x45\x78\164\145\156\163\x69\x6f\156\x4f\x6e\154\171"), $tmpTypes)); } else { $ReturnData = array(); } break; } goto Ll7Ut; e402p: $ReturnData = null; goto fzYW1; fzYW1: $What = strtolower($What); goto uyf6l; Ll7Ut: return $ReturnData; goto Z9D7G; Z9D7G: } public function hasRibbon() { return !is_null($this->ribbonXMLData); } public function hasRibbonBinObjects() { return !is_null($this->ribbonBinObjects); } public function sheetCodeNameExists($pSheetCodeName) { return $this->getSheetByCodeName($pSheetCodeName) !== null; } public function getSheetByCodeName($pName = '') { goto pH0kU; JEj2n: for ($i = 0; $i < $worksheetCount; ++$i) { if ($this->workSheetCollection[$i]->getCodeName() == $pName) { return $this->workSheetCollection[$i]; } } goto LLgqt; LLgqt: return null; goto vociT; pH0kU: $worksheetCount = count($this->workSheetCollection); goto JEj2n; vociT: } public function __construct() { goto CvNEy; MgZvy: $this->workSheetCollection[] = new PHPExcel_Worksheet($this); goto XRIqc; CvNEy: $this->uniqueID = uniqid(); goto KoUqa; BMMk4: $this->cellXfSupervisor->bindParent($this); goto QUCC0; Tyhy5: $this->properties = new PHPExcel_DocumentProperties(); goto vXa6l; XnlF_: $this->workSheetCollection = array(); goto MgZvy; XRIqc: $this->activeSheetIndex = 0; goto Tyhy5; ETUez: $this->addCellStyleXf(new PHPExcel_Style()); goto DHJQW; G4g7y: $this->cellXfSupervisor = new PHPExcel_Style(true); goto BMMk4; vXa6l: $this->security = new PHPExcel_DocumentSecurity(); goto Z8s_U; KoUqa: $this->calculationEngine = new PHPExcel_Calculation($this); goto XnlF_; QUCC0: $this->addCellXf(new PHPExcel_Style()); goto ETUez; Z8s_U: $this->namedRanges = array(); goto G4g7y; DHJQW: } public function __destruct() { $this->calculationEngine = null; $this->disconnectWorksheets(); } public function disconnectWorksheets() { goto rTVMO; gbUBK: $this->workSheetCollection = array(); goto xZ76W; rTVMO: $worksheet = null; goto o0pOv; xJdOf: unset($worksheet); goto gbUBK; o0pOv: foreach ($this->workSheetCollection as $k => &$worksheet) { $worksheet->disconnectCells(); $this->workSheetCollection[$k] = null; } goto xJdOf; xZ76W: } public function getCalculationEngine() { return $this->calculationEngine; } public function getProperties() { return $this->properties; } public function setProperties(PHPExcel_DocumentProperties $pValue) { $this->properties = $pValue; } public function getSecurity() { return $this->security; } public function setSecurity(PHPExcel_DocumentSecurity $pValue) { $this->security = $pValue; } public function getActiveSheet() { return $this->getSheet($this->activeSheetIndex); } public function createSheet($iSheetIndex = null) { goto FN2pk; AYvhZ: $this->addSheet($newSheet, $iSheetIndex); goto UozG1; UozG1: return $newSheet; goto rBoSh; FN2pk: $newSheet = new PHPExcel_Worksheet($this); goto AYvhZ; rBoSh: } public function sheetNameExists($pSheetName) { return $this->getSheetByName($pSheetName) !== null; } public function addSheet(PHPExcel_Worksheet $pSheet, $iSheetIndex = null) { goto MgBcC; MgBcC: if ($this->sheetNameExists($pSheet->getTitle())) { throw new PHPExcel_Exception("\127\157\162\x6b\142\x6f\157\153\40\x61\154\162\145\x61\x64\x79\40\143\x6f\x6e\x74\141\151\156\163\x20\x61\x20\167\x6f\x72\x6b\163\150\x65\145\x74\40\156\x61\155\145\144\x20\47{$pSheet->getTitle()}\x27\56\x20\x52\145\x6e\x61\x6d\x65\40\164\150\x69\x73\x20\167\x6f\162\153\163\x68\145\x65\164\x20\146\151\162\x73\164\56"); } goto Ayev2; BhIhZ: if ($pSheet->getParent() === null) { $pSheet->rebindParent($this); } goto dR_DT; Ayev2: if ($iSheetIndex === null) { if ($this->activeSheetIndex < 0) { $this->activeSheetIndex = 0; } $this->workSheetCollection[] = $pSheet; } else { array_splice($this->workSheetCollection, $iSheetIndex, 0, array($pSheet)); if ($this->activeSheetIndex >= $iSheetIndex) { ++$this->activeSheetIndex; } } goto BhIhZ; dR_DT: return $pSheet; goto ONmL6; ONmL6: } public function removeSheetByIndex($pIndex = 0) { goto M2zKb; M2zKb: $numSheets = count($this->workSheetCollection); goto gskK8; gskK8: if ($pIndex > $numSheets - 1) { throw new PHPExcel_Exception("\131\x6f\x75\x20\164\162\151\145\x64\40\164\157\x20\x72\x65\155\x6f\166\145\40\x61\x20\x73\150\145\x65\164\x20\142\x79\x20\164\150\145\x20\157\x75\x74\40\157\x66\40\x62\157\x75\x6e\x64\163\x20\151\156\x64\x65\170\x3a\x20{$pIndex}\x2e\40\124\x68\x65\x20\141\x63\x74\165\x61\154\40\156\165\x6d\142\145\x72\40\157\x66\40\163\150\x65\145\164\163\40\151\163\x20{$numSheets}\56"); } else { array_splice($this->workSheetCollection, $pIndex, 1); } goto EGdgm; EGdgm: if ($this->activeSheetIndex >= $pIndex && $pIndex > count($this->workSheetCollection) - 1) { --$this->activeSheetIndex; } goto zNRZh; zNRZh: } public function getSheet($pIndex = 0) { if (!isset($this->workSheetCollection[$pIndex])) { $numSheets = $this->getSheetCount(); throw new PHPExcel_Exception("\x59\157\x75\x72\x20\162\145\161\165\145\163\x74\x65\x64\40\x73\150\x65\x65\x74\x20\151\156\x64\145\x78\x3a\40{$pIndex}\40\151\x73\x20\x6f\165\164\x20\x6f\x66\40\x62\157\x75\156\x64\x73\56\x20\x54\x68\145\40\x61\143\x74\x75\x61\x6c\40\156\x75\x6d\x62\145\162\40\157\x66\x20\163\150\x65\x65\164\163\40\151\x73\x20{$numSheets}\56"); } return $this->workSheetCollection[$pIndex]; } public function getAllSheets() { return $this->workSheetCollection; } public function getSheetByName($pName = '') { goto Rz9cl; Rz9cl: $worksheetCount = count($this->workSheetCollection); goto S_gSM; S_gSM: for ($i = 0; $i < $worksheetCount; ++$i) { if ($this->workSheetCollection[$i]->getTitle() === $pName) { return $this->workSheetCollection[$i]; } } goto Sdrj4; Sdrj4: return null; goto gMPqr; gMPqr: } public function getIndex(PHPExcel_Worksheet $pSheet) { foreach ($this->workSheetCollection as $key => $value) { if ($value->getHashCode() == $pSheet->getHashCode()) { return $key; } } throw new PHPExcel_Exception("\x53\x68\145\x65\164\40\144\x6f\145\x73\40\156\x6f\x74\x20\145\170\x69\163\x74\x2e"); } public function setIndexByName($sheetName, $newIndex) { goto V6r5k; y4_dC: return $newIndex; goto UyC7s; V6r5k: $oldIndex = $this->getIndex($this->getSheetByName($sheetName)); goto CBoJG; CBoJG: $pSheet = array_splice($this->workSheetCollection, $oldIndex, 1); goto ZBh9s; ZBh9s: array_splice($this->workSheetCollection, $newIndex, 0, $pSheet); goto y4_dC; UyC7s: } public function getSheetCount() { return count($this->workSheetCollection); } public function getActiveSheetIndex() { return $this->activeSheetIndex; } public function setActiveSheetIndex($pIndex = 0) { goto v75un; PIIBg: return $this->getActiveSheet(); goto udpHK; v75un: $numSheets = count($this->workSheetCollection); goto SwL8z; SwL8z: if ($pIndex > $numSheets - 1) { throw new PHPExcel_Exception("\x59\x6f\165\x20\164\162\151\x65\144\40\x74\x6f\x20\163\145\x74\x20\141\x20\163\x68\x65\x65\164\x20\x61\143\164\x69\x76\145\x20\142\171\x20\164\150\x65\x20\157\165\x74\x20\157\146\x20\142\157\165\x6e\x64\x73\40\x69\x6e\144\145\x78\72\40{$pIndex}\56\40\x54\x68\x65\40\141\x63\x74\165\x61\x6c\40\x6e\165\x6d\x62\145\162\x20\157\146\x20\x73\x68\x65\145\x74\163\40\x69\x73\40{$numSheets}\56"); } else { $this->activeSheetIndex = $pIndex; } goto PIIBg; udpHK: } public function setActiveSheetIndexByName($pValue = '') { if (($worksheet = $this->getSheetByName($pValue)) instanceof PHPExcel_Worksheet) { $this->setActiveSheetIndex($this->getIndex($worksheet)); return $worksheet; } throw new PHPExcel_Exception("\x57\x6f\162\153\142\x6f\x6f\153\40\x64\157\145\x73\x20\x6e\x6f\x74\40\143\x6f\x6e\164\141\151\156\40\163\x68\145\145\164\x3a" . $pValue); } public function getSheetNames() { goto zUnb4; e1SWc: return $returnValue; goto Y5nGN; jKqfW: $worksheetCount = $this->getSheetCount(); goto Krddq; Krddq: for ($i = 0; $i < $worksheetCount; ++$i) { $returnValue[] = $this->getSheet($i)->getTitle(); } goto e1SWc; zUnb4: $returnValue = array(); goto jKqfW; Y5nGN: } public function addExternalSheet(PHPExcel_Worksheet $pSheet, $iSheetIndex = null) { goto FvAHV; FvAHV: if ($this->sheetNameExists($pSheet->getTitle())) { throw new PHPExcel_Exception("\127\157\x72\x6b\x62\x6f\x6f\x6b\x20\141\x6c\x72\x65\x61\x64\x79\40\143\x6f\x6e\x74\141\151\156\163\x20\x61\40\167\157\x72\153\x73\x68\x65\x65\x74\x20\156\141\155\145\x64\x20\x27{$pSheet->getTitle()}\x27\56\40\122\145\x6e\141\x6d\145\40\x74\150\145\40\x65\170\164\x65\162\x6e\x61\x6c\40\163\x68\x65\145\x74\40\x66\x69\162\163\164\x2e"); } goto K1T1g; y8c9n: return $this->addSheet($pSheet, $iSheetIndex); goto SV0vZ; K1T1g: $countCellXfs = count($this->cellXfCollection); goto OdZtl; xIVf2: $pSheet->rebindParent($this); goto Np2Y3; Np2Y3: foreach ($pSheet->getCellCollection(false) as $cellID) { $cell = $pSheet->getCell($cellID); $cell->setXfIndex($cell->getXfIndex() + $countCellXfs); } goto y8c9n; OdZtl: foreach ($pSheet->getParent()->getCellXfCollection() as $cellXf) { $this->addCellXf(clone $cellXf); } goto xIVf2; SV0vZ: } public function getNamedRanges() { return $this->namedRanges; } public function addNamedRange(PHPExcel_NamedRange $namedRange) { if ($namedRange->getScope() == null) { $this->namedRanges[$namedRange->getName()] = $namedRange; } else { $this->namedRanges[$namedRange->getScope()->getTitle() . "\41" . $namedRange->getName()] = $namedRange; } return true; } public function getNamedRange($namedRange, PHPExcel_Worksheet $pSheet = null) { goto ye3yu; JPfgs: return $returnValue; goto Nr_Xk; ye3yu: $returnValue = null; goto v3WnV; v3WnV: if ($namedRange != '' && $namedRange !== null) { if (isset($this->namedRanges[$namedRange])) { $returnValue = $this->namedRanges[$namedRange]; } if ($pSheet !== null && isset($this->namedRanges[$pSheet->getTitle() . "\41" . $namedRange])) { $returnValue = $this->namedRanges[$pSheet->getTitle() . "\41" . $namedRange]; } } goto JPfgs; Nr_Xk: } public function removeNamedRange($namedRange, PHPExcel_Worksheet $pSheet = null) { if ($pSheet === null) { if (isset($this->namedRanges[$namedRange])) { unset($this->namedRanges[$namedRange]); } } else { if (isset($this->namedRanges[$pSheet->getTitle() . "\x21" . $namedRange])) { unset($this->namedRanges[$pSheet->getTitle() . "\41" . $namedRange]); } } return $this; } public function getWorksheetIterator() { return new PHPExcel_WorksheetIterator($this); } public function copy() { goto JFcaF; ocbhI: return $copied; goto nzCTj; Wy1yc: $worksheetCount = count($this->workSheetCollection); goto H6Edp; JFcaF: $copied = clone $this; goto Wy1yc; H6Edp: for ($i = 0; $i < $worksheetCount; ++$i) { $this->workSheetCollection[$i] = $this->workSheetCollection[$i]->copy(); $this->workSheetCollection[$i]->rebindParent($this); } goto ocbhI; nzCTj: } public function __clone() { foreach ($this as $key => $val) { if (is_object($val) || is_array($val)) { $this->{$key} = unserialize(serialize($val)); } } } public function getCellXfCollection() { return $this->cellXfCollection; } public function getCellXfByIndex($pIndex = 0) { return $this->cellXfCollection[$pIndex]; } public function getCellXfByHashCode($pValue = '') { foreach ($this->cellXfCollection as $cellXf) { if ($cellXf->getHashCode() == $pValue) { return $cellXf; } } return false; } public function cellXfExists($pCellStyle = null) { return in_array($pCellStyle, $this->cellXfCollection, true); } public function getDefaultStyle() { if (isset($this->cellXfCollection[0])) { return $this->cellXfCollection[0]; } throw new PHPExcel_Exception("\x4e\157\x20\x64\x65\146\141\165\x6c\164\x20\x73\164\x79\x6c\x65\40\x66\157\x75\156\x64\x20\146\157\162\x20\x74\x68\x69\163\x20\167\x6f\162\153\x62\x6f\157\153"); } public function addCellXf(PHPExcel_Style $style) { $this->cellXfCollection[] = $style; $style->setIndex(count($this->cellXfCollection) - 1); } public function removeCellXfByIndex($pIndex = 0) { if ($pIndex > count($this->cellXfCollection) - 1) { throw new PHPExcel_Exception("\103\x65\x6c\154\130\146\x20\151\156\x64\145\x78\40\x69\x73\x20\x6f\x75\164\40\x6f\x66\x20\142\157\x75\156\144\163\x2e"); } else { array_splice($this->cellXfCollection, $pIndex, 1); foreach ($this->workSheetCollection as $worksheet) { foreach ($worksheet->getCellCollection(false) as $cellID) { goto geA1H; geA1H: $cell = $worksheet->getCell($cellID); goto hInHY; hInHY: $xfIndex = $cell->getXfIndex(); goto dLLvj; dLLvj: if ($xfIndex > $pIndex) { $cell->setXfIndex($xfIndex - 1); } elseif ($xfIndex == $pIndex) { $cell->setXfIndex(0); } goto GSu38; GSu38: } } } } public function getCellXfSupervisor() { return $this->cellXfSupervisor; } public function getCellStyleXfCollection() { return $this->cellStyleXfCollection; } public function getCellStyleXfByIndex($pIndex = 0) { return $this->cellStyleXfCollection[$pIndex]; } public function getCellStyleXfByHashCode($pValue = '') { foreach ($this->cellStyleXfCollection as $cellStyleXf) { if ($cellStyleXf->getHashCode() == $pValue) { return $cellStyleXf; } } return false; } public function addCellStyleXf(PHPExcel_Style $pStyle) { $this->cellStyleXfCollection[] = $pStyle; $pStyle->setIndex(count($this->cellStyleXfCollection) - 1); } public function removeCellStyleXfByIndex($pIndex = 0) { if ($pIndex > count($this->cellStyleXfCollection) - 1) { throw new PHPExcel_Exception("\103\145\x6c\x6c\123\x74\171\x6c\145\130\146\40\x69\156\x64\145\x78\40\151\163\40\x6f\x75\x74\x20\157\x66\40\x62\157\165\156\144\x73\56"); } else { array_splice($this->cellStyleXfCollection, $pIndex, 1); } } public function garbageCollect() { goto kCaCY; zOQNe: $this->cellXfCollection = array_values($this->cellXfCollection); goto yD3U4; N2K8E: foreach ($this->getWorksheetIterator() as $sheet) { goto LChxe; B3CMw: foreach ($sheet->getRowDimensions() as $rowDimension) { if ($rowDimension->getXfIndex() !== null) { ++$countReferencesCellXf[$rowDimension->getXfIndex()]; } } goto kMBNR; LChxe: foreach ($sheet->getCellCollection(false) as $cellID) { $cell = $sheet->getCell($cellID); ++$countReferencesCellXf[$cell->getXfIndex()]; } goto B3CMw; kMBNR: foreach ($sheet->getColumnDimensions() as $columnDimension) { ++$countReferencesCellXf[$columnDimension->getXfIndex()]; } goto MQhrg; MQhrg: } goto q3e18; M7Oqo: if (empty($this->cellXfCollection)) { $this->cellXfCollection[] = new PHPExcel_Style(); } goto WUVqT; q3e18: $countNeededCellXfs = 0; goto Sq2eD; Sq2eD: $map = array(); goto VftrG; kCaCY: $countReferencesCellXf = array(); goto ouQ1a; WUVqT: foreach ($this->getWorksheetIterator() as $sheet) { goto tGivA; CkPjf: $sheet->garbageCollect(); goto sqpf9; tGivA: foreach ($sheet->getCellCollection(false) as $cellID) { $cell = $sheet->getCell($cellID); $cell->setXfIndex($map[$cell->getXfIndex()]); } goto fKGOJ; nN5uB: foreach ($sheet->getColumnDimensions() as $columnDimension) { $columnDimension->setXfIndex($map[$columnDimension->getXfIndex()]); } goto CkPjf; fKGOJ: foreach ($sheet->getRowDimensions() as $rowDimension) { if ($rowDimension->getXfIndex() !== null) { $rowDimension->setXfIndex($map[$rowDimension->getXfIndex()]); } } goto nN5uB; sqpf9: } goto z94T3; yD3U4: foreach ($this->cellXfCollection as $i => $cellXf) { $cellXf->setIndex($i); } goto M7Oqo; VftrG: foreach ($this->cellXfCollection as $index => $cellXf) { if ($countReferencesCellXf[$index] > 0 || $index == 0) { ++$countNeededCellXfs; } else { unset($this->cellXfCollection[$index]); } $map[$index] = $countNeededCellXfs - 1; } goto zOQNe; ouQ1a: foreach ($this->cellXfCollection as $index => $cellXf) { $countReferencesCellXf[$index] = 0; } goto N2K8E; z94T3: } public function getID() { return $this->uniqueID; } }
