<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:19              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class TCPDF_FILTERS { private static $available_filters = array("\101\123\x43\111\111\x48\x65\170\x44\x65\x63\157\144\145", "\101\123\103\111\111\x38\x35\104\x65\x63\157\144\145", "\x4c\x5a\127\x44\x65\x63\157\x64\145", "\x46\x6c\x61\164\x65\x44\x65\143\157\x64\145", "\122\x75\x6e\114\x65\x6e\x67\x74\150\104\145\x63\157\x64\145"); public static function getAvailableFilters() { return self::$available_filters; } public static function decodeFilter($filter, $data) { switch ($filter) { case "\x41\x53\x43\x49\x49\110\x65\170\104\x65\143\x6f\x64\x65": return self::decodeFilterASCIIHexDecode($data); break; case "\101\123\x43\x49\x49\x38\65\x44\145\143\157\144\145": return self::decodeFilterASCII85Decode($data); break; case "\114\x5a\x57\104\145\x63\157\x64\x65": return self::decodeFilterLZWDecode($data); break; case "\106\x6c\141\164\145\x44\145\143\x6f\x64\145": return self::decodeFilterFlateDecode($data); break; case "\122\x75\156\114\x65\x6e\x67\164\x68\104\x65\x63\x6f\144\x65": return self::decodeFilterRunLengthDecode($data); break; case "\x43\103\x49\124\x54\106\x61\x78\104\145\x63\157\144\x65": return self::decodeFilterCCITTFaxDecode($data); break; case "\x4a\102\x49\107\x32\104\145\143\x6f\x64\145": return self::decodeFilterJBIG2Decode($data); break; case "\104\x43\x54\104\x65\x63\157\144\145": return self::decodeFilterDCTDecode($data); break; case "\112\x50\130\104\145\143\157\144\x65": return self::decodeFilterJPXDecode($data); break; case "\x43\162\x79\x70\x74": return self::decodeFilterCrypt($data); break; default: return self::decodeFilterStandard($data); break; } } public static function decodeFilterStandard($data) { return $data; } public static function decodeFilterASCIIHexDecode($data) { goto xzWG_; PQXPm: return $decoded; goto YMjdx; To07m: if ($eod !== false) { $data = substr($data, 0, $eod); $eod = true; } goto QPW8X; RlO_o: $decoded = pack("\110\52", $data); goto PQXPm; omYi6: if ($data_length % 2 != 0) { if ($eod) { $data = substr($data, 0, -1) . "\x30" . substr($data, -1); } else { self::Error("\x64\x65\143\x6f\144\x65\106\x69\x6c\x74\145\x72\x41\x53\103\x49\x49\110\145\x78\104\145\143\157\144\145\72\x20\x69\156\x76\141\x6c\x69\x64\40\x63\157\144\x65"); } } goto b25ti; b25ti: if (preg_match("\x2f\x5b\136\x61\x2d\146\101\55\x46\134\x64\135\57", $data) > 0) { self::Error("\144\x65\x63\157\x64\145\106\x69\154\x74\x65\x72\x41\x53\103\111\x49\110\145\x78\104\145\x63\x6f\x64\x65\72\40\151\x6e\x76\x61\x6c\x69\x64\40\143\157\144\x65"); } goto RlO_o; hPGRB: $data = preg_replace("\x2f\x5b\x5c\163\x5d\57", '', $data); goto ZNL7s; QPW8X: $data_length = strlen($data); goto omYi6; xzWG_: $decoded = ''; goto hPGRB; ZNL7s: $eod = strpos($data, "\76"); goto To07m; YMjdx: } public static function decodeFilterASCII85Decode($data) { goto QHlJG; s8DAS: for ($i = 0; $i < $data_length; ++$i) { $char = ord($data[$i]); if ($char == 122) { if ($group_pos == 0) { $decoded .= $zseq; } else { self::Error("\144\145\x63\157\144\145\x46\151\x6c\x74\x65\162\101\123\103\x49\111\70\x35\x44\x65\x63\157\x64\145\72\40\151\x6e\166\141\x6c\x69\x64\40\x63\x6f\144\145"); } } else { $tuple += ($char - 33) * $pow85[$group_pos]; if ($group_pos == 4) { goto GQvS2; hUEns: $tuple = 0; goto ZIXrV; GQvS2: $decoded .= chr($tuple >> 24) . chr($tuple >> 16) . chr($tuple >> 8) . chr($tuple); goto hUEns; ZIXrV: $group_pos = 0; goto cd720; cd720: } else { ++$group_pos; } } } goto c159A; lztoN: if (preg_match("\x2f\133\136\134\x78\62\61\55\x5c\x78\67\65\54\134\170\x37\64\135\x2f", $data) > 0) { self::Error("\x64\x65\143\x6f\144\x65\106\x69\154\164\145\162\101\x53\103\x49\x49\70\65\x44\145\x63\x6f\144\x65\72\x20\151\156\166\x61\x6c\x69\144\x20\143\157\x64\x65"); } goto T6CL9; i8PIo: return $decoded; goto gk4hj; T6CL9: $zseq = chr(0) . chr(0) . chr(0) . chr(0); goto bREm9; c159A: if ($group_pos > 1) { $tuple += $pow85[$group_pos - 1]; } goto cwv7b; imve6: if ($eod !== false) { $data = substr($data, 0, $eod); } goto E7i1H; CLsWJ: $pow85 = array(85 * 85 * 85 * 85, 85 * 85 * 85, 85 * 85, 85, 1); goto HxUkm; a53On: $data = preg_replace("\57\133\134\163\x5d\x2f", '', $data); goto nekah; HxUkm: $last_pos = $data_length - 1; goto s8DAS; bREm9: $group_pos = 0; goto kwNtz; nekah: if (strpos($data, "\74\x7e") !== false) { $data = substr($data, 2); } goto Ybg2A; cwv7b: switch ($group_pos) { case 4: $decoded .= chr($tuple >> 24) . chr($tuple >> 16) . chr($tuple >> 8); break; case 3: $decoded .= chr($tuple >> 24) . chr($tuple >> 16); break; case 2: $decoded .= chr($tuple >> 24); break; case 1: self::Error("\x64\x65\143\x6f\144\145\106\x69\154\x74\145\162\x41\x53\103\x49\x49\x38\x35\104\x65\x63\157\144\x65\x3a\x20\x69\x6e\x76\141\x6c\151\144\x20\x63\x6f\144\145"); break; } goto i8PIo; E7i1H: $data_length = strlen($data); goto lztoN; Ybg2A: $eod = strpos($data, "\176\x3e"); goto imve6; QHlJG: $decoded = ''; goto a53On; kwNtz: $tuple = 0; goto CLsWJ; gk4hj: } public static function decodeFilterLZWDecode($data) { goto k90Ap; IPTuj: for ($i = 0; $i < $data_length; ++$i) { $bitstring .= sprintf("\x25\60\x38\142", ord($data[$i])); } goto dMtqP; yQMot: $prev_index = 0; goto kqJqq; k90Ap: $decoded = ''; goto xngu6; aOeFm: $dictionary = array(); goto DRwMp; dMtqP: $data_length = strlen($bitstring); goto jttwO; jttwO: $bitlen = 9; goto XSg72; xngu6: $data_length = strlen($data); goto muMpw; XSg72: $dix = 258; goto aOeFm; kqJqq: while ($data_length > 0 and ($index = bindec(substr($bitstring, 0, $bitlen))) != 257) { $bitstring = substr($bitstring, $bitlen); $data_length -= $bitlen; if ($index == 256) { goto VT2Rc; VT2Rc: $bitlen = 9; goto Ofxp3; iQ5Hy: for ($i = 0; $i < 256; ++$i) { $dictionary[$i] = chr($i); } goto icePN; NinjG: $dictionary = array(); goto iQ5Hy; Ofxp3: $dix = 258; goto MCp2L; MCp2L: $prev_index = 256; goto NinjG; icePN: } elseif ($prev_index == 256) { $decoded .= $dictionary[$index]; $prev_index = $index; } else { goto yje7J; QridD: ++$dix; goto gtVZn; yje7J: if ($index < $dix) { goto M6BkP; cqWav: $dic_val = $dictionary[$prev_index] . $dictionary[$index][0]; goto OkImt; OkImt: $prev_index = $index; goto HWv0D; M6BkP: $decoded .= $dictionary[$index]; goto cqWav; HWv0D: } else { $dic_val = $dictionary[$prev_index] . $dictionary[$prev_index][0]; $decoded .= $dic_val; } goto GA3to; GA3to: $dictionary[$dix] = $dic_val; goto QridD; gtVZn: if ($dix == 2047) { $bitlen = 12; } elseif ($dix == 1023) { $bitlen = 11; } elseif ($dix == 511) { $bitlen = 10; } goto qefBN; qefBN: } } goto v_qLR; v_qLR: return $decoded; goto hAt5E; DRwMp: for ($i = 0; $i < 256; ++$i) { $dictionary[$i] = chr($i); } goto yQMot; muMpw: $bitstring = ''; goto IPTuj; hAt5E: } public static function decodeFilterFlateDecode($data) { goto HdcjG; HdcjG: $decoded = @gzuncompress($data); goto MsRuk; dbYaN: return $decoded; goto t4qu4; MsRuk: if ($decoded === false) { self::Error("\x64\145\x63\x6f\144\x65\x46\151\x6c\x74\145\x72\x46\154\141\164\x65\x44\x65\143\157\144\x65\72\40\151\156\x76\141\x6c\151\144\x20\143\157\x64\x65"); } goto dbYaN; t4qu4: } public static function decodeFilterRunLengthDecode($data) { goto Ed01v; FWgIM: while ($i < $data_length) { $byte = ord($data[$i]); if ($byte == 128) { break; } elseif ($byte < 128) { $decoded .= substr($data, $i + 1, $byte + 1); $i += $byte + 2; } else { $decoded .= str_repeat($data[$i + 1], 257 - $byte); $i += 2; } } goto d67uD; Ed01v: $decoded = ''; goto O6alt; O6alt: $data_length = strlen($data); goto EI4th; EI4th: $i = 0; goto FWgIM; d67uD: return $decoded; goto lPzTW; lPzTW: } public static function decodeFilterCCITTFaxDecode($data) { self::Error("\176\x64\x65\143\157\144\145\x46\151\154\164\x65\162\x43\103\111\x54\x54\106\x61\170\x44\x65\143\157\x64\145\72\40\x74\x68\x69\163\40\x6d\145\164\x68\x6f\x64\x20\x68\141\x73\x20\156\x6f\164\x20\142\145\145\x6e\40\x79\x65\x74\x20\151\x6d\x70\x6c\145\x6d\x65\x6e\x74\145\x64"); } public static function decodeFilterJBIG2Decode($data) { self::Error("\176\x64\x65\x63\x6f\x64\145\x46\151\x6c\x74\x65\x72\x4a\x42\x49\107\62\x44\145\143\x6f\144\145\x3a\40\x74\x68\x69\x73\40\x6d\145\164\x68\x6f\144\x20\x68\141\163\x20\156\157\x74\x20\x62\x65\x65\x6e\x20\171\145\x74\40\x69\x6d\160\154\145\x6d\x65\156\164\x65\144"); } public static function decodeFilterDCTDecode($data) { self::Error("\176\x64\x65\143\x6f\x64\x65\x46\151\x6c\164\145\162\104\x43\x54\x44\x65\x63\157\x64\x65\x3a\x20\x74\x68\x69\x73\40\155\x65\164\150\157\144\40\150\x61\x73\x20\156\x6f\164\x20\x62\145\145\156\x20\171\x65\164\x20\x69\x6d\160\154\x65\155\x65\156\164\x65\144"); } public static function decodeFilterJPXDecode($data) { self::Error("\x7e\x64\145\143\157\144\x65\106\x69\x6c\164\x65\162\x4a\120\x58\x44\x65\143\157\x64\x65\72\x20\164\x68\151\x73\x20\x6d\x65\164\150\157\x64\40\x68\141\163\x20\156\x6f\x74\x20\142\x65\x65\x6e\40\x79\145\x74\x20\151\155\x70\154\145\x6d\x65\156\164\145\144"); } public static function decodeFilterCrypt($data) { self::Error("\x7e\144\145\x63\x6f\144\145\x46\151\154\164\x65\162\103\162\171\160\x74\x3a\40\x74\150\x69\163\40\155\145\x74\150\x6f\144\40\x68\141\x73\x20\x6e\157\x74\x20\142\x65\x65\156\40\x79\x65\x74\x20\151\155\x70\154\145\155\145\156\164\145\x64"); } public static function Error($msg) { throw new Exception("\x54\x43\x50\104\106\137\120\x41\122\x53\105\x52\40\105\122\x52\117\122\72\40" . $msg); } }
