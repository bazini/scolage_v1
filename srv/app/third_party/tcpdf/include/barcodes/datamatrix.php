<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:19              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto wl_Pb; eJn0P: define("\x45\x4e\103\x5f\103\64\60", 1); goto Hmmh6; ZOzke: define("\105\x4e\x43\x5f\101\x53\103\111\x49\137\116\x55\115", 7); goto yP5CO; IDSDQ: define("\x45\x4e\103\137\101\x53\103\111\x49", 0); goto eJn0P; RubfU: define("\x45\x4e\x43\137\x41\x53\x43\x49\x49\x5f\105\x58\124", 6); goto ZOzke; wl_Pb: if (!defined("\104\101\x54\101\x4d\101\x54\x52\x49\130\104\x45\106\x53")) { define("\104\101\x54\x41\115\x41\x54\x52\x49\130\x44\x45\x46\x53", true); } goto IDSDQ; vuUlp: define("\x45\116\103\x5f\105\104\106", 4); goto iJlQY; SyZNq: define("\105\116\x43\x5f\x58\x31\62", 3); goto vuUlp; Hmmh6: define("\105\116\103\137\x54\130\x54", 2); goto SyZNq; iJlQY: define("\x45\116\103\137\102\x41\x53\x45\62\65\66", 5); goto RubfU; yP5CO: class Datamatrix { protected $barcode_array = array(); protected $last_enc = ENC_ASCII; protected $symbattr = array(array(0xa, 0xa, 0x8, 0x8, 0xa, 0xa, 0x8, 0x8, 0x1, 0x1, 0x1, 0x3, 0x5, 0x1, 0x3, 0x5), array(0xc, 0xc, 0xa, 0xa, 0xc, 0xc, 0xa, 0xa, 0x1, 0x1, 0x1, 0x5, 0x7, 0x1, 0x5, 0x7), array(0xe, 0xe, 0xc, 0xc, 0xe, 0xe, 0xc, 0xc, 0x1, 0x1, 0x1, 0x8, 0xa, 0x1, 0x8, 0xa), array(0x10, 0x10, 0xe, 0xe, 0x10, 0x10, 0xe, 0xe, 0x1, 0x1, 0x1, 0xc, 0xc, 0x1, 0xc, 0xc), array(0x12, 0x12, 0x10, 0x10, 0x12, 0x12, 0x10, 0x10, 0x1, 0x1, 0x1, 0x12, 0xe, 0x1, 0x12, 0xe), array(0x14, 0x14, 0x12, 0x12, 0x14, 0x14, 0x12, 0x12, 0x1, 0x1, 0x1, 0x16, 0x12, 0x1, 0x16, 0x12), array(0x16, 0x16, 0x14, 0x14, 0x16, 0x16, 0x14, 0x14, 0x1, 0x1, 0x1, 0x1e, 0x14, 0x1, 0x1e, 0x14), array(0x18, 0x18, 0x16, 0x16, 0x18, 0x18, 0x16, 0x16, 0x1, 0x1, 0x1, 0x24, 0x18, 0x1, 0x24, 0x18), array(0x1a, 0x1a, 0x18, 0x18, 0x1a, 0x1a, 0x18, 0x18, 0x1, 0x1, 0x1, 0x2c, 0x1c, 0x1, 0x2c, 0x1c), array(0x20, 0x20, 0x1c, 0x1c, 0x10, 0x10, 0xe, 0xe, 0x2, 0x2, 0x4, 0x3e, 0x24, 0x1, 0x3e, 0x24), array(0x24, 0x24, 0x20, 0x20, 0x12, 0x12, 0x10, 0x10, 0x2, 0x2, 0x4, 0x56, 0x2a, 0x1, 0x56, 0x2a), array(0x28, 0x28, 0x24, 0x24, 0x14, 0x14, 0x12, 0x12, 0x2, 0x2, 0x4, 0x72, 0x30, 0x1, 0x72, 0x30), array(0x2c, 0x2c, 0x28, 0x28, 0x16, 0x16, 0x14, 0x14, 0x2, 0x2, 0x4, 0x90, 0x38, 0x1, 0x90, 0x38), array(0x30, 0x30, 0x2c, 0x2c, 0x18, 0x18, 0x16, 0x16, 0x2, 0x2, 0x4, 0xae, 0x44, 0x1, 0xae, 0x44), array(0x34, 0x34, 0x30, 0x30, 0x1a, 0x1a, 0x18, 0x18, 0x2, 0x2, 0x4, 0xcc, 0x54, 0x2, 0x66, 0x2a), array(0x40, 0x40, 0x38, 0x38, 0x10, 0x10, 0xe, 0xe, 0x4, 0x4, 0x10, 0x118, 0x70, 0x2, 0x8c, 0x38), array(0x48, 0x48, 0x40, 0x40, 0x12, 0x12, 0x10, 0x10, 0x4, 0x4, 0x10, 0x170, 0x90, 0x4, 0x5c, 0x24), array(0x50, 0x50, 0x48, 0x48, 0x14, 0x14, 0x12, 0x12, 0x4, 0x4, 0x10, 0x1c8, 0xc0, 0x4, 0x72, 0x30), array(0x58, 0x58, 0x50, 0x50, 0x16, 0x16, 0x14, 0x14, 0x4, 0x4, 0x10, 0x240, 0xe0, 0x4, 0x90, 0x38), array(0x60, 0x60, 0x58, 0x58, 0x18, 0x18, 0x16, 0x16, 0x4, 0x4, 0x10, 0x2b8, 0x110, 0x4, 0xae, 0x44), array(0x68, 0x68, 0x60, 0x60, 0x1a, 0x1a, 0x18, 0x18, 0x4, 0x4, 0x10, 0x330, 0x150, 0x6, 0x88, 0x38), array(0x78, 0x78, 0x6c, 0x6c, 0x14, 0x14, 0x12, 0x12, 0x6, 0x6, 0x24, 0x41a, 0x198, 0x6, 0xaf, 0x44), array(0x84, 0x84, 0x78, 0x78, 0x16, 0x16, 0x14, 0x14, 0x6, 0x6, 0x24, 0x518, 0x1f0, 0x8, 0xa3, 0x3e), array(0x90, 0x90, 0x84, 0x84, 0x18, 0x18, 0x16, 0x16, 0x6, 0x6, 0x24, 0x616, 0x26c, 0xa, 0x9c, 0x3e), array(0x8, 0x12, 0x6, 0x10, 0x8, 0x12, 0x6, 0x10, 0x1, 0x1, 0x1, 0x5, 0x7, 0x1, 0x5, 0x7), array(0x8, 0x20, 0x6, 0x1c, 0x8, 0x10, 0x6, 0xe, 0x1, 0x2, 0x2, 0xa, 0xb, 0x1, 0xa, 0xb), array(0xc, 0x1a, 0xa, 0x18, 0xc, 0x1a, 0xa, 0x18, 0x1, 0x1, 0x1, 0x10, 0xe, 0x1, 0x10, 0xe), array(0xc, 0x24, 0xa, 0x20, 0xc, 0x12, 0xa, 0x10, 0x1, 0x2, 0x2, 0xc, 0x12, 0x1, 0xc, 0x12), array(0x10, 0x24, 0xe, 0x20, 0x10, 0x12, 0xe, 0x10, 0x1, 0x2, 0x2, 0x20, 0x18, 0x1, 0x20, 0x18), array(0x10, 0x30, 0xe, 0x2c, 0x10, 0x18, 0xe, 0x16, 0x1, 0x2, 0x2, 0x31, 0x1c, 0x1, 0x31, 0x1c)); protected $chset_id = array(ENC_C40 => "\x43\64\60", ENC_TXT => "\x54\x58\x54", ENC_X12 => "\x58\x31\x32"); protected $chset = array("\103\x34\60" => array("\x53\x31" => 0x0, "\x53\62" => 0x1, "\123\x33" => 0x2, 0x20 => 0x3, 0x30 => 0x4, 0x31 => 0x5, 0x32 => 0x6, 0x33 => 0x7, 0x34 => 0x8, 0x35 => 0x9, 0x36 => 0xa, 0x37 => 0xb, 0x38 => 0xc, 0x39 => 0xd, 0x41 => 0xe, 0x42 => 0xf, 0x43 => 0x10, 0x44 => 0x11, 0x45 => 0x12, 0x46 => 0x13, 0x47 => 0x14, 0x48 => 0x15, 0x49 => 0x16, 0x4a => 0x17, 0x4b => 0x18, 0x4c => 0x19, 0x4d => 0x1a, 0x4e => 0x1b, 0x4f => 0x1c, 0x50 => 0x1d, 0x51 => 0x1e, 0x52 => 0x1f, 0x53 => 0x20, 0x54 => 0x21, 0x55 => 0x22, 0x56 => 0x23, 0x57 => 0x24, 0x58 => 0x25, 0x59 => 0x26, 0x5a => 0x27), "\x54\130\124" => array("\x53\61" => 0x0, "\123\x32" => 0x1, "\123\x33" => 0x2, 0x20 => 0x3, 0x30 => 0x4, 0x31 => 0x5, 0x32 => 0x6, 0x33 => 0x7, 0x34 => 0x8, 0x35 => 0x9, 0x36 => 0xa, 0x37 => 0xb, 0x38 => 0xc, 0x39 => 0xd, 0x61 => 0xe, 0x62 => 0xf, 0x63 => 0x10, 0x64 => 0x11, 0x65 => 0x12, 0x66 => 0x13, 0x67 => 0x14, 0x68 => 0x15, 0x69 => 0x16, 0x6a => 0x17, 0x6b => 0x18, 0x6c => 0x19, 0x6d => 0x1a, 0x6e => 0x1b, 0x6f => 0x1c, 0x70 => 0x1d, 0x71 => 0x1e, 0x72 => 0x1f, 0x73 => 0x20, 0x74 => 0x21, 0x75 => 0x22, 0x76 => 0x23, 0x77 => 0x24, 0x78 => 0x25, 0x79 => 0x26, 0x7a => 0x27), "\123\x48\61" => array(0x0 => 0x0, 0x1 => 0x1, 0x2 => 0x2, 0x3 => 0x3, 0x4 => 0x4, 0x5 => 0x5, 0x6 => 0x6, 0x7 => 0x7, 0x8 => 0x8, 0x9 => 0x9, 0xa => 0xa, 0xb => 0xb, 0xc => 0xc, 0xd => 0xd, 0xe => 0xe, 0xf => 0xf, 0x10 => 0x10, 0x11 => 0x11, 0x12 => 0x12, 0x13 => 0x13, 0x14 => 0x14, 0x15 => 0x15, 0x16 => 0x16, 0x17 => 0x17, 0x18 => 0x18, 0x19 => 0x19, 0x1a => 0x1a, 0x1b => 0x1b, 0x1c => 0x1c, 0x1d => 0x1d, 0x1e => 0x1e, 0x1f => 0x1f), "\x53\x48\62" => array(0x21 => 0x0, 0x22 => 0x1, 0x23 => 0x2, 0x24 => 0x3, 0x25 => 0x4, 0x26 => 0x5, 0x27 => 0x6, 0x28 => 0x7, 0x29 => 0x8, 0x2a => 0x9, 0x2b => 0xa, 0x2c => 0xb, 0x2d => 0xc, 0x2e => 0xd, 0x2f => 0xe, 0x3a => 0xf, 0x3b => 0x10, 0x3c => 0x11, 0x3d => 0x12, 0x3e => 0x13, 0x3f => 0x14, 0x40 => 0x15, 0x5b => 0x16, 0x5c => 0x17, 0x5d => 0x18, 0x5e => 0x19, 0x5f => 0x1a, "\106\x31" => 0x1b, "\125\x53" => 0x1e), "\123\63\x43" => array(0x60 => 0x0, 0x61 => 0x1, 0x62 => 0x2, 0x63 => 0x3, 0x64 => 0x4, 0x65 => 0x5, 0x66 => 0x6, 0x67 => 0x7, 0x68 => 0x8, 0x69 => 0x9, 0x6a => 0xa, 0x6b => 0xb, 0x6c => 0xc, 0x6d => 0xd, 0x6e => 0xe, 0x6f => 0xf, 0x70 => 0x10, 0x71 => 0x11, 0x72 => 0x12, 0x73 => 0x13, 0x74 => 0x14, 0x75 => 0x15, 0x76 => 0x16, 0x77 => 0x17, 0x78 => 0x18, 0x79 => 0x19, 0x7a => 0x1a, 0x7b => 0x1b, 0x7c => 0x1c, 0x7d => 0x1d, 0x7e => 0x1e, 0x7f => 0x1f), "\123\x33\x54" => array(0x60 => 0x0, 0x41 => 0x1, 0x42 => 0x2, 0x43 => 0x3, 0x44 => 0x4, 0x45 => 0x5, 0x46 => 0x6, 0x47 => 0x7, 0x48 => 0x8, 0x49 => 0x9, 0x4a => 0xa, 0x4b => 0xb, 0x4c => 0xc, 0x4d => 0xd, 0x4e => 0xe, 0x4f => 0xf, 0x50 => 0x10, 0x51 => 0x11, 0x52 => 0x12, 0x53 => 0x13, 0x54 => 0x14, 0x55 => 0x15, 0x56 => 0x16, 0x57 => 0x17, 0x58 => 0x18, 0x59 => 0x19, 0x5a => 0x1a, 0x7b => 0x1b, 0x7c => 0x1c, 0x7d => 0x1d, 0x7e => 0x1e, 0x7f => 0x1f), "\130\61\62" => array(0xd => 0x0, 0x2a => 0x1, 0x3e => 0x2, 0x20 => 0x3, 0x30 => 0x4, 0x31 => 0x5, 0x32 => 0x6, 0x33 => 0x7, 0x34 => 0x8, 0x35 => 0x9, 0x36 => 0xa, 0x37 => 0xb, 0x38 => 0xc, 0x39 => 0xd, 0x41 => 0xe, 0x42 => 0xf, 0x43 => 0x10, 0x44 => 0x11, 0x45 => 0x12, 0x46 => 0x13, 0x47 => 0x14, 0x48 => 0x15, 0x49 => 0x16, 0x4a => 0x17, 0x4b => 0x18, 0x4c => 0x19, 0x4d => 0x1a, 0x4e => 0x1b, 0x4f => 0x1c, 0x50 => 0x1d, 0x51 => 0x1e, 0x52 => 0x1f, 0x53 => 0x20, 0x54 => 0x21, 0x55 => 0x22, 0x56 => 0x23, 0x57 => 0x24, 0x58 => 0x25, 0x59 => 0x26, 0x5a => 0x27)); public function __construct($code) { goto bjJKk; cBMd8: $cw = $this->getErrorCorrection($cw, $params[13], $params[14], $params[15]); goto uqsn6; I627U: $rdci = $params[5] - 1; goto m1QFj; It2ck: $cw = $this->getHighLevelEncoding($code); goto j0z9Z; XiQDv: $places = $this->getPlacementMap($params[2], $params[3]); goto r18d4; r18d4: $grid = array(); goto DFui1; FY5Xo: $this->barcode_array["\x6e\x75\155\137\162\157\167\163"] = $params[0]; goto OMRA6; C0_EL: $this->barcode_array["\x62\x63\x6f\144\x65"] = $grid; goto iKXSE; OMRA6: $this->barcode_array["\x6e\x75\155\x5f\x63\157\x6c\163"] = $params[1]; goto C0_EL; hQRAF: foreach ($this->symbattr as $params) { if ($params[11] >= $nd) { break; } } goto WoVPb; DFui1: $i = 0; goto P10dU; m1QFj: for ($vr = 0; $vr < $params[9]; ++$vr) { for ($r = 0; $r < $params[4]; ++$r) { $row = $vr * $params[4] + $r; for ($hr = 0; $hr < $params[8]; ++$hr) { for ($c = 0; $c < $params[5]; ++$c) { $col = $hr * $params[5] + $c; if ($r == 0) { if ($c % 2) { $grid[$row][$col] = 0; } else { $grid[$row][$col] = 1; } } elseif ($r == $rdri) { $grid[$row][$col] = 1; } elseif ($c == 0) { $grid[$row][$col] = 1; } elseif ($c == $rdci) { if ($r % 2) { $grid[$row][$col] = 1; } else { $grid[$row][$col] = 0; } } else { if ($places[$i] < 2) { $grid[$row][$col] = $places[$i]; } else { goto rUFbh; JttcY: $cw_bit = pow(2, 8 - $places[$i] % 10); goto jittO; rUFbh: $cw_id = floor($places[$i] / 10) - 1; goto JttcY; jittO: $grid[$row][$col] = ($cw[$cw_id] & $cw_bit) == 0 ? 0 : 1; goto Dsf4F; Dsf4F: } ++$i; } } } } } goto FY5Xo; P10dU: $rdri = $params[4] - 1; goto I627U; j0z9Z: $nd = count($cw); goto uLwbc; WoVPb: if ($params[11] < $nd) { return false; } elseif ($params[11] > $nd) { if ($params[11] - $nd > 1 and $cw[$nd - 1] != 254) { if ($this->last_enc == ENC_EDF) { $cw[] = 124; ++$nd; } elseif ($this->last_enc != ENC_ASCII and $this->last_enc != ENC_BASE256) { $cw[] = 254; ++$nd; } } if ($params[11] > $nd) { goto DaA4z; Ai4gS: ++$nd; goto M2DTv; DaA4z: $cw[] = 129; goto Ai4gS; M2DTv: for ($i = $nd; $i < $params[11]; ++$i) { $cw[] = $this->get253StateCodeword(129, $i); } goto FtOPO; FtOPO: } } goto cBMd8; uLwbc: if ($nd > 1558) { return false; } goto hQRAF; bjJKk: $barcode_array = array(); goto izQqP; izQqP: if (is_null($code) or $code == "\134\60" or $code == '') { return false; } goto It2ck; uqsn6: $grid = array_fill(0, $params[2] * $params[3], 0); goto XiQDv; iKXSE: } public function getBarcodeArray() { return $this->barcode_array; } protected function getGFProduct($a, $b, $log, $alog, $gf) { if ($a == 0 or $b == 0) { return 0; } return $alog[($log[$a] + $log[$b]) % ($gf - 1)]; } protected function getErrorCorrection($wd, $nb, $nd, $nc, $gf = 256, $pp = 301) { goto ztGjE; VZWi6: for ($i = 1; $i < $gf; ++$i) { $alog[$i] = $alog[$i - 1] * 2; if ($alog[$i] >= $gf) { $alog[$i] ^= $pp; } $log[$alog[$i]] = $i; } goto jK9JF; vW51b: $c[0] = 1; goto TBiq7; rdh1N: $num_wd = $nb * $nd; goto a7aSN; azTlt: for ($b = 0; $b < $nb; ++$b) { $block = array(); for ($n = $b; $n < $num_wd; $n += $nb) { $block[] = $wd[$n]; } $we = array_fill(0, $nc + 1, 0); for ($i = 0; $i < $nd; ++$i) { $k = $we[0] ^ $block[$i]; for ($j = 0; $j < $nc; ++$j) { $we[$j] = $we[$j + 1] ^ $this->getGFProduct($k, $c[$nc - $j - 1], $log, $alog, $gf); } } $j = 0; for ($i = $b; $i < $num_we; $i += $nb) { $wd[$num_wd + $i] = $we[$j]; ++$j; } } goto kYBi3; jK9JF: ksort($log); goto qX0F7; kYBi3: ksort($wd); goto BYm9H; ztGjE: $log[0] = 0; goto uTJi3; uTJi3: $alog[0] = 1; goto VZWi6; TBiq7: for ($i = 1; $i <= $nc; ++$i) { $c[$i] = $c[$i - 1]; for ($j = $i - 1; $j >= 1; --$j) { $c[$j] = $c[$j - 1] ^ $this->getGFProduct($c[$j], $alog[$i], $log, $alog, $gf); } $c[0] = $this->getGFProduct($c[0], $alog[$i], $log, $alog, $gf); } goto dwCZn; dwCZn: ksort($c); goto rdh1N; BYm9H: return $wd; goto Sb2kC; a7aSN: $num_we = $nb * $nc; goto azTlt; qX0F7: $c = array_fill(0, $nc + 1, 0); goto vW51b; Sb2kC: } protected function get253StateCodeword($cwpad, $cwpos) { goto xRh1W; Bnfuj: if ($pad > 254) { $pad -= 254; } goto Rxmgz; Rxmgz: return $pad; goto nh7J3; xRh1W: $pad = $cwpad + (149 * $cwpos % 253 + 1); goto Bnfuj; nh7J3: } protected function get255StateCodeword($cwpad, $cwpos) { goto SaRvW; SaRvW: $pad = $cwpad + (149 * $cwpos % 255 + 1); goto Qe8o1; Qe8o1: if ($pad > 255) { $pad -= 256; } goto CNmLS; CNmLS: return $pad; goto HzU2d; HzU2d: } protected function isCharMode($chr, $mode) { goto BrHWh; KZ0oI: switch ($mode) { case ENC_ASCII: $status = ($chr >= 0 and $chr <= 127); break; case ENC_C40: $status = ($chr == 32 or $chr >= 48 and $chr <= 57 or $chr >= 65 and $chr <= 90); break; case ENC_TXT: $status = ($chr == 32 or $chr >= 48 and $chr <= 57 or $chr >= 97 and $chr <= 122); break; case ENC_X12: $status = ($chr == 13 or $chr == 42 or $chr == 62); break; case ENC_EDF: $status = ($chr >= 32 and $chr <= 94); break; case ENC_BASE256: $status = ($chr == 232 or $chr == 233 or $chr == 234 or $chr == 241); break; case ENC_ASCII_EXT: $status = ($chr >= 128 and $chr <= 255); break; case ENC_ASCII_NUM: $status = ($chr >= 48 and $chr <= 57); break; } goto MuOFF; BrHWh: $status = false; goto KZ0oI; MuOFF: return $status; goto s03hB; s03hB: } protected function lookAheadTest($data, $pos, $mode) { goto LgsOt; Dbtan: if ($pos >= $data_length) { return $mode; } goto RqrB7; IY_8b: while (true) { if ($pos + $charscount == $data_length) { goto hySIR; ZKG5f: if ($numch[ENC_BASE256] < ceil(min($numch[ENC_ASCII], $numch[ENC_C40], $numch[ENC_TXT], $numch[ENC_X12], $numch[ENC_EDF]))) { return ENC_BASE256; } goto UPFgm; hySIR: if ($numch[ENC_ASCII] <= ceil(min($numch[ENC_C40], $numch[ENC_TXT], $numch[ENC_X12], $numch[ENC_EDF], $numch[ENC_BASE256]))) { return ENC_ASCII; } goto ZKG5f; Wzdr3: if ($numch[ENC_TXT] < ceil(min($numch[ENC_ASCII], $numch[ENC_C40], $numch[ENC_X12], $numch[ENC_EDF], $numch[ENC_BASE256]))) { return ENC_TXT; } goto YUkQN; xcaal: return ENC_C40; goto TClyD; YUkQN: if ($numch[ENC_X12] < ceil(min($numch[ENC_ASCII], $numch[ENC_C40], $numch[ENC_TXT], $numch[ENC_EDF], $numch[ENC_BASE256]))) { return ENC_X12; } goto xcaal; UPFgm: if ($numch[ENC_EDF] < ceil(min($numch[ENC_ASCII], $numch[ENC_C40], $numch[ENC_TXT], $numch[ENC_X12], $numch[ENC_BASE256]))) { return ENC_EDF; } goto Wzdr3; TClyD: } $chr = ord($data[$pos + $charscount]); $charscount++; if ($this->isCharMode($chr, ENC_ASCII_NUM)) { $numch[ENC_ASCII] += 1 / 2; } elseif ($this->isCharMode($chr, ENC_ASCII_EXT)) { $numch[ENC_ASCII] = ceil($numch[ENC_ASCII]); $numch[ENC_ASCII] += 2; } else { $numch[ENC_ASCII] = ceil($numch[ENC_ASCII]); $numch[ENC_ASCII] += 1; } if ($this->isCharMode($chr, ENC_C40)) { $numch[ENC_C40] += 2 / 3; } elseif ($this->isCharMode($chr, ENC_ASCII_EXT)) { $numch[ENC_C40] += 8 / 3; } else { $numch[ENC_C40] += 4 / 3; } if ($this->isCharMode($chr, ENC_TXT)) { $numch[ENC_TXT] += 2 / 3; } elseif ($this->isCharMode($chr, ENC_ASCII_EXT)) { $numch[ENC_TXT] += 8 / 3; } else { $numch[ENC_TXT] += 4 / 3; } if ($this->isCharMode($chr, ENC_X12) or $this->isCharMode($chr, ENC_C40)) { $numch[ENC_X12] += 2 / 3; } elseif ($this->isCharMode($chr, ENC_ASCII_EXT)) { $numch[ENC_X12] += 13 / 3; } else { $numch[ENC_X12] += 10 / 3; } if ($this->isCharMode($chr, ENC_EDF)) { $numch[ENC_EDF] += 3 / 4; } elseif ($this->isCharMode($chr, ENC_ASCII_EXT)) { $numch[ENC_EDF] += 17 / 4; } else { $numch[ENC_EDF] += 13 / 4; } if ($this->isCharMode($chr, ENC_BASE256)) { $numch[ENC_BASE256] += 4; } else { $numch[ENC_BASE256] += 1; } if ($charscount >= 4) { goto IFK09; wHtQ5: if ($numch[ENC_X12] + 1 < min($numch[ENC_ASCII], $numch[ENC_C40], $numch[ENC_TXT], $numch[ENC_EDF], $numch[ENC_BASE256])) { return ENC_X12; } goto l9qaS; l9qaS: if ($numch[ENC_C40] + 1 < min($numch[ENC_ASCII], $numch[ENC_TXT], $numch[ENC_EDF], $numch[ENC_BASE256])) { if ($numch[ENC_C40] < $numch[ENC_X12]) { return ENC_C40; } if ($numch[ENC_C40] == $numch[ENC_X12]) { goto IW11c; f8_JP: return ENC_C40; goto oh2c3; DygC6: while ($k < $data_length) { $tmpchr = ord($data[$k]); if ($this->isCharMode($tmpchr, ENC_X12)) { return ENC_X12; } elseif (!($this->isCharMode($tmpchr, ENC_X12) or $this->isCharMode($tmpchr, ENC_C40))) { break; } ++$k; } goto f8_JP; IW11c: $k = $pos + $charscount + 1; goto DygC6; oh2c3: } } goto l80zv; J1SZy: if ($numch[ENC_EDF] + 1 < min($numch[ENC_ASCII], $numch[ENC_C40], $numch[ENC_TXT], $numch[ENC_X12], $numch[ENC_BASE256])) { return ENC_EDF; } goto gaB2B; IFK09: if ($numch[ENC_ASCII] + 1 <= min($numch[ENC_C40], $numch[ENC_TXT], $numch[ENC_X12], $numch[ENC_EDF], $numch[ENC_BASE256])) { return ENC_ASCII; } goto Mcie_; gaB2B: if ($numch[ENC_TXT] + 1 < min($numch[ENC_ASCII], $numch[ENC_C40], $numch[ENC_X12], $numch[ENC_EDF], $numch[ENC_BASE256])) { return ENC_TXT; } goto wHtQ5; Mcie_: if ($numch[ENC_BASE256] + 1 <= $numch[ENC_ASCII] or $numch[ENC_BASE256] + 1 < min($numch[ENC_C40], $numch[ENC_TXT], $numch[ENC_X12], $numch[ENC_EDF])) { return ENC_BASE256; } goto J1SZy; l80zv: } } goto lBWA4; LgsOt: $data_length = strlen($data); goto Dbtan; RqrB7: $charscount = 0; goto vlbeZ; vlbeZ: if ($mode == ENC_ASCII) { $numch = array(0, 1, 1, 1, 1, 1.25); } else { $numch = array(1, 2, 2, 2, 2, 2.25); $numch[$mode] = 0; } goto IY_8b; lBWA4: } protected function getSwitchEncodingCodeword($mode) { switch ($mode) { case ENC_ASCII: goto CW4K0; CW4K0: $cw = 254; goto D6bjI; LkP0e: break; goto MjyTg; D6bjI: if ($this->last_enc == ENC_EDF) { $cw = 124; } goto LkP0e; MjyTg: case ENC_C40: $cw = 230; break; case ENC_TXT: $cw = 239; break; case ENC_X12: $cw = 238; break; case ENC_EDF: $cw = 240; break; case ENC_BASE256: $cw = 231; break; } return $cw; } protected function getMaxDataCodewords($numcw) { foreach ($this->symbattr as $key => $matrix) { if ($matrix[11] >= $numcw) { return $matrix[11]; } } return 0; } protected function getHighLevelEncoding($data) { goto odYjc; heS73: while ($pos < $data_length) { $this->last_enc = $enc; switch ($enc) { case ENC_ASCII: if ($data_length > 1 and $pos < $data_length - 1 and ($this->isCharMode(ord($data[$pos]), ENC_ASCII_NUM) and $this->isCharMode(ord($data[$pos + 1]), ENC_ASCII_NUM))) { goto lg43Z; is8Tp: ++$cw_num; goto VxgjK; VxgjK: $pos += 2; goto Z7i4i; lg43Z: $cw[] = intval(substr($data, $pos, 2)) + 130; goto is8Tp; Z7i4i: } else { $newenc = $this->lookAheadTest($data, $pos, $enc); if ($newenc != $enc) { goto Te6YJ; yuyrD: ++$cw_num; goto Z1r22; mzvbp: $cw[] = $this->getSwitchEncodingCodeword($enc); goto yuyrD; Te6YJ: $enc = $newenc; goto mzvbp; Z1r22: } else { goto zOyJ5; MAowV: if ($this->isCharMode($chr, ENC_ASCII_EXT)) { goto qbRpI; bCs5i: $cw[] = $chr - 127; goto sjipF; qbRpI: $cw[] = 235; goto bCs5i; sjipF: $cw_num += 2; goto VdVdD; VdVdD: } else { $cw[] = $chr + 1; ++$cw_num; } goto zhWO4; TUMP2: ++$pos; goto MAowV; zOyJ5: $chr = ord($data[$pos]); goto TUMP2; zhWO4: } } break; case ENC_C40: case ENC_TXT: case ENC_X12: goto c5Zmi; pSHeQ: $p = 0; goto FEbPw; K35HE: $set_id = $this->chset_id[$enc]; goto G4jbA; Cgf2m: break; goto zLwJf; c5Zmi: $temp_cw = array(); goto pSHeQ; G4jbA: $charset = $this->chset[$set_id]; goto Vrb8a; Vrb8a: do { $chr = ord($data[$epos]); ++$epos; if ($chr & 0x80) { goto AIAx_; oawNl: $temp_cw[] = 1; goto IEhG2; IEhG2: $temp_cw[] = 30; goto HwrZj; AIAx_: if ($enc == ENC_X12) { return false; } goto EFTJG; EFTJG: $chr = $chr & 0x7f; goto oawNl; HwrZj: $p += 2; goto wM7S0; wM7S0: } if (isset($charset[$chr])) { $temp_cw[] = $charset[$chr]; ++$p; } else { goto VECH2; aQC1Q: $p += 2; goto XXGP0; VECH2: if (isset($this->chset["\123\x48\61"][$chr])) { $temp_cw[] = 0; $shiftset = $this->chset["\x53\x48\61"]; } elseif (isset($chr, $this->chset["\123\110\62"][$chr])) { $temp_cw[] = 1; $shiftset = $this->chset["\123\x48\62"]; } elseif ($enc == ENC_C40 and isset($this->chset["\123\x33\103"][$chr])) { $temp_cw[] = 2; $shiftset = $this->chset["\x53\x33\x43"]; } elseif ($enc == ENC_TXT and isset($this->chset["\x53\x33\x54"][$chr])) { $temp_cw[] = 2; $shiftset = $this->chset["\x53\63\124"]; } else { return false; } goto epuYP; epuYP: $temp_cw[] = $shiftset[$chr]; goto aQC1Q; XXGP0: } if ($p >= 3) { goto wy7eZ; q8r2_: $cw[] = $tmp >> 8; goto mUpeY; isgky: $p -= 3; goto aMh87; aMh87: $tmp = 1600 * $c1 + 40 * $c2 + $c3 + 1; goto q8r2_; wR_UI: $c3 = array_shift($temp_cw); goto isgky; LHQDC: $c2 = array_shift($temp_cw); goto wR_UI; wy7eZ: $c1 = array_shift($temp_cw); goto LHQDC; apIsl: $pos = $epos; goto kRKf0; kRKf0: $newenc = $this->lookAheadTest($data, $pos, $enc); goto jCh10; mUpeY: $cw[] = $tmp % 256; goto AKp1Q; jCh10: if ($newenc != $enc) { goto oYfZS; ugbd4: $pos -= $p; goto RnDVe; oYfZS: $enc = $newenc; goto BcS1z; w1ukp: break; goto NKau5; pPVB1: ++$cw_num; goto ugbd4; BcS1z: if ($enc != ENC_ASCII) { $cw[] = $this->getSwitchEncodingCodeword(ENC_ASCII); ++$cw_num; } goto p0BDr; RnDVe: $p = 0; goto w1ukp; p0BDr: $cw[] = $this->getSwitchEncodingCodeword($enc); goto pPVB1; NKau5: } goto YVr3p; AKp1Q: $cw_num += 2; goto apIsl; YVr3p: } } while ($p > 0 and $epos < $data_length); goto zUS61; FEbPw: $epos = $pos; goto K35HE; zUS61: if ($p > 0) { $cwr = $this->getMaxDataCodewords($cw_num) - $cw_num; if ($cwr == 1 and $p == 1) { goto KCQ_M; ZFRyo: --$p; goto NLI49; dYzjz: $pos = $epos; goto kpbXz; NLI49: $cw[] = $chr + 1; goto YdrTq; b6rxO: $this->last_enc = $enc; goto NMVgz; KCQ_M: $c1 = array_shift($temp_cw); goto ZFRyo; YdrTq: ++$cw_num; goto dYzjz; kpbXz: $enc = ENC_ASCII; goto b6rxO; NMVgz: } elseif ($cwr == 2 and $p == 1) { goto yL4zv; Dqhy1: $pos = $epos; goto fhZS9; E9_TN: --$p; goto DFYRb; yL4zv: $c1 = array_shift($temp_cw); goto E9_TN; fhZS9: $enc = ENC_ASCII; goto p1xyK; DFYRb: $cw[] = 254; goto RSOpa; tRy33: $cw_num += 2; goto Dqhy1; RSOpa: $cw[] = $chr + 1; goto tRy33; p1xyK: $this->last_enc = $enc; goto wvHxl; wvHxl: } elseif ($cwr == 2 and $p == 2) { goto kIU9I; ksgUQ: $tmp = 1600 * $c1 + 40 * $c2 + 1; goto lqHKJ; owlaL: $enc = ENC_ASCII; goto cK8MC; pUWlu: $p -= 2; goto ksgUQ; kIU9I: $c1 = array_shift($temp_cw); goto bLSal; muBsY: $pos = $epos; goto owlaL; lqHKJ: $cw[] = $tmp >> 8; goto D8R7v; D8R7v: $cw[] = $tmp % 256; goto QfWJ2; bLSal: $c2 = array_shift($temp_cw); goto pUWlu; cK8MC: $this->last_enc = $enc; goto JoI6R; QfWJ2: $cw_num += 2; goto muBsY; JoI6R: } else { if ($enc != ENC_ASCII) { goto rk2Rc; MnrjB: $pos = $epos - $p; goto WpaDW; X3Yqt: $this->last_enc = $enc; goto JRv7C; JRv7C: $cw[] = $this->getSwitchEncodingCodeword($enc); goto I_kck; rk2Rc: $enc = ENC_ASCII; goto X3Yqt; I_kck: ++$cw_num; goto MnrjB; WpaDW: } } } goto Cgf2m; zLwJf: case ENC_EDF: goto i060u; WCMY6: $field_length = 0; goto qn2T7; CQmTe: do { $chr = ord($data[$epos]); if ($this->isCharMode($chr, ENC_EDF)) { goto Pp4Sm; Pp4Sm: ++$epos; goto N4Sqk; N4Sqk: $temp_cw[] = $chr; goto NKWej; NKWej: ++$field_length; goto WS0aQ; WS0aQ: } if ($field_length == 4 or $epos == $data_length or !$this->isCharMode($chr, ENC_EDF)) { goto WeftM; WeftM: if ($epos == $data_length and $field_length < 3) { goto dxFwU; q2QAl: break; goto ACcK5; PvuWV: ++$cw_num; goto q2QAl; dxFwU: $enc = ENC_ASCII; goto Dvh3o; Dvh3o: $cw[] = $this->getSwitchEncodingCodeword($enc); goto PvuWV; ACcK5: } goto sqiG9; LilJQ: $tcw = (($temp_cw[2] & 0x3) << 6) + ($temp_cw[3] & 0x3f); goto ugjAg; eF3hb: if ($tcw > 0) { $cw[] = $tcw; $cw_num++; } goto SF8_T; fc0oi: $field_length = 0; goto Cq2Ud; Cq2Ud: if ($enc == ENC_ASCII) { break; } goto c3StZ; bEF3D: $pos = $epos; goto fc0oi; ulYma: $temp_cw = array(); goto bEF3D; kAQzk: $tcw = (($temp_cw[0] & 0x3f) << 2) + (($temp_cw[1] & 0x30) >> 4); goto eF3hb; YmAA4: if ($tcw > 0) { $cw[] = $tcw; $cw_num++; } goto LilJQ; sqiG9: if ($field_length < 4) { goto vfmTE; u0FtI: for ($i = $field_length; $i < 4; ++$i) { $temp_cw[] = 0; } goto rf96y; vfmTE: $temp_cw[] = 0x1f; goto VfMzw; ESwm9: $this->last_enc = $enc; goto ks3TA; VfMzw: ++$field_length; goto u0FtI; rf96y: $enc = ENC_ASCII; goto ESwm9; ks3TA: } goto kAQzk; ugjAg: if ($tcw > 0) { $cw[] = $tcw; $cw_num++; } goto ulYma; SF8_T: $tcw = (($temp_cw[1] & 0xf) << 4) + (($temp_cw[2] & 0x3c) >> 2); goto YmAA4; c3StZ: } } while ($epos < $data_length); goto z9h0U; i060u: $temp_cw = array(); goto J2F1X; z9h0U: break; goto leVH8; qn2T7: $newenc = $enc; goto CQmTe; J2F1X: $epos = $pos; goto WCMY6; leVH8: case ENC_BASE256: goto SYHx3; i0aIh: $field_length = 0; goto K8Ijb; rDw1S: if ($field_length <= 249) { $cw[] = $this->get255StateCodeword($field_length, $cw_num + 1); ++$cw_num; } else { goto X9O1h; CQUvt: $cw[] = $this->get255StateCodeword($field_length % 250, $cw_num + 2); goto FGV3s; FGV3s: $cw_num += 2; goto HuKqe; X9O1h: $cw[] = $this->get255StateCodeword(floor($field_length / 250) + 249, $cw_num + 1); goto CQUvt; HuKqe: } goto Z6ATD; K8Ijb: while ($pos < $data_length and $field_length <= 1555) { $newenc = $this->lookAheadTest($data, $pos, $enc); if ($newenc != $enc) { $enc = $newenc; break; } else { goto KY1zW; RaQhK: ++$pos; goto nNSL0; KY1zW: $chr = ord($data[$pos]); goto RaQhK; nNSL0: $temp_cw[] = $chr; goto kpsBp; kpsBp: ++$field_length; goto Gnie2; Gnie2: } } goto rDw1S; SYHx3: $temp_cw = array(); goto i0aIh; VnXmV: break; goto BADib; Z6ATD: if (!empty($temp_cw)) { foreach ($temp_cw as $p => $cht) { $cw[] = $this->get255StateCodeword($cht, $cw_num + $p + 1); } } goto VnXmV; BADib: } } goto cQkb4; odYjc: $enc = ENC_ASCII; goto I11bB; P0qLD: $data_length = strlen($data); goto heS73; I11bB: $pos = 0; goto rX8D8; cQkb4: return $cw; goto qk0Cf; dDYk6: $cw_num = 0; goto P0qLD; rX8D8: $cw = array(); goto dDYk6; qk0Cf: } protected function placeModule($marr, $nrow, $ncol, $row, $col, $chr, $bit) { goto kkvFM; WZcbH: $marr[$row * $ncol + $col] = 10 * $chr + $bit; goto gMUXA; gMUXA: return $marr; goto psSeA; YB7cx: if ($col < 0) { $col += $ncol; $row += 4 - ($ncol + 4) % 8; } goto WZcbH; kkvFM: if ($row < 0) { $row += $nrow; $col += 4 - ($nrow + 4) % 8; } goto YB7cx; psSeA: } protected function placeUtah($marr, $nrow, $ncol, $row, $col, $chr) { goto STEKZ; qk2qt: $marr = $this->placeModule($marr, $nrow, $ncol, $row - 1, $col - 1, $chr, 4); goto ERo2r; STEKZ: $marr = $this->placeModule($marr, $nrow, $ncol, $row - 2, $col - 2, $chr, 1); goto Y9o6p; niSM2: $marr = $this->placeModule($marr, $nrow, $ncol, $row, $col - 2, $chr, 6); goto x4B40; ERo2r: $marr = $this->placeModule($marr, $nrow, $ncol, $row - 1, $col, $chr, 5); goto niSM2; iVPLR: $marr = $this->placeModule($marr, $nrow, $ncol, $row - 1, $col - 2, $chr, 3); goto qk2qt; QsRFy: return $marr; goto xm_yM; UyxcE: $marr = $this->placeModule($marr, $nrow, $ncol, $row, $col, $chr, 8); goto QsRFy; Y9o6p: $marr = $this->placeModule($marr, $nrow, $ncol, $row - 2, $col - 1, $chr, 2); goto iVPLR; x4B40: $marr = $this->placeModule($marr, $nrow, $ncol, $row, $col - 1, $chr, 7); goto UyxcE; xm_yM: } protected function placeCornerA($marr, $nrow, $ncol, $chr) { goto usNbT; ARn9Q: return $marr; goto PuKRR; qVEiG: $marr = $this->placeModule($marr, $nrow, $ncol, 3, $ncol - 1, $chr, 8); goto ARn9Q; eSRgE: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 2, $chr, 4); goto fAC36; mi1rp: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 1, 2, $chr, 3); goto eSRgE; usNbT: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 1, 0, $chr, 1); goto dT4A3; QTs_e: $marr = $this->placeModule($marr, $nrow, $ncol, 2, $ncol - 1, $chr, 7); goto qVEiG; fAC36: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 1, $chr, 5); goto maAJ0; maAJ0: $marr = $this->placeModule($marr, $nrow, $ncol, 1, $ncol - 1, $chr, 6); goto QTs_e; dT4A3: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 1, 1, $chr, 2); goto mi1rp; PuKRR: } protected function placeCornerB($marr, $nrow, $ncol, $chr) { goto aUweK; fdRlt: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 3, $chr, 5); goto fkorg; X6b4O: return $marr; goto ea2Ih; h6ELa: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 1, $chr, 7); goto RvQjG; RvQjG: $marr = $this->placeModule($marr, $nrow, $ncol, 1, $ncol - 1, $chr, 8); goto X6b4O; R7kFR: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 2, 0, $chr, 2); goto JttEq; kCBfS: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 4, $chr, 4); goto fdRlt; aUweK: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 3, 0, $chr, 1); goto R7kFR; fkorg: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 2, $chr, 6); goto h6ELa; JttEq: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 1, 0, $chr, 3); goto kCBfS; ea2Ih: } protected function placeCornerC($marr, $nrow, $ncol, $chr) { goto zq1cz; r0xF0: $marr = $this->placeModule($marr, $nrow, $ncol, 2, $ncol - 1, $chr, 7); goto lJ9Vs; zq1cz: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 3, 0, $chr, 1); goto NPwvf; Lzwk0: $marr = $this->placeModule($marr, $nrow, $ncol, 1, $ncol - 1, $chr, 6); goto r0xF0; H6Rvk: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 1, $chr, 5); goto Lzwk0; NPwvf: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 2, 0, $chr, 2); goto jHIKX; jHIKX: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 1, 0, $chr, 3); goto f7uTB; f7uTB: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 2, $chr, 4); goto H6Rvk; QTlLA: return $marr; goto HKBDA; lJ9Vs: $marr = $this->placeModule($marr, $nrow, $ncol, 3, $ncol - 1, $chr, 8); goto QTlLA; HKBDA: } protected function placeCornerD($marr, $nrow, $ncol, $chr) { goto YRfS2; YRfS2: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 1, 0, $chr, 1); goto t8HvH; t8HvH: $marr = $this->placeModule($marr, $nrow, $ncol, $nrow - 1, $ncol - 1, $chr, 2); goto VMXAs; aeIhi: $marr = $this->placeModule($marr, $nrow, $ncol, 1, $ncol - 3, $chr, 6); goto xAk37; xAk37: $marr = $this->placeModule($marr, $nrow, $ncol, 1, $ncol - 2, $chr, 7); goto aWHPE; Kk1wB: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 1, $chr, 5); goto aeIhi; aqMLp: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 2, $chr, 4); goto Kk1wB; VMXAs: $marr = $this->placeModule($marr, $nrow, $ncol, 0, $ncol - 3, $chr, 3); goto aqMLp; aWHPE: $marr = $this->placeModule($marr, $nrow, $ncol, 1, $ncol - 1, $chr, 8); goto nVedm; nVedm: return $marr; goto QFbXN; QFbXN: } protected function getPlacementMap($nrow, $ncol) { goto sWJgX; OWXRW: return $marr; goto uq99_; SmWLe: do { if ($row == $nrow and $col == 0) { $marr = $this->placeCornerA($marr, $nrow, $ncol, $chr); ++$chr; } if ($row == $nrow - 2 and $col == 0 and $ncol % 4) { $marr = $this->placeCornerB($marr, $nrow, $ncol, $chr); ++$chr; } if ($row == $nrow - 2 and $col == 0 and $ncol % 8 == 4) { $marr = $this->placeCornerC($marr, $nrow, $ncol, $chr); ++$chr; } if ($row == $nrow + 4 and $col == 2 and !($ncol % 8)) { $marr = $this->placeCornerD($marr, $nrow, $ncol, $chr); ++$chr; } do { if ($row < $nrow and $col >= 0 and !$marr[$row * $ncol + $col]) { $marr = $this->placeUtah($marr, $nrow, $ncol, $row, $col, $chr); ++$chr; } $row -= 2; $col += 2; } while ($row >= 0 and $col < $ncol); ++$row; $col += 3; do { if ($row >= 0 and $col < $ncol and !$marr[$row * $ncol + $col]) { $marr = $this->placeUtah($marr, $nrow, $ncol, $row, $col, $chr); ++$chr; } $row += 2; $col -= 2; } while ($row < $nrow and $col >= 0); $row += 3; ++$col; } while ($row < $nrow or $col < $ncol); goto Lx5zO; sWJgX: $marr = array_fill(0, $nrow * $ncol, 0); goto pJ964; unRcS: $col = 0; goto SmWLe; Lx5zO: if (!$marr[$nrow * $ncol - 1]) { $marr[$nrow * $ncol - 1] = 1; $marr[$nrow * $ncol - $ncol - 2] = 1; } goto OWXRW; pJ964: $chr = 1; goto jKOc9; jKOc9: $row = 4; goto unRcS; uq99_: } }
