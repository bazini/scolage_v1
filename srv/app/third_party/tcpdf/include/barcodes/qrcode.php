<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:19              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 goto tvlXe; tvlXe: if (!defined("\121\122\x43\117\x44\x45\104\x45\x46\123")) { goto UpMMz; HXBIf: define("\121\x52\x5f\x44\105\x46\x41\125\x4c\124\x5f\x4d\101\123\x4b", 2); goto nCubw; RjeWW: define("\123\x54\x52\125\103\124\125\122\105\x5f\110\x45\101\104\x45\122\x5f\x42\111\x54\x53", 20); goto DL_vW; II5WR: define("\x4e\63", 40); goto AYOYG; mnTCD: define("\x51\122\x5f\106\111\116\x44\137\x46\x52\x4f\115\137\122\101\116\x44\117\x4d", 2); goto HXBIf; fVXr5: define("\121\122\x43\101\x50\x5f\x52\105\115\x49\x4e\x44\x45\122", 2); goto AWA_i; q66gs: define("\x4e\x32", 3); goto II5WR; DKVfI: define("\121\x52\x5f\x45\103\114\x45\x56\105\114\137\x4c", 0); goto iZRuB; DL_vW: define("\x4d\101\x58\137\x53\124\x52\125\103\124\125\122\x45\x44\137\x53\131\x4d\x42\x4f\x4c\x53", 16); goto GFTx2; cPTRX: define("\x51\122\x5f\115\x4f\104\105\137\116\115", 0); goto j98qJ; a2AGj: define("\121\122\x43\x41\120\x5f\127\111\104\124\110", 0); goto gglE9; GFTx2: define("\x4e\x31", 3); goto q66gs; mDCcX: define("\121\122\137\106\x49\x4e\104\137\102\105\x53\x54\x5f\115\x41\x53\113", true); goto mnTCD; pqyhh: define("\x51\122\137\115\117\x44\x45\137\113\112", 3); goto E610a; H2Ip8: define("\x51\122\x53\x50\105\x43\137\x57\111\x44\x54\x48\137\x4d\101\130", 177); goto a2AGj; iZRuB: define("\x51\122\x5f\x45\x43\x4c\105\x56\x45\114\137\x4d", 1); goto iwOz_; AYOYG: define("\116\64", 10); goto mDCcX; NRWSM: define("\x51\122\x53\120\105\x43\x5f\x56\x45\x52\123\111\x4f\116\137\115\101\130", 40); goto H2Ip8; unEUg: define("\x51\x52\137\115\117\104\105\137\x38\x42", 2); goto pqyhh; iwOz_: define("\121\x52\x5f\x45\x43\x4c\x45\x56\105\x4c\x5f\x51", 2); goto AKTBD; Niz82: define("\121\122\137\x4d\x4f\x44\105\137\116\114", -1); goto cPTRX; j98qJ: define("\x51\x52\x5f\115\x4f\104\105\x5f\101\x4e", 1); goto unEUg; UpMMz: define("\x51\x52\x43\x4f\104\x45\104\x45\106\x53", true); goto Niz82; gglE9: define("\121\x52\x43\x41\x50\x5f\127\x4f\x52\104\x53", 1); goto fVXr5; E610a: define("\121\x52\x5f\x4d\x4f\x44\x45\137\123\124", 4); goto DKVfI; AWA_i: define("\121\x52\x43\101\x50\137\x45\x43", 3); goto RjeWW; AKTBD: define("\121\x52\x5f\x45\x43\x4c\105\x56\x45\114\x5f\110", 3); goto NRWSM; nCubw: } goto OJa20; OJa20: if (!function_exists("\x73\164\x72\x5f\x73\x70\154\x69\x74")) { function str_split($string, $split_length = 1) { if (strlen($string) > $split_length or !$split_length) { do { $c = strlen($string); $parts[] = substr($string, 0, $split_length); $string = substr($string, $split_length); } while ($string !== false); } else { $parts = array($string); } return $parts; } } goto MOZBR; MOZBR: class QRcode { protected $barcode_array = array(); protected $version = 0; protected $level = QR_ECLEVEL_L; protected $hint = QR_MODE_8B; protected $casesensitive = true; protected $structured = 0; protected $data; protected $width; protected $frame; protected $x; protected $y; protected $dir; protected $bit; protected $datacode = array(); protected $ecccode = array(); protected $blocks; protected $rsblocks = array(); protected $count; protected $dataLength; protected $eccLength; protected $b1; protected $runLength = array(); protected $dataStr = ''; protected $items; protected $rsitems = array(); protected $frames = array(); protected $anTable = array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1); protected $capacity = array(array(0, 0, 0, array(0, 0, 0, 0)), array(21, 26, 0, array(7, 10, 13, 17)), array(25, 44, 7, array(10, 16, 22, 28)), array(29, 70, 7, array(15, 26, 36, 44)), array(33, 100, 7, array(20, 36, 52, 64)), array(37, 134, 7, array(26, 48, 72, 88)), array(41, 172, 7, array(36, 64, 96, 112)), array(45, 196, 0, array(40, 72, 108, 130)), array(49, 242, 0, array(48, 88, 132, 156)), array(53, 292, 0, array(60, 110, 160, 192)), array(57, 346, 0, array(72, 130, 192, 224)), array(61, 404, 0, array(80, 150, 224, 264)), array(65, 466, 0, array(96, 176, 260, 308)), array(69, 532, 0, array(104, 198, 288, 352)), array(73, 581, 3, array(120, 216, 320, 384)), array(77, 655, 3, array(132, 240, 360, 432)), array(81, 733, 3, array(144, 280, 408, 480)), array(85, 815, 3, array(168, 308, 448, 532)), array(89, 901, 3, array(180, 338, 504, 588)), array(93, 991, 3, array(196, 364, 546, 650)), array(97, 1085, 3, array(224, 416, 600, 700)), array(101, 1156, 4, array(224, 442, 644, 750)), array(105, 1258, 4, array(252, 476, 690, 816)), array(109, 1364, 4, array(270, 504, 750, 900)), array(113, 1474, 4, array(300, 560, 810, 960)), array(117, 1588, 4, array(312, 588, 870, 1050)), array(121, 1706, 4, array(336, 644, 952, 1110)), array(125, 1828, 4, array(360, 700, 1020, 1200)), array(129, 1921, 3, array(390, 728, 1050, 1260)), array(133, 2051, 3, array(420, 784, 1140, 1350)), array(137, 2185, 3, array(450, 812, 1200, 1440)), array(141, 2323, 3, array(480, 868, 1290, 1530)), array(145, 2465, 3, array(510, 924, 1350, 1620)), array(149, 2611, 3, array(540, 980, 1440, 1710)), array(153, 2761, 3, array(570, 1036, 1530, 1800)), array(157, 2876, 0, array(570, 1064, 1590, 1890)), array(161, 3034, 0, array(600, 1120, 1680, 1980)), array(165, 3196, 0, array(630, 1204, 1770, 2100)), array(169, 3362, 0, array(660, 1260, 1860, 2220)), array(173, 3532, 0, array(720, 1316, 1950, 2310)), array(177, 3706, 0, array(750, 1372, 2040, 2430))); protected $lengthTableBits = array(array(10, 12, 14), array(9, 11, 13), array(8, 16, 16), array(8, 10, 12)); protected $eccTable = array(array(array(0, 0), array(0, 0), array(0, 0), array(0, 0)), array(array(1, 0), array(1, 0), array(1, 0), array(1, 0)), array(array(1, 0), array(1, 0), array(1, 0), array(1, 0)), array(array(1, 0), array(1, 0), array(2, 0), array(2, 0)), array(array(1, 0), array(2, 0), array(2, 0), array(4, 0)), array(array(1, 0), array(2, 0), array(2, 2), array(2, 2)), array(array(2, 0), array(4, 0), array(4, 0), array(4, 0)), array(array(2, 0), array(4, 0), array(2, 4), array(4, 1)), array(array(2, 0), array(2, 2), array(4, 2), array(4, 2)), array(array(2, 0), array(3, 2), array(4, 4), array(4, 4)), array(array(2, 2), array(4, 1), array(6, 2), array(6, 2)), array(array(4, 0), array(1, 4), array(4, 4), array(3, 8)), array(array(2, 2), array(6, 2), array(4, 6), array(7, 4)), array(array(4, 0), array(8, 1), array(8, 4), array(12, 4)), array(array(3, 1), array(4, 5), array(11, 5), array(11, 5)), array(array(5, 1), array(5, 5), array(5, 7), array(11, 7)), array(array(5, 1), array(7, 3), array(15, 2), array(3, 13)), array(array(1, 5), array(10, 1), array(1, 15), array(2, 17)), array(array(5, 1), array(9, 4), array(17, 1), array(2, 19)), array(array(3, 4), array(3, 11), array(17, 4), array(9, 16)), array(array(3, 5), array(3, 13), array(15, 5), array(15, 10)), array(array(4, 4), array(17, 0), array(17, 6), array(19, 6)), array(array(2, 7), array(17, 0), array(7, 16), array(34, 0)), array(array(4, 5), array(4, 14), array(11, 14), array(16, 14)), array(array(6, 4), array(6, 14), array(11, 16), array(30, 2)), array(array(8, 4), array(8, 13), array(7, 22), array(22, 13)), array(array(10, 2), array(19, 4), array(28, 6), array(33, 4)), array(array(8, 4), array(22, 3), array(8, 26), array(12, 28)), array(array(3, 10), array(3, 23), array(4, 31), array(11, 31)), array(array(7, 7), array(21, 7), array(1, 37), array(19, 26)), array(array(5, 10), array(19, 10), array(15, 25), array(23, 25)), array(array(13, 3), array(2, 29), array(42, 1), array(23, 28)), array(array(17, 0), array(10, 23), array(10, 35), array(19, 35)), array(array(17, 1), array(14, 21), array(29, 19), array(11, 46)), array(array(13, 6), array(14, 23), array(44, 7), array(59, 1)), array(array(12, 7), array(12, 26), array(39, 14), array(22, 41)), array(array(6, 14), array(6, 34), array(46, 10), array(2, 64)), array(array(17, 4), array(29, 14), array(49, 10), array(24, 46)), array(array(4, 18), array(13, 32), array(48, 14), array(42, 32)), array(array(20, 4), array(40, 7), array(43, 22), array(10, 67)), array(array(19, 6), array(18, 31), array(34, 34), array(20, 61))); protected $alignmentPattern = array(array(0, 0), array(0, 0), array(18, 0), array(22, 0), array(26, 0), array(30, 0), array(34, 0), array(22, 38), array(24, 42), array(26, 46), array(28, 50), array(30, 54), array(32, 58), array(34, 62), array(26, 46), array(26, 48), array(26, 50), array(30, 54), array(30, 56), array(30, 58), array(34, 62), array(28, 50), array(26, 50), array(30, 54), array(28, 54), array(32, 58), array(30, 58), array(34, 62), array(26, 50), array(30, 54), array(26, 52), array(30, 56), array(34, 60), array(30, 58), array(34, 62), array(30, 54), array(24, 50), array(28, 54), array(32, 58), array(26, 54), array(30, 58)); protected $versionPattern = array(0x7c94, 0x85bc, 0x9a99, 0xa4d3, 0xbbf6, 0xc762, 0xd847, 0xe60d, 0xf928, 0x10b78, 0x1145d, 0x12a17, 0x13532, 0x149a6, 0x15683, 0x168c9, 0x177ec, 0x18ec4, 0x191e1, 0x1afab, 0x1b08e, 0x1cc1a, 0x1d33f, 0x1ed75, 0x1f250, 0x209d5, 0x216f0, 0x228ba, 0x2379f, 0x24b0b, 0x2542e, 0x26a64, 0x27541, 0x28c69); protected $formatInfo = array(array(0x77c4, 0x72f3, 0x7daa, 0x789d, 0x662f, 0x6318, 0x6c41, 0x6976), array(0x5412, 0x5125, 0x5e7c, 0x5b4b, 0x45f9, 0x40ce, 0x4f97, 0x4aa0), array(0x355f, 0x3068, 0x3f31, 0x3a06, 0x24b4, 0x2183, 0x2eda, 0x2bed), array(0x1689, 0x13be, 0x1ce7, 0x19d0, 0x762, 0x255, 0xd0c, 0x83b)); public function __construct($code, $eclevel = "\114") { goto cqyA1; L8Vjj: if ($this->level === false) { $this->level = QR_ECLEVEL_L; } goto R9PZw; YxJyc: $this->level = array_search($eclevel, array("\114", "\115", "\121", "\x48")); goto L8Vjj; xBQ4g: $this->encodeString($code); goto I07wN; I07wN: if (is_null($this->data)) { return false; } goto PCq6I; E3Avi: $size = count($qrTab); goto Lm0aJ; R9PZw: if ($this->hint != QR_MODE_8B and $this->hint != QR_MODE_KJ) { return false; } goto sN88D; sN88D: if ($this->version < 0 or $this->version > QRSPEC_VERSION_MAX) { return false; } goto DtFmc; DtFmc: $this->items = array(); goto xBQ4g; xh1F3: if (is_null($code) or $code == "\x5c\60" or $code == '') { return false; } goto YxJyc; kPEbZ: foreach ($qrTab as $line) { goto L8CuZ; MNx1P: foreach (str_split($line) as $char) { $arrAdd[] = $char == "\61" ? 1 : 0; } goto ty02T; L8CuZ: $arrAdd = array(); goto MNx1P; ty02T: $barcode_array["\x62\x63\x6f\x64\145"][] = $arrAdd; goto OtMiU; OtMiU: } goto YX5OF; PCq6I: $qrTab = $this->binarize($this->data); goto E3Avi; YX5OF: $this->barcode_array = $barcode_array; goto C12Jz; cqyA1: $barcode_array = array(); goto xh1F3; Lm0aJ: $barcode_array["\x6e\165\x6d\137\x72\157\167\x73"] = $size; goto p9KR1; p9KR1: $barcode_array["\x6e\165\x6d\x5f\x63\157\154\x73"] = $size; goto Zd53_; Zd53_: $barcode_array["\142\143\157\x64\145"] = array(); goto kPEbZ; C12Jz: } public function getBarcodeArray() { return $this->barcode_array; } protected function binarize($frame) { goto j3rjx; L01OE: foreach ($frame as &$frameLine) { for ($i = 0; $i < $len; $i++) { $frameLine[$i] = ord($frameLine[$i]) & 1 ? "\x31" : "\x30"; } } goto Q1y24; Q1y24: return $frame; goto fwULb; j3rjx: $len = count($frame); goto L01OE; fwULb: } protected function encodeString($string) { goto abQWh; hAmfS: $this->encodeMask(-1); goto uS0IU; s2Qx3: if ($ret < 0) { return NULL; } goto hAmfS; m0CJT: if (!$this->casesensitive) { $this->toUpper(); } goto h0TDP; h0TDP: $ret = $this->splitString(); goto s2Qx3; abQWh: $this->dataStr = $string; goto m0CJT; uS0IU: } protected function encodeMask($mask) { goto KvqpC; bY5SQ: $this->frame = $this->newFrame($this->version); goto iqf82; pVcoM: $this->width = $this->getWidth($this->version); goto bY5SQ; Vt46H: if (is_null($this->datacode)) { return NULL; } goto HQBlp; W6Oo1: $this->b1 = $this->rsBlockNum1($spec); goto mm0Ss; iHVjK: $this->data = $masked; goto yqrfI; lfSMz: $this->dir = -1; goto GP8H1; rP7tx: $this->datacode = $this->getByteStream($this->items); goto Vt46H; TIs8y: $this->blocks = $this->rsBlockNum($spec); goto f0_oH; TxYHf: for ($i = 0; $i < $this->dataLength + $this->eccLength; $i++) { $code = $this->getCode(); $bit = 0x80; for ($j = 0; $j < 8; $j++) { $addr = $this->getNextPosition(); $this->setFrameAt($addr, 0x2 | ($bit & $code) != 0); $bit = $bit >> 1; } } goto xyVA3; KvqpC: $spec = array(0, 0, 0, 0, 0); goto rP7tx; qYCla: if ($mask < 0) { if (QR_FIND_BEST_MASK) { $masked = $this->mask($this->width, $this->frame, $this->level); } else { $masked = $this->makeMask($this->width, $this->frame, intval(QR_DEFAULT_MASK) % 8, $this->level); } } else { $masked = $this->makeMask($this->width, $this->frame, $mask, $this->level); } goto pN9dO; kWjTw: $this->y = $this->width - 1; goto lfSMz; f0_oH: $ret = $this->init($spec); goto erH1K; xyVA3: $j = $this->getRemainder($this->version); goto qyY6T; iqf82: $this->x = $this->width - 1; goto kWjTw; aGzkR: $this->count = 0; goto pVcoM; pN9dO: if ($masked == NULL) { return NULL; } goto iHVjK; fghaK: $this->runLength = array_fill(0, QRSPEC_WIDTH_MAX + 1, 0); goto qYCla; GP8H1: $this->bit = -1; goto TxYHf; qyY6T: for ($i = 0; $i < $j; $i++) { $addr = $this->getNextPosition(); $this->setFrameAt($addr, 0x2); } goto fghaK; mm0Ss: $this->dataLength = $this->rsDataLength($spec); goto AUxMb; HQBlp: $spec = $this->getEccSpec($this->version, $this->level, $spec); goto W6Oo1; erH1K: if ($ret < 0) { return NULL; } goto aGzkR; I40it: $this->ecccode = array_fill(0, $this->eccLength, 0); goto TIs8y; AUxMb: $this->eccLength = $this->rsEccLength($spec); goto I40it; yqrfI: } protected function setFrameAt($at, $val) { $this->frame[$at["\171"]][$at["\170"]] = chr($val); } protected function getFrameAt($at) { return ord($this->frame[$at["\171"]][$at["\170"]]); } protected function getNextPosition() { do { if ($this->bit == -1) { $this->bit = 0; return array("\x78" => $this->x, "\171" => $this->y); } $x = $this->x; $y = $this->y; $w = $this->width; if ($this->bit == 0) { $x--; $this->bit++; } else { goto Aqyvn; QwOBq: $y += $this->dir; goto hTai0; Aqyvn: $x++; goto QwOBq; hTai0: $this->bit--; goto JGaK3; JGaK3: } if ($this->dir < 0) { if ($y < 0) { goto pYvTk; pYvTk: $y = 0; goto vhAKf; vhAKf: $x -= 2; goto VjxsO; VjxsO: $this->dir = 1; goto vpo3W; vpo3W: if ($x == 6) { $x--; $y = 9; } goto dT6FJ; dT6FJ: } } else { if ($y == $w) { goto OMOh0; hM0c0: $this->dir = -1; goto WIsLK; vGw8F: $x -= 2; goto hM0c0; WIsLK: if ($x == 6) { $x--; $y -= 8; } goto liaUK; OMOh0: $y = $w - 1; goto vGw8F; liaUK: } } if ($x < 0 or $y < 0) { return NULL; } $this->x = $x; $this->y = $y; } while (ord($this->frame[$y][$x]) & 0x80); return array("\x78" => $x, "\x79" => $y); } protected function init($spec) { goto sxjz0; cPZ2r: $el = $this->rsEccCodes2($spec); goto vxAdn; OdRne: $dl = $this->rsDataCodes2($spec); goto cPZ2r; Uy07z: for ($i = 0; $i < $endfor; ++$i) { $ecc = array_slice($this->ecccode, $eccPos); $this->rsblocks[$blockNo] = array(); $this->rsblocks[$blockNo]["\x64\141\x74\141\x4c\145\x6e\x67\164\150"] = $dl; $this->rsblocks[$blockNo]["\144\x61\x74\141"] = array_slice($this->datacode, $dataPos); $this->rsblocks[$blockNo]["\145\143\143\114\145\x6e\147\164\150"] = $el; $ecc = $this->encode_rs_char($rs, $this->rsblocks[$blockNo]["\144\141\x74\141"], $ecc); $this->rsblocks[$blockNo]["\x65\x63\x63"] = $ecc; $this->ecccode = array_merge(array_slice($this->ecccode, 0, $eccPos), $ecc); $dataPos += $dl; $eccPos += $el; $blockNo++; } goto OJ0ix; QNnnK: for ($i = 0; $i < $endfor; ++$i) { $ecc = array_slice($this->ecccode, $eccPos); $this->rsblocks[$blockNo] = array(); $this->rsblocks[$blockNo]["\144\141\164\141\x4c\145\156\x67\x74\150"] = $dl; $this->rsblocks[$blockNo]["\144\x61\164\x61"] = array_slice($this->datacode, $dataPos); $this->rsblocks[$blockNo]["\145\x63\143\x4c\x65\x6e\147\x74\150"] = $el; $ecc = $this->encode_rs_char($rs, $this->rsblocks[$blockNo]["\144\141\164\141"], $ecc); $this->rsblocks[$blockNo]["\x65\143\x63"] = $ecc; $this->ecccode = array_merge(array_slice($this->ecccode, 0, $eccPos), $ecc); $dataPos += $dl; $eccPos += $el; $blockNo++; } goto iTzHz; vxAdn: $rs = $this->init_rs(8, 0x11d, 0, 1, $el, 255 - $dl - $el); goto iWF8y; Z6N03: $blockNo = 0; goto xwwv0; xwwv0: $dataPos = 0; goto eOzB5; OJ0ix: return 0; goto Em0kc; OlXb0: $endfor = $this->rsBlockNum2($spec); goto Uy07z; iTzHz: if ($this->rsBlockNum2($spec) == 0) { return 0; } goto OdRne; sxjz0: $dl = $this->rsDataCodes1($spec); goto ABweZ; wA3KS: $rs = $this->init_rs(8, 0x11d, 0, 1, $el, 255 - $dl - $el); goto Z6N03; eOzB5: $eccPos = 0; goto F2OVV; ABweZ: $el = $this->rsEccCodes1($spec); goto wA3KS; iWF8y: if ($rs == NULL) { return -1; } goto OlXb0; F2OVV: $endfor = $this->rsBlockNum1($spec); goto QNnnK; Em0kc: } protected function getCode() { goto PJXUM; FCSJc: return $ret; goto uotBC; lBzDA: $this->count++; goto FCSJc; PJXUM: if ($this->count < $this->dataLength) { goto cZyH2; hmK2G: $ret = $this->rsblocks[$row]["\144\x61\164\141"][$col]; goto kyydH; c8FFr: $col = $this->count / $this->blocks; goto GKTd3; cZyH2: $row = $this->count % $this->blocks; goto c8FFr; GKTd3: if ($col >= $this->rsblocks[0]["\x64\x61\164\x61\x4c\x65\x6e\147\164\150"]) { $row += $this->b1; } goto hmK2G; kyydH: } elseif ($this->count < $this->dataLength + $this->eccLength) { goto fEth4; fEth4: $row = ($this->count - $this->dataLength) % $this->blocks; goto vNKSn; aHxvq: $ret = $this->rsblocks[$row]["\x65\143\143"][$col]; goto UkTMq; vNKSn: $col = ($this->count - $this->dataLength) / $this->blocks; goto aHxvq; UkTMq: } else { return 0; } goto lBzDA; uotBC: } protected function writeFormatInformation($width, &$frame, $mask, $level) { goto PimCf; HY20Q: $format = $this->getFormatInfo($mask, $level); goto sfjv0; J2CUY: for ($i = 0; $i < 7; ++$i) { if ($format & 1) { $blacks += 2; $v = 0x85; } else { $v = 0x84; } $frame[$width - 7 + $i][8] = chr($v); if ($i == 0) { $frame[8][7] = chr($v); } else { $frame[8][6 - $i] = chr($v); } $format = $format >> 1; } goto eu_zS; eu_zS: return $blacks; goto DDkkM; PimCf: $blacks = 0; goto HY20Q; sfjv0: for ($i = 0; $i < 8; ++$i) { if ($format & 1) { $blacks += 2; $v = 0x85; } else { $v = 0x84; } $frame[8][$width - 1 - $i] = chr($v); if ($i < 6) { $frame[$i][8] = chr($v); } else { $frame[$i + 1][8] = chr($v); } $format = $format >> 1; } goto J2CUY; DDkkM: } protected function mask0($x, $y) { return $x + $y & 1; } protected function mask1($x, $y) { return $y & 1; } protected function mask2($x, $y) { return $x % 3; } protected function mask3($x, $y) { return ($x + $y) % 3; } protected function mask4($x, $y) { return (int) ($y / 2) + (int) ($x / 3) & 1; } protected function mask5($x, $y) { return ($x * $y & 1) + $x * $y % 3; } protected function mask6($x, $y) { return ($x * $y & 1) + $x * $y % 3 & 1; } protected function mask7($x, $y) { return $x * $y % 3 + ($x + $y & 1) & 1; } protected function generateMaskNo($maskNo, $width, $frame) { goto KLR0L; CRSxM: return $bitMask; goto F8yID; Xr2Hi: for ($y = 0; $y < $width; ++$y) { for ($x = 0; $x < $width; ++$x) { if (ord($frame[$y][$x]) & 0x80) { $bitMask[$y][$x] = 0; } else { $maskFunc = call_user_func(array($this, "\x6d\141\x73\153" . $maskNo), $x, $y); $bitMask[$y][$x] = $maskFunc == 0 ? 1 : 0; } } } goto CRSxM; KLR0L: $bitMask = array_fill(0, $width, array_fill(0, $width, 0)); goto Xr2Hi; F8yID: } protected function makeMaskNo($maskNo, $width, $s, &$d, $maskGenOnly = false) { goto Oksbs; JwXDH: $d = $s; goto uRWjM; T3h7l: return $b; goto j0Eye; Oksbs: $b = 0; goto xsJtG; QFdNG: if ($maskGenOnly) { return; } goto JwXDH; JN_Ak: $bitMask = $this->generateMaskNo($maskNo, $width, $s, $d); goto QFdNG; xsJtG: $bitMask = array(); goto JN_Ak; uRWjM: for ($y = 0; $y < $width; ++$y) { for ($x = 0; $x < $width; ++$x) { if ($bitMask[$y][$x] == 1) { $d[$y][$x] = chr(ord($s[$y][$x]) ^ (int) $bitMask[$y][$x]); } $b += (int) (ord($d[$y][$x]) & 1); } } goto T3h7l; j0Eye: } protected function makeMask($width, $frame, $maskNo, $level) { goto RtH6x; RtH6x: $masked = array_fill(0, $width, str_repeat("\0", $width)); goto JPtpL; JPtpL: $this->makeMaskNo($maskNo, $width, $frame, $masked); goto aMd4x; aMd4x: $this->writeFormatInformation($width, $masked, $maskNo, $level); goto QE4X8; QE4X8: return $masked; goto aeBX9; aeBX9: } protected function calcN1N3($length) { goto kdV9O; cdsHh: for ($i = 0; $i < $length; ++$i) { if ($this->runLength[$i] >= 5) { $demerit += N1 + ($this->runLength[$i] - 5); } if ($i & 1) { if ($i >= 3 and $i < $length - 2 and $this->runLength[$i] % 3 == 0) { $fact = (int) ($this->runLength[$i] / 3); if ($this->runLength[$i - 2] == $fact and $this->runLength[$i - 1] == $fact and $this->runLength[$i + 1] == $fact and $this->runLength[$i + 2] == $fact) { if ($this->runLength[$i - 3] < 0 or $this->runLength[$i - 3] >= 4 * $fact) { $demerit += N3; } elseif ($i + 3 >= $length or $this->runLength[$i + 3] >= 4 * $fact) { $demerit += N3; } } } } } goto eMsb2; kdV9O: $demerit = 0; goto cdsHh; eMsb2: return $demerit; goto DiGpI; DiGpI: } protected function evaluateSymbol($width, $frame) { goto eEA2l; eEA2l: $head = 0; goto DWFkg; qJQCy: for ($x = 0; $x < $width; ++$x) { $head = 0; $this->runLength[0] = 1; for ($y = 0; $y < $width; ++$y) { if ($y == 0 and ord($frame[$y][$x]) & 1) { goto J0DAW; hnTbW: $head = 1; goto tRUSp; tRUSp: $this->runLength[$head] = 1; goto gctuz; J0DAW: $this->runLength[0] = -1; goto hnTbW; gctuz: } elseif ($y > 0) { if ((ord($frame[$y][$x]) ^ ord($frame[$y - 1][$x])) & 1) { $head++; $this->runLength[$head] = 1; } else { $this->runLength[$head]++; } } } $demerit += $this->calcN1N3($head + 1); } goto oqeIF; oqeIF: return $demerit; goto Y1boG; DWFkg: $demerit = 0; goto Wnrnt; Wnrnt: for ($y = 0; $y < $width; ++$y) { $head = 0; $this->runLength[0] = 1; $frameY = $frame[$y]; if ($y > 0) { $frameYM = $frame[$y - 1]; } for ($x = 0; $x < $width; ++$x) { if ($x > 0 and $y > 0) { goto j4RlN; j4RlN: $b22 = ord($frameY[$x]) & ord($frameY[$x - 1]) & ord($frameYM[$x]) & ord($frameYM[$x - 1]); goto AXqh8; Mma52: if (($b22 | $w22 ^ 1) & 1) { $demerit += N2; } goto JAHIz; AXqh8: $w22 = ord($frameY[$x]) | ord($frameY[$x - 1]) | ord($frameYM[$x]) | ord($frameYM[$x - 1]); goto Mma52; JAHIz: } if ($x == 0 and ord($frameY[$x]) & 1) { goto IsNPX; j1whX: $head = 1; goto Z1XE8; Z1XE8: $this->runLength[$head] = 1; goto uR0J7; IsNPX: $this->runLength[0] = -1; goto j1whX; uR0J7: } elseif ($x > 0) { if ((ord($frameY[$x]) ^ ord($frameY[$x - 1])) & 1) { $head++; $this->runLength[$head] = 1; } else { $this->runLength[$head]++; } } } $demerit += $this->calcN1N3($head + 1); } goto qJQCy; Y1boG: } protected function mask($width, $frame, $level) { goto P2OFj; P2OFj: $minDemerit = PHP_INT_MAX; goto sAWg4; D_FSS: if (QR_FIND_FROM_RANDOM !== false) { $howManuOut = 8 - QR_FIND_FROM_RANDOM % 9; for ($i = 0; $i < $howManuOut; ++$i) { $remPos = rand(0, count($checked_masks) - 1); unset($checked_masks[$remPos]); $checked_masks = array_values($checked_masks); } } goto eO8zv; eO8zv: $bestMask = $frame; goto T40l2; ikyuZ: $bestMask = array(); goto Cp2aA; T40l2: foreach ($checked_masks as $i) { goto iAGoa; LTOkG: $demerit = (int) ((int) (abs($blacks - 50) / 5) * N4); goto G0gi2; p43f7: $demerit = 0; goto SgmPi; SgmPi: $blacks = 0; goto sjvoD; G0gi2: $demerit += $this->evaluateSymbol($width, $mask); goto MLvrf; iAGoa: $mask = array_fill(0, $width, str_repeat("\0", $width)); goto p43f7; llIzd: $blacks += $this->writeFormatInformation($width, $mask, $i, $level); goto ivpvG; sjvoD: $blacks = $this->makeMaskNo($i, $width, $frame, $mask); goto llIzd; MLvrf: if ($demerit < $minDemerit) { goto pstz5; pstz5: $minDemerit = $demerit; goto V6IcT; V6IcT: $bestMask = $mask; goto L489N; L489N: $bestMaskNum = $i; goto BQYQc; BQYQc: } goto J1v9_; ivpvG: $blacks = (int) (100 * $blacks / ($width * $width)); goto LTOkG; J1v9_: } goto WVKcp; Cp2aA: $checked_masks = array(0, 1, 2, 3, 4, 5, 6, 7); goto D_FSS; WVKcp: return $bestMask; goto vGSH2; sAWg4: $bestMaskNum = 0; goto ikyuZ; vGSH2: } protected function isdigitat($str, $pos) { if ($pos >= strlen($str)) { return false; } return ord($str[$pos]) >= ord("\x30") && ord($str[$pos]) <= ord("\71"); } protected function isalnumat($str, $pos) { if ($pos >= strlen($str)) { return false; } return $this->lookAnTable(ord($str[$pos])) >= 0; } protected function identifyMode($pos) { goto mIgEa; mIgEa: if ($pos >= strlen($this->dataStr)) { return QR_MODE_NL; } goto O1yRp; nQSkI: if ($this->isdigitat($this->dataStr, $pos)) { return QR_MODE_NM; } elseif ($this->isalnumat($this->dataStr, $pos)) { return QR_MODE_AN; } elseif ($this->hint == QR_MODE_KJ) { if ($pos + 1 < strlen($this->dataStr)) { goto PUGOf; PUGOf: $d = $this->dataStr[$pos + 1]; goto KwK7S; KwK7S: $word = ord($c) << 8 | ord($d); goto y6lnL; y6lnL: if ($word >= 0x8140 && $word <= 0x9ffc or $word >= 0xe040 && $word <= 0xebbf) { return QR_MODE_KJ; } goto YrE1j; YrE1j: } } goto TTTCe; O1yRp: $c = $this->dataStr[$pos]; goto nQSkI; TTTCe: return QR_MODE_8B; goto nvOqq; nvOqq: } protected function eatNum() { goto Vnj20; bO1SZ: if ($mode == QR_MODE_8B) { $dif = $this->estimateBitsModeNum($run) + 4 + $ln + $this->estimateBitsMode8(1) - $this->estimateBitsMode8($run + 1); if ($dif > 0) { return $this->eat8(); } } goto Ywgxd; TMMqe: $this->items = $this->appendNewInputItem($this->items, QR_MODE_NM, $run, str_split($this->dataStr)); goto Wthqk; Ywgxd: if ($mode == QR_MODE_AN) { $dif = $this->estimateBitsModeNum($run) + 4 + $ln + $this->estimateBitsModeAn(1) - $this->estimateBitsModeAn($run + 1); if ($dif > 0) { return $this->eatAn(); } } goto TMMqe; Vnj20: $ln = $this->lengthIndicator(QR_MODE_NM, $this->version); goto FeQJQ; FT71H: $run = $p; goto P1DMU; FeQJQ: $p = 0; goto LA08y; P1DMU: $mode = $this->identifyMode($p); goto bO1SZ; Wthqk: return $run; goto XglSD; LA08y: while ($this->isdigitat($this->dataStr, $p)) { $p++; } goto FT71H; XglSD: } protected function eatAn() { goto zzbP_; VME21: return $run; goto BGtrt; BhXA6: while ($this->isalnumat($this->dataStr, $p)) { if ($this->isdigitat($this->dataStr, $p)) { goto y2ij6; y2ij6: $q = $p; goto ACRRW; ACRRW: while ($this->isdigitat($this->dataStr, $q)) { $q++; } goto aFTyh; aFTyh: $dif = $this->estimateBitsModeAn($p) + $this->estimateBitsModeNum($q - $p) + 4 + $ln - $this->estimateBitsModeAn($q); goto wg0fQ; wg0fQ: if ($dif < 0) { break; } else { $p = $q; } goto hdqg4; hdqg4: } else { $p++; } } goto HMHoQ; HMHoQ: $run = $p; goto WjJ9W; L6r2s: $this->items = $this->appendNewInputItem($this->items, QR_MODE_AN, $run, str_split($this->dataStr)); goto VME21; n0SX2: $ln = $this->lengthIndicator(QR_MODE_NM, $this->version); goto iUtk4; iUtk4: $p = 1; goto BhXA6; zzbP_: $la = $this->lengthIndicator(QR_MODE_AN, $this->version); goto n0SX2; WjJ9W: if (!$this->isalnumat($this->dataStr, $p)) { $dif = $this->estimateBitsModeAn($run) + 4 + $la + $this->estimateBitsMode8(1) - $this->estimateBitsMode8($run + 1); if ($dif > 0) { return $this->eat8(); } } goto L6r2s; BGtrt: } protected function eatKanji() { goto ZmuYt; Lq0W9: $this->items = $this->appendNewInputItem($this->items, QR_MODE_KJ, $p, str_split($this->dataStr)); goto ULpzD; ZmuYt: $p = 0; goto eMzMk; eMzMk: while ($this->identifyMode($p) == QR_MODE_KJ) { $p += 2; } goto Lq0W9; ULpzD: return $run; goto LAOwE; LAOwE: } protected function eat8() { goto j1nA2; Nc884: $ln = $this->lengthIndicator(QR_MODE_NM, $this->version); goto jNtVP; Pjiv0: return $run; goto IMWst; j1nA2: $la = $this->lengthIndicator(QR_MODE_AN, $this->version); goto Nc884; LS1bn: while ($p < $dataStrLen) { $mode = $this->identifyMode($p); if ($mode == QR_MODE_KJ) { break; } if ($mode == QR_MODE_NM) { goto faYoD; a0Y2d: $dif = $this->estimateBitsMode8($p) + $this->estimateBitsModeNum($q - $p) + 4 + $ln - $this->estimateBitsMode8($q); goto g2T8O; faYoD: $q = $p; goto ks45v; ks45v: while ($this->isdigitat($this->dataStr, $q)) { $q++; } goto a0Y2d; g2T8O: if ($dif < 0) { break; } else { $p = $q; } goto tvhlC; tvhlC: } elseif ($mode == QR_MODE_AN) { goto syNU6; Y_96M: $dif = $this->estimateBitsMode8($p) + $this->estimateBitsModeAn($q - $p) + 4 + $la - $this->estimateBitsMode8($q); goto Q1C8M; pguiD: while ($this->isalnumat($this->dataStr, $q)) { $q++; } goto Y_96M; syNU6: $q = $p; goto pguiD; Q1C8M: if ($dif < 0) { break; } else { $p = $q; } goto Sm7Wt; Sm7Wt: } else { $p++; } } goto EsMBc; EsMBc: $run = $p; goto b5fqn; b5fqn: $this->items = $this->appendNewInputItem($this->items, QR_MODE_8B, $run, str_split($this->dataStr)); goto Pjiv0; vF5fn: $dataStrLen = strlen($this->dataStr); goto LS1bn; jNtVP: $p = 1; goto vF5fn; IMWst: } protected function splitString() { while (strlen($this->dataStr) > 0) { $mode = $this->identifyMode(0); switch ($mode) { case QR_MODE_NM: $length = $this->eatNum(); break; case QR_MODE_AN: $length = $this->eatAn(); break; case QR_MODE_KJ: if ($hint == QR_MODE_KJ) { $length = $this->eatKanji(); } else { $length = $this->eat8(); } break; default: $length = $this->eat8(); break; } if ($length == 0) { return 0; } if ($length < 0) { return -1; } $this->dataStr = substr($this->dataStr, $length); } return 0; } protected function toUpper() { goto FENOp; FENOp: $stringLen = strlen($this->dataStr); goto tH0Vi; tH0Vi: $p = 0; goto wfiq3; gFfez: return $this->dataStr; goto jBU9w; wfiq3: while ($p < $stringLen) { $mode = $this->identifyMode(substr($this->dataStr, $p), $this->hint); if ($mode == QR_MODE_KJ) { $p += 2; } else { if (ord($this->dataStr[$p]) >= ord("\141") and ord($this->dataStr[$p]) <= ord("\x7a")) { $this->dataStr[$p] = chr(ord($this->dataStr[$p]) - 32); } $p++; } } goto gFfez; jBU9w: } protected function newInputItem($mode, $size, $data, $bstream = null) { goto H07CZ; NGgrR: $inputitem["\x64\141\x74\141"] = $setData; goto R1RCd; gCbyz: if (count($setData) < $size) { $setData = array_merge($setData, array_fill(0, $size - count($setData), 0)); } goto AmQtX; vA25y: return $inputitem; goto MYhyT; C49Oi: $inputitem["\x6d\157\144\x65"] = $mode; goto nAggj; R1RCd: $inputitem["\x62\163\x74\162\x65\x61\x6d"] = $bstream; goto vA25y; nAggj: $inputitem["\x73\x69\172\145"] = $size; goto NGgrR; BdqS9: $inputitem = array(); goto C49Oi; H07CZ: $setData = array_slice($data, 0, $size); goto gCbyz; AmQtX: if (!$this->check($mode, $size, $setData)) { return NULL; } goto BdqS9; MYhyT: } protected function encodeModeNum($inputitem, $version) { goto l5IA5; b14nL: $inputitem["\x62\x73\x74\x72\x65\x61\155"] = $this->appendNum($inputitem["\142\x73\164\162\x65\x61\x6d"], $this->lengthIndicator(QR_MODE_NM, $version), $inputitem["\163\x69\x7a\x65"]); goto bMp2x; FgbQ3: if ($inputitem["\163\151\172\x65"] - $words * 3 == 1) { $val = ord($inputitem["\x64\141\164\141"][$words * 3]) - ord("\x30"); $inputitem["\142\163\164\x72\x65\141\x6d"] = $this->appendNum($inputitem["\142\x73\164\162\145\141\x6d"], 4, $val); } elseif ($inputitem["\x73\151\172\x65"] - $words * 3 == 2) { goto t0tc6; asmMp: $inputitem["\x62\x73\164\x72\x65\x61\155"] = $this->appendNum($inputitem["\142\x73\x74\162\145\x61\x6d"], 7, $val); goto evy6s; t0tc6: $val = (ord($inputitem["\144\141\164\x61"][$words * 3]) - ord("\60")) * 10; goto Jyq1b; Jyq1b: $val += ord($inputitem["\x64\141\164\x61"][$words * 3 + 1]) - ord("\60"); goto asmMp; evy6s: } goto uS23c; l5IA5: $words = (int) ($inputitem["\x73\151\172\x65"] / 3); goto ba356; uS23c: return $inputitem; goto w1kLn; bMp2x: for ($i = 0; $i < $words; ++$i) { $val = (ord($inputitem["\144\141\x74\x61"][$i * 3]) - ord("\60")) * 100; $val += (ord($inputitem["\144\141\164\141"][$i * 3 + 1]) - ord("\60")) * 10; $val += ord($inputitem["\144\141\164\x61"][$i * 3 + 2]) - ord("\x30"); $inputitem["\x62\163\164\162\x65\x61\x6d"] = $this->appendNum($inputitem["\142\x73\164\162\x65\x61\155"], 10, $val); } goto FgbQ3; SL9tf: $val = 0x1; goto ERFTy; ERFTy: $inputitem["\x62\163\x74\x72\145\141\x6d"] = $this->appendNum($inputitem["\x62\163\x74\162\145\141\155"], 4, $val); goto b14nL; ba356: $inputitem["\142\x73\164\162\145\141\155"] = array(); goto SL9tf; w1kLn: } protected function encodeModeAn($inputitem, $version) { goto EJyTn; wyjE3: $inputitem["\142\163\164\x72\x65\x61\x6d"] = $this->appendNum($inputitem["\x62\163\x74\x72\x65\x61\155"], $this->lengthIndicator(QR_MODE_AN, $version), $inputitem["\163\151\172\145"]); goto uF5V9; N9aJt: return $inputitem; goto IrEBc; EJyTn: $words = (int) ($inputitem["\x73\x69\172\x65"] / 2); goto QaWYu; uF5V9: for ($i = 0; $i < $words; ++$i) { $val = (int) ($this->lookAnTable(ord($inputitem["\x64\x61\x74\x61"][$i * 2])) * 45); $val += (int) $this->lookAnTable(ord($inputitem["\x64\141\164\141"][$i * 2 + 1])); $inputitem["\142\163\164\162\145\141\155"] = $this->appendNum($inputitem["\x62\x73\x74\x72\145\141\155"], 11, $val); } goto vlsi6; qCER0: $inputitem["\x62\163\x74\x72\x65\x61\155"] = $this->appendNum($inputitem["\142\x73\164\x72\x65\x61\155"], 4, 0x2); goto wyjE3; vlsi6: if ($inputitem["\163\x69\172\145"] & 1) { $val = $this->lookAnTable(ord($inputitem["\x64\x61\x74\x61"][$words * 2])); $inputitem["\142\x73\164\162\x65\141\155"] = $this->appendNum($inputitem["\142\x73\x74\162\x65\141\x6d"], 6, $val); } goto N9aJt; QaWYu: $inputitem["\142\x73\x74\x72\x65\x61\155"] = array(); goto qCER0; IrEBc: } protected function encodeMode8($inputitem, $version) { goto s1li8; BSpx7: return $inputitem; goto WmEfW; skxzI: $inputitem["\x62\x73\164\162\145\141\155"] = $this->appendNum($inputitem["\x62\x73\164\x72\x65\x61\x6d"], 4, 0x4); goto DObmj; s1li8: $inputitem["\x62\x73\x74\162\145\x61\155"] = array(); goto skxzI; W2arK: for ($i = 0; $i < $inputitem["\x73\151\172\x65"]; ++$i) { $inputitem["\x62\163\x74\162\x65\x61\x6d"] = $this->appendNum($inputitem["\142\163\x74\162\x65\x61\155"], 8, ord($inputitem["\144\x61\x74\x61"][$i])); } goto BSpx7; DObmj: $inputitem["\142\163\164\162\145\x61\x6d"] = $this->appendNum($inputitem["\x62\163\x74\x72\145\141\155"], $this->lengthIndicator(QR_MODE_8B, $version), $inputitem["\x73\151\172\x65"]); goto W2arK; WmEfW: } protected function encodeModeKanji($inputitem, $version) { goto WK_IO; WK_IO: $inputitem["\142\163\x74\162\145\141\155"] = array(); goto HNvmS; EehRU: for ($i = 0; $i < $inputitem["\x73\151\172\x65"]; $i += 2) { $val = ord($inputitem["\x64\141\x74\141"][$i]) << 8 | ord($inputitem["\144\141\x74\141"][$i + 1]); if ($val <= 0x9ffc) { $val -= 0x8140; } else { $val -= 0xc140; } $h = ($val >> 8) * 0xc0; $val = ($val & 0xff) + $h; $inputitem["\142\163\164\162\x65\141\155"] = $this->appendNum($inputitem["\x62\x73\164\162\145\141\x6d"], 13, $val); } goto lrish; HNvmS: $inputitem["\142\x73\164\162\145\141\x6d"] = $this->appendNum($inputitem["\x62\163\x74\162\145\141\x6d"], 4, 0x8); goto UEDpV; UEDpV: $inputitem["\142\163\x74\162\x65\141\155"] = $this->appendNum($inputitem["\x62\163\164\x72\145\x61\x6d"], $this->lengthIndicator(QR_MODE_KJ, $version), (int) ($inputitem["\163\151\x7a\x65"] / 2)); goto EehRU; lrish: return $inputitem; goto sWQbH; sWQbH: } protected function encodeModeStructure($inputitem) { goto yT7gO; tjtNs: $inputitem["\142\x73\164\x72\145\x61\x6d"] = $this->appendNum($inputitem["\142\163\164\162\x65\x61\x6d"], 4, 0x3); goto hPTdc; EBLPc: return $inputitem; goto eu4bK; cYna5: $inputitem["\142\163\x74\162\x65\x61\155"] = $this->appendNum($inputitem["\x62\163\x74\162\145\x61\155"], 4, ord($inputitem["\144\x61\164\x61"][0]) - 1); goto KvmAF; yT7gO: $inputitem["\x62\x73\x74\x72\145\141\155"] = array(); goto tjtNs; hPTdc: $inputitem["\x62\x73\164\x72\x65\x61\155"] = $this->appendNum($inputitem["\x62\x73\x74\x72\145\141\155"], 4, ord($inputitem["\144\x61\164\141"][1]) - 1); goto cYna5; KvmAF: $inputitem["\142\163\x74\x72\145\141\x6d"] = $this->appendNum($inputitem["\142\x73\164\x72\145\141\x6d"], 8, ord($inputitem["\x64\x61\x74\141"][2])); goto EBLPc; eu4bK: } protected function encodeBitStream($inputitem, $version) { goto ugLkr; m69Gg: return $inputitem; goto RJGG2; zPxgp: $words = $this->maximumWords($inputitem["\155\157\144\x65"], $version); goto iF3o8; iF3o8: if ($inputitem["\x73\x69\172\x65"] > $words) { goto OYy_e; ZjhrG: $st2 = $this->newInputItem($inputitem["\155\x6f\144\145"], $inputitem["\163\151\172\x65"] - $words, array_slice($inputitem["\x64\x61\164\x61"], $words)); goto SYjHf; k4W5L: $inputitem["\142\163\164\162\x65\x61\x6d"] = array(); goto Gu3Ml; SYjHf: $st1 = $this->encodeBitStream($st1, $version); goto QwXR8; Gu3Ml: $inputitem["\x62\163\x74\x72\145\141\155"] = $this->appendBitstream($inputitem["\x62\x73\164\x72\145\141\155"], $st1["\142\x73\x74\162\x65\x61\155"]); goto l2B9I; OYy_e: $st1 = $this->newInputItem($inputitem["\155\157\x64\145"], $words, $inputitem["\x64\x61\164\x61"]); goto ZjhrG; QwXR8: $st2 = $this->encodeBitStream($st2, $version); goto k4W5L; l2B9I: $inputitem["\x62\163\164\x72\x65\x61\x6d"] = $this->appendBitstream($inputitem["\142\x73\164\x72\x65\141\155"], $st2["\142\x73\164\x72\145\x61\155"]); goto Xj3QS; Xj3QS: } else { switch ($inputitem["\x6d\157\x64\145"]) { case QR_MODE_NM: $inputitem = $this->encodeModeNum($inputitem, $version); break; case QR_MODE_AN: $inputitem = $this->encodeModeAn($inputitem, $version); break; case QR_MODE_8B: $inputitem = $this->encodeMode8($inputitem, $version); break; case QR_MODE_KJ: $inputitem = $this->encodeModeKanji($inputitem, $version); break; case QR_MODE_ST: $inputitem = $this->encodeModeStructure($inputitem); break; default: break; } } goto m69Gg; ugLkr: $inputitem["\x62\163\x74\162\145\141\x6d"] = array(); goto zPxgp; RJGG2: } protected function appendNewInputItem($items, $mode, $size, $data) { goto HGmjc; ITMnP: return $items; goto vbT4W; HGmjc: $newitem = $this->newInputItem($mode, $size, $data); goto W7g0v; W7g0v: if (!empty($newitem)) { $items[] = $newitem; } goto ITMnP; vbT4W: } protected function insertStructuredAppendHeader($items, $size, $index, $parity) { goto BoYRU; yzBvW: if ($index <= 0 or $index > MAX_STRUCTURED_SYMBOLS) { return -1; } goto w4Bqd; w4Bqd: $buf = array($size, $index, $parity); goto eQhpl; BoYRU: if ($size > MAX_STRUCTURED_SYMBOLS) { return -1; } goto yzBvW; coUn1: array_unshift($items, $entry); goto bpyom; bpyom: return $items; goto MAysO; eQhpl: $entry = $this->newInputItem(QR_MODE_ST, 3, buf); goto coUn1; MAysO: } protected function calcParity($items) { goto IX35Q; IX35Q: $parity = 0; goto Q7WBt; Q7WBt: foreach ($items as $item) { if ($item["\x6d\157\x64\x65"] != QR_MODE_ST) { for ($i = $item["\163\x69\x7a\x65"] - 1; $i >= 0; --$i) { $parity ^= $item["\x64\x61\164\141"][$i]; } } } goto ZtxtT; ZtxtT: return $parity; goto wGL1X; wGL1X: } protected function checkModeNum($size, $data) { for ($i = 0; $i < $size; ++$i) { if (ord($data[$i]) < ord("\x30") or ord($data[$i]) > ord("\71")) { return false; } } return true; } protected function lookAnTable($c) { return $c > 127 ? -1 : $this->anTable[$c]; } protected function checkModeAn($size, $data) { for ($i = 0; $i < $size; ++$i) { if ($this->lookAnTable(ord($data[$i])) == -1) { return false; } } return true; } protected function estimateBitsModeNum($size) { goto ZJet9; soZJi: $bits = $w * 10; goto afJE3; ZJet9: $w = (int) ($size / 3); goto soZJi; afJE3: switch ($size - $w * 3) { case 1: $bits += 4; break; case 2: $bits += 7; break; } goto p7Vuw; p7Vuw: return $bits; goto Ou18p; Ou18p: } protected function estimateBitsModeAn($size) { goto OnO6C; A6IG5: return $bits; goto bNfG9; piewM: if ($size & 1) { $bits += 6; } goto A6IG5; OnO6C: $bits = (int) ($size * 5.5); goto piewM; bNfG9: } protected function estimateBitsMode8($size) { return (int) ($size * 8); } protected function estimateBitsModeKanji($size) { return (int) ($size * 6.5); } protected function checkModeKanji($size, $data) { goto woc5N; WSa5H: return true; goto LyzXL; iM5yy: for ($i = 0; $i < $size; $i += 2) { $val = ord($data[$i]) << 8 | ord($data[$i + 1]); if ($val < 0x8140 or $val > 0x9ffc and $val < 0xe040 or $val > 0xebbf) { return false; } } goto WSa5H; woc5N: if ($size & 1) { return false; } goto iM5yy; LyzXL: } protected function check($mode, $size, $data) { goto zm_f0; sOHjM: return false; goto KpyX0; tFFD8: switch ($mode) { case QR_MODE_NM: return $this->checkModeNum($size, $data); case QR_MODE_AN: return $this->checkModeAn($size, $data); case QR_MODE_KJ: return $this->checkModeKanji($size, $data); case QR_MODE_8B: return true; case QR_MODE_ST: return true; default: break; } goto sOHjM; zm_f0: if ($size <= 0) { return false; } goto tFFD8; KpyX0: } protected function estimateBitStreamSize($items, $version) { goto OUu3x; LxboM: foreach ($items as $item) { goto jFYxx; MFpNG: $l = $this->lengthIndicator($item["\x6d\x6f\144\x65"], $version); goto PofbV; LXR0_: $bits += $num * (4 + $l); goto VQLHS; PofbV: $m = 1 << $l; goto wERqA; jFYxx: switch ($item["\x6d\157\x64\145"]) { case QR_MODE_NM: $bits = $this->estimateBitsModeNum($item["\x73\x69\172\145"]); break; case QR_MODE_AN: $bits = $this->estimateBitsModeAn($item["\163\x69\x7a\145"]); break; case QR_MODE_8B: $bits = $this->estimateBitsMode8($item["\163\x69\172\x65"]); break; case QR_MODE_KJ: $bits = $this->estimateBitsModeKanji($item["\163\151\172\145"]); break; case QR_MODE_ST: return STRUCTURE_HEADER_BITS; default: return 0; } goto MFpNG; wERqA: $num = (int) (($item["\x73\151\172\145"] + $m - 1) / $m); goto LXR0_; VQLHS: } goto pk2vC; pk2vC: return $bits; goto nZWVw; OUu3x: $bits = 0; goto UiTT7; UiTT7: if ($version == 0) { $version = 1; } goto LxboM; nZWVw: } protected function estimateVersion($items) { goto XsAGm; XsAGm: $version = 0; goto DcpX9; FZh0V: do { $prev = $version; $bits = $this->estimateBitStreamSize($items, $prev); $version = $this->getMinimumVersion((int) (($bits + 7) / 8), $this->level); if ($version < 0) { return -1; } } while ($version > $prev); goto m1UgV; DcpX9: $prev = 0; goto FZh0V; m1UgV: return $version; goto nyeYr; nyeYr: } protected function lengthOfCode($mode, $version, $bits) { goto nmnko; nmnko: $payload = $bits - 4 - $this->lengthIndicator($mode, $version); goto UPJOY; QpGCT: if ($size < 0) { $size = 0; } goto IpUpG; UPJOY: switch ($mode) { case QR_MODE_NM: goto R380i; R380i: $chunks = (int) ($payload / 10); goto pa60k; TFjA1: if ($remain >= 7) { $size += 2; } elseif ($remain >= 4) { $size += 1; } goto wShFk; RdJ_Z: $size = $chunks * 3; goto TFjA1; pa60k: $remain = $payload - $chunks * 10; goto RdJ_Z; wShFk: break; goto DqTH1; DqTH1: case QR_MODE_AN: goto KRG0g; u0kTO: $size = $chunks * 2; goto Sn2oW; Sn2oW: if ($remain >= 6) { ++$size; } goto JS885; SSOHE: $remain = $payload - $chunks * 11; goto u0kTO; JS885: break; goto WKnyb; KRG0g: $chunks = (int) ($payload / 11); goto SSOHE; WKnyb: case QR_MODE_8B: $size = (int) ($payload / 8); break; case QR_MODE_KJ: $size = (int) ($payload / 13 * 2); break; case QR_MODE_ST: $size = (int) ($payload / 8); break; default: $size = 0; break; } goto JzAvR; JzAvR: $maxsize = $this->maximumWords($mode, $version); goto QpGCT; IpUpG: if ($size > $maxsize) { $size = $maxsize; } goto VsEBf; VsEBf: return $size; goto v0RX4; v0RX4: } protected function createBitStream($items) { goto zr_4y; hqYuW: return array($items, $total); goto NAqQX; zr_4y: $total = 0; goto pU0Lc; pU0Lc: foreach ($items as $key => $item) { goto uP7rV; uP7rV: $items[$key] = $this->encodeBitStream($item, $this->version); goto wrdOZ; m_FKq: $total += $bits; goto P7nPE; wrdOZ: $bits = count($items[$key]["\x62\x73\164\162\145\141\155"]); goto m_FKq; P7nPE: } goto hqYuW; NAqQX: } protected function convertData($items) { goto TO4fQ; TO4fQ: $ver = $this->estimateVersion($items); goto lhuv2; gbAaA: return $items; goto Hee0F; lhuv2: if ($ver > $this->version) { $this->version = $ver; } goto rcB_g; rcB_g: while (true) { $cbs = $this->createBitStream($items); $items = $cbs[0]; $bits = $cbs[1]; if ($bits < 0) { return -1; } $ver = $this->getMinimumVersion((int) (($bits + 7) / 8), $this->level); if ($ver < 0) { return -1; } elseif ($ver > $this->version) { $this->version = $ver; } else { break; } } goto gbAaA; Hee0F: } protected function appendPaddingBit($bstream) { goto E84vO; HBQCb: return $this->appendBitstream($bstream, $padding); goto rWbP2; TD1be: if ($maxbits - $bits < 5) { return $this->appendNum($bstream, $maxbits - $bits, 0); } goto I7f9h; zGoI3: $bits = count($bstream); goto J7cMZ; hHw1M: $padding = $this->appendNum($padding, $words * 8 - $bits + 4, 0); goto C2OJA; qlH6K: $words = (int) (($bits + 7) / 8); goto IG2J1; C2OJA: $padlen = $maxwords - $words; goto k3jjy; I7f9h: $bits += 4; goto qlH6K; E7Odh: if ($maxbits == $bits) { return $bstream; } goto TD1be; l4l1s: $maxbits = $maxwords * 8; goto E7Odh; IG2J1: $padding = array(); goto hHw1M; E84vO: if (is_null($bstream)) { return null; } goto zGoI3; J7cMZ: $maxwords = $this->getDataLength($this->version, $this->level); goto l4l1s; k3jjy: if ($padlen > 0) { goto c7oUV; pGU7N: for ($i = 0; $i < $padlen; ++$i) { $padbuf[$i] = $i & 1 ? 0x11 : 0xec; } goto uy1WS; uy1WS: $padding = $this->appendBytes($padding, $padlen, $padbuf); goto SDwSr; c7oUV: $padbuf = array(); goto pGU7N; SDwSr: } goto HBQCb; rWbP2: } protected function mergeBitStream($items) { goto GPz3w; wpmP0: $bstream = array(); goto IiyyK; IiyyK: foreach ($items as $item) { $bstream = $this->appendBitstream($bstream, $item["\x62\x73\164\162\x65\x61\155"]); } goto JLR2s; GPz3w: $items = $this->convertData($items); goto bOzMO; bOzMO: if (!is_array($items)) { return null; } goto wpmP0; JLR2s: return $bstream; goto BnAl3; BnAl3: } protected function getBitStream($items) { $bstream = $this->mergeBitStream($items); return $this->appendPaddingBit($bstream); } protected function getByteStream($items) { $bstream = $this->getBitStream($items); return $this->bitstreamToByte($bstream); } protected function allocate($setLength) { return array_fill(0, $setLength, 0); } protected function newFromNum($bits, $num) { goto dnm93; TNiDe: for ($i = 0; $i < $bits; ++$i) { if ($num & $mask) { $bstream[$i] = 1; } else { $bstream[$i] = 0; } $mask = $mask >> 1; } goto f9hQV; f9hQV: return $bstream; goto KoFC7; jJYj1: $mask = 1 << $bits - 1; goto TNiDe; dnm93: $bstream = $this->allocate($bits); goto jJYj1; KoFC7: } protected function newFromBytes($size, $data) { goto pIDbl; bOJiG: return $bstream; goto UN57t; pIDbl: $bstream = $this->allocate($size * 8); goto q5h71; q5h71: $p = 0; goto n9bbD; n9bbD: for ($i = 0; $i < $size; ++$i) { $mask = 0x80; for ($j = 0; $j < 8; ++$j) { if ($data[$i] & $mask) { $bstream[$p] = 1; } else { $bstream[$p] = 0; } $p++; $mask = $mask >> 1; } } goto bOJiG; UN57t: } protected function appendBitstream($bitstream, $append) { goto zbbAj; zbbAj: if (!is_array($append) or count($append) == 0) { return $bitstream; } goto l5sZZ; l5sZZ: if (count($bitstream) == 0) { return $append; } goto rQUMT; rQUMT: return array_values(array_merge($bitstream, $append)); goto AxExI; AxExI: } protected function appendNum($bitstream, $bits, $num) { goto XtOGd; XtOGd: if ($bits == 0) { return 0; } goto DcaNy; iTXBg: return $this->appendBitstream($bitstream, $b); goto etKYK; DcaNy: $b = $this->newFromNum($bits, $num); goto iTXBg; etKYK: } protected function appendBytes($bitstream, $size, $data) { goto gp7SE; c6usJ: $b = $this->newFromBytes($size, $data); goto Qez_f; Qez_f: return $this->appendBitstream($bitstream, $b); goto B1b12; gp7SE: if ($size == 0) { return 0; } goto c6usJ; B1b12: } protected function bitstreamToByte($bstream) { goto suCS9; FN7ji: if ($size == 0) { return array(); } goto n8ySu; JYk8D: return $data; goto TQLkW; j_Ysa: $bytes = (int) ($size / 8); goto jasNu; jasNu: $p = 0; goto GMO_3; n8ySu: $data = array_fill(0, (int) (($size + 7) / 8), 0); goto j_Ysa; A4Pcw: if ($size & 7) { goto XLEof; wISXH: $data[$bytes] = $v; goto Eezt2; Ut6sS: for ($j = 0; $j < ($size & 7); $j++) { $v = $v << 1; $v |= $bstream[$p]; $p++; } goto wISXH; XLEof: $v = 0; goto Ut6sS; Eezt2: } goto JYk8D; tqwBc: $size = count($bstream); goto FN7ji; GMO_3: for ($i = 0; $i < $bytes; $i++) { $v = 0; for ($j = 0; $j < 8; $j++) { $v = $v << 1; $v |= $bstream[$p]; $p++; } $data[$i] = $v; } goto A4Pcw; suCS9: if (is_null($bstream)) { return null; } goto tqwBc; TQLkW: } protected function qrstrset($srctab, $x, $y, $repl, $replLen = false) { $srctab[$y] = substr_replace($srctab[$y], $replLen !== false ? substr($repl, 0, $replLen) : $repl, $x, $replLen !== false ? $replLen : strlen($repl)); return $srctab; } protected function getDataLength($version, $level) { return $this->capacity[$version][QRCAP_WORDS] - $this->capacity[$version][QRCAP_EC][$level]; } protected function getECCLength($version, $level) { return $this->capacity[$version][QRCAP_EC][$level]; } protected function getWidth($version) { return $this->capacity[$version][QRCAP_WIDTH]; } protected function getRemainder($version) { return $this->capacity[$version][QRCAP_REMINDER]; } protected function getMinimumVersion($size, $level) { for ($i = 1; $i <= QRSPEC_VERSION_MAX; ++$i) { $words = $this->capacity[$i][QRCAP_WORDS] - $this->capacity[$i][QRCAP_EC][$level]; if ($words >= $size) { return $i; } } return -1; } protected function lengthIndicator($mode, $version) { goto qlyVB; n6pYp: return $this->lengthTableBits[$mode][$l]; goto umwLt; vnBNF: if ($version <= 9) { $l = 0; } elseif ($version <= 26) { $l = 1; } else { $l = 2; } goto n6pYp; qlyVB: if ($mode == QR_MODE_ST) { return 0; } goto vnBNF; umwLt: } protected function maximumWords($mode, $version) { goto q21rQ; ByOvS: $bits = $this->lengthTableBits[$mode][$l]; goto ZZW0d; apBZQ: return $words; goto rTGOh; q21rQ: if ($mode == QR_MODE_ST) { return 3; } goto DYJLG; sOWqV: if ($mode == QR_MODE_KJ) { $words *= 2; } goto apBZQ; DYJLG: if ($version <= 9) { $l = 0; } else { if ($version <= 26) { $l = 1; } else { $l = 2; } } goto ByOvS; ZZW0d: $words = (1 << $bits) - 1; goto sOWqV; rTGOh: } protected function getEccSpec($version, $level, $spec) { goto d6kKL; d6kKL: if (count($spec) < 5) { $spec = array(0, 0, 0, 0, 0); } goto iiTXW; wgI_x: if ($b2 == 0) { goto rzh0m; sIJEw: $spec[3] = 0; goto qS06Y; rzh0m: $spec[0] = $b1; goto iKLTe; iKLTe: $spec[1] = (int) ($data / $b1); goto celzz; celzz: $spec[2] = (int) ($ecc / $b1); goto sIJEw; qS06Y: $spec[4] = 0; goto mur4T; mur4T: } else { goto BMKSo; CZp1R: $spec[1] = (int) ($data / ($b1 + $b2)); goto ej8cK; VBtPS: $spec[4] = $spec[1] + 1; goto BIT0C; ej8cK: $spec[2] = (int) ($ecc / ($b1 + $b2)); goto sYFPt; BMKSo: $spec[0] = $b1; goto CZp1R; sYFPt: $spec[3] = $b2; goto VBtPS; BIT0C: } goto ocgYD; VNgwV: $ecc = $this->getECCLength($version, $level); goto wgI_x; iiTXW: $b1 = $this->eccTable[$version][$level][0]; goto S0mJ4; ocgYD: return $spec; goto muMbZ; uNBLm: $data = $this->getDataLength($version, $level); goto VNgwV; S0mJ4: $b2 = $this->eccTable[$version][$level][1]; goto uNBLm; muMbZ: } protected function putAlignmentMarker($frame, $ox, $oy) { goto w7WCO; w7WCO: $finder = array("\241\xa1\xa1\xa1\241", "\241\xa0\240\240\241", "\241\xa0\xa1\240\xa1", "\241\240\240\240\xa1", "\xa1\241\241\241\241"); goto pZTCV; pZTCV: $yStart = $oy - 2; goto GSZyb; GSZyb: $xStart = $ox - 2; goto mIjHG; mIjHG: for ($y = 0; $y < 5; $y++) { $frame = $this->qrstrset($frame, $xStart, $yStart + $y, $finder[$y]); } goto UccKC; UccKC: return $frame; goto vbycb; vbycb: } protected function putAlignmentPattern($version, $frame, $width) { goto Hby0a; Hby0a: if ($version < 2) { return $frame; } goto yVrQ9; MI6Wz: $wo = $w - 1; goto SR0pc; yVrQ9: $d = $this->alignmentPattern[$version][1] - $this->alignmentPattern[$version][0]; goto A3nMH; GqDRf: $cx = $this->alignmentPattern[$version][0]; goto MI6Wz; xdKLl: if ($w * $w - 3 == 1) { goto nXgOU; LCBdu: return $frame; goto cJIAo; qx7QP: $y = $this->alignmentPattern[$version][0]; goto AKDRf; AKDRf: $frame = $this->putAlignmentMarker($frame, $x, $y); goto LCBdu; nXgOU: $x = $this->alignmentPattern[$version][0]; goto qx7QP; cJIAo: } goto GqDRf; a6n0E: for ($y = 0; $y < $wo; ++$y) { $cx = $this->alignmentPattern[$version][0]; for ($x = 0; $x < $wo; ++$x) { $frame = $this->putAlignmentMarker($frame, $cx, $cy); $cx += $d; } $cy += $d; } goto bzkqK; SR0pc: for ($x = 1; $x < $wo; ++$x) { $frame = $this->putAlignmentMarker($frame, 6, $cx); $frame = $this->putAlignmentMarker($frame, $cx, 6); $cx += $d; } goto ZHv58; ZHv58: $cy = $this->alignmentPattern[$version][0]; goto a6n0E; A3nMH: if ($d < 0) { $w = 2; } else { $w = (int) (($width - $this->alignmentPattern[$version][0]) / $d + 2); } goto xdKLl; bzkqK: return $frame; goto AJ9ec; AJ9ec: } protected function getVersionPattern($version) { if ($version < 7 or $version > QRSPEC_VERSION_MAX) { return 0; } return $this->versionPattern[$version - 7]; } protected function getFormatInfo($mask, $level) { goto E9qCf; vtOdY: if ($level < 0 or $level > 3) { return 0; } goto aU4QQ; aU4QQ: return $this->formatInfo[$level][$mask]; goto dRYcy; E9qCf: if ($mask < 0 or $mask > 7) { return 0; } goto vtOdY; dRYcy: } protected function putFinderPattern($frame, $ox, $oy) { goto nHnPF; nHnPF: $finder = array("\xc1\xc1\301\xc1\xc1\301\301", "\xc1\xc0\xc0\300\300\300\301", "\301\xc0\xc1\301\301\xc0\xc1", "\xc1\xc0\301\301\xc1\300\xc1", "\xc1\300\xc1\301\301\xc0\xc1", "\xc1\xc0\300\300\300\300\301", "\301\301\301\301\xc1\301\301"); goto IKHrZ; IKHrZ: for ($y = 0; $y < 7; $y++) { $frame = $this->qrstrset($frame, $ox, $oy + $y, $finder[$y]); } goto PrJqe; PrJqe: return $frame; goto FXSd1; FXSd1: } protected function createFrame($version) { goto HfhQ2; b8zCe: $yOffset = $width - 8; goto vUYJb; qurWQ: $frame = $this->qrstrset($frame, $width - 8, 7, $setPattern); goto sNSyf; NF7nT: for ($y = 0; $y < 7; ++$y) { $frame[$y][7] = "\300"; $frame[$y][$width - 8] = "\300"; $frame[$yOffset][7] = "\300"; ++$yOffset; } goto aLkkN; eFY_v: $frame = array_fill(0, $width, $frameLine); goto KbhIo; oQ4vU: $frame = $this->qrstrset($frame, $width - 8, 8, $setPattern, 8); goto b8zCe; RAU1X: $frame = $this->putAlignmentPattern($version, $frame, $width); goto DA4mq; sNSyf: $frame = $this->qrstrset($frame, 0, $width - 8, $setPattern); goto yRRS3; hh6V6: $frame = $this->qrstrset($frame, 0, 8, $setPattern); goto oQ4vU; yRRS3: $setPattern = str_repeat("\x84", 9); goto hh6V6; KbhIo: $frame = $this->putFinderPattern($frame, 0, 0); goto o93KZ; B1cWT: for ($i = 1; $i < $wo; ++$i) { $frame[6][7 + $i] = chr(0x90 | $i & 1); $frame[7 + $i][6] = chr(0x90 | $i & 1); } goto RAU1X; guiEH: $frame = $this->putFinderPattern($frame, 0, $width - 7); goto ZS6px; o93KZ: $frame = $this->putFinderPattern($frame, $width - 7, 0); goto guiEH; aLkkN: $setPattern = str_repeat("\300", 8); goto rKKzD; vUYJb: for ($y = 0; $y < 8; ++$y, ++$yOffset) { $frame[$y][8] = "\x84"; $frame[$yOffset][8] = "\204"; } goto hf5c4; HfhQ2: $width = $this->capacity[$version][QRCAP_WIDTH]; goto tIvuN; rKKzD: $frame = $this->qrstrset($frame, 0, 7, $setPattern); goto qurWQ; hf5c4: $wo = $width - 15; goto B1cWT; DA4mq: if ($version >= 7) { goto hAdfm; iP3LT: for ($x = 0; $x < 6; ++$x) { for ($y = 0; $y < 3; ++$y) { $frame[$width - 11 + $y][$x] = chr(0x88 | $v & 1); $v = $v >> 1; } } goto bimWt; bimWt: $v = $vinf; goto KpIEU; hAdfm: $vinf = $this->getVersionPattern($version); goto QzbNu; KpIEU: for ($y = 0; $y < 6; ++$y) { for ($x = 0; $x < 3; ++$x) { $frame[$y][$x + ($width - 11)] = chr(0x88 | $v & 1); $v = $v >> 1; } } goto VVx4n; QzbNu: $v = $vinf; goto iP3LT; VVx4n: } goto TT5mo; tIvuN: $frameLine = str_repeat("\x0", $width); goto eFY_v; TT5mo: $frame[$width - 8][8] = "\x81"; goto ScdI_; ZS6px: $yOffset = $width - 7; goto NF7nT; ScdI_: return $frame; goto F7vgq; F7vgq: } protected function newFrame($version) { goto CB7HS; XTXoN: return $this->frames[$version]; goto Nl5Ti; CB7HS: if ($version < 1 or $version > QRSPEC_VERSION_MAX) { return NULL; } goto ZqVZl; BVhai: if (is_null($this->frames[$version])) { return NULL; } goto XTXoN; ZqVZl: if (!isset($this->frames[$version])) { $this->frames[$version] = $this->createFrame($version); } goto BVhai; Nl5Ti: } protected function rsBlockNum($spec) { return $spec[0] + $spec[3]; } protected function rsBlockNum1($spec) { return $spec[0]; } protected function rsDataCodes1($spec) { return $spec[1]; } protected function rsEccCodes1($spec) { return $spec[2]; } protected function rsBlockNum2($spec) { return $spec[3]; } protected function rsDataCodes2($spec) { return $spec[4]; } protected function rsEccCodes2($spec) { return $spec[2]; } protected function rsDataLength($spec) { return $spec[0] * $spec[1] + $spec[3] * $spec[4]; } protected function rsEccLength($spec) { return ($spec[0] + $spec[3]) * $spec[2]; } protected function init_rs($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) { goto D6UrQ; imjbC: $rs = $this->init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad); goto LDWEu; Yjemo: return $rs; goto fPDLb; LDWEu: array_unshift($this->rsitems, $rs); goto Yjemo; D6UrQ: foreach ($this->rsitems as $rs) { if ($rs["\x70\x61\144"] != $pad or $rs["\156\x72\157\x6f\x74\x73"] != $nroots or $rs["\x6d\x6d"] != $symsize or $rs["\147\x66\160\x6f\x6c\171"] != $gfpoly or $rs["\146\x63\162"] != $fcr or $rs["\160\x72\151\155"] != $prim) { continue; } return $rs; } goto imjbC; fPDLb: } protected function modnn($rs, $x) { while ($x >= $rs["\x6e\x6e"]) { $x -= $rs["\156\156"]; $x = ($x >> $rs["\x6d\x6d"]) + ($x & $rs["\x6e\156"]); } return $x; } protected function init_rs_char($symsize, $gfpoly, $fcr, $prim, $nroots, $pad) { goto wq_0j; VafNt: $rs["\141\154\x70\x68\x61\x5f\x74\x6f"][$A0] = 0; goto Vakc5; RO3IG: if ($fcr < 0 or $fcr >= 1 << $symsize) { return $rs; } goto I9eOA; s1w1b: $rs["\x6d\x6d"] = $symsize; goto fBD9P; FrBUp: $rs = array(); goto s1w1b; aZb5F: $rs["\x69\x6e\x64\145\170\x5f\x6f\146"][0] = $A0; goto VafNt; clpJQ: $rs["\146\143\162"] = $fcr; goto v9Kun; IwYlD: $rs["\160\141\x64"] = $pad; goto DVtgK; v9Kun: $rs["\160\x72\x69\155"] = $prim; goto voMKZ; eKhY6: for ($iprim = 1; $iprim % $prim != 0; $iprim += $rs["\x6e\x6e"]) { } goto RfY4g; TrYtm: if ($symsize < 0 or $symsize > 8) { return $rs; } goto RO3IG; RfY4g: $rs["\151\160\x72\x69\155"] = (int) ($iprim / $prim); goto KO7vI; voMKZ: $rs["\x6e\162\157\x6f\164\x73"] = $nroots; goto te7OC; fBD9P: $rs["\156\156"] = (1 << $symsize) - 1; goto IwYlD; KebSM: for ($i = 0; $i < $rs["\x6e\x6e"]; ++$i) { $rs["\151\156\144\x65\x78\x5f\157\146"][$sr] = $i; $rs["\x61\154\160\x68\x61\x5f\164\157"][$i] = $sr; $sr <<= 1; if ($sr & 1 << $symsize) { $sr ^= $gfpoly; } $sr &= $rs["\156\x6e"]; } goto KH9Mz; wq_0j: $rs = null; goto TrYtm; rU2Y5: if ($nroots < 0 or $nroots >= 1 << $symsize) { return $rs; } goto N_Fo1; Vakc5: $sr = 1; goto KebSM; HbeIR: $rs["\x69\156\144\x65\x78\137\157\x66"] = array_fill(0, $rs["\156\x6e"] + 1, 0); goto OgCHC; N_Fo1: if ($pad < 0 or $pad >= (1 << $symsize) - 1 - $nroots) { return $rs; } goto FrBUp; UkRx0: $A0 =& $NN; goto aZb5F; DVtgK: $rs["\x61\154\160\150\141\137\164\157"] = array_fill(0, $rs["\x6e\x6e"] + 1, 0); goto HbeIR; OgCHC: $NN =& $rs["\156\x6e"]; goto UkRx0; KO7vI: $rs["\x67\x65\x6e\x70\x6f\154\x79"][0] = 1; goto gzr8b; qjwuG: return $rs; goto Tu65N; KH9Mz: if ($sr != 1) { return NULL; } goto cqrsl; gzr8b: for ($i = 0, $root = $fcr * $prim; $i < $nroots; $i++, $root += $prim) { $rs["\147\145\156\x70\x6f\154\x79"][$i + 1] = 1; for ($j = $i; $j > 0; --$j) { if ($rs["\147\x65\x6e\160\x6f\x6c\171"][$j] != 0) { $rs["\147\x65\156\160\157\x6c\x79"][$j] = $rs["\147\x65\156\160\x6f\154\171"][$j - 1] ^ $rs["\x61\x6c\x70\x68\141\137\164\157"][$this->modnn($rs, $rs["\151\x6e\144\x65\x78\x5f\157\146"][$rs["\147\145\156\160\157\154\171"][$j]] + $root)]; } else { $rs["\x67\145\x6e\160\157\x6c\171"][$j] = $rs["\x67\145\156\160\x6f\x6c\171"][$j - 1]; } } $rs["\x67\x65\156\160\x6f\x6c\x79"][0] = $rs["\141\154\x70\x68\141\137\x74\x6f"][$this->modnn($rs, $rs["\x69\156\144\x65\x78\x5f\157\x66"][$rs["\x67\145\x6e\160\x6f\x6c\x79"][0]] + $root)]; } goto yw8ev; te7OC: $rs["\x67\x66\x70\157\154\x79"] = $gfpoly; goto eKhY6; cqrsl: $rs["\x67\x65\x6e\x70\x6f\x6c\171"] = array_fill(0, $nroots + 1, 0); goto clpJQ; yw8ev: for ($i = 0; $i <= $nroots; ++$i) { $rs["\147\x65\156\x70\x6f\154\171"][$i] = $rs["\x69\156\144\145\x78\137\157\x66"][$rs["\147\145\156\160\157\154\171"][$i]]; } goto qjwuG; I9eOA: if ($prim <= 0 or $prim >= 1 << $symsize) { return $rs; } goto rU2Y5; Tu65N: } protected function encode_rs_char($rs, $data, $parity) { goto mxDqU; iqDII: $ALPHA_TO =& $rs["\x61\x6c\160\x68\141\137\x74\x6f"]; goto x1h0f; OZQkw: for ($i = 0; $i < $NN - $NROOTS - $PAD; $i++) { $feedback = $INDEX_OF[$data[$i] ^ $parity[0]]; if ($feedback != $A0) { $feedback = $this->modnn($rs, $NN - $GENPOLY[$NROOTS] + $feedback); for ($j = 1; $j < $NROOTS; ++$j) { $parity[$j] ^= $ALPHA_TO[$this->modnn($rs, $feedback + $GENPOLY[$NROOTS - $j])]; } } array_shift($parity); if ($feedback != $A0) { array_push($parity, $ALPHA_TO[$this->modnn($rs, $feedback + $GENPOLY[0])]); } else { array_push($parity, 0); } } goto g__hO; mxDqU: $MM =& $rs["\x6d\155"]; goto IaEbz; U1Dtg: $NROOTS =& $rs["\156\x72\157\157\x74\163"]; goto jOlxk; aXf3l: $PAD =& $rs["\x70\141\144"]; goto YgKAa; j3dHx: $parity = array_fill(0, $NROOTS, 0); goto OZQkw; x1h0f: $INDEX_OF =& $rs["\151\x6e\x64\145\170\137\x6f\146"]; goto pr_Sn; YgKAa: $A0 =& $NN; goto j3dHx; jOlxk: $FCR =& $rs["\146\x63\162"]; goto hwUCS; IaEbz: $NN =& $rs["\x6e\156"]; goto iqDII; hwUCS: $PRIM =& $rs["\160\162\x69\x6d"]; goto TVBFr; pr_Sn: $GENPOLY =& $rs["\147\145\x6e\160\157\154\x79"]; goto U1Dtg; TVBFr: $IPRIM =& $rs["\x69\x70\162\151\x6d"]; goto aXf3l; g__hO: return $parity; goto qSTq8; qSTq8: } }
