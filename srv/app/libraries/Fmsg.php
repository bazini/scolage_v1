<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:17              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 class Fmsg { const INFO = "\151"; const SUCCESS = "\x73"; const WARNING = "\167"; const ERROR = "\x65"; const defaultType = self::INFO; protected $msgTypes = [self::ERROR => "\x65\x72\x72\157\162", self::WARNING => "\167\141\162\x6e\x69\156\147", self::SUCCESS => "\163\x75\x63\143\x65\x73\x73", self::INFO => "\151\x6e\x66\x6f"]; protected $msgWrapper = "\x3c\144\x69\166\x20\143\154\141\x73\x73\x3d\47\45\163\x27\76\45\163\74\57\x64\151\166\x3e\xa"; protected $msgBefore = ''; protected $msgAfter = ''; protected $closeBtn = "\74\142\x75\164\x74\157\156\x20\x74\171\x70\145\x3d\42\x62\165\x74\164\157\156\42\x20\x63\154\x61\163\163\x3d\x22\143\x6c\157\163\145\42\x20\xa\40\40\x20\40\x20\40\40\x20\x20\40\40\40\40\40\x20\x20\40\x20\x20\x20\x20\40\x20\40\40\x20\x20\x20\x20\x20\x20\40\x64\x61\164\x61\55\x64\x69\163\155\x69\x73\x73\75\42\141\x6c\x65\162\164\42\40\12\40\x20\40\40\x20\40\x20\x20\x20\40\40\40\40\40\40\40\40\40\x20\x20\40\40\40\x20\40\40\40\40\40\40\x20\x20\x61\x72\x69\141\55\x6c\141\142\145\154\75\42\103\x6c\x6f\163\x65\x22\x3e\xa\x20\40\40\40\x20\40\40\x20\40\x20\x20\x20\40\40\x20\40\x20\x20\x20\x20\x20\x20\x20\40\40\40\x20\x20\40\40\x20\40\x3c\163\160\141\x6e\40\x61\162\x69\141\x2d\x68\151\144\x64\x65\x6e\75\x22\x74\x72\x75\x65\42\76\46\x74\151\x6d\x65\163\x3b\x3c\x2f\163\160\141\156\x3e\xa\x20\40\x20\x20\x20\40\x20\40\x20\40\40\40\40\x20\40\40\40\40\x20\40\x20\40\40\40\x20\x20\40\x20\x3c\x2f\x62\x75\164\x74\157\156\76"; protected $stickyCssClass = "\163\164\151\x63\x6b\171"; protected $msgCssClass = "\x61\154\145\x72\x74\x20\x64\151\x73\x6d\151\163\163\141\142\154\145"; protected $cssClassMap = [self::INFO => "\141\154\145\162\164\55\x69\156\146\x6f\40\151\x6e\x6e\145\162\x2d\x6e\x6f\164\151\146", self::SUCCESS => "\141\154\145\162\x74\55\163\165\143\x63\x65\x73\x73\40\x69\156\156\145\162\55\x6e\157\164\x69\x66", self::WARNING => "\x61\154\145\x72\164\55\167\141\x72\x6e\x69\156\x67\40\151\x6e\x6e\145\162\x2d\x6e\157\x74\151\146", self::ERROR => "\141\x6c\145\x72\164\55\144\x61\156\x67\x65\162\40\x69\156\x6e\145\162\x2d\156\x6f\x74\151\x66"]; protected $redirectUrl = null; protected $msgId; public function __construct() { $this->msgId = sha1(uniqid()); if (!array_key_exists("\146\x6c\141\163\150\137\x6d\145\x73\163\x61\147\x65\163", $_SESSION)) { $_SESSION["\x66\154\x61\163\x68\x5f\155\145\163\163\141\147\145\x73"] = []; } } public function info($message, $redirectUrl = null, $sticky = false) { return $this->add($message, self::INFO, $redirectUrl, $sticky); } public function success($message, $redirectUrl = null, $sticky = false) { return $this->add($message, self::SUCCESS, $redirectUrl, $sticky); } public function warning($message, $redirectUrl = null, $sticky = false) { return $this->add($message, self::WARNING, $redirectUrl, $sticky); } public function error($message, $redirectUrl = null, $sticky = false) { return $this->add($message, self::ERROR, $redirectUrl, $sticky); } public function sticky($message = true, $redirectUrl = null, $type = self::defaultType) { return $this->add($message, $type, $redirectUrl, true); } public function add($message, $type = self::defaultType, $redirectUrl = null, $sticky = false) { goto J9fUb; mUfFp: $_SESSION["\x66\154\141\163\150\137\x6d\145\163\x73\x61\x67\145\163"][$type][] = ["\163\x74\x69\143\x6b\x79" => $sticky, "\x6d\145\163\163\x61\x67\145" => $message]; goto qz3SK; o1X4n: $this->doRedirect(); goto KHpHw; KHpHw: return $this; goto lks51; KxFcX: if (strlen(trim($type)) > 1) { $type = strtolower($type[0]); } goto WOvWb; nUAT9: if (!array_key_exists($type, $_SESSION["\146\x6c\141\x73\150\137\155\x65\x73\x73\x61\x67\145\163"])) { $_SESSION["\x66\x6c\141\x73\x68\x5f\x6d\x65\x73\163\x61\147\x65\163"][$type] = array(); } goto mUfFp; J9fUb: if (!isset($message[0])) { return false; } goto KxFcX; WOvWb: if (!array_key_exists($type, $this->msgTypes)) { $type = $this->defaultType; } goto nUAT9; qz3SK: if (!is_null($redirectUrl)) { $this->redirectUrl = $redirectUrl; } goto o1X4n; lks51: } public function display($types = null, $print = true) { goto Ci0uN; Vyi8r: $output = ''; goto dBPEw; Gnpxi: if ($print) { echo $output; } else { return $output; } goto xFFZZ; Ci0uN: if (!isset($_SESSION["\x66\154\x61\163\x68\137\155\145\x73\163\141\147\145\x73"])) { return false; } goto Vyi8r; BRV3s: foreach ($types as $type) { goto Cv9RK; IHBkZ: foreach ($_SESSION["\146\x6c\x61\x73\x68\x5f\155\x65\x73\x73\x61\x67\x65\163"][$type] as $msgData) { $output .= $this->formatMessage($msgData, $type); } goto JuNAF; JuNAF: $this->clear($type); goto q0BIp; Cv9RK: if (!isset($_SESSION["\146\154\x61\163\150\x5f\155\145\x73\163\x61\147\145\163"][$type]) || empty($_SESSION["\146\x6c\141\163\150\x5f\155\x65\x73\x73\x61\147\145\163"][$type])) { continue; } goto IHBkZ; q0BIp: } goto Gnpxi; dBPEw: if (is_null($types) || !$types || is_array($types) && empty($types)) { $types = array_keys($this->msgTypes); } elseif (is_array($types) && !empty($types)) { goto Op2VF; YvIJs: foreach ($theTypes as $type) { $types[] = strtolower($type[0]); } goto ZyeP5; qcpnm: $types = []; goto YvIJs; Op2VF: $theTypes = $types; goto qcpnm; ZyeP5: } else { $types = [strtolower($types[0])]; } goto BRV3s; xFFZZ: } public function hasErrors() { return empty($_SESSION["\146\154\141\163\x68\137\x6d\145\163\163\141\x67\x65\163"][self::ERROR]) ? false : true; } public function hasMessages($type = null) { if (!is_null($type)) { if (!empty($_SESSION["\146\x6c\x61\x73\150\137\x6d\x65\163\x73\x61\x67\145\163"][$type])) { return $_SESSION["\x66\154\x61\x73\150\x5f\155\145\x73\x73\x61\x67\145\163"][$type]; } } else { foreach (array_keys($this->msgTypes) as $type) { if (isset($_SESSION["\146\154\x61\163\150\137\155\x65\163\163\141\x67\x65\163"][$type]) && !empty($_SESSION["\146\154\x61\163\150\x5f\155\145\163\x73\141\147\x65\163"][$type])) { return $_SESSION["\146\x6c\141\x73\x68\137\155\145\163\x73\x61\147\145\x73"][$type]; } } } return false; } protected function formatMessage($msgDataArray, $type) { goto MkMuc; KcQb5: $cssClass = $this->msgCssClass . "\40" . $this->cssClassMap[$type]; goto uGWe9; uGWe9: $msgBefore = $this->msgBefore; goto KJWE6; GC9PZ: return sprintf($this->msgWrapper, $cssClass, $formattedMessage); goto SMzk8; KJWE6: if ($msgDataArray["\163\164\151\x63\153\x79"]) { $cssClass .= "\40" . $this->stickyCssClass; } else { $msgBefore = $this->closeBtn . $msgBefore; } goto HGssJ; MkMuc: $msgType = isset($this->msgTypes[$type]) ? $type : $this->defaultType; goto KcQb5; HGssJ: $formattedMessage = $msgBefore . $msgDataArray["\x6d\145\x73\x73\x61\x67\x65"] . $this->msgAfter; goto GC9PZ; SMzk8: } protected function doRedirect() { if ($this->redirectUrl) { header("\x4c\157\x63\x61\x74\151\x6f\x6e\72\x20" . $this->redirectUrl); exit; } return $this; } protected function clear($types = []) { goto TrFFd; exxeE: foreach ($types as $type) { unset($_SESSION["\146\154\x61\x73\x68\x5f\x6d\x65\163\163\x61\x67\145\163"][$type]); } goto f9CQn; f9CQn: return $this; goto Oy8Hb; TrFFd: if (is_array($types) && empty($types) || is_null($types) || !$types) { unset($_SESSION["\x66\x6c\141\x73\150\137\155\145\163\x73\141\x67\145\x73"]); } elseif (!is_array($types)) { $types = [$types]; } goto exxeE; Oy8Hb: } public function setMsgWrapper($msgWrapper = '') { $this->msgWrapper = $msgWrapper; return $this; } public function setMsgBefore($msgBefore = '') { $this->msgBefore = $msgBefore; return $this; } public function setMsgAfter($msgAfter = '') { $this->msgAfter = $msgAfter; return $this; } public function setCloseBtn($closeBtn = '') { $this->closeBtn = $closeBtn; return $this; } public function setStickyCssClass($stickyCssClass = '') { $this->stickyCssClass = $stickyCssClass; return $this; } public function setMsgCssClass($msgCssClass = '') { $this->msgCssClass = $msgCssClass; return $this; } public function setCssClassMap($msgType, $cssClass = null) { goto p1bW5; uFQhi: foreach ($msgType as $type => $cssClass) { $this->cssClassMap[$type] = $cssClass; } goto fw2kf; p1bW5: if (!is_array($msgType)) { if (is_null($cssClass)) { return $this; } $msgType = [$msgType => $cssClass]; } goto uFQhi; fw2kf: return $this; goto HYbx9; HYbx9: } }
