<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2024-09-11 13:11:18              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*

*/
 if (!defined("\x42\101\123\105\120\x41\x54\x48")) { exit("\116\x6f\40\x64\151\162\x65\143\164\x20\x73\143\162\151\x70\164\x20\x61\143\143\145\163\x73\x20\141\154\154\x6f\x77\145\144"); } class Feed { protected $items = array(); public $title = "\115\171\x20\146\x65\x65\144\40\164\x69\164\x6c\x65"; public $description = "\x4d\x79\40\x66\x65\x65\144\x20\x64\145\163\143\162\x69\160\x74\x69\x6f\x6e"; public $link; public $logo; public $icon; public $pubdate; public $lang; public $charset = "\165\164\x66\x2d\70"; public $ctype = null; protected $shortening = false; protected $shorteningLimit = 150; protected $dateFormat = "\x64\141\x74\145\x74\x69\x6d\x65"; protected $namespaces = array(); protected $customView = null; public function add($title, $author, $link, $pubdate, $description, $content = '', $enclosure = array()) { if ($this->shortening) { $description = mb_substr($description, 0, $this->shorteningLimit, "\125\x54\x46\55\x38"); } $this->items[] = array("\164\x69\164\x6c\145" => $title, "\141\x75\164\150\157\x72" => $author, "\154\151\156\153" => $link, "\160\x75\142\x64\141\164\x65" => $pubdate, "\x64\x65\x73\x63\162\x69\x70\x74\151\157\x6e" => $description, "\143\x6f\x6e\164\x65\156\164" => $content, "\x65\x6e\143\x6c\157\x73\165\162\x65" => $enclosure); } public function addArray(array $a) { if ($this->shortening) { $a["\x64\x65\x73\x63\x72\151\x70\x74\151\x6f\x6e"] = mb_substr($a["\144\x65\163\x63\162\151\160\x74\x69\157\156"], 0, $this->shorteningLimit, "\x55\x54\106\55\70"); } $this->items[] = $a; } public function render($format = null, $cache = null, $key = null) { goto eVjqb; YmlP6: if (empty($this->pubdate)) { $this->pubdate = date("\x44\x2c\x20\x64\40\x4d\x20\x59\x20\110\x3a\151\72\163\40\x4f"); } goto QrO1T; eVjqb: $CI =& get_instance(); goto VkQAo; vX71o: if ($cache != null) { $this->caching = $cache; } goto GnUyB; a7avJ: if ($this->customView == null) { $this->customView = $format; } goto vX71o; QrO1T: foreach ($this->items as $k => $v) { $this->items[$k]["\164\x69\x74\154\145"] = html_entity_decode(strip_tags($this->items[$k]["\x74\x69\x74\x6c\x65"])); $this->items[$k]["\x70\x75\x62\144\141\x74\x65"] = $this->formatDate($this->items[$k]["\160\x75\x62\144\x61\x74\x65"], $format); } goto qLech; tFSgI: if (empty($this->link)) { $this->link = $CI->config->item("\142\x61\163\x65\137\x75\x72\x6c"); } goto YmlP6; ChDcf: $CI->load->view("\x66\x65\x65\x64\x2f" . $this->customView, $viewData); goto Fpnmv; qLech: $channel = array("\x74\151\x74\x6c\145" => html_entity_decode(strip_tags($this->title)), "\144\x65\x73\x63\x72\151\x70\x74\x69\157\x6e" => $this->description, "\x6c\x6f\147\157" => $this->logo, "\151\143\x6f\x6e" => $this->icon, "\x6c\x69\156\x6b" => $this->link, "\x70\165\142\144\x61\x74\145" => $this->formatDate($this->pubdate, $format), "\154\141\x6e\147" => $this->lang); goto BdUL0; BdUL0: $viewData = array("\x69\x74\145\x6d\163" => $this->items, "\143\x68\x61\x6e\156\x65\x6c" => $channel, "\x6e\x61\x6d\x65\163\x70\141\x63\x65\x73" => $this->getNamespaces(), "\x63\x74\x79\160\x65" => $this->ctype, "\x63\x68\x61\x72\163\145\x74" => $this->charset); goto ChDcf; ShyWL: if ($this->ctype == null) { $format == "\x72\163\163" ? $this->ctype = "\141\160\x70\154\151\143\141\x74\151\x6f\x6e\57\162\163\163\x2b\170\155\154" : ($this->ctype = "\141\160\160\x6c\151\143\x61\164\151\157\x6e\57\141\164\x6f\x6d\x2b\x78\x6d\154"); } goto Fc0XK; VkQAo: if ($format == null && $this->customView == null) { $format = "\x61\164\x6f\155"; } goto a7avJ; Fc0XK: if (empty($this->lang)) { $this->lang = $CI->config->item("\x6c\141\156\147\x75\x61\x67\x65"); } goto tFSgI; GnUyB: if ($key != null) { $this->cacheKey = $key; } goto ShyWL; Fpnmv: } public function link($url, $format = "\x61\x74\157\155") { if ($this->ctype == null) { $format == "\162\163\x73" ? $type = "\x61\160\160\x6c\x69\143\x61\164\x69\x6f\x6e\57\162\163\163\53\x78\155\x6c" : ($type = "\x61\160\x70\x6c\151\143\x61\164\x69\157\x6e\57\141\x74\x6f\155\53\170\155\154"); } else { $type = $this->ctype; } return "\74\154\151\x6e\x6b\40\162\145\x6c\x3d\x22\x61\154\164\145\162\x6e\141\164\145\x22\40\164\171\160\145\75\x22" . $type . "\x22\x20\x68\162\145\x66\x3d\x22" . $url . "\42\x20\57\76"; } public function setView($name = null) { $this->customView = $name; } public function setTextLimit($l = 150) { $this->shorteningLimit = $l; } public function setShortening($b = false) { $this->shortening = $b; } protected function formatDate($date, $format = "\x61\x74\157\155") { if ($format == "\x61\164\157\155") { switch ($this->dateFormat) { case "\x63\x61\x72\142\157\156": $date = date("\143", strtotime($date->toDateTimeString())); break; case "\164\151\x6d\145\163\164\141\155\160": $date = date("\x63", $date); break; case "\144\141\164\145\x74\151\155\145": $date = date("\143", strtotime($date)); break; } } else { switch ($this->dateFormat) { case "\143\141\162\x62\157\x6e": $date = date("\x44\54\x20\144\40\115\x20\x59\40\110\72\x69\x3a\163\x20\x4f", strtotime($date->toDateTimeString())); break; case "\x74\x69\x6d\x65\163\x74\x61\155\160": $date = date("\x44\x2c\x20\x64\40\x4d\x20\131\x20\x48\72\151\x3a\163\x20\117", $date); break; case "\144\x61\x74\145\164\x69\x6d\145": $date = date("\104\x2c\x20\x64\40\x4d\x20\131\40\110\x3a\x69\72\163\x20\117", strtotime($date)); break; } } return $date; } public function addNamespace($n) { $this->namespaces[] = $n; } public function getNamespaces() { return $this->namespaces; } public function setDateFormat($format = "\x64\x61\164\145\x74\151\155\145") { $this->dateFormat = $format; } }
